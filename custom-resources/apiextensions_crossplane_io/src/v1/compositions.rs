// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/crossplane/crossplane/apiextensions.crossplane.io/v1/compositions.yaml
// kopium version: 0.22.3

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// CompositionSpec specifies desired state of a composition.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "apiextensions.crossplane.io", version = "v1", kind = "Composition", plural = "compositions")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct CompositionSpec {
    /// CompositeTypeRef specifies the type of composite resource that this
    /// composition is compatible with.
    #[serde(rename = "compositeTypeRef")]
    pub composite_type_ref: CompositionCompositeTypeRef,
    /// Mode controls what type or "mode" of Composition will be used.
    /// 
    /// "Pipeline" indicates that a Composition specifies a pipeline of
    /// functions, each of which is responsible for producing composed
    /// resources that Crossplane should create or update.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<CompositionMode>,
    /// Pipeline is a list of composition function steps that will be used when a
    /// composite resource referring to this composition is created. One of
    /// resources and pipeline must be specified - you cannot specify both.
    /// 
    /// The Pipeline is only used by the "Pipeline" mode of Composition. It is
    /// ignored by other modes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pipeline: Option<Vec<CompositionPipeline>>,
    /// WriteConnectionSecretsToNamespace specifies the namespace in which the
    /// connection secrets of composite resource dynamically provisioned using
    /// this composition will be created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretsToNamespace")]
    pub write_connection_secrets_to_namespace: Option<String>,
}

/// CompositeTypeRef specifies the type of composite resource that this
/// composition is compatible with.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CompositionCompositeTypeRef {
    /// APIVersion of the type.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Kind of the type.
    pub kind: String,
}

/// CompositionSpec specifies desired state of a composition.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum CompositionMode {
    Pipeline,
}

/// A PipelineStep in a function pipeline.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CompositionPipeline {
    /// Credentials are optional credentials that the function needs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials: Option<Vec<CompositionPipelineCredentials>>,
    /// FunctionRef is a reference to the function this step should
    /// execute.
    #[serde(rename = "functionRef")]
    pub function_ref: CompositionPipelineFunctionRef,
    /// Input is an optional, arbitrary Kubernetes resource (i.e. a resource
    /// with an apiVersion and kind) that will be passed to the function as
    /// the 'input' of its RunFunctionRequest.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub input: Option<BTreeMap<String, serde_json::Value>>,
    /// Requirements are resource requirements that will be satisfied before
    /// this pipeline step is called for the first time. This allows
    /// pre-populating required resources without requiring a function to
    /// request them first.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requirements: Option<CompositionPipelineRequirements>,
    /// Step name. Must be unique within its Pipeline.
    pub step: String,
}

/// FunctionCredentials are optional credentials that a function
/// needs to run.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct CompositionPipelineCredentials {
    /// Name of this set of credentials.
    pub name: String,
    /// A SecretRef is a reference to a secret containing credentials that should
    /// be supplied to the function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<CompositionPipelineCredentialsSecretRef>,
    /// Source of the function credentials.
    pub source: CompositionPipelineCredentialsSource,
}

/// A SecretRef is a reference to a secret containing credentials that should
/// be supplied to the function.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CompositionPipelineCredentialsSecretRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// FunctionCredentials are optional credentials that a function
/// needs to run.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum CompositionPipelineCredentialsSource {
    None,
    Secret,
}

/// FunctionRef is a reference to the function this step should
/// execute.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CompositionPipelineFunctionRef {
    /// Name of the referenced Function.
    pub name: String,
}

/// Requirements are resource requirements that will be satisfied before
/// this pipeline step is called for the first time. This allows
/// pre-populating required resources without requiring a function to
/// request them first.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CompositionPipelineRequirements {
    /// RequiredResources is a list of resources that must be fetched before
    /// this function is called.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredResources")]
    pub required_resources: Option<Vec<CompositionPipelineRequirementsRequiredResources>>,
}

/// RequiredResourceSelector selects a required resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CompositionPipelineRequirementsRequiredResources {
    /// APIVersion of the required resource.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Kind of the required resource.
    pub kind: String,
    /// MatchLabels specifies the set of labels to match for finding the
    /// required resource. When specified, Name is ignored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Name of the required resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the required resource if it is namespaced.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// RequirementName is the unique name to identify this required resource
    /// in the Required Resources map in the function request.
    #[serde(rename = "requirementName")]
    pub requirement_name: String,
}

