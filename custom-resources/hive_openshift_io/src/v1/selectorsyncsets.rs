// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/openshift/hive/hive.openshift.io/v1/selectorsyncsets.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// SelectorSyncSetSpec defines the SyncSetCommonSpec resources and patches to sync along
/// with a ClusterDeploymentSelector indicating which clusters the SelectorSyncSet applies
/// to in any namespace.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "hive.openshift.io", version = "v1", kind = "SelectorSyncSet", plural = "selectorsyncsets")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct SelectorSyncSetSpec {
    /// ApplyBehavior indicates how resources in this syncset will be applied to the target
    /// cluster. The default value of "Apply" indicates that resources should be applied
    /// using the 'oc apply' command. If no value is set, "Apply" is assumed.
    /// A value of "CreateOnly" indicates that the resource will only be created if it does
    /// not already exist in the target cluster. Otherwise, it will be left alone.
    /// A value of "CreateOrUpdate" indicates that the resource will be created/updated without
    /// the use of the 'oc apply' command, allowing larger resources to be synced, but losing
    /// some functionality of the 'oc apply' command such as the ability to remove annotations,
    /// labels, and other map entries in general.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applyBehavior")]
    pub apply_behavior: Option<SelectorSyncSetApplyBehavior>,
    /// ClusterDeploymentSelector is a LabelSelector indicating which clusters the SelectorSyncSet
    /// applies to in any namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterDeploymentSelector")]
    pub cluster_deployment_selector: Option<SelectorSyncSetClusterDeploymentSelector>,
    /// EnablePatchTemplates, if True, causes hive to honor golang text/templates in Patches[].Patch
    /// strings. While the standard syntax is supported, it won't do you a whole lot of good as the
    /// parser does not pass a data object (i.e. there is no "dot" for you to use). This currently
    /// exists to expose a single function: {{ fromCDLabel "some.label/key" }} will be substituted
    /// with the string value of ClusterDeployment.Labels["some.label/key"]. The empty string is
    /// interpolated if there are no labels, or if the indicated key does not exist. Note that the
    /// patch string must be valid JSON after interpolation. This may make for odd-looking quoting
    /// in the uninterpolated string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePatchTemplates")]
    pub enable_patch_templates: Option<bool>,
    /// EnableResourceTemplates, if True, causes hive to honor golang text/templates in Resources.
    /// While the standard syntax is supported, it won't do you a whole lot of good as the parser
    /// does not pass a data object (i.e. there is no "dot" for you to use). This currently exists
    /// to expose a single function: {{ fromCDLabel "some.label/key" }} will
    /// be substituted with the string value of ClusterDeployment.Labels["some.label/key"]. The
    /// empty string is interpolated if there are no labels, or if the indicated key does not exist.
    /// Note that this only works in values (not e.g. map keys) that are of type string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableResourceTemplates")]
    pub enable_resource_templates: Option<bool>,
    /// Patches is the list of patches to apply.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<SelectorSyncSetPatches>>,
    /// ResourceApplyMode indicates if the Resource apply mode is "Upsert" (default) or "Sync".
    /// ApplyMode "Upsert" indicates create and update.
    /// ApplyMode "Sync" indicates create, update and delete.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceApplyMode")]
    pub resource_apply_mode: Option<String>,
    /// Resources is the list of objects to sync from RawExtension definitions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// Secrets is the list of secrets to sync along with their respective destinations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretMappings")]
    pub secret_mappings: Option<Vec<SelectorSyncSetSecretMappings>>,
}

/// SelectorSyncSetSpec defines the SyncSetCommonSpec resources and patches to sync along
/// with a ClusterDeploymentSelector indicating which clusters the SelectorSyncSet applies
/// to in any namespace.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SelectorSyncSetApplyBehavior {
    #[serde(rename = "")]
    KopiumEmpty,
    Apply,
    CreateOnly,
    CreateOrUpdate,
}

/// ClusterDeploymentSelector is a LabelSelector indicating which clusters the SelectorSyncSet
/// applies to in any namespace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SelectorSyncSetClusterDeploymentSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<SelectorSyncSetClusterDeploymentSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SelectorSyncSetClusterDeploymentSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// SyncObjectPatch represents a patch to be applied to a specific object
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SelectorSyncSetPatches {
    /// APIVersion is the Group and Version of the object to be patched.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Kind is the Kind of the object to be patched.
    pub kind: String,
    /// Name is the name of the object to be patched.
    pub name: String,
    /// Namespace is the Namespace in which the object to patch exists.
    /// Defaults to the SyncSet's Namespace.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Patch is the patch to apply.
    pub patch: String,
    /// PatchType indicates the PatchType as "strategic" (default), "json", or "merge".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "patchType")]
    pub patch_type: Option<String>,
}

/// SecretMapping defines a source and destination for a secret to be synced by a SyncSet
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SelectorSyncSetSecretMappings {
    /// SourceRef specifies the name and namespace of a secret on the management cluster
    #[serde(rename = "sourceRef")]
    pub source_ref: SelectorSyncSetSecretMappingsSourceRef,
    /// TargetRef specifies the target name and namespace of the secret on the target cluster
    #[serde(rename = "targetRef")]
    pub target_ref: SelectorSyncSetSecretMappingsTargetRef,
}

/// SourceRef specifies the name and namespace of a secret on the management cluster
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SelectorSyncSetSecretMappingsSourceRef {
    /// Name is the name of the secret
    pub name: String,
    /// Namespace is the namespace where the secret lives. If not present for the source
    /// secret reference, it is assumed to be the same namespace as the syncset with the
    /// reference.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// TargetRef specifies the target name and namespace of the secret on the target cluster
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SelectorSyncSetSecretMappingsTargetRef {
    /// Name is the name of the secret
    pub name: String,
    /// Namespace is the namespace where the secret lives. If not present for the source
    /// secret reference, it is assumed to be the same namespace as the syncset with the
    /// reference.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// SelectorSyncSetStatus defines the observed state of a SelectorSyncSet
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SelectorSyncSetStatus {
}

