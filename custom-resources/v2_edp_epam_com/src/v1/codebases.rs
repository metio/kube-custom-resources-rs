// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/epam/edp-codebase-operator/v2.edp.epam.com/v1/codebases.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// CodebaseSpec defines the desired state of Codebase.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "v2.edp.epam.com", version = "v1", kind = "Codebase", plural = "codebases")]
#[kube(namespaced)]
#[kube(status = "CodebaseStatus")]
#[kube(schema = "disabled")]
#[kube(derive="PartialEq")]
pub struct CodebaseSpec {
    /// While we clone new codebase we can select specific branch to clone.
    /// Selected branch will become a default branch for a new codebase (e.g. master, main).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "branchToCopyInDefaultBranch")]
    pub branch_to_copy_in_default_branch: Option<String>,
    /// A build tool which is used on codebase.
    #[serde(rename = "buildTool")]
    pub build_tool: String,
    /// A name of tool which should be used as CI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ciTool")]
    pub ci_tool: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commitMessagePattern")]
    pub commit_message_pattern: Option<String>,
    /// Name of default branch.
    #[serde(rename = "defaultBranch")]
    pub default_branch: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentScript")]
    pub deployment_script: Option<String>,
    /// A short description of codebase.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Controller must skip step "put deploy templates" in action chain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disablePutDeployTemplates")]
    pub disable_put_deploy_templates: Option<bool>,
    /// A flag indicating how project should be provisioned. Default: false
    #[serde(rename = "emptyProject")]
    pub empty_project: bool,
    /// A framework used in codebase.
    pub framework: String,
    /// A name of git server which will be used as VCS.
    /// Example: "gerrit".
    #[serde(rename = "gitServer")]
    pub git_server: String,
    /// A relative path for git repository. Should start from /. Example: /company/api-app.
    #[serde(rename = "gitUrlPath")]
    pub git_url_path: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jiraIssueMetadataPayload")]
    pub jira_issue_metadata_payload: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jiraServer")]
    pub jira_server: Option<String>,
    /// Programming language used in codebase.
    pub lang: String,
    /// Private indicates if we need to create private repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub private: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<CodebaseRepository>,
    /// integration strategy for a codebase, e.g. clone, import, etc.
    pub strategy: CodebaseStrategy,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "testReportFramework")]
    pub test_report_framework: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ticketNamePattern")]
    pub ticket_name_pattern: Option<String>,
    /// Type of codebase. E.g. application, autotest or library.
    #[serde(rename = "type")]
    pub r#type: String,
    pub versioning: CodebaseVersioning,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CodebaseRepository {
    pub url: String,
}

/// CodebaseSpec defines the desired state of Codebase.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum CodebaseStrategy {
    #[serde(rename = "create")]
    Create,
    #[serde(rename = "clone")]
    Clone,
    #[serde(rename = "import")]
    Import,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CodebaseVersioning {
    /// StartFrom is required when versioning type is not default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startFrom")]
    pub start_from: Option<String>,
    #[serde(rename = "type")]
    pub r#type: String,
}

/// CodebaseStatus defines the observed state of Codebase.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct CodebaseStatus {
    /// The last Action was performed.
    pub action: String,
    /// This flag indicates neither Codebase are initialized and ready to work. Defaults to false.
    pub available: bool,
    /// Detailed information regarding action result
    /// which were performed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "detailedMessage")]
    pub detailed_message: Option<String>,
    /// Amount of times, operator fail to serve with existing CR.
    #[serde(rename = "failureCount")]
    pub failure_count: i64,
    /// Specifies a status of action for git.
    pub git: String,
    /// Stores GitWebUrl of codebase.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gitWebUrl")]
    pub git_web_url: Option<String>,
    /// Information when the last time the action were performed.
    #[serde(rename = "lastTimeUpdated")]
    pub last_time_updated: String,
    /// A result of an action which were performed.
    /// - "success": action where performed successfully;
    /// - "error": error has occurred;
    pub result: CodebaseStatusResult,
    /// Specifies a current status of Codebase.
    pub status: String,
    /// Name of user who made a last change.
    pub username: String,
    /// Specifies a current state of Codebase.
    pub value: String,
    /// Stores ID of webhook which was created for a codebase.
    /// Deprecated: Because the webhook id can be more than just an integer. Use WebHookRef instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webHookID")]
    pub web_hook_id: Option<i64>,
    /// WebHookRef stores unique reference to webhook which was created for a codebase.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webHookRef")]
    pub web_hook_ref: Option<String>,
}

/// CodebaseStatus defines the observed state of Codebase.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum CodebaseStatusResult {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "error")]
    Error,
}

