// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/epam/edp-cd-pipeline-operator/v2.edp.epam.com/v1/cdpipelines.yaml
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// CDPipelineSpec defines the desired state of CDPipeline.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "v2.edp.epam.com", version = "v1", kind = "CDPipeline", plural = "cdpipelines")]
#[kube(namespaced)]
#[kube(status = "CDPipelineStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct CDPipelineSpec {
    /// A list of applications included in CDPipeline.
    pub applications: Vec<String>,
    /// A list of applications which will promote after successful release.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationsToPromote")]
    pub applications_to_promote: Option<Vec<String>>,
    /// Type of workload to be deployed, e.g., container, custom.
    #[serde(rename = "deploymentType")]
    pub deployment_type: String,
    /// Description of CD pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// A list of docker streams
    #[serde(rename = "inputDockerStreams")]
    pub input_docker_streams: Vec<String>,
    /// Name of CD pipeline
    pub name: String,
}

/// CDPipelineStatus defines the observed state of CDPipeline.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct CDPipelineStatus {
    /// The last Action was performed.
    pub action: String,
    /// This flag indicates neither CDPipeline are initialized and ready to work. Defaults to false.
    pub available: bool,
    /// Detailed information regarding action result
    /// which were performed
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub detailed_message: Option<String>,
    /// Information when the last time the action were performed.
    pub last_time_updated: String,
    /// A result of an action which were performed.
    /// - "success": action where performed successfully;
    /// - "error": error has occurred;
    pub result: CDPipelineStatusResult,
    /// Specifies a current status of CDPipeline.
    pub status: String,
    /// Name of user who made a last change.
    pub username: String,
    /// Specifies a current state of CDPipeline.
    pub value: String,
}

/// CDPipelineStatus defines the observed state of CDPipeline.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum CDPipelineStatusResult {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "error")]
    Error,
}

