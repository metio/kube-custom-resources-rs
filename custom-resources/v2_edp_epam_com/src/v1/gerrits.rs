// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/epam/edp-gerrit-operator/v2.edp.epam.com/v1/gerrits.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// GerritSpec defines the desired state of Gerrit.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "v2.edp.epam.com", version = "v1", kind = "Gerrit", plural = "gerrits")]
#[kube(namespaced)]
#[kube(status = "GerritStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct GerritSpec {
    /// BasePath gerrit http route base path.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basePath")]
    pub base_path: Option<String>,
    /// ExternalURL gerrit full external url for keycloak or other integrations
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalURL")]
    pub external_url: Option<String>,
    #[serde(rename = "keycloakSpec")]
    pub keycloak_spec: GerritKeycloakSpec,
    /// RestAPIUrl gerrit http full api url.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restAPIUrl")]
    pub rest_api_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshPort")]
    pub ssh_port: Option<i32>,
    /// SSHUrl gerrit ssh url.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshUrl")]
    pub ssh_url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GerritKeycloakSpec {
    pub enabled: bool,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub realm: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// GerritStatus defines the observed state of Gerrit.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GerritStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub available: Option<bool>,
    #[serde(rename = "externalUrl")]
    pub external_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTimeUpdated")]
    pub last_time_updated: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

