// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/epam/edp-gerrit-operator/v2.edp.epam.com/v1/gerritmergerequests.yaml
// kopium version: 0.22.4

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// GerritMergeRequestSpec defines the desired state of GerritMergeRequest.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "v2.edp.epam.com", version = "v1", kind = "GerritMergeRequest", plural = "gerritmergerequests")]
#[kube(namespaced)]
#[kube(status = "GerritMergeRequestStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct GerritMergeRequestSpec {
    /// AdditionalArguments contains merge command additional command line arguments.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalArguments")]
    pub additional_arguments: Option<Vec<String>>,
    /// AuthorEmail is the email of the user who creates the merge request.
    #[serde(rename = "authorEmail")]
    pub author_email: String,
    /// AuthorName is the name of the user who creates the merge request.
    #[serde(rename = "authorName")]
    pub author_name: String,
    /// ChangesConfigMap is the name of the ConfigMap, which contains files contents that should be merged.
    /// ConfigMap should contain eny data keys with content in the json
    /// format: {"path": "/controllers/user.go", "contents": "some code here"} - to add file
    /// or format: {"path": "/controllers/user.go"} - to remove file.
    /// If files already exist in the project, they will be overwritten.
    /// If empty, sourceBranch should be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "changesConfigMap")]
    pub changes_config_map: Option<String>,
    /// CommitMessage is the commit message for the merge request.
    /// If empty, the operator will generate the commit message.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commitMessage")]
    pub commit_message: Option<String>,
    /// OwnerName is the name of Gerrit CR, which should be used to initialize the client.
    /// If empty, the operator will get first Gerrit CR from the namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerName")]
    pub owner_name: Option<String>,
    /// ProjectName is gerrit project name.
    #[serde(rename = "projectName")]
    pub project_name: String,
    /// SourceBranch is the name of the branch from which the changes should be merged.
    /// If empty, changesConfigMap should be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceBranch")]
    pub source_branch: Option<String>,
    /// TargetBranch is the name of the branch to which the changes should be merged.
    /// If changesConfigMap is set, the targetBranch can be only the origin HEAD branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetBranch")]
    pub target_branch: Option<String>,
}

/// GerritMergeRequestStatus defines the observed state of GerritMergeRequest.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GerritMergeRequestStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "changeId")]
    pub change_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "changeUrl")]
    pub change_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

