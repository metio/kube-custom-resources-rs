// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/epam/edp-codebase-operator/v2.edp.epam.com/v1/cdstagedeployments.yaml
// kopium version: 0.22.4

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// CDStageDeploySpec defines the desired state of CDStageDeploy.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "v2.edp.epam.com", version = "v1", kind = "CDStageDeploy", plural = "cdstagedeployments")]
#[kube(namespaced)]
#[kube(status = "CdStageDeployStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct CdStageDeploySpec {
    /// Name of related pipeline
    pub pipeline: String,
    /// Name of related stage
    pub stage: String,
    /// TriggerType specifies a strategy for auto-deploy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<String>,
    /// Specifies a latest available tag
    pub tag: CdStageDeployTag,
    /// A list of available tags.
    /// Deprecated: Use tag instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<CdStageDeployTags>>,
}

/// Specifies a latest available tag
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CdStageDeployTag {
    pub codebase: String,
    pub tag: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CdStageDeployTags {
    pub codebase: String,
    pub tag: String,
}

/// CDStageDeployStatus defines the observed state of CDStageDeploy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CdStageDeployStatus {
    /// Descriptive message for current status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Specifies a current status of CDStageDeploy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<CdStageDeployStatusStatus>,
}

/// CDStageDeployStatus defines the observed state of CDStageDeploy.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum CdStageDeployStatusStatus {
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "in-queue")]
    InQueue,
}

