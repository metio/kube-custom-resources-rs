// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/epam/edp-codebase-operator/v2.edp.epam.com/v1/gitservers.yaml
// kopium version: 0.22.4

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// GitServerSpec defines the desired state of GitServer.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "v2.edp.epam.com", version = "v1", kind = "GitServer", plural = "gitservers")]
#[kube(namespaced)]
#[kube(status = "GitServerStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct GitServerSpec {
    #[serde(rename = "gitHost")]
    pub git_host: String,
    /// GitProvider is a git provider type. It can be gerrit, github or gitlab. Default value is gerrit.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gitProvider")]
    pub git_provider: Option<GitServerGitProvider>,
    /// GitUser is a user name for git server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gitUser")]
    pub git_user: Option<String>,
    #[serde(rename = "httpsPort")]
    pub https_port: i32,
    #[serde(rename = "nameSshKeySecret")]
    pub name_ssh_key_secret: String,
    /// SkipWebhookSSLVerification is a flag to skip webhook tls verification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipWebhookSSLVerification")]
    pub skip_webhook_ssl_verification: Option<bool>,
    #[serde(rename = "sshPort")]
    pub ssh_port: i32,
    /// WebhookUrl is a URL for webhook that will be created in the git provider.
    /// If not set, a new EventListener and Ingress will be created and used for webhooks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webhookUrl")]
    pub webhook_url: Option<String>,
}

/// GitServerSpec defines the desired state of GitServer.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum GitServerGitProvider {
    #[serde(rename = "gerrit")]
    Gerrit,
    #[serde(rename = "gitlab")]
    Gitlab,
    #[serde(rename = "github")]
    Github,
    #[serde(rename = "bitbucket")]
    Bitbucket,
}

/// GitServerStatus defines the observed state of GitServer.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GitServerStatus {
    /// Connected shows if operator is connected to git server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connected: Option<bool>,
    /// Error represents error message if something went wrong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// Status indicates the current status of the GitServer.
    /// Possible values are: ok, failed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

