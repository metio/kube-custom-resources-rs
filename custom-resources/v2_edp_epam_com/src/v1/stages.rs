// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/epam/edp-cd-pipeline-operator/v2.edp.epam.com/v1/stages.yaml
// kopium version: 0.22.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// StageSpec defines the desired state of Stage.
/// NOTE: for deleting the stage use stages order - delete only the latest stage.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "v2.edp.epam.com", version = "v1", kind = "Stage", plural = "stages")]
#[kube(namespaced)]
#[kube(status = "StageStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct StageSpec {
    /// Name of CD pipeline which this Stage will be linked to.
    #[serde(rename = "cdPipeline")]
    pub cd_pipeline: String,
    /// CleanTemplate specifies the name of Tekton TriggerTemplate used for cleanup environment pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cleanTemplate")]
    pub clean_template: Option<String>,
    /// Specifies a name of cluster where the application will be deployed.
    /// Default value is "in-cluster" which means that application will be deployed in the same cluster where CD Pipeline is running.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    /// A description of a stage.
    pub description: String,
    /// Name of a stage.
    pub name: String,
    /// Namespace where the application will be deployed.
    pub namespace: String,
    /// The order to lay out Stages.
    /// The order should start from 0, and the next stages should use +1 for the order.
    pub order: i64,
    /// A list of quality gates to be processed
    #[serde(rename = "qualityGates")]
    pub quality_gates: Vec<StageQualityGates>,
    /// Specifies a source of a pipeline library which will run release
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<StageSource>,
    /// Specifies a name of Tekton TriggerTemplate used as a blueprint for deployment pipeline.
    /// Default value is "deploy" which means that default TriggerTemplate will be used.
    /// The default TriggerTemplate is delivered using edp-tekton helm chart.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "triggerTemplate")]
    pub trigger_template: Option<String>,
    /// Stage deployment trigger type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "triggerType")]
    pub trigger_type: Option<StageTriggerType>,
}

/// QualityGate defines a single quality for a release.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StageQualityGates {
    /// A name of autotests to run with quality gate
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autotestName")]
    pub autotest_name: Option<String>,
    /// A branch name to use from autotests repository
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "branchName")]
    pub branch_name: Option<String>,
    /// A type of quality gate, e.g. "Manual", "Autotests"
    #[serde(rename = "qualityGateType")]
    pub quality_gate_type: String,
    /// Specifies a name of particular
    #[serde(rename = "stepName")]
    pub step_name: String,
}

/// Specifies a source of a pipeline library which will run release
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StageSource {
    /// A reference to a non default source library
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub library: Option<StageSourceLibrary>,
    /// Type of pipeline library, e.g. default, library
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// A reference to a non default source library
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StageSourceLibrary {
    /// Branch which should be used for a library
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub branch: Option<String>,
    /// A name of a library
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// StageSpec defines the desired state of Stage.
/// NOTE: for deleting the stage use stages order - delete only the latest stage.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum StageTriggerType {
    Auto,
    Manual,
    #[serde(rename = "Auto-stable")]
    AutoStable,
}

/// StageStatus defines the observed state of Stage.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct StageStatus {
    /// The last Action was performed.
    pub action: String,
    /// This flag indicates neither Stage are initialized and ready to work. Defaults to false.
    pub available: bool,
    /// Detailed information regarding action result
    /// which were performed
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub detailed_message: Option<String>,
    /// Information when  the last time the action were performed.
    pub last_time_updated: String,
    /// A result of an action which were performed.
    /// - "success": action where performed successfully;
    /// - "error": error has occurred;
    pub result: StageStatusResult,
    /// Should update of status be handled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shouldBeHandled")]
    pub should_be_handled: Option<bool>,
    /// Specifies a current status of Stage.
    pub status: String,
    /// Name of user who made a last change.
    pub username: String,
    /// Specifies a current state of Stage.
    pub value: String,
}

/// StageStatus defines the observed state of Stage.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum StageStatusResult {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "error")]
    Error,
}

