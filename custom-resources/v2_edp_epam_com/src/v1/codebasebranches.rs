// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/epam/edp-codebase-operator/v2.edp.epam.com/v1/codebasebranches.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// CodebaseBranchSpec defines the desired state of CodebaseBranch.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "v2.edp.epam.com", version = "v1", kind = "CodebaseBranch", plural = "codebasebranches")]
#[kube(namespaced)]
#[kube(status = "CodebaseBranchStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct CodebaseBranchSpec {
    /// Name of a branch.
    #[serde(rename = "branchName")]
    pub branch_name: String,
    /// Name of Codebase associated with.
    #[serde(rename = "codebaseName")]
    pub codebase_name: String,
    /// FromCommit is a commit hash or branch name.
    /// The new branch will be created starting from the selected commit hash or branch name.
    /// If a branch name is provided, the new branch will be created from the latest commit of that branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fromCommit")]
    pub from_commit: Option<String>,
    /// Pipelines is a map of pipelines related to the branch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pipelines: Option<BTreeMap<String, String>>,
    /// Flag if branch is used as "release" branch.
    pub release: bool,
    /// Version of the branch. It's required for versioning type "semver".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// CodebaseBranchStatus defines the observed state of CodebaseBranch.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct CodebaseBranchStatus {
    /// The last Action was performed.
    pub action: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub build: Option<String>,
    /// Detailed information regarding action result
    /// which were performed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "detailedMessage")]
    pub detailed_message: Option<String>,
    /// Amount of times, operator fail to serve with existing CR.
    #[serde(rename = "failureCount")]
    pub failure_count: i64,
    /// Specifies a status of action for git.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastSuccessfulBuild")]
    pub last_successful_build: Option<String>,
    /// Information when the last time the action were performed.
    #[serde(rename = "lastTimeUpdated")]
    pub last_time_updated: String,
    /// A result of an action which were performed.
    /// - "success": action where performed successfully;
    /// - "error": error has occurred;
    pub result: CodebaseBranchStatusResult,
    /// Specifies a current status of CodebaseBranch.
    pub status: String,
    /// Name of user who made a last change.
    pub username: String,
    /// Specifies a current state of CodebaseBranch.
    pub value: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionHistory")]
    pub version_history: Option<Vec<String>>,
}

/// CodebaseBranchStatus defines the observed state of CodebaseBranch.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum CodebaseBranchStatusResult {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "error")]
    Error,
}

