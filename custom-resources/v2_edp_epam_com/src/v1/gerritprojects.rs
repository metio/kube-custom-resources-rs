// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/epam/edp-gerrit-operator/v2.edp.epam.com/v1/gerritprojects.yaml
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// GerritProjectSpec defines the desired state of GerritProject.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "v2.edp.epam.com", version = "v1", kind = "GerritProject", plural = "gerritprojects")]
#[kube(namespaced)]
#[kube(status = "GerritProjectStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct GerritProjectSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub branches: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createEmptyCommit")]
    pub create_empty_commit: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerName")]
    pub owner_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owners: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "permissionsOnly")]
    pub permissions_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rejectEmptyCommit")]
    pub reject_empty_commit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "submitType")]
    pub submit_type: Option<String>,
}

/// GerritProjectStatus defines the observed state of GerritProject.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GerritProjectStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub branches: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

