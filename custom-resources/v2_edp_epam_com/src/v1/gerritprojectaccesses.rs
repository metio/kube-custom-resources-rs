// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/epam/edp-gerrit-operator/v2.edp.epam.com/v1/gerritprojectaccesses.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// GerritProjectAccessSpec defines the desired state of GerritProjectAccess.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "v2.edp.epam.com", version = "v1", kind = "GerritProjectAccess", plural = "gerritprojectaccesses")]
#[kube(namespaced)]
#[kube(status = "GerritProjectAccessStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct GerritProjectAccessSpec {
    /// OwnerName indicates which gerrit CR should be taken to initialize correct client.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerName")]
    pub owner_name: Option<String>,
    /// Parent is parent project.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<String>,
    /// ProjectName is gerrit project name.
    #[serde(rename = "projectName")]
    pub project_name: String,
    /// References contains gerrit references.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub references: Option<Vec<GerritProjectAccessReferences>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GerritProjectAccessReferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    /// Force indicates whether the force flag is set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub force: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupName")]
    pub group_name: Option<String>,
    /// Max is the max value of the permission range.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<i64>,
    /// Min is the min value of the permission range.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "permissionLabel")]
    pub permission_label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "permissionName")]
    pub permission_name: Option<String>,
    /// Patter is reference pattern, example: refs/heads/*.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "refPattern")]
    pub ref_pattern: Option<String>,
}

/// GerritProjectAccessStatus defines the observed state of GerritProjectAccess.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GerritProjectAccessStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

