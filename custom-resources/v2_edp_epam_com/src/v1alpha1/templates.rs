// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/epam/edp-codebase-operator/v2.edp.epam.com/v1alpha1/templates.yaml
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// TemplateSpec defines the desired state of Template.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "v2.edp.epam.com", version = "v1alpha1", kind = "Template", plural = "templates")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct TemplateSpec {
    /// The build tool used to build the component from the template.
    #[serde(rename = "buildTool")]
    pub build_tool: String,
    /// Category is the category of the template.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    /// The description of the template.
    pub description: String,
    /// The name of the template.
    #[serde(rename = "displayName")]
    pub display_name: String,
    /// The framework used to build the component from the template.
    pub framework: String,
    /// The icon for this template.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon: Option<Vec<TemplateIcon>>,
    /// A list of keywords describing the template.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keywords: Option<Vec<String>>,
    /// The programming language used to build the component from the template.
    pub language: String,
    /// A list of organizational entities maintaining the Template.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maintainers: Option<Vec<TemplateMaintainers>>,
    /// The level of maturity the template has achieved at this version. Options include planning, pre-alpha, alpha, beta, stable, mature, inactive, and deprecated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maturity: Option<TemplateMaturity>,
    /// MinEDPVersion is the minimum EDP version that this template is compatible with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minEDPVersion")]
    pub min_edp_version: Option<String>,
    /// A repository containing the source code for the template.
    pub source: String,
    /// The type of the template, e.g application, library, autotest, infrastructure, etc.
    #[serde(rename = "type")]
    pub r#type: String,
    /// Version is the version of the template.
    pub version: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TemplateIcon {
    /// A base64 encoded PNG, JPEG or SVG image.
    pub base64data: String,
    /// The media type of the image. E.g image/svg+xml, image/png, image/jpeg.
    pub mediatype: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TemplateMaintainers {
    pub email: String,
    pub name: String,
}

/// TemplateSpec defines the desired state of Template.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TemplateMaturity {
    #[serde(rename = "planning")]
    Planning,
    #[serde(rename = "pre-alpha")]
    PreAlpha,
    #[serde(rename = "alpha")]
    Alpha,
    #[serde(rename = "beta")]
    Beta,
    #[serde(rename = "stable")]
    Stable,
    #[serde(rename = "mature")]
    Mature,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "deprecated")]
    Deprecated,
}

/// TemplateStatus defines the observed state of Template.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TemplateStatus {
}

