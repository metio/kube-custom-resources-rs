// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/solo-io/gloo/graphql.gloo.solo.io/v1beta1/graphqlapis.yaml
// kopium version: 0.22.3

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "graphql.gloo.solo.io", version = "v1beta1", kind = "GraphQLApi", plural = "graphqlapis")]
#[kube(namespaced)]
#[kube(status = "GraphQlApiStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct GraphQlApiSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedQueryHashes")]
    pub allowed_query_hashes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executableSchema")]
    pub executable_schema: Option<GraphQlApiExecutableSchema>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespacedStatuses")]
    pub namespaced_statuses: Option<GraphQlApiNamespacedStatuses>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<GraphQlApiOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistedQueryCacheConfig")]
    pub persisted_query_cache_config: Option<GraphQlApiPersistedQueryCacheConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statPrefix")]
    pub stat_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stitchedSchema")]
    pub stitched_schema: Option<GraphQlApiStitchedSchema>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiExecutableSchema {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub executor: Option<GraphQlApiExecutableSchemaExecutor>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcDescriptorRegistry")]
    pub grpc_descriptor_registry: Option<GraphQlApiExecutableSchemaGrpcDescriptorRegistry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schemaDefinition")]
    pub schema_definition: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiExecutableSchemaExecutor {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub local: Option<GraphQlApiExecutableSchemaExecutorLocal>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<GraphQlApiExecutableSchemaExecutorRemote>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiExecutableSchemaExecutorLocal {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableIntrospection")]
    pub enable_introspection: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<GraphQlApiExecutableSchemaExecutorLocalOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolutions: Option<BTreeMap<String, GraphQlApiExecutableSchemaExecutorLocalResolutions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiExecutableSchemaExecutorLocalOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDepth")]
    pub max_depth: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiExecutableSchemaExecutorLocalResolutions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcResolver")]
    pub grpc_resolver: Option<GraphQlApiExecutableSchemaExecutorLocalResolutionsGrpcResolver>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mockResolver")]
    pub mock_resolver: Option<GraphQlApiExecutableSchemaExecutorLocalResolutionsMockResolver>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restResolver")]
    pub rest_resolver: Option<GraphQlApiExecutableSchemaExecutorLocalResolutionsRestResolver>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statPrefix")]
    pub stat_prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiExecutableSchemaExecutorLocalResolutionsGrpcResolver {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransform")]
    pub request_transform: Option<GraphQlApiExecutableSchemaExecutorLocalResolutionsGrpcResolverRequestTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanName")]
    pub span_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamRef")]
    pub upstream_ref: Option<GraphQlApiExecutableSchemaExecutorLocalResolutionsGrpcResolverUpstreamRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiExecutableSchemaExecutorLocalResolutionsGrpcResolverRequestTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "methodName")]
    pub method_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outgoingMessageJson")]
    pub outgoing_message_json: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMetadata")]
    pub request_metadata: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiExecutableSchemaExecutorLocalResolutionsGrpcResolverUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiExecutableSchemaExecutorLocalResolutionsMockResolver {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncResponse")]
    pub async_response: Option<GraphQlApiExecutableSchemaExecutorLocalResolutionsMockResolverAsyncResponse>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorResponse")]
    pub error_response: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncResponse")]
    pub sync_response: Option<serde_json::Value>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiExecutableSchemaExecutorLocalResolutionsMockResolverAsyncResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delay: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<serde_json::Value>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiExecutableSchemaExecutorLocalResolutionsRestResolver {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<GraphQlApiExecutableSchemaExecutorLocalResolutionsRestResolverRequest>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<GraphQlApiExecutableSchemaExecutorLocalResolutionsRestResolverResponse>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanName")]
    pub span_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamRef")]
    pub upstream_ref: Option<GraphQlApiExecutableSchemaExecutorLocalResolutionsRestResolverUpstreamRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiExecutableSchemaExecutorLocalResolutionsRestResolverRequest {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParams")]
    pub query_params: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiExecutableSchemaExecutorLocalResolutionsRestResolverResponse {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resultRoot")]
    pub result_root: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub setters: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiExecutableSchemaExecutorLocalResolutionsRestResolverUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiExecutableSchemaExecutorRemote {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParams")]
    pub query_params: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanName")]
    pub span_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamRef")]
    pub upstream_ref: Option<GraphQlApiExecutableSchemaExecutorRemoteUpstreamRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiExecutableSchemaExecutorRemoteUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiExecutableSchemaGrpcDescriptorRegistry {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptor")]
    pub proto_descriptor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorBin")]
    pub proto_descriptor_bin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoRefsList")]
    pub proto_refs_list: Option<GraphQlApiExecutableSchemaGrpcDescriptorRegistryProtoRefsList>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiExecutableSchemaGrpcDescriptorRegistryProtoRefsList {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRefs")]
    pub config_map_refs: Option<Vec<GraphQlApiExecutableSchemaGrpcDescriptorRegistryProtoRefsListConfigMapRefs>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiExecutableSchemaGrpcDescriptorRegistryProtoRefsListConfigMapRefs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiNamespacedStatuses {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logSensitiveInfo")]
    pub log_sensitive_info: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiPersistedQueryCacheConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheSize")]
    pub cache_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiStitchedSchema {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subschemas: Option<Vec<GraphQlApiStitchedSchemaSubschemas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiStitchedSchemaSubschemas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "typeMerge")]
    pub type_merge: Option<BTreeMap<String, GraphQlApiStitchedSchemaSubschemasTypeMerge>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiStitchedSchemaSubschemasTypeMerge {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryName")]
    pub query_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selectionSet")]
    pub selection_set: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GraphQlApiStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, serde_json::Value>>,
}

