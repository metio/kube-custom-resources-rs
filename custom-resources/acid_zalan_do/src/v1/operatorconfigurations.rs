// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/zalando/postgres-operator/acid.zalan.do/v1/operatorconfigurations.yaml
// kopium version: 0.22.3

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OperatorConfigurationConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_or_gcp: Option<OperatorConfigurationConfigurationAwsOrGcp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection_pooler: Option<OperatorConfigurationConfigurationConnectionPooler>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub crd_categories: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub debug: Option<OperatorConfigurationConfigurationDebug>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub docker_image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_crd_registration: Option<bool>,
    /// deprecated
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_crd_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_lazy_spilo_upgrade: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_pgversion_env_var: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_shm_volume: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_spilo_wal_path_compat: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_team_id_clustername_prefix: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub etcd_host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ignore_instance_limits_annotation_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<OperatorConfigurationConfigurationKubernetes>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes_use_configmaps: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub load_balancer: Option<OperatorConfigurationConfigurationLoadBalancer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logging_rest_api: Option<OperatorConfigurationConfigurationLoggingRestApi>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup: Option<OperatorConfigurationConfigurationLogicalBackup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub major_version_upgrade: Option<OperatorConfigurationConfigurationMajorVersionUpgrade>,
    /// -1 = disabled
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_instances: Option<i64>,
    /// -1 = disabled
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min_instances: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patroni: Option<OperatorConfigurationConfigurationPatroni>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub postgres_pod_resources: Option<OperatorConfigurationConfigurationPostgresPodResources>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repair_period: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resync_period: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scalyr: Option<OperatorConfigurationConfigurationScalyr>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub set_memory_request_to_limit: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sidecar_docker_images: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sidecars: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub teams_api: Option<OperatorConfigurationConfigurationTeamsApi>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeouts: Option<OperatorConfigurationConfigurationTimeouts>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub users: Option<OperatorConfigurationConfigurationUsers>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OperatorConfigurationConfigurationAwsOrGcp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additional_secret_mount: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additional_secret_mount_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_ebs_gp3_migration: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_ebs_gp3_migration_max_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcp_credentials: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kube_iam_role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_s3_bucket: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wal_az_storage_account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wal_gs_bucket: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wal_s3_bucket: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OperatorConfigurationConfigurationConnectionPooler {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection_pooler_default_cpu_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection_pooler_default_cpu_request: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection_pooler_default_memory_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection_pooler_default_memory_request: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection_pooler_image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection_pooler_max_db_connections: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection_pooler_mode: Option<OperatorConfigurationConfigurationConnectionPoolerConnectionPoolerMode>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection_pooler_number_of_instances: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection_pooler_schema: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection_pooler_user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OperatorConfigurationConfigurationConnectionPoolerConnectionPoolerMode {
    #[serde(rename = "session")]
    Session,
    #[serde(rename = "transaction")]
    Transaction,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OperatorConfigurationConfigurationDebug {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub debug_logging: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_database_access: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OperatorConfigurationConfigurationKubernetes {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additional_pod_capabilities: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster_name_label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_pod_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delete_annotation_date_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delete_annotation_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub downscaler_annotations: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_cross_namespace_secret: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_finalizers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_init_containers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_owner_references: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_persistent_volume_claim_deletion: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_pod_antiaffinity: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_pod_disruption_budget: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_readiness_probe: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_secrets_deletion: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_sidecars: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ignored_annotations: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub infrastructure_roles_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub infrastructure_roles_secrets: Option<Vec<OperatorConfigurationConfigurationKubernetesInfrastructureRolesSecrets>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inherited_annotations: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inherited_labels: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub master_pod_move_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_readiness_label: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_readiness_label_merge: Option<OperatorConfigurationConfigurationKubernetesNodeReadinessLabelMerge>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth_token_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pdb_master_label_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pdb_name_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persistent_volume_claim_retention_policy: Option<OperatorConfigurationConfigurationKubernetesPersistentVolumeClaimRetentionPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod_antiaffinity_preferred_during_scheduling: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod_antiaffinity_topology_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod_environment_configmap: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod_environment_secret: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod_management_policy: Option<OperatorConfigurationConfigurationKubernetesPodManagementPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod_priority_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod_role_label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod_service_account_definition: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod_service_account_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod_service_account_role_binding_definition: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod_terminate_grace_period: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret_name_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub share_pgsocket_with_sidecars: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spilo_allow_privilege_escalation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spilo_fsgroup: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spilo_privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spilo_runasgroup: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spilo_runasuser: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage_resize_mode: Option<OperatorConfigurationConfigurationKubernetesStorageResizeMode>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub toleration: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub watched_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OperatorConfigurationConfigurationKubernetesInfrastructureRolesSecrets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub defaultrolevalue: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub defaultuservalue: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub details: Option<String>,
    pub passwordkey: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rolekey: Option<String>,
    pub secretname: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<bool>,
    pub userkey: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OperatorConfigurationConfigurationKubernetesNodeReadinessLabelMerge {
    #[serde(rename = "AND")]
    And,
    #[serde(rename = "OR")]
    Or,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OperatorConfigurationConfigurationKubernetesPersistentVolumeClaimRetentionPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub when_deleted: Option<OperatorConfigurationConfigurationKubernetesPersistentVolumeClaimRetentionPolicyWhenDeleted>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub when_scaled: Option<OperatorConfigurationConfigurationKubernetesPersistentVolumeClaimRetentionPolicyWhenScaled>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OperatorConfigurationConfigurationKubernetesPersistentVolumeClaimRetentionPolicyWhenDeleted {
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "retain")]
    Retain,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OperatorConfigurationConfigurationKubernetesPersistentVolumeClaimRetentionPolicyWhenScaled {
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "retain")]
    Retain,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OperatorConfigurationConfigurationKubernetesPodManagementPolicy {
    #[serde(rename = "ordered_ready")]
    OrderedReady,
    #[serde(rename = "parallel")]
    Parallel,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OperatorConfigurationConfigurationKubernetesStorageResizeMode {
    #[serde(rename = "ebs")]
    Ebs,
    #[serde(rename = "mixed")]
    Mixed,
    #[serde(rename = "pvc")]
    Pvc,
    #[serde(rename = "off")]
    Off,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OperatorConfigurationConfigurationLoadBalancer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_service_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db_hosted_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_master_load_balancer: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_master_pooler_load_balancer: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_replica_load_balancer: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_replica_pooler_load_balancer: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external_traffic_policy: Option<OperatorConfigurationConfigurationLoadBalancerExternalTrafficPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub master_dns_name_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub master_legacy_dns_name_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replica_dns_name_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replica_legacy_dns_name_format: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OperatorConfigurationConfigurationLoadBalancerExternalTrafficPolicy {
    Cluster,
    Local,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OperatorConfigurationConfigurationLoggingRestApi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster_history_entries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ring_log_lines: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OperatorConfigurationConfigurationLogicalBackup {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_azure_storage_account_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_azure_storage_account_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_azure_storage_container: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_cpu_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_cpu_request: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_cronjob_environment_secret: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_docker_image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_google_application_credentials: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_job_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_memory_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_memory_request: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_provider: Option<OperatorConfigurationConfigurationLogicalBackupLogicalBackupProvider>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_s3_access_key_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_s3_bucket: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_s3_bucket_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_s3_endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_s3_region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_s3_retention_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_s3_secret_access_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_s3_sse: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logical_backup_schedule: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OperatorConfigurationConfigurationLogicalBackupLogicalBackupProvider {
    #[serde(rename = "az")]
    Az,
    #[serde(rename = "gcs")]
    Gcs,
    #[serde(rename = "s3")]
    S3,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OperatorConfigurationConfigurationMajorVersionUpgrade {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub major_version_upgrade_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub major_version_upgrade_team_allow_list: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub minimal_major_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_major_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OperatorConfigurationConfigurationPatroni {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_patroni_failsafe_mode: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OperatorConfigurationConfigurationPostgresPodResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_cpu_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_cpu_request: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_memory_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_memory_request: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_cpu_request: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_memory_request: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min_cpu_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min_memory_limit: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OperatorConfigurationConfigurationScalyr {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scalyr_api_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scalyr_cpu_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scalyr_cpu_request: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scalyr_image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scalyr_memory_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scalyr_memory_request: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scalyr_server_url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OperatorConfigurationConfigurationTeamsApi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_admin_role_for_users: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_postgres_team_crd: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_postgres_team_crd_superusers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_team_member_deprecation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_team_superuser: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_teams_api: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pam_configuration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pam_role_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub postgres_superuser_teams: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protected_role_names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role_deletion_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub team_admin_role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub team_api_role_configuration: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub teams_api_url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OperatorConfigurationConfigurationTimeouts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patroni_api_check_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patroni_api_check_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod_deletion_wait_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod_label_wait_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ready_wait_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ready_wait_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource_check_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource_check_timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OperatorConfigurationConfigurationUsers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additional_owner_roles: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_password_rotation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password_rotation_interval: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password_rotation_user_retention: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replication_username: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub super_username: Option<String>,
}

