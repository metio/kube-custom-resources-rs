// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/solo-io/gloo/enterprise.gloo.solo.io/v1/authconfigs.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "enterprise.gloo.solo.io", version = "v1", kind = "AuthConfig", plural = "authconfigs")]
#[kube(namespaced)]
#[kube(status = "AuthConfigStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct AuthConfigSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "booleanExpr")]
    pub boolean_expr: Option<String>,
    pub configs: Vec<AuthConfigConfigs>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failOnRedirect")]
    pub fail_on_redirect: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespacedStatuses")]
    pub namespaced_statuses: Option<AuthConfigNamespacedStatuses>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigs {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiKeyAuth")]
    pub api_key_auth: Option<AuthConfigConfigsApiKeyAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<AuthConfigConfigsBasicAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hmacAuth")]
    pub hmac_auth: Option<AuthConfigConfigsHmacAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jwt: Option<AuthConfigConfigsJwt>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ldap: Option<AuthConfigConfigsLdap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth: Option<AuthConfigConfigsOauth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth2: Option<AuthConfigConfigsOauth2>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "opaAuth")]
    pub opa_auth: Option<AuthConfigConfigsOpaAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "opaServerAuth")]
    pub opa_server_auth: Option<AuthConfigConfigsOpaServerAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passThroughAuth")]
    pub pass_through_auth: Option<AuthConfigConfigsPassThroughAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pluginAuth")]
    pub plugin_auth: Option<AuthConfigConfigsPluginAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portalAuth")]
    pub portal_auth: Option<AuthConfigConfigsPortalAuth>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsApiKeyAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aerospikeApikeyStorage")]
    pub aerospike_apikey_storage: Option<AuthConfigConfigsApiKeyAuthAerospikeApikeyStorage>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiKeySecretRefs")]
    pub api_key_secret_refs: Option<Vec<AuthConfigConfigsApiKeyAuthApiKeySecretRefs>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersFromMetadata")]
    pub headers_from_metadata: Option<BTreeMap<String, AuthConfigConfigsApiKeyAuthHeadersFromMetadata>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersFromMetadataEntry")]
    pub headers_from_metadata_entry: Option<BTreeMap<String, AuthConfigConfigsApiKeyAuthHeadersFromMetadataEntry>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "k8sSecretApikeyStorage")]
    pub k8s_secret_apikey_storage: Option<AuthConfigConfigsApiKeyAuthK8sSecretApikeyStorage>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipMetadataValidation")]
    pub skip_metadata_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsApiKeyAuthAerospikeApikeyStorage {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowInsecure")]
    pub allow_insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batchSize")]
    pub batch_size: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certPath")]
    pub cert_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commitAll")]
    pub commit_all: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commitMaster")]
    pub commit_master: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyPath")]
    pub key_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeTlsName")]
    pub node_tls_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readModeAp")]
    pub read_mode_ap: Option<AuthConfigConfigsApiKeyAuthAerospikeApikeyStorageReadModeAp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readModeSc")]
    pub read_mode_sc: Option<AuthConfigConfigsApiKeyAuthAerospikeApikeyStorageReadModeSc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCaPath")]
    pub root_ca_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub set: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCurveGroups")]
    pub tls_curve_groups: Option<Vec<AuthConfigConfigsApiKeyAuthAerospikeApikeyStorageTlsCurveGroups>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsVersion")]
    pub tls_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsApiKeyAuthAerospikeApikeyStorageReadModeAp {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readModeApAll")]
    pub read_mode_ap_all: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readModeApOne")]
    pub read_mode_ap_one: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsApiKeyAuthAerospikeApikeyStorageReadModeSc {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readModeScAllowUnavailable")]
    pub read_mode_sc_allow_unavailable: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readModeScLinearize")]
    pub read_mode_sc_linearize: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readModeScReplica")]
    pub read_mode_sc_replica: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readModeScSession")]
    pub read_mode_sc_session: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsApiKeyAuthAerospikeApikeyStorageTlsCurveGroups {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "curveP256")]
    pub curve_p256: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "curveP384")]
    pub curve_p384: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "curveP521")]
    pub curve_p521: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub x25519: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsApiKeyAuthApiKeySecretRefs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsApiKeyAuthHeadersFromMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsApiKeyAuthHeadersFromMetadataEntry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsApiKeyAuthK8sSecretApikeyStorage {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiKeySecretRefs")]
    pub api_key_secret_refs: Option<Vec<AuthConfigConfigsApiKeyAuthK8sSecretApikeyStorageApiKeySecretRefs>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsApiKeyAuthK8sSecretApikeyStorageApiKeySecretRefs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsBasicAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apr: Option<AuthConfigConfigsBasicAuthApr>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encryption: Option<AuthConfigConfigsBasicAuthEncryption>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub realm: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userList")]
    pub user_list: Option<AuthConfigConfigsBasicAuthUserList>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsBasicAuthApr {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub users: Option<BTreeMap<String, AuthConfigConfigsBasicAuthAprUsers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsBasicAuthAprUsers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hashedPassword")]
    pub hashed_password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub salt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsBasicAuthEncryption {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apr: Option<AuthConfigConfigsBasicAuthEncryptionApr>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha1: Option<AuthConfigConfigsBasicAuthEncryptionSha1>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsBasicAuthEncryptionApr {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsBasicAuthEncryptionSha1 {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsBasicAuthUserList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub users: Option<BTreeMap<String, AuthConfigConfigsBasicAuthUserListUsers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsBasicAuthUserListUsers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hashedPassword")]
    pub hashed_password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub salt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsHmacAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parametersInHeaders")]
    pub parameters_in_headers: Option<AuthConfigConfigsHmacAuthParametersInHeaders>,
    #[serde(rename = "secretRefs")]
    pub secret_refs: AuthConfigConfigsHmacAuthSecretRefs,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsHmacAuthParametersInHeaders {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsHmacAuthSecretRefs {
    #[serde(rename = "secretRefs")]
    pub secret_refs: Vec<AuthConfigConfigsHmacAuthSecretRefsSecretRefs>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsHmacAuthSecretRefsSecretRefs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsJwt {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsLdap {
    pub address: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedGroups")]
    pub allowed_groups: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableGroupChecking")]
    pub disable_group_checking: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupLookupSettings")]
    pub group_lookup_settings: Option<AuthConfigConfigsLdapGroupLookupSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "membershipAttributeName")]
    pub membership_attribute_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pool: Option<AuthConfigConfigsLdapPool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "searchFilter")]
    pub search_filter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDnTemplate")]
    pub user_dn_template: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsLdapGroupLookupSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkGroupsWithServiceAccount")]
    pub check_groups_with_service_account: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialsSecretRef")]
    pub credentials_secret_ref: Option<AuthConfigConfigsLdapGroupLookupSettingsCredentialsSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsLdapGroupLookupSettingsCredentialsSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsLdapPool {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialSize")]
    pub initial_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSize")]
    pub max_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth {
    #[serde(rename = "appUrl")]
    pub app_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authEndpointQueryParams")]
    pub auth_endpoint_query_params: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callbackPath")]
    pub callback_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSecretRef")]
    pub client_secret_ref: Option<AuthConfigConfigsOauthClientSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "issuerUrl")]
    pub issuer_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauthClientSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessTokenValidation")]
    pub access_token_validation: Option<AuthConfigConfigsOauth2AccessTokenValidation>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth2: Option<AuthConfigConfigsOauth2Oauth2>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oidcAuthorizationCode")]
    pub oidc_authorization_code: Option<AuthConfigConfigsOauth2OidcAuthorizationCode>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2AccessTokenValidation {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<AuthConfigConfigsOauth2AccessTokenValidationAzure>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheTimeout")]
    pub cache_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimsToHeaders")]
    pub claims_to_headers: Option<Vec<AuthConfigConfigsOauth2AccessTokenValidationClaimsToHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default: Option<AuthConfigConfigsOauth2AccessTokenValidationDefault>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataFromClaims")]
    pub dynamic_metadata_from_claims: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub introspection: Option<AuthConfigConfigsOauth2AccessTokenValidationIntrospection>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "introspectionUrl")]
    pub introspection_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jwt: Option<AuthConfigConfigsOauth2AccessTokenValidationJwt>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredScopes")]
    pub required_scopes: Option<AuthConfigConfigsOauth2AccessTokenValidationRequiredScopes>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userinfoUrl")]
    pub userinfo_url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2AccessTokenValidationAzure {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimsCachingOptions")]
    pub claims_caching_options: Option<AuthConfigConfigsOauth2AccessTokenValidationAzureClaimsCachingOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSecret")]
    pub client_secret: Option<AuthConfigConfigsOauth2AccessTokenValidationAzureClientSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tenantId")]
    pub tenant_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2AccessTokenValidationAzureClaimsCachingOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "poolSize")]
    pub pool_size: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "socketType")]
    pub socket_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCertMountPath")]
    pub tls_cert_mount_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2AccessTokenValidationAzureClientSecret {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2AccessTokenValidationClaimsToHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claim: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2AccessTokenValidationDefault {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2AccessTokenValidationIntrospection {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSecretRef")]
    pub client_secret_ref: Option<AuthConfigConfigsOauth2AccessTokenValidationIntrospectionClientSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableClientSecret")]
    pub disable_client_secret: Option<bool>,
    #[serde(rename = "introspectionUrl")]
    pub introspection_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userIdAttributeName")]
    pub user_id_attribute_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2AccessTokenValidationIntrospectionClientSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2AccessTokenValidationJwt {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localJwks")]
    pub local_jwks: Option<AuthConfigConfigsOauth2AccessTokenValidationJwtLocalJwks>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteJwks")]
    pub remote_jwks: Option<AuthConfigConfigsOauth2AccessTokenValidationJwtRemoteJwks>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2AccessTokenValidationJwtLocalJwks {
    #[serde(rename = "inlineString")]
    pub inline_string: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2AccessTokenValidationJwtRemoteJwks {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "refreshInterval")]
    pub refresh_interval: Option<String>,
    pub url: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2AccessTokenValidationRequiredScopes {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2Oauth2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "afterLogoutUrl")]
    pub after_logout_url: Option<String>,
    #[serde(rename = "appUrl")]
    pub app_url: String,
    #[serde(rename = "authEndpoint")]
    pub auth_endpoint: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authEndpointQueryParams")]
    pub auth_endpoint_query_params: Option<BTreeMap<String, String>>,
    #[serde(rename = "callbackPath")]
    pub callback_path: String,
    #[serde(rename = "clientId")]
    pub client_id: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSecretRef")]
    pub client_secret_ref: Option<AuthConfigConfigsOauth2Oauth2ClientSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableClientSecret")]
    pub disable_client_secret: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logoutPath")]
    pub logout_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revocationEndpoint")]
    pub revocation_endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub session: Option<AuthConfigConfigsOauth2Oauth2Session>,
    #[serde(rename = "tokenEndpoint")]
    pub token_endpoint: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenEndpointQueryParams")]
    pub token_endpoint_query_params: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2Oauth2ClientSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2Oauth2Session {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherConfig")]
    pub cipher_config: Option<AuthConfigConfigsOauth2Oauth2SessionCipherConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cookie: Option<AuthConfigConfigsOauth2Oauth2SessionCookie>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cookieOptions")]
    pub cookie_options: Option<AuthConfigConfigsOauth2Oauth2SessionCookieOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failOnFetchFailure")]
    pub fail_on_fetch_failure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redis: Option<AuthConfigConfigsOauth2Oauth2SessionRedis>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2Oauth2SessionCipherConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyRef")]
    pub key_ref: Option<AuthConfigConfigsOauth2Oauth2SessionCipherConfigKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2Oauth2SessionCipherConfigKeyRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2Oauth2SessionCookie {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRefreshing")]
    pub allow_refreshing: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyPrefix")]
    pub key_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetDomain")]
    pub target_domain: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2Oauth2SessionCookieOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpOnly")]
    pub http_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAge")]
    pub max_age: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notSecure")]
    pub not_secure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sameSite")]
    pub same_site: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2Oauth2SessionRedis {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRefreshing")]
    pub allow_refreshing: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cookieName")]
    pub cookie_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyPrefix")]
    pub key_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<AuthConfigConfigsOauth2Oauth2SessionRedisOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preExpiryBuffer")]
    pub pre_expiry_buffer: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetDomain")]
    pub target_domain: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2Oauth2SessionRedisOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "poolSize")]
    pub pool_size: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "socketType")]
    pub socket_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCertMountPath")]
    pub tls_cert_mount_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCode {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessToken")]
    pub access_token: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeAccessToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "afterLogoutUrl")]
    pub after_logout_url: Option<String>,
    #[serde(rename = "appUrl")]
    pub app_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authEndpointQueryParams")]
    pub auth_endpoint_query_params: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMapFromMetadata")]
    pub auto_map_from_metadata: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeAutoMapFromMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeAzure>,
    #[serde(rename = "callbackPath")]
    pub callback_path: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientAuthentication")]
    pub client_authentication: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeClientAuthentication>,
    #[serde(rename = "clientId")]
    pub client_id: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSecretRef")]
    pub client_secret_ref: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeClientSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeDefault>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableClientSecret")]
    pub disable_client_secret: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoveryOverride")]
    pub discovery_override: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeDiscoveryOverride>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoveryPollInterval")]
    pub discovery_poll_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataFromClaims")]
    pub dynamic_metadata_from_claims: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endSessionProperties")]
    pub end_session_properties: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeEndSessionProperties>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frontChannelLogout")]
    pub front_channel_logout: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeFrontChannelLogout>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityToken")]
    pub identity_token: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeIdentityToken>,
    #[serde(rename = "issuerUrl")]
    pub issuer_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwksCacheRefreshPolicy")]
    pub jwks_cache_refresh_policy: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeJwksCacheRefreshPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logoutPath")]
    pub logout_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseCallbackPathAsRegex")]
    pub parse_callback_path_as_regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub session: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeSession>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionIdHeaderName")]
    pub session_id_header_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenEndpointQueryParams")]
    pub token_endpoint_query_params: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeAccessToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimsToHeaders")]
    pub claims_to_headers: Option<Vec<AuthConfigConfigsOauth2OidcAuthorizationCodeAccessTokenClaimsToHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeAccessTokenClaimsToHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claim: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeAutoMapFromMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeAzure {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimsCachingOptions")]
    pub claims_caching_options: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeAzureClaimsCachingOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSecret")]
    pub client_secret: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeAzureClientSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tenantId")]
    pub tenant_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeAzureClaimsCachingOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "poolSize")]
    pub pool_size: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "socketType")]
    pub socket_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCertMountPath")]
    pub tls_cert_mount_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeAzureClientSecret {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeClientAuthentication {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSecret")]
    pub client_secret: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeClientAuthenticationClientSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKeyJwt")]
    pub private_key_jwt: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeClientAuthenticationPrivateKeyJwt>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeClientAuthenticationClientSecret {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSecretRef")]
    pub client_secret_ref: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeClientAuthenticationClientSecretClientSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableClientSecret")]
    pub disable_client_secret: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeClientAuthenticationClientSecretClientSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeClientAuthenticationPrivateKeyJwt {
    #[serde(rename = "signingKeyRef")]
    pub signing_key_ref: AuthConfigConfigsOauth2OidcAuthorizationCodeClientAuthenticationPrivateKeyJwtSigningKeyRef,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validFor")]
    pub valid_for: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeClientAuthenticationPrivateKeyJwtSigningKeyRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeClientSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeDefault {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeDiscoveryOverride {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authEndpoint")]
    pub auth_endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMethods")]
    pub auth_methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endSessionEndpoint")]
    pub end_session_endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idTokenAlgs")]
    pub id_token_algs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwksUri")]
    pub jwks_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTypes")]
    pub response_types: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revocationEndpoint")]
    pub revocation_endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subjects: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenEndpoint")]
    pub token_endpoint: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeEndSessionProperties {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "methodType")]
    pub method_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeFrontChannelLogout {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessTokenHeader")]
    pub access_token_header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idTokenHeader")]
    pub id_token_header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useBearerSchemaForAuthorization")]
    pub use_bearer_schema_for_authorization: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeIdentityToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimsToHeaders")]
    pub claims_to_headers: Option<Vec<AuthConfigConfigsOauth2OidcAuthorizationCodeIdentityTokenClaimsToHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeIdentityTokenClaimsToHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claim: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeJwksCacheRefreshPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub always: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeJwksCacheRefreshPolicyAlways>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxIdpReqPerPollingInterval")]
    pub max_idp_req_per_polling_interval: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub never: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeJwksCacheRefreshPolicyNever>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeJwksCacheRefreshPolicyAlways {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeJwksCacheRefreshPolicyNever {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeSession {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherConfig")]
    pub cipher_config: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeSessionCipherConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cookie: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeSessionCookie>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cookieOptions")]
    pub cookie_options: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeSessionCookieOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failOnFetchFailure")]
    pub fail_on_fetch_failure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redis: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeSessionRedis>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeSessionCipherConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyRef")]
    pub key_ref: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeSessionCipherConfigKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeSessionCipherConfigKeyRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeSessionCookie {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRefreshing")]
    pub allow_refreshing: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyPrefix")]
    pub key_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetDomain")]
    pub target_domain: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeSessionCookieOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpOnly")]
    pub http_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAge")]
    pub max_age: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notSecure")]
    pub not_secure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sameSite")]
    pub same_site: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeSessionRedis {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRefreshing")]
    pub allow_refreshing: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cookieName")]
    pub cookie_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyPrefix")]
    pub key_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<AuthConfigConfigsOauth2OidcAuthorizationCodeSessionRedisOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preExpiryBuffer")]
    pub pre_expiry_buffer: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetDomain")]
    pub target_domain: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOauth2OidcAuthorizationCodeSessionRedisOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "poolSize")]
    pub pool_size: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "socketType")]
    pub socket_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCertMountPath")]
    pub tls_cert_mount_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOpaAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub modules: Option<Vec<AuthConfigConfigsOpaAuthModules>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<AuthConfigConfigsOpaAuthOptions>,
    pub query: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOpaAuthModules {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOpaAuthOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fastInputConversion")]
    pub fast_input_conversion: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnDecisionReason")]
    pub return_decision_reason: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOpaServerAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<AuthConfigConfigsOpaServerAuthOptions>,
    pub package: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleName")]
    pub rule_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverAddr")]
    pub server_addr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsOpaServerAuthOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fastInputConversion")]
    pub fast_input_conversion: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnDecisionReason")]
    pub return_decision_reason: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsPassThroughAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureModeAllow")]
    pub failure_mode_allow: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<AuthConfigConfigsPassThroughAuthGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<AuthConfigConfigsPassThroughAuthHttp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsPassThroughAuthGrpc {
    pub address: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTimeout")]
    pub connection_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryPolicy")]
    pub retry_policy: Option<AuthConfigConfigsPassThroughAuthGrpcRetryPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<AuthConfigConfigsPassThroughAuthGrpcTlsConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsPassThroughAuthGrpcRetryPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numRetries")]
    pub num_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryBackOff")]
    pub retry_back_off: Option<AuthConfigConfigsPassThroughAuthGrpcRetryPolicyRetryBackOff>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsPassThroughAuthGrpcRetryPolicyRetryBackOff {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseInterval")]
    pub base_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInterval")]
    pub max_interval: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsPassThroughAuthGrpcTlsConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<AuthConfigConfigsPassThroughAuthGrpcTlsConfigSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslParams")]
    pub ssl_params: Option<AuthConfigConfigsPassThroughAuthGrpcTlsConfigSslParams>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsPassThroughAuthGrpcTlsConfigSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsPassThroughAuthGrpcTlsConfigSslParams {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsPassThroughAuthHttp {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTimeout")]
    pub connection_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<AuthConfigConfigsPassThroughAuthHttpRequest>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<AuthConfigConfigsPassThroughAuthHttpResponse>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<AuthConfigConfigsPassThroughAuthHttpTlsConfig>,
    pub url: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsPassThroughAuthHttpRequest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedHeaders")]
    pub allowed_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAdd")]
    pub headers_to_add: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passThroughBody")]
    pub pass_through_body: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passThroughFilterMetadata")]
    pub pass_through_filter_metadata: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passThroughState")]
    pub pass_through_state: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsPassThroughAuthHttpResponse {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedClientHeadersOnDenied")]
    pub allowed_client_headers_on_denied: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedUpstreamHeaders")]
    pub allowed_upstream_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedUpstreamHeadersToOverwrite")]
    pub allowed_upstream_headers_to_overwrite: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readStateFromResponse")]
    pub read_state_from_response: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsPassThroughAuthHttpTlsConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<AuthConfigConfigsPassThroughAuthHttpTlsConfigSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslParams")]
    pub ssl_params: Option<AuthConfigConfigsPassThroughAuthHttpTlsConfigSslParams>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsPassThroughAuthHttpTlsConfigSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsPassThroughAuthHttpTlsConfigSslParams {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsPluginAuth {
    pub config: BTreeMap<String, serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exportedSymbolName")]
    pub exported_symbol_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pluginFileName")]
    pub plugin_file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsPortalAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiKeyHeader")]
    pub api_key_header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheDuration")]
    pub cache_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redisOptions")]
    pub redis_options: Option<AuthConfigConfigsPortalAuthRedisOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTimeout")]
    pub request_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigConfigsPortalAuthRedisOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "poolSize")]
    pub pool_size: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "socketType")]
    pub socket_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCertMountPath")]
    pub tls_cert_mount_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigNamespacedStatuses {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthConfigStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, serde_json::Value>>,
}

