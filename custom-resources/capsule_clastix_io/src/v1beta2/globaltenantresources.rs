// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/projectcapsule/capsule/capsule.clastix.io/v1beta2/globaltenantresources.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// GlobalTenantResourceSpec defines the desired state of GlobalTenantResource.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "capsule.clastix.io", version = "v1beta2", kind = "GlobalTenantResource", plural = "globaltenantresources")]
#[kube(status = "GlobalTenantResourceStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct GlobalTenantResourceSpec {
    /// When the replicated resource manifest is deleted, all the objects replicated so far will be automatically deleted.
    /// Disable this to keep replicated resources although the deletion of the replication manifest.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pruningOnDelete")]
    pub pruning_on_delete: Option<bool>,
    /// Defines the rules to select targeting Namespace, along with the objects that must be replicated.
    pub resources: Vec<GlobalTenantResourceResources>,
    /// Define the period of time upon a second reconciliation must be invoked.
    /// Keep in mind that any change to the manifests will trigger a new reconciliation.
    #[serde(rename = "resyncPeriod")]
    pub resync_period: String,
    /// Defines the Tenant selector used target the tenants on which resources must be propagated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tenantSelector")]
    pub tenant_selector: Option<GlobalTenantResourceTenantSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalTenantResourceResources {
    /// Besides the Capsule metadata required by TenantResource controller, defines additional metadata that must be
    /// added to the replicated resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalMetadata")]
    pub additional_metadata: Option<GlobalTenantResourceResourcesAdditionalMetadata>,
    /// Defines the Namespace selector to select the Tenant Namespaces on which the resources must be propagated.
    /// In case of nil value, all the Tenant Namespaces are targeted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<GlobalTenantResourceResourcesNamespaceSelector>,
    /// List of the resources already existing in other Namespaces that must be replicated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespacedItems")]
    pub namespaced_items: Option<Vec<GlobalTenantResourceResourcesNamespacedItems>>,
    /// List of raw resources that must be replicated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawItems")]
    pub raw_items: Option<Vec<BTreeMap<String, serde_json::Value>>>,
}

/// Besides the Capsule metadata required by TenantResource controller, defines additional metadata that must be
/// added to the replicated resources.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalTenantResourceResourcesAdditionalMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// Defines the Namespace selector to select the Tenant Namespaces on which the resources must be propagated.
/// In case of nil value, all the Tenant Namespaces are targeted.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalTenantResourceResourcesNamespaceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<GlobalTenantResourceResourcesNamespaceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalTenantResourceResourcesNamespaceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalTenantResourceResourcesNamespacedItems {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Kind of the referent.
    /// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>
    pub kind: String,
    /// Namespace of the referent.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/>
    pub namespace: String,
    /// Label selector used to select the given resources in the given Namespace.
    pub selector: GlobalTenantResourceResourcesNamespacedItemsSelector,
}

/// Label selector used to select the given resources in the given Namespace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalTenantResourceResourcesNamespacedItemsSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<GlobalTenantResourceResourcesNamespacedItemsSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalTenantResourceResourcesNamespacedItemsSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Defines the Tenant selector used target the tenants on which resources must be propagated.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalTenantResourceTenantSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<GlobalTenantResourceTenantSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalTenantResourceTenantSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// GlobalTenantResourceStatus defines the observed state of GlobalTenantResource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalTenantResourceStatus {
    /// List of the replicated resources for the given TenantResource.
    #[serde(rename = "processedItems")]
    pub processed_items: Vec<GlobalTenantResourceStatusProcessedItems>,
    /// List of Tenants addressed by the GlobalTenantResource.
    #[serde(rename = "selectedTenants")]
    pub selected_tenants: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalTenantResourceStatusProcessedItems {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Kind of the referent.
    /// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>
    pub kind: String,
    /// Name of the referent.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    pub name: String,
    /// Namespace of the referent.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/>
    pub namespace: String,
}

