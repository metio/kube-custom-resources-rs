// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/kubernetes-sigs/container-object-storage-interface/objectstorage.k8s.io/v1alpha2/bucketclaims.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// spec defines the desired state of BucketClaim
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "objectstorage.k8s.io", version = "v1alpha2", kind = "BucketClaim", plural = "bucketclaims")]
#[kube(namespaced)]
#[kube(status = "BucketClaimStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct BucketClaimSpec {
    /// bucketClassName selects the BucketClass for provisioning the BucketClaim.
    /// This field is used only for BucketClaim dynamic provisioning.
    /// If unspecified, existingBucketName must be specified for binding to an existing Bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketClassName")]
    pub bucket_class_name: Option<String>,
    /// existingBucketName selects the name of an existing Bucket resource that this BucketClaim
    /// should bind to.
    /// This field is used only for BucketClaim static provisioning.
    /// If unspecified, bucketClassName must be specified for dynamically provisioning a new bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "existingBucketName")]
    pub existing_bucket_name: Option<String>,
    /// protocols lists object storage protocols that the provisioned Bucket must support.
    /// If specified, COSI will verify that each item is advertised as supported by the driver.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocols: Option<Vec<String>>,
}

/// status defines the observed state of BucketClaim
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BucketClaimStatus {
    /// boundBucketName is the name of the Bucket this BucketClaim is bound to.
    /// Once set, this is immutable.
    #[serde(rename = "boundBucketName")]
    pub bound_bucket_name: String,
    /// error holds the most recent error message, with a timestamp.
    /// This is cleared when provisioning is successful.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<BucketClaimStatusError>,
    /// protocols is the set of protocols the bound Bucket reports to support. BucketAccesses can
    /// request access to this BucketClaim using any of the protocols reported here.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocols: Option<Vec<String>>,
    /// readyToUse indicates that the bucket is ready for consumption by workloads.
    #[serde(rename = "readyToUse")]
    pub ready_to_use: bool,
}

/// error holds the most recent error message, with a timestamp.
/// This is cleared when provisioning is successful.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BucketClaimStatusError {
    /// message is a string detailing the encountered error.
    /// NOTE: message will be logged, and it should not contain sensitive information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// time is the timestamp when the error was encountered.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
}

