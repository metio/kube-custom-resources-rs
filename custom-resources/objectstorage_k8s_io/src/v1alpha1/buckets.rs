// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/kubernetes-sigs/container-object-storage-interface/objectstorage.k8s.io/v1alpha1/buckets.yaml
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::api::core::v1::ObjectReference;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "objectstorage.k8s.io", version = "v1alpha1", kind = "Bucket", plural = "buckets")]
#[kube(status = "BucketStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct BucketSpec {
    /// Name of the BucketClaim that resulted in the creation of this Bucket
    /// In case the Bucket object was created manually, then this should refer
    /// to the BucketClaim with which this Bucket should be bound
    #[serde(rename = "bucketClaim")]
    pub bucket_claim: ObjectReference,
    /// Name of the BucketClass specified in the BucketRequest
    #[serde(rename = "bucketClassName")]
    pub bucket_class_name: String,
    /// DeletionPolicy is used to specify how COSI should handle deletion of this
    /// bucket. There are 2 possible values:
    ///  - Retain: Indicates that the bucket should not be deleted from the OSP (default)
    ///  - Delete: Indicates that the bucket should be deleted from the OSP
    ///        once all the workloads accessing this bucket are done
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<String>,
    /// DriverName is the name of driver associated with this bucket
    #[serde(rename = "driverName")]
    pub driver_name: String,
    /// ExistingBucketID is the unique id of the bucket in the OSP. This field should be
    /// used to specify a bucket that has been created outside of COSI.
    /// This field will be empty when the Bucket is dynamically provisioned by COSI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "existingBucketID")]
    pub existing_bucket_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<BTreeMap<String, String>>,
    /// Protocols are the set of data APIs this bucket is expected to support.
    /// The possible values for protocol are:
    /// -  S3: Indicates Amazon S3 protocol
    /// -  Azure: Indicates Microsoft Azure BlobStore protocol
    /// -  GCS: Indicates Google Cloud Storage protocol
    pub protocols: Vec<String>,
}

/// Name of the BucketClaim that resulted in the creation of this Bucket
/// In case the Bucket object was created manually, then this should refer
/// to the BucketClaim with which this Bucket should be bound
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BucketBucketClaim {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BucketStatus {
    /// BucketID is the unique id of the bucket in the OSP. This field will be
    /// populated by COSI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketID")]
    pub bucket_id: Option<String>,
    /// BucketReady is a boolean condition to reflect the successful creation
    /// of a bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketReady")]
    pub bucket_ready: Option<bool>,
}

