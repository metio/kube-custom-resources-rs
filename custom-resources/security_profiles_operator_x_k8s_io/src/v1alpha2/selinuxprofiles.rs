// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/kubernetes-sigs/security-profiles-operator/security-profiles-operator.x-k8s.io/v1alpha2/selinuxprofiles.yaml
// kopium version: 0.22.3

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// SelinuxProfileSpec defines the desired state of SelinuxProfile.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "security-profiles-operator.x-k8s.io", version = "v1alpha2", kind = "SelinuxProfile", plural = "selinuxprofiles")]
#[kube(status = "SelinuxProfileStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct SelinuxProfileSpec {
    /// Defines the allow policy for the profile
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<BTreeMap<String, BTreeMap<String, Vec<String>>>>,
    /// Whether the profile is disabled and should be skipped during reconciliation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// A SELinuxProfile or set of profiles that this inherits from.
    /// Note that they need to be in the same namespace.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inherit: Option<Vec<SelinuxProfileInherit>>,
    /// Permissive, when true will cause the SELinux profile to only
    /// log violations instead of enforcing them.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissive: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SelinuxProfileInherit {
    /// The Kind of the policy that this inherits from.
    /// Can be a SelinuxProfile object Or "System" if an already
    /// installed policy will be used.
    /// The allowed "System" policies are available in the
    /// SecurityProfilesOperatorDaemon instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<SelinuxProfileInheritKind>,
    /// The name of the policy that this inherits from.
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SelinuxProfileInheritKind {
    System,
    SelinuxProfile,
}

/// SelinuxProfileStatus defines the observed state of SelinuxProfile.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SelinuxProfileStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activeWorkloads")]
    pub active_workloads: Option<Vec<String>>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ProfileState defines the state that the profile is in. A profile in this context
    /// refers to a SeccompProfile or a SELinux profile, the states are shared between them
    /// as well as the management API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Represents the string that the SelinuxProfile object can be
    /// referenced as in a pod seLinuxOptions section.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub usage: Option<String>,
}

