// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/kubernetes-sigs/security-profiles-operator/security-profiles-operator.x-k8s.io/v1alpha1/apparmorprofiles.yaml
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// AppArmorProfileSpec defines the desired state of AppArmorProfile
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "security-profiles-operator.x-k8s.io", version = "v1alpha1", kind = "AppArmorProfile", plural = "apparmorprofiles")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct AppArmorProfileSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "abstract")]
    pub r#abstract: Option<AppArmorProfileAbstract>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AppArmorProfileAbstract {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capability: Option<AppArmorProfileAbstractCapability>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub executable: Option<AppArmorProfileAbstractExecutable>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filesystem: Option<AppArmorProfileAbstractFilesystem>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<AppArmorProfileAbstractNetwork>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AppArmorProfileAbstractCapability {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedCapabilities")]
    pub allowed_capabilities: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AppArmorProfileAbstractExecutable {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedExecutables")]
    pub allowed_executables: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedLibraries")]
    pub allowed_libraries: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AppArmorProfileAbstractFilesystem {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyPaths")]
    pub read_only_paths: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readWritePaths")]
    pub read_write_paths: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeOnlyPaths")]
    pub write_only_paths: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AppArmorProfileAbstractNetwork {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRaw")]
    pub allow_raw: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedProtocols")]
    pub allowed_protocols: Option<AppArmorProfileAbstractNetworkAllowedProtocols>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AppArmorProfileAbstractNetworkAllowedProtocols {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowTcp")]
    pub allow_tcp: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowUdp")]
    pub allow_udp: Option<bool>,
}

/// AppArmorProfileStatus defines the observed state of AppArmorProfile
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AppArmorProfileStatus {
}

