// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/metallb/metallb-operator/frrk8s.metallb.io/v1beta1/frrconfigurations.yaml
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// FRRConfigurationSpec defines the desired state of FRRConfiguration.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "frrk8s.metallb.io", version = "v1beta1", kind = "FRRConfiguration", plural = "frrconfigurations")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct FRRConfigurationSpec {
    /// BGP is the configuration related to the BGP protocol.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bgp: Option<FRRConfigurationBgp>,
    /// NodeSelector limits the nodes that will attempt to apply this config.
    /// When specified, the configuration will be considered only on nodes
    /// whose labels match the specified selectors.
    /// When it is not specified all nodes will attempt to apply this config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<FRRConfigurationNodeSelector>,
    /// Raw is a snippet of raw frr configuration that gets appended to the
    /// one rendered translating the type safe API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub raw: Option<FRRConfigurationRaw>,
}

/// BGP is the configuration related to the BGP protocol.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FRRConfigurationBgp {
    /// BFDProfiles is the list of bfd profiles to be used when configuring the neighbors.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bfdProfiles")]
    pub bfd_profiles: Option<Vec<FRRConfigurationBgpBfdProfiles>>,
    /// Routers is the list of routers we want FRR to configure (one per VRF).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub routers: Option<Vec<FRRConfigurationBgpRouters>>,
}

/// BFDProfile is the configuration related to the BFD protocol associated
/// to a BGP session.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FRRConfigurationBgpBfdProfiles {
    /// Configures the detection multiplier to determine
    /// packet loss. The remote transmission interval will be multiplied
    /// by this value to determine the connection loss detection timer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "detectMultiplier")]
    pub detect_multiplier: Option<i32>,
    /// Configures the minimal echo receive transmission
    /// interval that this system is capable of handling in milliseconds.
    /// Defaults to 50ms
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "echoInterval")]
    pub echo_interval: Option<i32>,
    /// Enables or disables the echo transmission mode.
    /// This mode is disabled by default, and not supported on multi
    /// hops setups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "echoMode")]
    pub echo_mode: Option<bool>,
    /// For multi hop sessions only: configure the minimum
    /// expected TTL for an incoming BFD control packet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumTtl")]
    pub minimum_ttl: Option<i32>,
    /// The name of the BFD Profile to be referenced in other parts
    /// of the configuration.
    pub name: String,
    /// Mark session as passive: a passive session will not
    /// attempt to start the connection and will wait for control packets
    /// from peer before it begins replying.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passiveMode")]
    pub passive_mode: Option<bool>,
    /// The minimum interval that this system is capable of
    /// receiving control packets in milliseconds.
    /// Defaults to 300ms.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "receiveInterval")]
    pub receive_interval: Option<i32>,
    /// The minimum transmission interval (less jitter)
    /// that this system wants to use to send BFD control packets in
    /// milliseconds. Defaults to 300ms
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transmitInterval")]
    pub transmit_interval: Option<i32>,
}

/// Router represent a neighbor router we want FRR to connect to.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FRRConfigurationBgpRouters {
    /// ASN is the AS number to use for the local end of the session.
    pub asn: i32,
    /// ID is the BGP router ID
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Imports is the list of imported VRFs we want for this router / vrf.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub imports: Option<Vec<FRRConfigurationBgpRoutersImports>>,
    /// Neighbors is the list of neighbors we want to establish BGP sessions with.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub neighbors: Option<Vec<FRRConfigurationBgpRoutersNeighbors>>,
    /// Prefixes is the list of prefixes we want to advertise from this router instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefixes: Option<Vec<String>>,
    /// VRF is the host vrf used to establish sessions from this router.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vrf: Option<String>,
}

/// Import represents the possible imported VRFs to a given router.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FRRConfigurationBgpRoutersImports {
    /// Vrf is the vrf we want to import from
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vrf: Option<String>,
}

/// Neighbor represents a BGP Neighbor we want FRR to connect to.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FRRConfigurationBgpRoutersNeighbors {
    /// Address is the IP address to establish the session with.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// ASN is the AS number to use for the local end of the session.
    /// ASN and DynamicASN are mutually exclusive and one of them must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub asn: Option<i32>,
    /// BFDProfile is the name of the BFD Profile to be used for the BFD session associated
    /// to the BGP session. If not set, the BFD session won't be set up.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bfdProfile")]
    pub bfd_profile: Option<String>,
    /// Requested BGP connect time, controls how long BGP waits between connection attempts to a neighbor.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectTime")]
    pub connect_time: Option<String>,
    /// To set if we want to disable MP BGP that will separate IPv4 and IPv6 route exchanges into distinct BGP sessions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableMP")]
    pub disable_mp: Option<bool>,
    /// DynamicASN detects the AS number to use for the local end of the session
    /// without explicitly setting it via the ASN field. Limited to:
    /// internal - if the neighbor's ASN is different than the router's the connection is denied.
    /// external - if the neighbor's ASN is the same as the router's the connection is denied.
    /// ASN and DynamicASN are mutually exclusive and one of them must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicASN")]
    pub dynamic_asn: Option<FRRConfigurationBgpRoutersNeighborsDynamicAsn>,
    /// EBGPMultiHop indicates if the BGPPeer is multi-hops away.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebgpMultiHop")]
    pub ebgp_multi_hop: Option<bool>,
    /// EnableGracefulRestart allows BGP peer to continue to forward data packets along
    /// known routes while the routing protocol information is being restored. If
    /// the session is already established, the configuration will have effect
    /// after reconnecting to the peer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableGracefulRestart")]
    pub enable_graceful_restart: Option<bool>,
    /// HoldTime is the requested BGP hold time, per RFC4271.
    /// Defaults to 180s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "holdTime")]
    pub hold_time: Option<String>,
    /// Interface is the node interface over which the unnumbered BGP peering will
    /// be established. No API validation takes place as that string value
    /// represents an interface name on the host and if user provides an invalid
    /// value, only the actual BGP session will not be established.
    /// Address and Interface are mutually exclusive and one of them must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interface: Option<String>,
    /// KeepaliveTime is the requested BGP keepalive time, per RFC4271.
    /// Defaults to 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepaliveTime")]
    pub keepalive_time: Option<String>,
    /// Password to be used for establishing the BGP session.
    /// Password and PasswordSecret are mutually exclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// PasswordSecret is name of the authentication secret for the neighbor.
    /// the secret must be of type "kubernetes.io/basic-auth", and created in the
    /// same namespace as the frr-k8s daemon. The password is stored in the
    /// secret as the key "password".
    /// Password and PasswordSecret are mutually exclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecret")]
    pub password_secret: Option<FRRConfigurationBgpRoutersNeighborsPasswordSecret>,
    /// Port is the port to dial when establishing the session.
    /// Defaults to 179.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// SourceAddress is the IPv4 or IPv6 source address to use for the BGP
    /// session to this neighbour, may be specified as either an IP address
    /// directly or as an interface name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sourceaddress: Option<String>,
    /// ToAdvertise represents the list of prefixes to advertise to the given neighbor
    /// and the associated properties.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toAdvertise")]
    pub to_advertise: Option<FRRConfigurationBgpRoutersNeighborsToAdvertise>,
    /// ToReceive represents the list of prefixes to receive from the given neighbor.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toReceive")]
    pub to_receive: Option<FRRConfigurationBgpRoutersNeighborsToReceive>,
}

/// Neighbor represents a BGP Neighbor we want FRR to connect to.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum FRRConfigurationBgpRoutersNeighborsDynamicAsn {
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "external")]
    External,
}

/// PasswordSecret is name of the authentication secret for the neighbor.
/// the secret must be of type "kubernetes.io/basic-auth", and created in the
/// same namespace as the frr-k8s daemon. The password is stored in the
/// secret as the key "password".
/// Password and PasswordSecret are mutually exclusive.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FRRConfigurationBgpRoutersNeighborsPasswordSecret {
    /// name is unique within a namespace to reference a secret resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// namespace defines the space within which the secret name must be unique.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// ToAdvertise represents the list of prefixes to advertise to the given neighbor
/// and the associated properties.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FRRConfigurationBgpRoutersNeighborsToAdvertise {
    /// Allowed is is the list of prefixes allowed to be propagated to
    /// this neighbor. They must match the prefixes defined in the router.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allowed: Option<FRRConfigurationBgpRoutersNeighborsToAdvertiseAllowed>,
    /// PrefixesWithCommunity is a list of prefixes that are associated to a
    /// bgp community when being advertised. The prefixes associated to a given local pref
    /// must be in the prefixes allowed to be advertised.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withCommunity")]
    pub with_community: Option<Vec<FRRConfigurationBgpRoutersNeighborsToAdvertiseWithCommunity>>,
    /// PrefixesWithLocalPref is a list of prefixes that are associated to a local
    /// preference when being advertised. The prefixes associated to a given local pref
    /// must be in the prefixes allowed to be advertised.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withLocalPref")]
    pub with_local_pref: Option<Vec<FRRConfigurationBgpRoutersNeighborsToAdvertiseWithLocalPref>>,
}

/// Allowed is is the list of prefixes allowed to be propagated to
/// this neighbor. They must match the prefixes defined in the router.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FRRConfigurationBgpRoutersNeighborsToAdvertiseAllowed {
    /// Mode is the mode to use when handling the prefixes.
    /// When set to "filtered", only the prefixes in the given list will be allowed.
    /// When set to "all", all the prefixes configured on the router will be allowed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<FRRConfigurationBgpRoutersNeighborsToAdvertiseAllowedMode>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefixes: Option<Vec<String>>,
}

/// Allowed is is the list of prefixes allowed to be propagated to
/// this neighbor. They must match the prefixes defined in the router.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum FRRConfigurationBgpRoutersNeighborsToAdvertiseAllowedMode {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "filtered")]
    Filtered,
}

/// CommunityPrefixes is a list of prefixes associated to a community.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FRRConfigurationBgpRoutersNeighborsToAdvertiseWithCommunity {
    /// Community is the community associated to the prefixes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub community: Option<String>,
    /// Prefixes is the list of prefixes associated to the community.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefixes: Option<Vec<String>>,
}

/// LocalPrefPrefixes is a list of prefixes associated to a local preference.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FRRConfigurationBgpRoutersNeighborsToAdvertiseWithLocalPref {
    /// LocalPref is the local preference associated to the prefixes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localPref")]
    pub local_pref: Option<i32>,
    /// Prefixes is the list of prefixes associated to the local preference.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefixes: Option<Vec<String>>,
}

/// ToReceive represents the list of prefixes to receive from the given neighbor.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FRRConfigurationBgpRoutersNeighborsToReceive {
    /// Allowed is the list of prefixes allowed to be received from
    /// this neighbor.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allowed: Option<FRRConfigurationBgpRoutersNeighborsToReceiveAllowed>,
}

/// Allowed is the list of prefixes allowed to be received from
/// this neighbor.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FRRConfigurationBgpRoutersNeighborsToReceiveAllowed {
    /// Mode is the mode to use when handling the prefixes.
    /// When set to "filtered", only the prefixes in the given list will be allowed.
    /// When set to "all", all the prefixes configured on the router will be allowed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<FRRConfigurationBgpRoutersNeighborsToReceiveAllowedMode>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefixes: Option<Vec<FRRConfigurationBgpRoutersNeighborsToReceiveAllowedPrefixes>>,
}

/// Allowed is the list of prefixes allowed to be received from
/// this neighbor.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum FRRConfigurationBgpRoutersNeighborsToReceiveAllowedMode {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "filtered")]
    Filtered,
}

/// PrefixSelector is a filter of prefixes to receive.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FRRConfigurationBgpRoutersNeighborsToReceiveAllowedPrefixes {
    /// The prefix length modifier. This selector accepts any matching prefix with length
    /// greater or equal the given value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ge: Option<i32>,
    /// The prefix length modifier. This selector accepts any matching prefix with length
    /// less or equal the given value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub le: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
}

/// NodeSelector limits the nodes that will attempt to apply this config.
/// When specified, the configuration will be considered only on nodes
/// whose labels match the specified selectors.
/// When it is not specified all nodes will attempt to apply this config.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FRRConfigurationNodeSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<FRRConfigurationNodeSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FRRConfigurationNodeSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Raw is a snippet of raw frr configuration that gets appended to the
/// one rendered translating the type safe API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FRRConfigurationRaw {
    /// Priority is the order with this configuration is appended to the
    /// bottom of the rendered configuration. A higher value means the
    /// raw config is appended later in the configuration file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
    /// Config is a raw FRR configuration to be appended to the configuration
    /// rendered via the k8s api.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawConfig")]
    pub raw_config: Option<String>,
}

/// FRRConfigurationStatus defines the observed state of FRRConfiguration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FRRConfigurationStatus {
}

