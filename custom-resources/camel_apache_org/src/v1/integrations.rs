// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/apache/camel-k/camel.apache.org/v1/integrations.yaml
// kopium version: 0.22.3

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use k8s_openapi::api::core::v1::ObjectReference;
}
use self::prelude::*;

/// the desired Integration specification
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "camel.apache.org", version = "v1", kind = "Integration", plural = "integrations")]
#[kube(namespaced)]
#[kube(status = "IntegrationStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct IntegrationSpec {
    /// Deprecated:
    /// Use camel trait (camel.properties) to manage properties
    /// Use mount trait (mount.configs) to manage configs
    /// Use mount trait (mount.resources) to manage resources
    /// Use mount trait (mount.volumes) to manage volumes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<Vec<IntegrationConfiguration>>,
    /// the list of Camel or Maven dependencies required by the Integration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dependencies: Option<Vec<String>>,
    /// a source in YAML DSL language which contain the routes to run
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flows: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// the configuration of the project to build on Git
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git: Option<IntegrationGit>,
    /// the reference of the `IntegrationKit` which is used for this Integration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationKit")]
    pub integration_kit: Option<ObjectReference>,
    /// the profile needed to run this Integration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profile: Option<String>,
    /// the number of `Pods` needed for the running Integration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i32>,
    /// additional Maven repositories to be used
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repositories: Option<Vec<String>>,
    /// custom SA to use for the Integration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountName")]
    pub service_account_name: Option<String>,
    /// the sources which contain the Camel routes to run
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<IntegrationSources>>,
    /// Pod template customization
    /// Deprecated:
    /// Use container, init-containers or owner traits instead
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<IntegrationTemplate>,
    /// the traits needed to run this Integration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub traits: Option<IntegrationTraits>,
}

/// ConfigurationSpec represents a generic configuration specification.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationConfiguration {
    /// represents the type of configuration, ie: property, configmap, secret, ...
    #[serde(rename = "type")]
    pub r#type: String,
    /// the value to assign to the configuration (syntax may vary depending on the `Type`)
    pub value: String,
}

/// the configuration of the project to build on Git
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationGit {
    /// the git branch to check out
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub branch: Option<String>,
    /// the git commit (full SHA) to check out
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commit: Option<String>,
    /// the Kubernetes secret where token is stored
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// the git tag to check out
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// the URL of the project
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// the reference of the `IntegrationKit` which is used for this Integration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationIntegrationKit {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// SourceSpec defines the configuration for one or more routes to be executed in a certain Camel DSL language.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationSources {
    /// if the content is compressed (base64 encrypted)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression: Option<bool>,
    /// the source code (plain text)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// the confimap key holding the source content
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentKey")]
    pub content_key: Option<String>,
    /// the confimap reference holding the source content
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentRef")]
    pub content_ref: Option<String>,
    /// the content type (tipically text or binary)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    /// True if the spec is generated from a Kamelet
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "from-kamelet")]
    pub from_kamelet: Option<bool>,
    /// Interceptors are optional identifiers the org.apache.camel.k.RoutesLoader
    /// uses to pre/post process sources
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interceptors: Option<Vec<String>>,
    /// specify which is the language (Camel DSL) used to interpret this source code
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    /// Loader is an optional id of the org.apache.camel.k.RoutesLoader that will
    /// interpret this source at runtime
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub loader: Option<String>,
    /// the name of the specification
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// the path where the file is stored
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// List of property names defined in the source (e.g. if type is "template")
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "property-names")]
    pub property_names: Option<Vec<String>>,
    /// the source code (binary)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawContent")]
    pub raw_content: Option<String>,
    /// Type defines the kind of source described by this object
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Pod template customization
/// Deprecated:
/// Use container, init-containers or owner traits instead
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplate {
    /// the specification
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<IntegrationTemplateSpec>,
}

/// the specification
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpec {
    /// ActiveDeadlineSeconds
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activeDeadlineSeconds")]
    pub active_deadline_seconds: Option<i64>,
    /// AutomountServiceAccountToken
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "automountServiceAccountToken")]
    pub automount_service_account_token: Option<bool>,
    /// Containers
    pub containers: Vec<IntegrationTemplateSpecContainers>,
    /// DNSPolicy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsPolicy")]
    pub dns_policy: Option<String>,
    /// EphemeralContainers
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ephemeralContainers")]
    pub ephemeral_containers: Option<Vec<IntegrationTemplateSpecEphemeralContainers>>,
    /// InitContainers
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initContainers")]
    pub init_containers: Option<Vec<IntegrationTemplateSpecInitContainers>>,
    /// NodeSelector
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// RestartPolicy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restartPolicy")]
    pub restart_policy: Option<String>,
    /// PodSecurityContext
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<IntegrationTemplateSpecSecurityContext>,
    /// TerminationGracePeriodSeconds
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// TopologySpreadConstraints
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologySpreadConstraints")]
    pub topology_spread_constraints: Option<Vec<IntegrationTemplateSpecTopologySpreadConstraints>>,
    /// Volumes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<IntegrationTemplateSpecVolumes>>,
}

/// A single application container that you want to run within a pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainers {
    /// Arguments to the entrypoint.
    /// The container image's CMD is used if this is not provided.
    /// Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
    /// cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
    /// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
    /// produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
    /// of whether the variable exists or not. Cannot be updated.
    /// More info: <https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Entrypoint array. Not executed within a shell.
    /// The container image's ENTRYPOINT is used if this is not provided.
    /// Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
    /// cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
    /// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
    /// produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
    /// of whether the variable exists or not. Cannot be updated.
    /// More info: <https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// List of environment variables to set in the container.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<IntegrationTemplateSpecContainersEnv>>,
    /// List of sources to populate environment variables in the container.
    /// The keys defined within a source must be a C_IDENTIFIER. All invalid keys
    /// will be reported as an event when the container is starting. When a key exists in multiple
    /// sources, the value associated with the last source will take precedence.
    /// Values defined by an Env with a duplicate key will take precedence.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envFrom")]
    pub env_from: Option<Vec<IntegrationTemplateSpecContainersEnvFrom>>,
    /// Container image name.
    /// More info: <https://kubernetes.io/docs/concepts/containers/images>
    /// This field is optional to allow higher level config management to default or override
    /// container images in workload controllers like Deployments and StatefulSets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// Image pull policy.
    /// One of Always, Never, IfNotPresent.
    /// Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
    /// Cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/containers/images#updating-images>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    /// Actions that the management system should take in response to container lifecycle events.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lifecycle: Option<IntegrationTemplateSpecContainersLifecycle>,
    /// Periodic probe of container liveness.
    /// Container will be restarted if the probe fails.
    /// Cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<IntegrationTemplateSpecContainersLivenessProbe>,
    /// Name of the container specified as a DNS_LABEL.
    /// Each container in a pod must have a unique name (DNS_LABEL).
    /// Cannot be updated.
    pub name: String,
    /// List of ports to expose from the container. Not specifying a port here
    /// DOES NOT prevent that port from being exposed. Any port which is
    /// listening on the default "0.0.0.0" address inside a container will be
    /// accessible from the network.
    /// Modifying this array with strategic merge patch may corrupt the data.
    /// For more information See <https://github.com/kubernetes/kubernetes/issues/108255.>
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<IntegrationTemplateSpecContainersPorts>>,
    /// Periodic probe of container service readiness.
    /// Container will be removed from service endpoints if the probe fails.
    /// Cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<IntegrationTemplateSpecContainersReadinessProbe>,
    /// Resources resize policy for the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resizePolicy")]
    pub resize_policy: Option<Vec<IntegrationTemplateSpecContainersResizePolicy>>,
    /// Compute Resources required by this container.
    /// Cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<IntegrationTemplateSpecContainersResources>,
    /// RestartPolicy defines the restart behavior of individual containers in a pod.
    /// This field may only be set for init containers, and the only allowed value is "Always".
    /// For non-init containers or when this field is not specified,
    /// the restart behavior is defined by the Pod's restart policy and the container type.
    /// Setting the RestartPolicy as "Always" for the init container will have the following effect:
    /// this init container will be continually restarted on
    /// exit until all regular containers have terminated. Once all regular
    /// containers have completed, all init containers with restartPolicy "Always"
    /// will be shut down. This lifecycle differs from normal init containers and
    /// is often referred to as a "sidecar" container. Although this init
    /// container still starts in the init container sequence, it does not wait
    /// for the container to complete before proceeding to the next init
    /// container. Instead, the next init container starts immediately after this
    /// init container is started, or after any startupProbe has successfully
    /// completed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restartPolicy")]
    pub restart_policy: Option<String>,
    /// SecurityContext defines the security options the container should be run with.
    /// If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
    /// More info: <https://kubernetes.io/docs/tasks/configure-pod-container/security-context/>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<IntegrationTemplateSpecContainersSecurityContext>,
    /// StartupProbe indicates that the Pod has successfully initialized.
    /// If specified, no other probes are executed until this completes successfully.
    /// If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
    /// This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
    /// when it might take a long time to load data or warm a cache, than during steady-state operation.
    /// This cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbe")]
    pub startup_probe: Option<IntegrationTemplateSpecContainersStartupProbe>,
    /// Whether this container should allocate a buffer for stdin in the container runtime. If this
    /// is not set, reads from stdin in the container will always result in EOF.
    /// Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stdin: Option<bool>,
    /// Whether the container runtime should close the stdin channel after it has been opened by
    /// a single attach. When stdin is true the stdin stream will remain open across multiple attach
    /// sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
    /// first client attaches to stdin, and then remains open and accepts data until the client disconnects,
    /// at which time stdin is closed and remains closed until the container is restarted. If this
    /// flag is false, a container processes that reads from stdin will never receive an EOF.
    /// Default is false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stdinOnce")]
    pub stdin_once: Option<bool>,
    /// Optional: Path at which the file to which the container's termination message
    /// will be written is mounted into the container's filesystem.
    /// Message written is intended to be brief final status, such as an assertion failure message.
    /// Will be truncated by the node if greater than 4096 bytes. The total message length across
    /// all containers will be limited to 12kb.
    /// Defaults to /dev/termination-log.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationMessagePath")]
    pub termination_message_path: Option<String>,
    /// Indicate how the termination message should be populated. File will use the contents of
    /// terminationMessagePath to populate the container status message on both success and failure.
    /// FallbackToLogsOnError will use the last chunk of container log output if the termination
    /// message file is empty and the container exited with an error.
    /// The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
    /// Defaults to File.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationMessagePolicy")]
    pub termination_message_policy: Option<String>,
    /// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
    /// Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tty: Option<bool>,
    /// volumeDevices is the list of block devices to be used by the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeDevices")]
    pub volume_devices: Option<Vec<IntegrationTemplateSpecContainersVolumeDevices>>,
    /// Pod volumes to mount into the container's filesystem.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<IntegrationTemplateSpecContainersVolumeMounts>>,
    /// Container's working directory.
    /// If not specified, the container runtime's default will be used, which
    /// might be configured in the container image.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workingDir")]
    pub working_dir: Option<String>,
}

/// EnvVar represents an environment variable present in a Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersEnv {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    /// Variable references $(VAR_NAME) are expanded
    /// using the previously defined environment variables in the container and
    /// any service environment variables. If a variable cannot be resolved,
    /// the reference in the input string will be unchanged. Double $$ are reduced
    /// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
    /// "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
    /// Escaped references will never be expanded, regardless of whether the variable
    /// exists or not.
    /// Defaults to "".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// Source for the environment variable's value. Cannot be used if value is not empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<IntegrationTemplateSpecContainersEnvValueFrom>,
}

/// Source for the environment variable's value. Cannot be used if value is not empty.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersEnvValueFrom {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<IntegrationTemplateSpecContainersEnvValueFromConfigMapKeyRef>,
    /// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
    /// spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<IntegrationTemplateSpecContainersEnvValueFromFieldRef>,
    /// Selects a resource of the container: only resources limits and requests
    /// (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<IntegrationTemplateSpecContainersEnvValueFromResourceFieldRef>,
    /// Selects a key of a secret in the pod's namespace
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<IntegrationTemplateSpecContainersEnvValueFromSecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersEnvValueFromConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
/// spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersEnvValueFromFieldRef {
    /// Version of the schema the FieldPath is written in terms of, defaults to "v1".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Path of the field to select in the specified API version.
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Selects a resource of the container: only resources limits and requests
/// (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersEnvValueFromResourceFieldRef {
    /// Container name: required for volumes, optional for env vars
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    /// Specifies the output format of the exposed resources, defaults to "1"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    /// Required: resource to select
    pub resource: String,
}

/// Selects a key of a secret in the pod's namespace
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersEnvValueFromSecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// EnvFromSource represents the source of a set of ConfigMaps or Secrets
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersEnvFrom {
    /// The ConfigMap to select from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<IntegrationTemplateSpecContainersEnvFromConfigMapRef>,
    /// Optional text to prepend to the name of each environment variable. Must be a C_IDENTIFIER.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The Secret to select from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<IntegrationTemplateSpecContainersEnvFromSecretRef>,
}

/// The ConfigMap to select from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersEnvFromConfigMapRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The Secret to select from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersEnvFromSecretRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Actions that the management system should take in response to container lifecycle events.
/// Cannot be updated.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersLifecycle {
    /// PostStart is called immediately after a container is created. If the handler fails,
    /// the container is terminated and restarted according to its restart policy.
    /// Other management of the container blocks until the hook completes.
    /// More info: <https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postStart")]
    pub post_start: Option<IntegrationTemplateSpecContainersLifecyclePostStart>,
    /// PreStop is called immediately before a container is terminated due to an
    /// API request or management event such as liveness/startup probe failure,
    /// preemption, resource contention, etc. The handler is not called if the
    /// container crashes or exits. The Pod's termination grace period countdown begins before the
    /// PreStop hook is executed. Regardless of the outcome of the handler, the
    /// container will eventually terminate within the Pod's termination grace
    /// period (unless delayed by finalizers). Other management of the container blocks until the hook completes
    /// or until the termination grace period is reached.
    /// More info: <https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preStop")]
    pub pre_stop: Option<IntegrationTemplateSpecContainersLifecyclePreStop>,
    /// StopSignal defines which signal will be sent to a container when it is being stopped.
    /// If not specified, the default is defined by the container runtime in use.
    /// StopSignal can only be set for Pods with a non-empty .spec.os.name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stopSignal")]
    pub stop_signal: Option<String>,
}

/// PostStart is called immediately after a container is created. If the handler fails,
/// the container is terminated and restarted according to its restart policy.
/// Other management of the container blocks until the hook completes.
/// More info: <https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersLifecyclePostStart {
    /// Exec specifies a command to execute in the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<IntegrationTemplateSpecContainersLifecyclePostStartExec>,
    /// HTTPGet specifies an HTTP GET request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<IntegrationTemplateSpecContainersLifecyclePostStartHttpGet>,
    /// Sleep represents a duration that the container should sleep.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sleep: Option<IntegrationTemplateSpecContainersLifecyclePostStartSleep>,
    /// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
    /// for backward compatibility. There is no validation of this field and
    /// lifecycle hooks will fail at runtime when it is specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<IntegrationTemplateSpecContainersLifecyclePostStartTcpSocket>,
}

/// Exec specifies a command to execute in the container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersLifecyclePostStartExec {
    /// Command is the command line to execute inside the container, the working directory for the
    /// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
    /// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
    /// a shell, you need to explicitly call out to that shell.
    /// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// HTTPGet specifies an HTTP GET request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersLifecyclePostStartHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set
    /// "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<IntegrationTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host.
    /// Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders {
    /// The header field name.
    /// This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// Sleep represents a duration that the container should sleep.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersLifecyclePostStartSleep {
    /// Seconds is the number of seconds to sleep.
    pub seconds: i64,
}

/// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
/// for backward compatibility. There is no validation of this field and
/// lifecycle hooks will fail at runtime when it is specified.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersLifecyclePostStartTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// PreStop is called immediately before a container is terminated due to an
/// API request or management event such as liveness/startup probe failure,
/// preemption, resource contention, etc. The handler is not called if the
/// container crashes or exits. The Pod's termination grace period countdown begins before the
/// PreStop hook is executed. Regardless of the outcome of the handler, the
/// container will eventually terminate within the Pod's termination grace
/// period (unless delayed by finalizers). Other management of the container blocks until the hook completes
/// or until the termination grace period is reached.
/// More info: <https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersLifecyclePreStop {
    /// Exec specifies a command to execute in the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<IntegrationTemplateSpecContainersLifecyclePreStopExec>,
    /// HTTPGet specifies an HTTP GET request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<IntegrationTemplateSpecContainersLifecyclePreStopHttpGet>,
    /// Sleep represents a duration that the container should sleep.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sleep: Option<IntegrationTemplateSpecContainersLifecyclePreStopSleep>,
    /// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
    /// for backward compatibility. There is no validation of this field and
    /// lifecycle hooks will fail at runtime when it is specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<IntegrationTemplateSpecContainersLifecyclePreStopTcpSocket>,
}

/// Exec specifies a command to execute in the container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersLifecyclePreStopExec {
    /// Command is the command line to execute inside the container, the working directory for the
    /// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
    /// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
    /// a shell, you need to explicitly call out to that shell.
    /// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// HTTPGet specifies an HTTP GET request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersLifecyclePreStopHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set
    /// "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<IntegrationTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host.
    /// Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders {
    /// The header field name.
    /// This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// Sleep represents a duration that the container should sleep.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersLifecyclePreStopSleep {
    /// Seconds is the number of seconds to sleep.
    pub seconds: i64,
}

/// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
/// for backward compatibility. There is no validation of this field and
/// lifecycle hooks will fail at runtime when it is specified.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersLifecyclePreStopTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// Periodic probe of container liveness.
/// Container will be restarted if the probe fails.
/// Cannot be updated.
/// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersLivenessProbe {
    /// Exec specifies a command to execute in the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<IntegrationTemplateSpecContainersLivenessProbeExec>,
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded.
    /// Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// GRPC specifies a GRPC HealthCheckRequest.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<IntegrationTemplateSpecContainersLivenessProbeGrpc>,
    /// HTTPGet specifies an HTTP GET request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<IntegrationTemplateSpecContainersLivenessProbeHttpGet>,
    /// Number of seconds after the container has started before liveness probes are initiated.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    /// How often (in seconds) to perform the probe.
    /// Default to 10 seconds. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    /// Minimum consecutive successes for the probe to be considered successful after having failed.
    /// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// TCPSocket specifies a connection to a TCP port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<IntegrationTemplateSpecContainersLivenessProbeTcpSocket>,
    /// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
    /// The grace period is the duration in seconds after the processes running in the pod are sent
    /// a termination signal and the time when the processes are forcibly halted with a kill signal.
    /// Set this value longer than the expected cleanup time for your process.
    /// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
    /// value overrides the value provided by the pod spec.
    /// Value must be non-negative integer. The value zero indicates stop immediately via
    /// the kill signal (no opportunity to shut down).
    /// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
    /// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// Number of seconds after which the probe times out.
    /// Defaults to 1 second. Minimum value is 1.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Exec specifies a command to execute in the container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersLivenessProbeExec {
    /// Command is the command line to execute inside the container, the working directory for the
    /// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
    /// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
    /// a shell, you need to explicitly call out to that shell.
    /// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// GRPC specifies a GRPC HealthCheckRequest.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersLivenessProbeGrpc {
    /// Port number of the gRPC service. Number must be in the range 1 to 65535.
    pub port: i32,
    /// Service is the name of the service to place in the gRPC HealthCheckRequest
    /// (see <https://github.com/grpc/grpc/blob/master/doc/health-checking.md).>
    /// 
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

/// HTTPGet specifies an HTTP GET request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersLivenessProbeHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set
    /// "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<IntegrationTemplateSpecContainersLivenessProbeHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host.
    /// Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersLivenessProbeHttpGetHttpHeaders {
    /// The header field name.
    /// This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// TCPSocket specifies a connection to a TCP port.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersLivenessProbeTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// ContainerPort represents a network port in a single container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersPorts {
    /// Number of port to expose on the pod's IP address.
    /// This must be a valid port number, 0 < x < 65536.
    #[serde(rename = "containerPort")]
    pub container_port: i32,
    /// What host IP to bind the external port to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostIP")]
    pub host_ip: Option<String>,
    /// Number of port to expose on the host.
    /// If specified, this must be a valid port number, 0 < x < 65536.
    /// If HostNetwork is specified, this must match ContainerPort.
    /// Most containers do not need this.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPort")]
    pub host_port: Option<i32>,
    /// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
    /// named port in a pod must have a unique name. Name for the port that can be
    /// referred to by services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Protocol for port. Must be UDP, TCP, or SCTP.
    /// Defaults to "TCP".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
}

/// Periodic probe of container service readiness.
/// Container will be removed from service endpoints if the probe fails.
/// Cannot be updated.
/// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersReadinessProbe {
    /// Exec specifies a command to execute in the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<IntegrationTemplateSpecContainersReadinessProbeExec>,
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded.
    /// Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// GRPC specifies a GRPC HealthCheckRequest.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<IntegrationTemplateSpecContainersReadinessProbeGrpc>,
    /// HTTPGet specifies an HTTP GET request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<IntegrationTemplateSpecContainersReadinessProbeHttpGet>,
    /// Number of seconds after the container has started before liveness probes are initiated.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    /// How often (in seconds) to perform the probe.
    /// Default to 10 seconds. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    /// Minimum consecutive successes for the probe to be considered successful after having failed.
    /// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// TCPSocket specifies a connection to a TCP port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<IntegrationTemplateSpecContainersReadinessProbeTcpSocket>,
    /// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
    /// The grace period is the duration in seconds after the processes running in the pod are sent
    /// a termination signal and the time when the processes are forcibly halted with a kill signal.
    /// Set this value longer than the expected cleanup time for your process.
    /// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
    /// value overrides the value provided by the pod spec.
    /// Value must be non-negative integer. The value zero indicates stop immediately via
    /// the kill signal (no opportunity to shut down).
    /// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
    /// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// Number of seconds after which the probe times out.
    /// Defaults to 1 second. Minimum value is 1.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Exec specifies a command to execute in the container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersReadinessProbeExec {
    /// Command is the command line to execute inside the container, the working directory for the
    /// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
    /// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
    /// a shell, you need to explicitly call out to that shell.
    /// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// GRPC specifies a GRPC HealthCheckRequest.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersReadinessProbeGrpc {
    /// Port number of the gRPC service. Number must be in the range 1 to 65535.
    pub port: i32,
    /// Service is the name of the service to place in the gRPC HealthCheckRequest
    /// (see <https://github.com/grpc/grpc/blob/master/doc/health-checking.md).>
    /// 
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

/// HTTPGet specifies an HTTP GET request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersReadinessProbeHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set
    /// "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<IntegrationTemplateSpecContainersReadinessProbeHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host.
    /// Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersReadinessProbeHttpGetHttpHeaders {
    /// The header field name.
    /// This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// TCPSocket specifies a connection to a TCP port.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersReadinessProbeTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// ContainerResizePolicy represents resource resize policy for the container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersResizePolicy {
    /// Name of the resource to which this resource resize policy applies.
    /// Supported values: cpu, memory.
    #[serde(rename = "resourceName")]
    pub resource_name: String,
    /// Restart policy to apply when specified resource is resized.
    /// If not specified, it defaults to NotRequired.
    #[serde(rename = "restartPolicy")]
    pub restart_policy: String,
}

/// Compute Resources required by this container.
/// Cannot be updated.
/// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims,
    /// that are used by this container.
    /// 
    /// This is an alpha field and requires enabling the
    /// DynamicResourceAllocation feature gate.
    /// 
    /// This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<IntegrationTemplateSpecContainersResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of
    /// the Pod where this field is used. It makes that resource available
    /// inside a container.
    pub name: String,
    /// Request is the name chosen for a request in the referenced claim.
    /// If empty, everything from the claim is made available, otherwise
    /// only the result of this request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
}

/// SecurityContext defines the security options the container should be run with.
/// If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
/// More info: <https://kubernetes.io/docs/tasks/configure-pod-container/security-context/>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersSecurityContext {
    /// AllowPrivilegeEscalation controls whether a process can gain more
    /// privileges than its parent process. This bool directly controls if
    /// the no_new_privs flag will be set on the container process.
    /// AllowPrivilegeEscalation is true always when the container is:
    /// 1) run as Privileged
    /// 2) has CAP_SYS_ADMIN
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPrivilegeEscalation")]
    pub allow_privilege_escalation: Option<bool>,
    /// appArmorProfile is the AppArmor options to use by this container. If set, this profile
    /// overrides the pod's appArmorProfile.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appArmorProfile")]
    pub app_armor_profile: Option<IntegrationTemplateSpecContainersSecurityContextAppArmorProfile>,
    /// The capabilities to add/drop when running containers.
    /// Defaults to the default set of capabilities granted by the container runtime.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<IntegrationTemplateSpecContainersSecurityContextCapabilities>,
    /// Run container in privileged mode.
    /// Processes in privileged containers are essentially equivalent to root on the host.
    /// Defaults to false.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    /// procMount denotes the type of proc mount to use for the containers.
    /// The default value is Default which uses the container runtime defaults for
    /// readonly paths and masked paths.
    /// This requires the ProcMountType feature flag to be enabled.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "procMount")]
    pub proc_mount: Option<String>,
    /// Whether this container has a read-only root filesystem.
    /// Default is false.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFilesystem")]
    pub read_only_root_filesystem: Option<bool>,
    /// The GID to run the entrypoint of the container process.
    /// Uses runtime default if unset.
    /// May also be set in PodSecurityContext.  If set in both SecurityContext and
    /// PodSecurityContext, the value specified in SecurityContext takes precedence.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    /// Indicates that the container must run as a non-root user.
    /// If true, the Kubelet will validate the image at runtime to ensure that it
    /// does not run as UID 0 (root) and fail to start the container if it does.
    /// If unset or false, no such validation will be performed.
    /// May also be set in PodSecurityContext.  If set in both SecurityContext and
    /// PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    /// The UID to run the entrypoint of the container process.
    /// Defaults to user specified in image metadata if unspecified.
    /// May also be set in PodSecurityContext.  If set in both SecurityContext and
    /// PodSecurityContext, the value specified in SecurityContext takes precedence.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// The SELinux context to be applied to the container.
    /// If unspecified, the container runtime will allocate a random SELinux context for each
    /// container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
    /// PodSecurityContext, the value specified in SecurityContext takes precedence.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<IntegrationTemplateSpecContainersSecurityContextSeLinuxOptions>,
    /// The seccomp options to use by this container. If seccomp options are
    /// provided at both the pod & container level, the container options
    /// override the pod options.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<IntegrationTemplateSpecContainersSecurityContextSeccompProfile>,
    /// The Windows specific settings applied to all containers.
    /// If unspecified, the options from the PodSecurityContext will be used.
    /// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    /// Note that this field cannot be set when spec.os.name is linux.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<IntegrationTemplateSpecContainersSecurityContextWindowsOptions>,
}

/// appArmorProfile is the AppArmor options to use by this container. If set, this profile
/// overrides the pod's appArmorProfile.
/// Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersSecurityContextAppArmorProfile {
    /// localhostProfile indicates a profile loaded on the node that should be used.
    /// The profile must be preconfigured on the node to work.
    /// Must match the loaded name of the profile.
    /// Must be set if and only if type is "Localhost".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of AppArmor profile will be applied.
    /// Valid options are:
    ///   Localhost - a profile pre-loaded on the node.
    ///   RuntimeDefault - the container runtime's default profile.
    ///   Unconfined - no AppArmor enforcement.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// The capabilities to add/drop when running containers.
/// Defaults to the default set of capabilities granted by the container runtime.
/// Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersSecurityContextCapabilities {
    /// Added capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<String>>,
    /// Removed capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<Vec<String>>,
}

/// The SELinux context to be applied to the container.
/// If unspecified, the container runtime will allocate a random SELinux context for each
/// container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
/// PodSecurityContext, the value specified in SecurityContext takes precedence.
/// Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersSecurityContextSeLinuxOptions {
    /// Level is SELinux level label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// Role is a SELinux role label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Type is a SELinux type label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// User is a SELinux user label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// The seccomp options to use by this container. If seccomp options are
/// provided at both the pod & container level, the container options
/// override the pod options.
/// Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersSecurityContextSeccompProfile {
    /// localhostProfile indicates a profile defined in a file on the node should be used.
    /// The profile must be preconfigured on the node to work.
    /// Must be a descending path, relative to the kubelet's configured seccomp profile location.
    /// Must be set if type is "Localhost". Must NOT be set for any other type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of seccomp profile will be applied.
    /// Valid options are:
    /// 
    /// Localhost - a profile defined in a file on the node should be used.
    /// RuntimeDefault - the container runtime default profile should be used.
    /// Unconfined - no profile should be applied.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// The Windows specific settings applied to all containers.
/// If unspecified, the options from the PodSecurityContext will be used.
/// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
/// Note that this field cannot be set when spec.os.name is linux.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersSecurityContextWindowsOptions {
    /// GMSACredentialSpec is where the GMSA admission webhook
    /// (<https://github.com/kubernetes-sigs/windows-gmsa)> inlines the contents of the
    /// GMSA credential spec named by the GMSACredentialSpecName field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    /// GMSACredentialSpecName is the name of the GMSA credential spec to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    /// HostProcess determines if a container should be run as a 'Host Process' container.
    /// All of a Pod's containers must have the same effective HostProcess value
    /// (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
    /// In addition, if HostProcess is true then HostNetwork must also be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    /// The UserName in Windows to run the entrypoint of the container process.
    /// Defaults to the user specified in image metadata if unspecified.
    /// May also be set in PodSecurityContext. If set in both SecurityContext and
    /// PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

/// StartupProbe indicates that the Pod has successfully initialized.
/// If specified, no other probes are executed until this completes successfully.
/// If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
/// This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
/// when it might take a long time to load data or warm a cache, than during steady-state operation.
/// This cannot be updated.
/// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersStartupProbe {
    /// Exec specifies a command to execute in the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<IntegrationTemplateSpecContainersStartupProbeExec>,
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded.
    /// Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// GRPC specifies a GRPC HealthCheckRequest.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<IntegrationTemplateSpecContainersStartupProbeGrpc>,
    /// HTTPGet specifies an HTTP GET request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<IntegrationTemplateSpecContainersStartupProbeHttpGet>,
    /// Number of seconds after the container has started before liveness probes are initiated.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    /// How often (in seconds) to perform the probe.
    /// Default to 10 seconds. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    /// Minimum consecutive successes for the probe to be considered successful after having failed.
    /// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// TCPSocket specifies a connection to a TCP port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<IntegrationTemplateSpecContainersStartupProbeTcpSocket>,
    /// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
    /// The grace period is the duration in seconds after the processes running in the pod are sent
    /// a termination signal and the time when the processes are forcibly halted with a kill signal.
    /// Set this value longer than the expected cleanup time for your process.
    /// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
    /// value overrides the value provided by the pod spec.
    /// Value must be non-negative integer. The value zero indicates stop immediately via
    /// the kill signal (no opportunity to shut down).
    /// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
    /// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// Number of seconds after which the probe times out.
    /// Defaults to 1 second. Minimum value is 1.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Exec specifies a command to execute in the container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersStartupProbeExec {
    /// Command is the command line to execute inside the container, the working directory for the
    /// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
    /// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
    /// a shell, you need to explicitly call out to that shell.
    /// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// GRPC specifies a GRPC HealthCheckRequest.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersStartupProbeGrpc {
    /// Port number of the gRPC service. Number must be in the range 1 to 65535.
    pub port: i32,
    /// Service is the name of the service to place in the gRPC HealthCheckRequest
    /// (see <https://github.com/grpc/grpc/blob/master/doc/health-checking.md).>
    /// 
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

/// HTTPGet specifies an HTTP GET request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersStartupProbeHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set
    /// "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<IntegrationTemplateSpecContainersStartupProbeHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host.
    /// Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersStartupProbeHttpGetHttpHeaders {
    /// The header field name.
    /// This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// TCPSocket specifies a connection to a TCP port.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersStartupProbeTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// volumeDevice describes a mapping of a raw block device within a container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersVolumeDevices {
    /// devicePath is the path inside of the container that the device will be mapped to.
    #[serde(rename = "devicePath")]
    pub device_path: String,
    /// name must match the name of a persistentVolumeClaim in the pod
    pub name: String,
}

/// VolumeMount describes a mounting of a Volume within a container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecContainersVolumeMounts {
    /// Path within the container at which the volume should be mounted.  Must
    /// not contain ':'.
    #[serde(rename = "mountPath")]
    pub mount_path: String,
    /// mountPropagation determines how mounts are propagated from the host
    /// to container and the other way around.
    /// When not set, MountPropagationNone is used.
    /// This field is beta in 1.10.
    /// When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
    /// (which defaults to None).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPropagation")]
    pub mount_propagation: Option<String>,
    /// This must match the Name of a Volume.
    pub name: String,
    /// Mounted read-only if true, read-write otherwise (false or unspecified).
    /// Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// RecursiveReadOnly specifies whether read-only mounts should be handled
    /// recursively.
    /// 
    /// If ReadOnly is false, this field has no meaning and must be unspecified.
    /// 
    /// If ReadOnly is true, and this field is set to Disabled, the mount is not made
    /// recursively read-only.  If this field is set to IfPossible, the mount is made
    /// recursively read-only, if it is supported by the container runtime.  If this
    /// field is set to Enabled, the mount is made recursively read-only if it is
    /// supported by the container runtime, otherwise the pod will not be started and
    /// an error will be generated to indicate the reason.
    /// 
    /// If this field is set to IfPossible or Enabled, MountPropagation must be set to
    /// None (or be unspecified, which defaults to None).
    /// 
    /// If this field is not specified, it is treated as an equivalent of Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recursiveReadOnly")]
    pub recursive_read_only: Option<String>,
    /// Path within the volume from which the container's volume should be mounted.
    /// Defaults to "" (volume's root).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPath")]
    pub sub_path: Option<String>,
    /// Expanded path within the volume from which the container's volume should be mounted.
    /// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
    /// Defaults to "" (volume's root).
    /// SubPathExpr and SubPath are mutually exclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPathExpr")]
    pub sub_path_expr: Option<String>,
}

/// An EphemeralContainer is a temporary container that you may add to an existing Pod for
/// user-initiated activities such as debugging. Ephemeral containers have no resource or
/// scheduling guarantees, and they will not be restarted when they exit or when a Pod is
/// removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the
/// Pod to exceed its resource allocation.
/// 
/// To add an ephemeral container, use the ephemeralcontainers subresource of an existing
/// Pod. Ephemeral containers may not be removed or restarted.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainers {
    /// Arguments to the entrypoint.
    /// The image's CMD is used if this is not provided.
    /// Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
    /// cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
    /// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
    /// produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
    /// of whether the variable exists or not. Cannot be updated.
    /// More info: <https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Entrypoint array. Not executed within a shell.
    /// The image's ENTRYPOINT is used if this is not provided.
    /// Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
    /// cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
    /// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
    /// produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
    /// of whether the variable exists or not. Cannot be updated.
    /// More info: <https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// List of environment variables to set in the container.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<IntegrationTemplateSpecEphemeralContainersEnv>>,
    /// List of sources to populate environment variables in the container.
    /// The keys defined within a source must be a C_IDENTIFIER. All invalid keys
    /// will be reported as an event when the container is starting. When a key exists in multiple
    /// sources, the value associated with the last source will take precedence.
    /// Values defined by an Env with a duplicate key will take precedence.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envFrom")]
    pub env_from: Option<Vec<IntegrationTemplateSpecEphemeralContainersEnvFrom>>,
    /// Container image name.
    /// More info: <https://kubernetes.io/docs/concepts/containers/images>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// Image pull policy.
    /// One of Always, Never, IfNotPresent.
    /// Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
    /// Cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/containers/images#updating-images>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    /// Lifecycle is not allowed for ephemeral containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lifecycle: Option<IntegrationTemplateSpecEphemeralContainersLifecycle>,
    /// Probes are not allowed for ephemeral containers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<IntegrationTemplateSpecEphemeralContainersLivenessProbe>,
    /// Name of the ephemeral container specified as a DNS_LABEL.
    /// This name must be unique among all containers, init containers and ephemeral containers.
    pub name: String,
    /// Ports are not allowed for ephemeral containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<IntegrationTemplateSpecEphemeralContainersPorts>>,
    /// Probes are not allowed for ephemeral containers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<IntegrationTemplateSpecEphemeralContainersReadinessProbe>,
    /// Resources resize policy for the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resizePolicy")]
    pub resize_policy: Option<Vec<IntegrationTemplateSpecEphemeralContainersResizePolicy>>,
    /// Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources
    /// already allocated to the pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<IntegrationTemplateSpecEphemeralContainersResources>,
    /// Restart policy for the container to manage the restart behavior of each
    /// container within a pod.
    /// This may only be set for init containers. You cannot set this field on
    /// ephemeral containers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restartPolicy")]
    pub restart_policy: Option<String>,
    /// Optional: SecurityContext defines the security options the ephemeral container should be run with.
    /// If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<IntegrationTemplateSpecEphemeralContainersSecurityContext>,
    /// Probes are not allowed for ephemeral containers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbe")]
    pub startup_probe: Option<IntegrationTemplateSpecEphemeralContainersStartupProbe>,
    /// Whether this container should allocate a buffer for stdin in the container runtime. If this
    /// is not set, reads from stdin in the container will always result in EOF.
    /// Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stdin: Option<bool>,
    /// Whether the container runtime should close the stdin channel after it has been opened by
    /// a single attach. When stdin is true the stdin stream will remain open across multiple attach
    /// sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
    /// first client attaches to stdin, and then remains open and accepts data until the client disconnects,
    /// at which time stdin is closed and remains closed until the container is restarted. If this
    /// flag is false, a container processes that reads from stdin will never receive an EOF.
    /// Default is false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stdinOnce")]
    pub stdin_once: Option<bool>,
    /// If set, the name of the container from PodSpec that this ephemeral container targets.
    /// The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container.
    /// If not set then the ephemeral container uses the namespaces configured in the Pod spec.
    /// 
    /// The container runtime must implement support for this feature. If the runtime does not
    /// support namespace targeting then the result of setting this field is undefined.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetContainerName")]
    pub target_container_name: Option<String>,
    /// Optional: Path at which the file to which the container's termination message
    /// will be written is mounted into the container's filesystem.
    /// Message written is intended to be brief final status, such as an assertion failure message.
    /// Will be truncated by the node if greater than 4096 bytes. The total message length across
    /// all containers will be limited to 12kb.
    /// Defaults to /dev/termination-log.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationMessagePath")]
    pub termination_message_path: Option<String>,
    /// Indicate how the termination message should be populated. File will use the contents of
    /// terminationMessagePath to populate the container status message on both success and failure.
    /// FallbackToLogsOnError will use the last chunk of container log output if the termination
    /// message file is empty and the container exited with an error.
    /// The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
    /// Defaults to File.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationMessagePolicy")]
    pub termination_message_policy: Option<String>,
    /// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
    /// Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tty: Option<bool>,
    /// volumeDevices is the list of block devices to be used by the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeDevices")]
    pub volume_devices: Option<Vec<IntegrationTemplateSpecEphemeralContainersVolumeDevices>>,
    /// Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<IntegrationTemplateSpecEphemeralContainersVolumeMounts>>,
    /// Container's working directory.
    /// If not specified, the container runtime's default will be used, which
    /// might be configured in the container image.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workingDir")]
    pub working_dir: Option<String>,
}

/// EnvVar represents an environment variable present in a Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersEnv {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    /// Variable references $(VAR_NAME) are expanded
    /// using the previously defined environment variables in the container and
    /// any service environment variables. If a variable cannot be resolved,
    /// the reference in the input string will be unchanged. Double $$ are reduced
    /// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
    /// "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
    /// Escaped references will never be expanded, regardless of whether the variable
    /// exists or not.
    /// Defaults to "".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// Source for the environment variable's value. Cannot be used if value is not empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<IntegrationTemplateSpecEphemeralContainersEnvValueFrom>,
}

/// Source for the environment variable's value. Cannot be used if value is not empty.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersEnvValueFrom {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<IntegrationTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef>,
    /// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
    /// spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<IntegrationTemplateSpecEphemeralContainersEnvValueFromFieldRef>,
    /// Selects a resource of the container: only resources limits and requests
    /// (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<IntegrationTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef>,
    /// Selects a key of a secret in the pod's namespace
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<IntegrationTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
/// spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersEnvValueFromFieldRef {
    /// Version of the schema the FieldPath is written in terms of, defaults to "v1".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Path of the field to select in the specified API version.
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Selects a resource of the container: only resources limits and requests
/// (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef {
    /// Container name: required for volumes, optional for env vars
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    /// Specifies the output format of the exposed resources, defaults to "1"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    /// Required: resource to select
    pub resource: String,
}

/// Selects a key of a secret in the pod's namespace
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// EnvFromSource represents the source of a set of ConfigMaps or Secrets
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersEnvFrom {
    /// The ConfigMap to select from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<IntegrationTemplateSpecEphemeralContainersEnvFromConfigMapRef>,
    /// Optional text to prepend to the name of each environment variable. Must be a C_IDENTIFIER.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The Secret to select from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<IntegrationTemplateSpecEphemeralContainersEnvFromSecretRef>,
}

/// The ConfigMap to select from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersEnvFromConfigMapRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The Secret to select from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersEnvFromSecretRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Lifecycle is not allowed for ephemeral containers.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersLifecycle {
    /// PostStart is called immediately after a container is created. If the handler fails,
    /// the container is terminated and restarted according to its restart policy.
    /// Other management of the container blocks until the hook completes.
    /// More info: <https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postStart")]
    pub post_start: Option<IntegrationTemplateSpecEphemeralContainersLifecyclePostStart>,
    /// PreStop is called immediately before a container is terminated due to an
    /// API request or management event such as liveness/startup probe failure,
    /// preemption, resource contention, etc. The handler is not called if the
    /// container crashes or exits. The Pod's termination grace period countdown begins before the
    /// PreStop hook is executed. Regardless of the outcome of the handler, the
    /// container will eventually terminate within the Pod's termination grace
    /// period (unless delayed by finalizers). Other management of the container blocks until the hook completes
    /// or until the termination grace period is reached.
    /// More info: <https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preStop")]
    pub pre_stop: Option<IntegrationTemplateSpecEphemeralContainersLifecyclePreStop>,
    /// StopSignal defines which signal will be sent to a container when it is being stopped.
    /// If not specified, the default is defined by the container runtime in use.
    /// StopSignal can only be set for Pods with a non-empty .spec.os.name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stopSignal")]
    pub stop_signal: Option<String>,
}

/// PostStart is called immediately after a container is created. If the handler fails,
/// the container is terminated and restarted according to its restart policy.
/// Other management of the container blocks until the hook completes.
/// More info: <https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersLifecyclePostStart {
    /// Exec specifies a command to execute in the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<IntegrationTemplateSpecEphemeralContainersLifecyclePostStartExec>,
    /// HTTPGet specifies an HTTP GET request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<IntegrationTemplateSpecEphemeralContainersLifecyclePostStartHttpGet>,
    /// Sleep represents a duration that the container should sleep.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sleep: Option<IntegrationTemplateSpecEphemeralContainersLifecyclePostStartSleep>,
    /// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
    /// for backward compatibility. There is no validation of this field and
    /// lifecycle hooks will fail at runtime when it is specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<IntegrationTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket>,
}

/// Exec specifies a command to execute in the container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersLifecyclePostStartExec {
    /// Command is the command line to execute inside the container, the working directory for the
    /// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
    /// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
    /// a shell, you need to explicitly call out to that shell.
    /// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// HTTPGet specifies an HTTP GET request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersLifecyclePostStartHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set
    /// "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<IntegrationTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host.
    /// Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders {
    /// The header field name.
    /// This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// Sleep represents a duration that the container should sleep.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersLifecyclePostStartSleep {
    /// Seconds is the number of seconds to sleep.
    pub seconds: i64,
}

/// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
/// for backward compatibility. There is no validation of this field and
/// lifecycle hooks will fail at runtime when it is specified.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// PreStop is called immediately before a container is terminated due to an
/// API request or management event such as liveness/startup probe failure,
/// preemption, resource contention, etc. The handler is not called if the
/// container crashes or exits. The Pod's termination grace period countdown begins before the
/// PreStop hook is executed. Regardless of the outcome of the handler, the
/// container will eventually terminate within the Pod's termination grace
/// period (unless delayed by finalizers). Other management of the container blocks until the hook completes
/// or until the termination grace period is reached.
/// More info: <https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersLifecyclePreStop {
    /// Exec specifies a command to execute in the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<IntegrationTemplateSpecEphemeralContainersLifecyclePreStopExec>,
    /// HTTPGet specifies an HTTP GET request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<IntegrationTemplateSpecEphemeralContainersLifecyclePreStopHttpGet>,
    /// Sleep represents a duration that the container should sleep.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sleep: Option<IntegrationTemplateSpecEphemeralContainersLifecyclePreStopSleep>,
    /// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
    /// for backward compatibility. There is no validation of this field and
    /// lifecycle hooks will fail at runtime when it is specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<IntegrationTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket>,
}

/// Exec specifies a command to execute in the container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersLifecyclePreStopExec {
    /// Command is the command line to execute inside the container, the working directory for the
    /// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
    /// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
    /// a shell, you need to explicitly call out to that shell.
    /// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// HTTPGet specifies an HTTP GET request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersLifecyclePreStopHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set
    /// "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<IntegrationTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host.
    /// Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders {
    /// The header field name.
    /// This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// Sleep represents a duration that the container should sleep.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersLifecyclePreStopSleep {
    /// Seconds is the number of seconds to sleep.
    pub seconds: i64,
}

/// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
/// for backward compatibility. There is no validation of this field and
/// lifecycle hooks will fail at runtime when it is specified.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// Probes are not allowed for ephemeral containers.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersLivenessProbe {
    /// Exec specifies a command to execute in the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<IntegrationTemplateSpecEphemeralContainersLivenessProbeExec>,
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded.
    /// Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// GRPC specifies a GRPC HealthCheckRequest.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<IntegrationTemplateSpecEphemeralContainersLivenessProbeGrpc>,
    /// HTTPGet specifies an HTTP GET request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<IntegrationTemplateSpecEphemeralContainersLivenessProbeHttpGet>,
    /// Number of seconds after the container has started before liveness probes are initiated.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    /// How often (in seconds) to perform the probe.
    /// Default to 10 seconds. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    /// Minimum consecutive successes for the probe to be considered successful after having failed.
    /// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// TCPSocket specifies a connection to a TCP port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<IntegrationTemplateSpecEphemeralContainersLivenessProbeTcpSocket>,
    /// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
    /// The grace period is the duration in seconds after the processes running in the pod are sent
    /// a termination signal and the time when the processes are forcibly halted with a kill signal.
    /// Set this value longer than the expected cleanup time for your process.
    /// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
    /// value overrides the value provided by the pod spec.
    /// Value must be non-negative integer. The value zero indicates stop immediately via
    /// the kill signal (no opportunity to shut down).
    /// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
    /// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// Number of seconds after which the probe times out.
    /// Defaults to 1 second. Minimum value is 1.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Exec specifies a command to execute in the container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersLivenessProbeExec {
    /// Command is the command line to execute inside the container, the working directory for the
    /// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
    /// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
    /// a shell, you need to explicitly call out to that shell.
    /// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// GRPC specifies a GRPC HealthCheckRequest.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersLivenessProbeGrpc {
    /// Port number of the gRPC service. Number must be in the range 1 to 65535.
    pub port: i32,
    /// Service is the name of the service to place in the gRPC HealthCheckRequest
    /// (see <https://github.com/grpc/grpc/blob/master/doc/health-checking.md).>
    /// 
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

/// HTTPGet specifies an HTTP GET request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersLivenessProbeHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set
    /// "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<IntegrationTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host.
    /// Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders {
    /// The header field name.
    /// This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// TCPSocket specifies a connection to a TCP port.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersLivenessProbeTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// ContainerPort represents a network port in a single container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersPorts {
    /// Number of port to expose on the pod's IP address.
    /// This must be a valid port number, 0 < x < 65536.
    #[serde(rename = "containerPort")]
    pub container_port: i32,
    /// What host IP to bind the external port to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostIP")]
    pub host_ip: Option<String>,
    /// Number of port to expose on the host.
    /// If specified, this must be a valid port number, 0 < x < 65536.
    /// If HostNetwork is specified, this must match ContainerPort.
    /// Most containers do not need this.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPort")]
    pub host_port: Option<i32>,
    /// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
    /// named port in a pod must have a unique name. Name for the port that can be
    /// referred to by services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Protocol for port. Must be UDP, TCP, or SCTP.
    /// Defaults to "TCP".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
}

/// Probes are not allowed for ephemeral containers.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersReadinessProbe {
    /// Exec specifies a command to execute in the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<IntegrationTemplateSpecEphemeralContainersReadinessProbeExec>,
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded.
    /// Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// GRPC specifies a GRPC HealthCheckRequest.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<IntegrationTemplateSpecEphemeralContainersReadinessProbeGrpc>,
    /// HTTPGet specifies an HTTP GET request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<IntegrationTemplateSpecEphemeralContainersReadinessProbeHttpGet>,
    /// Number of seconds after the container has started before liveness probes are initiated.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    /// How often (in seconds) to perform the probe.
    /// Default to 10 seconds. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    /// Minimum consecutive successes for the probe to be considered successful after having failed.
    /// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// TCPSocket specifies a connection to a TCP port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<IntegrationTemplateSpecEphemeralContainersReadinessProbeTcpSocket>,
    /// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
    /// The grace period is the duration in seconds after the processes running in the pod are sent
    /// a termination signal and the time when the processes are forcibly halted with a kill signal.
    /// Set this value longer than the expected cleanup time for your process.
    /// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
    /// value overrides the value provided by the pod spec.
    /// Value must be non-negative integer. The value zero indicates stop immediately via
    /// the kill signal (no opportunity to shut down).
    /// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
    /// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// Number of seconds after which the probe times out.
    /// Defaults to 1 second. Minimum value is 1.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Exec specifies a command to execute in the container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersReadinessProbeExec {
    /// Command is the command line to execute inside the container, the working directory for the
    /// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
    /// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
    /// a shell, you need to explicitly call out to that shell.
    /// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// GRPC specifies a GRPC HealthCheckRequest.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersReadinessProbeGrpc {
    /// Port number of the gRPC service. Number must be in the range 1 to 65535.
    pub port: i32,
    /// Service is the name of the service to place in the gRPC HealthCheckRequest
    /// (see <https://github.com/grpc/grpc/blob/master/doc/health-checking.md).>
    /// 
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

/// HTTPGet specifies an HTTP GET request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersReadinessProbeHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set
    /// "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<IntegrationTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host.
    /// Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders {
    /// The header field name.
    /// This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// TCPSocket specifies a connection to a TCP port.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersReadinessProbeTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// ContainerResizePolicy represents resource resize policy for the container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersResizePolicy {
    /// Name of the resource to which this resource resize policy applies.
    /// Supported values: cpu, memory.
    #[serde(rename = "resourceName")]
    pub resource_name: String,
    /// Restart policy to apply when specified resource is resized.
    /// If not specified, it defaults to NotRequired.
    #[serde(rename = "restartPolicy")]
    pub restart_policy: String,
}

/// Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources
/// already allocated to the pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims,
    /// that are used by this container.
    /// 
    /// This is an alpha field and requires enabling the
    /// DynamicResourceAllocation feature gate.
    /// 
    /// This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<IntegrationTemplateSpecEphemeralContainersResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of
    /// the Pod where this field is used. It makes that resource available
    /// inside a container.
    pub name: String,
    /// Request is the name chosen for a request in the referenced claim.
    /// If empty, everything from the claim is made available, otherwise
    /// only the result of this request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
}

/// Optional: SecurityContext defines the security options the ephemeral container should be run with.
/// If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersSecurityContext {
    /// AllowPrivilegeEscalation controls whether a process can gain more
    /// privileges than its parent process. This bool directly controls if
    /// the no_new_privs flag will be set on the container process.
    /// AllowPrivilegeEscalation is true always when the container is:
    /// 1) run as Privileged
    /// 2) has CAP_SYS_ADMIN
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPrivilegeEscalation")]
    pub allow_privilege_escalation: Option<bool>,
    /// appArmorProfile is the AppArmor options to use by this container. If set, this profile
    /// overrides the pod's appArmorProfile.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appArmorProfile")]
    pub app_armor_profile: Option<IntegrationTemplateSpecEphemeralContainersSecurityContextAppArmorProfile>,
    /// The capabilities to add/drop when running containers.
    /// Defaults to the default set of capabilities granted by the container runtime.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<IntegrationTemplateSpecEphemeralContainersSecurityContextCapabilities>,
    /// Run container in privileged mode.
    /// Processes in privileged containers are essentially equivalent to root on the host.
    /// Defaults to false.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    /// procMount denotes the type of proc mount to use for the containers.
    /// The default value is Default which uses the container runtime defaults for
    /// readonly paths and masked paths.
    /// This requires the ProcMountType feature flag to be enabled.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "procMount")]
    pub proc_mount: Option<String>,
    /// Whether this container has a read-only root filesystem.
    /// Default is false.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFilesystem")]
    pub read_only_root_filesystem: Option<bool>,
    /// The GID to run the entrypoint of the container process.
    /// Uses runtime default if unset.
    /// May also be set in PodSecurityContext.  If set in both SecurityContext and
    /// PodSecurityContext, the value specified in SecurityContext takes precedence.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    /// Indicates that the container must run as a non-root user.
    /// If true, the Kubelet will validate the image at runtime to ensure that it
    /// does not run as UID 0 (root) and fail to start the container if it does.
    /// If unset or false, no such validation will be performed.
    /// May also be set in PodSecurityContext.  If set in both SecurityContext and
    /// PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    /// The UID to run the entrypoint of the container process.
    /// Defaults to user specified in image metadata if unspecified.
    /// May also be set in PodSecurityContext.  If set in both SecurityContext and
    /// PodSecurityContext, the value specified in SecurityContext takes precedence.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// The SELinux context to be applied to the container.
    /// If unspecified, the container runtime will allocate a random SELinux context for each
    /// container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
    /// PodSecurityContext, the value specified in SecurityContext takes precedence.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<IntegrationTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions>,
    /// The seccomp options to use by this container. If seccomp options are
    /// provided at both the pod & container level, the container options
    /// override the pod options.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<IntegrationTemplateSpecEphemeralContainersSecurityContextSeccompProfile>,
    /// The Windows specific settings applied to all containers.
    /// If unspecified, the options from the PodSecurityContext will be used.
    /// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    /// Note that this field cannot be set when spec.os.name is linux.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<IntegrationTemplateSpecEphemeralContainersSecurityContextWindowsOptions>,
}

/// appArmorProfile is the AppArmor options to use by this container. If set, this profile
/// overrides the pod's appArmorProfile.
/// Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersSecurityContextAppArmorProfile {
    /// localhostProfile indicates a profile loaded on the node that should be used.
    /// The profile must be preconfigured on the node to work.
    /// Must match the loaded name of the profile.
    /// Must be set if and only if type is "Localhost".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of AppArmor profile will be applied.
    /// Valid options are:
    ///   Localhost - a profile pre-loaded on the node.
    ///   RuntimeDefault - the container runtime's default profile.
    ///   Unconfined - no AppArmor enforcement.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// The capabilities to add/drop when running containers.
/// Defaults to the default set of capabilities granted by the container runtime.
/// Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersSecurityContextCapabilities {
    /// Added capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<String>>,
    /// Removed capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<Vec<String>>,
}

/// The SELinux context to be applied to the container.
/// If unspecified, the container runtime will allocate a random SELinux context for each
/// container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
/// PodSecurityContext, the value specified in SecurityContext takes precedence.
/// Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions {
    /// Level is SELinux level label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// Role is a SELinux role label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Type is a SELinux type label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// User is a SELinux user label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// The seccomp options to use by this container. If seccomp options are
/// provided at both the pod & container level, the container options
/// override the pod options.
/// Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersSecurityContextSeccompProfile {
    /// localhostProfile indicates a profile defined in a file on the node should be used.
    /// The profile must be preconfigured on the node to work.
    /// Must be a descending path, relative to the kubelet's configured seccomp profile location.
    /// Must be set if type is "Localhost". Must NOT be set for any other type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of seccomp profile will be applied.
    /// Valid options are:
    /// 
    /// Localhost - a profile defined in a file on the node should be used.
    /// RuntimeDefault - the container runtime default profile should be used.
    /// Unconfined - no profile should be applied.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// The Windows specific settings applied to all containers.
/// If unspecified, the options from the PodSecurityContext will be used.
/// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
/// Note that this field cannot be set when spec.os.name is linux.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersSecurityContextWindowsOptions {
    /// GMSACredentialSpec is where the GMSA admission webhook
    /// (<https://github.com/kubernetes-sigs/windows-gmsa)> inlines the contents of the
    /// GMSA credential spec named by the GMSACredentialSpecName field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    /// GMSACredentialSpecName is the name of the GMSA credential spec to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    /// HostProcess determines if a container should be run as a 'Host Process' container.
    /// All of a Pod's containers must have the same effective HostProcess value
    /// (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
    /// In addition, if HostProcess is true then HostNetwork must also be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    /// The UserName in Windows to run the entrypoint of the container process.
    /// Defaults to the user specified in image metadata if unspecified.
    /// May also be set in PodSecurityContext. If set in both SecurityContext and
    /// PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

/// Probes are not allowed for ephemeral containers.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersStartupProbe {
    /// Exec specifies a command to execute in the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<IntegrationTemplateSpecEphemeralContainersStartupProbeExec>,
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded.
    /// Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// GRPC specifies a GRPC HealthCheckRequest.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<IntegrationTemplateSpecEphemeralContainersStartupProbeGrpc>,
    /// HTTPGet specifies an HTTP GET request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<IntegrationTemplateSpecEphemeralContainersStartupProbeHttpGet>,
    /// Number of seconds after the container has started before liveness probes are initiated.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    /// How often (in seconds) to perform the probe.
    /// Default to 10 seconds. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    /// Minimum consecutive successes for the probe to be considered successful after having failed.
    /// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// TCPSocket specifies a connection to a TCP port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<IntegrationTemplateSpecEphemeralContainersStartupProbeTcpSocket>,
    /// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
    /// The grace period is the duration in seconds after the processes running in the pod are sent
    /// a termination signal and the time when the processes are forcibly halted with a kill signal.
    /// Set this value longer than the expected cleanup time for your process.
    /// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
    /// value overrides the value provided by the pod spec.
    /// Value must be non-negative integer. The value zero indicates stop immediately via
    /// the kill signal (no opportunity to shut down).
    /// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
    /// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// Number of seconds after which the probe times out.
    /// Defaults to 1 second. Minimum value is 1.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Exec specifies a command to execute in the container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersStartupProbeExec {
    /// Command is the command line to execute inside the container, the working directory for the
    /// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
    /// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
    /// a shell, you need to explicitly call out to that shell.
    /// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// GRPC specifies a GRPC HealthCheckRequest.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersStartupProbeGrpc {
    /// Port number of the gRPC service. Number must be in the range 1 to 65535.
    pub port: i32,
    /// Service is the name of the service to place in the gRPC HealthCheckRequest
    /// (see <https://github.com/grpc/grpc/blob/master/doc/health-checking.md).>
    /// 
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

/// HTTPGet specifies an HTTP GET request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersStartupProbeHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set
    /// "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<IntegrationTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host.
    /// Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders {
    /// The header field name.
    /// This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// TCPSocket specifies a connection to a TCP port.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersStartupProbeTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// volumeDevice describes a mapping of a raw block device within a container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersVolumeDevices {
    /// devicePath is the path inside of the container that the device will be mapped to.
    #[serde(rename = "devicePath")]
    pub device_path: String,
    /// name must match the name of a persistentVolumeClaim in the pod
    pub name: String,
}

/// VolumeMount describes a mounting of a Volume within a container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecEphemeralContainersVolumeMounts {
    /// Path within the container at which the volume should be mounted.  Must
    /// not contain ':'.
    #[serde(rename = "mountPath")]
    pub mount_path: String,
    /// mountPropagation determines how mounts are propagated from the host
    /// to container and the other way around.
    /// When not set, MountPropagationNone is used.
    /// This field is beta in 1.10.
    /// When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
    /// (which defaults to None).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPropagation")]
    pub mount_propagation: Option<String>,
    /// This must match the Name of a Volume.
    pub name: String,
    /// Mounted read-only if true, read-write otherwise (false or unspecified).
    /// Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// RecursiveReadOnly specifies whether read-only mounts should be handled
    /// recursively.
    /// 
    /// If ReadOnly is false, this field has no meaning and must be unspecified.
    /// 
    /// If ReadOnly is true, and this field is set to Disabled, the mount is not made
    /// recursively read-only.  If this field is set to IfPossible, the mount is made
    /// recursively read-only, if it is supported by the container runtime.  If this
    /// field is set to Enabled, the mount is made recursively read-only if it is
    /// supported by the container runtime, otherwise the pod will not be started and
    /// an error will be generated to indicate the reason.
    /// 
    /// If this field is set to IfPossible or Enabled, MountPropagation must be set to
    /// None (or be unspecified, which defaults to None).
    /// 
    /// If this field is not specified, it is treated as an equivalent of Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recursiveReadOnly")]
    pub recursive_read_only: Option<String>,
    /// Path within the volume from which the container's volume should be mounted.
    /// Defaults to "" (volume's root).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPath")]
    pub sub_path: Option<String>,
    /// Expanded path within the volume from which the container's volume should be mounted.
    /// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
    /// Defaults to "" (volume's root).
    /// SubPathExpr and SubPath are mutually exclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPathExpr")]
    pub sub_path_expr: Option<String>,
}

/// A single application container that you want to run within a pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainers {
    /// Arguments to the entrypoint.
    /// The container image's CMD is used if this is not provided.
    /// Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
    /// cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
    /// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
    /// produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
    /// of whether the variable exists or not. Cannot be updated.
    /// More info: <https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Entrypoint array. Not executed within a shell.
    /// The container image's ENTRYPOINT is used if this is not provided.
    /// Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
    /// cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
    /// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
    /// produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
    /// of whether the variable exists or not. Cannot be updated.
    /// More info: <https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// List of environment variables to set in the container.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<IntegrationTemplateSpecInitContainersEnv>>,
    /// List of sources to populate environment variables in the container.
    /// The keys defined within a source must be a C_IDENTIFIER. All invalid keys
    /// will be reported as an event when the container is starting. When a key exists in multiple
    /// sources, the value associated with the last source will take precedence.
    /// Values defined by an Env with a duplicate key will take precedence.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envFrom")]
    pub env_from: Option<Vec<IntegrationTemplateSpecInitContainersEnvFrom>>,
    /// Container image name.
    /// More info: <https://kubernetes.io/docs/concepts/containers/images>
    /// This field is optional to allow higher level config management to default or override
    /// container images in workload controllers like Deployments and StatefulSets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// Image pull policy.
    /// One of Always, Never, IfNotPresent.
    /// Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
    /// Cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/containers/images#updating-images>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    /// Actions that the management system should take in response to container lifecycle events.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lifecycle: Option<IntegrationTemplateSpecInitContainersLifecycle>,
    /// Periodic probe of container liveness.
    /// Container will be restarted if the probe fails.
    /// Cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<IntegrationTemplateSpecInitContainersLivenessProbe>,
    /// Name of the container specified as a DNS_LABEL.
    /// Each container in a pod must have a unique name (DNS_LABEL).
    /// Cannot be updated.
    pub name: String,
    /// List of ports to expose from the container. Not specifying a port here
    /// DOES NOT prevent that port from being exposed. Any port which is
    /// listening on the default "0.0.0.0" address inside a container will be
    /// accessible from the network.
    /// Modifying this array with strategic merge patch may corrupt the data.
    /// For more information See <https://github.com/kubernetes/kubernetes/issues/108255.>
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<IntegrationTemplateSpecInitContainersPorts>>,
    /// Periodic probe of container service readiness.
    /// Container will be removed from service endpoints if the probe fails.
    /// Cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<IntegrationTemplateSpecInitContainersReadinessProbe>,
    /// Resources resize policy for the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resizePolicy")]
    pub resize_policy: Option<Vec<IntegrationTemplateSpecInitContainersResizePolicy>>,
    /// Compute Resources required by this container.
    /// Cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<IntegrationTemplateSpecInitContainersResources>,
    /// RestartPolicy defines the restart behavior of individual containers in a pod.
    /// This field may only be set for init containers, and the only allowed value is "Always".
    /// For non-init containers or when this field is not specified,
    /// the restart behavior is defined by the Pod's restart policy and the container type.
    /// Setting the RestartPolicy as "Always" for the init container will have the following effect:
    /// this init container will be continually restarted on
    /// exit until all regular containers have terminated. Once all regular
    /// containers have completed, all init containers with restartPolicy "Always"
    /// will be shut down. This lifecycle differs from normal init containers and
    /// is often referred to as a "sidecar" container. Although this init
    /// container still starts in the init container sequence, it does not wait
    /// for the container to complete before proceeding to the next init
    /// container. Instead, the next init container starts immediately after this
    /// init container is started, or after any startupProbe has successfully
    /// completed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restartPolicy")]
    pub restart_policy: Option<String>,
    /// SecurityContext defines the security options the container should be run with.
    /// If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
    /// More info: <https://kubernetes.io/docs/tasks/configure-pod-container/security-context/>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<IntegrationTemplateSpecInitContainersSecurityContext>,
    /// StartupProbe indicates that the Pod has successfully initialized.
    /// If specified, no other probes are executed until this completes successfully.
    /// If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
    /// This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
    /// when it might take a long time to load data or warm a cache, than during steady-state operation.
    /// This cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbe")]
    pub startup_probe: Option<IntegrationTemplateSpecInitContainersStartupProbe>,
    /// Whether this container should allocate a buffer for stdin in the container runtime. If this
    /// is not set, reads from stdin in the container will always result in EOF.
    /// Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stdin: Option<bool>,
    /// Whether the container runtime should close the stdin channel after it has been opened by
    /// a single attach. When stdin is true the stdin stream will remain open across multiple attach
    /// sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
    /// first client attaches to stdin, and then remains open and accepts data until the client disconnects,
    /// at which time stdin is closed and remains closed until the container is restarted. If this
    /// flag is false, a container processes that reads from stdin will never receive an EOF.
    /// Default is false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stdinOnce")]
    pub stdin_once: Option<bool>,
    /// Optional: Path at which the file to which the container's termination message
    /// will be written is mounted into the container's filesystem.
    /// Message written is intended to be brief final status, such as an assertion failure message.
    /// Will be truncated by the node if greater than 4096 bytes. The total message length across
    /// all containers will be limited to 12kb.
    /// Defaults to /dev/termination-log.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationMessagePath")]
    pub termination_message_path: Option<String>,
    /// Indicate how the termination message should be populated. File will use the contents of
    /// terminationMessagePath to populate the container status message on both success and failure.
    /// FallbackToLogsOnError will use the last chunk of container log output if the termination
    /// message file is empty and the container exited with an error.
    /// The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
    /// Defaults to File.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationMessagePolicy")]
    pub termination_message_policy: Option<String>,
    /// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
    /// Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tty: Option<bool>,
    /// volumeDevices is the list of block devices to be used by the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeDevices")]
    pub volume_devices: Option<Vec<IntegrationTemplateSpecInitContainersVolumeDevices>>,
    /// Pod volumes to mount into the container's filesystem.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<IntegrationTemplateSpecInitContainersVolumeMounts>>,
    /// Container's working directory.
    /// If not specified, the container runtime's default will be used, which
    /// might be configured in the container image.
    /// Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workingDir")]
    pub working_dir: Option<String>,
}

/// EnvVar represents an environment variable present in a Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersEnv {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    /// Variable references $(VAR_NAME) are expanded
    /// using the previously defined environment variables in the container and
    /// any service environment variables. If a variable cannot be resolved,
    /// the reference in the input string will be unchanged. Double $$ are reduced
    /// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
    /// "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
    /// Escaped references will never be expanded, regardless of whether the variable
    /// exists or not.
    /// Defaults to "".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// Source for the environment variable's value. Cannot be used if value is not empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<IntegrationTemplateSpecInitContainersEnvValueFrom>,
}

/// Source for the environment variable's value. Cannot be used if value is not empty.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersEnvValueFrom {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<IntegrationTemplateSpecInitContainersEnvValueFromConfigMapKeyRef>,
    /// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
    /// spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<IntegrationTemplateSpecInitContainersEnvValueFromFieldRef>,
    /// Selects a resource of the container: only resources limits and requests
    /// (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<IntegrationTemplateSpecInitContainersEnvValueFromResourceFieldRef>,
    /// Selects a key of a secret in the pod's namespace
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<IntegrationTemplateSpecInitContainersEnvValueFromSecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersEnvValueFromConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
/// spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersEnvValueFromFieldRef {
    /// Version of the schema the FieldPath is written in terms of, defaults to "v1".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Path of the field to select in the specified API version.
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Selects a resource of the container: only resources limits and requests
/// (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersEnvValueFromResourceFieldRef {
    /// Container name: required for volumes, optional for env vars
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    /// Specifies the output format of the exposed resources, defaults to "1"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    /// Required: resource to select
    pub resource: String,
}

/// Selects a key of a secret in the pod's namespace
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersEnvValueFromSecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// EnvFromSource represents the source of a set of ConfigMaps or Secrets
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersEnvFrom {
    /// The ConfigMap to select from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<IntegrationTemplateSpecInitContainersEnvFromConfigMapRef>,
    /// Optional text to prepend to the name of each environment variable. Must be a C_IDENTIFIER.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The Secret to select from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<IntegrationTemplateSpecInitContainersEnvFromSecretRef>,
}

/// The ConfigMap to select from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersEnvFromConfigMapRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The Secret to select from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersEnvFromSecretRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Actions that the management system should take in response to container lifecycle events.
/// Cannot be updated.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersLifecycle {
    /// PostStart is called immediately after a container is created. If the handler fails,
    /// the container is terminated and restarted according to its restart policy.
    /// Other management of the container blocks until the hook completes.
    /// More info: <https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postStart")]
    pub post_start: Option<IntegrationTemplateSpecInitContainersLifecyclePostStart>,
    /// PreStop is called immediately before a container is terminated due to an
    /// API request or management event such as liveness/startup probe failure,
    /// preemption, resource contention, etc. The handler is not called if the
    /// container crashes or exits. The Pod's termination grace period countdown begins before the
    /// PreStop hook is executed. Regardless of the outcome of the handler, the
    /// container will eventually terminate within the Pod's termination grace
    /// period (unless delayed by finalizers). Other management of the container blocks until the hook completes
    /// or until the termination grace period is reached.
    /// More info: <https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preStop")]
    pub pre_stop: Option<IntegrationTemplateSpecInitContainersLifecyclePreStop>,
    /// StopSignal defines which signal will be sent to a container when it is being stopped.
    /// If not specified, the default is defined by the container runtime in use.
    /// StopSignal can only be set for Pods with a non-empty .spec.os.name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stopSignal")]
    pub stop_signal: Option<String>,
}

/// PostStart is called immediately after a container is created. If the handler fails,
/// the container is terminated and restarted according to its restart policy.
/// Other management of the container blocks until the hook completes.
/// More info: <https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersLifecyclePostStart {
    /// Exec specifies a command to execute in the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<IntegrationTemplateSpecInitContainersLifecyclePostStartExec>,
    /// HTTPGet specifies an HTTP GET request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<IntegrationTemplateSpecInitContainersLifecyclePostStartHttpGet>,
    /// Sleep represents a duration that the container should sleep.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sleep: Option<IntegrationTemplateSpecInitContainersLifecyclePostStartSleep>,
    /// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
    /// for backward compatibility. There is no validation of this field and
    /// lifecycle hooks will fail at runtime when it is specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<IntegrationTemplateSpecInitContainersLifecyclePostStartTcpSocket>,
}

/// Exec specifies a command to execute in the container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersLifecyclePostStartExec {
    /// Command is the command line to execute inside the container, the working directory for the
    /// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
    /// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
    /// a shell, you need to explicitly call out to that shell.
    /// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// HTTPGet specifies an HTTP GET request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersLifecyclePostStartHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set
    /// "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<IntegrationTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host.
    /// Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders {
    /// The header field name.
    /// This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// Sleep represents a duration that the container should sleep.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersLifecyclePostStartSleep {
    /// Seconds is the number of seconds to sleep.
    pub seconds: i64,
}

/// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
/// for backward compatibility. There is no validation of this field and
/// lifecycle hooks will fail at runtime when it is specified.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersLifecyclePostStartTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// PreStop is called immediately before a container is terminated due to an
/// API request or management event such as liveness/startup probe failure,
/// preemption, resource contention, etc. The handler is not called if the
/// container crashes or exits. The Pod's termination grace period countdown begins before the
/// PreStop hook is executed. Regardless of the outcome of the handler, the
/// container will eventually terminate within the Pod's termination grace
/// period (unless delayed by finalizers). Other management of the container blocks until the hook completes
/// or until the termination grace period is reached.
/// More info: <https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersLifecyclePreStop {
    /// Exec specifies a command to execute in the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<IntegrationTemplateSpecInitContainersLifecyclePreStopExec>,
    /// HTTPGet specifies an HTTP GET request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<IntegrationTemplateSpecInitContainersLifecyclePreStopHttpGet>,
    /// Sleep represents a duration that the container should sleep.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sleep: Option<IntegrationTemplateSpecInitContainersLifecyclePreStopSleep>,
    /// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
    /// for backward compatibility. There is no validation of this field and
    /// lifecycle hooks will fail at runtime when it is specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<IntegrationTemplateSpecInitContainersLifecyclePreStopTcpSocket>,
}

/// Exec specifies a command to execute in the container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersLifecyclePreStopExec {
    /// Command is the command line to execute inside the container, the working directory for the
    /// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
    /// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
    /// a shell, you need to explicitly call out to that shell.
    /// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// HTTPGet specifies an HTTP GET request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersLifecyclePreStopHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set
    /// "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<IntegrationTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host.
    /// Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders {
    /// The header field name.
    /// This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// Sleep represents a duration that the container should sleep.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersLifecyclePreStopSleep {
    /// Seconds is the number of seconds to sleep.
    pub seconds: i64,
}

/// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
/// for backward compatibility. There is no validation of this field and
/// lifecycle hooks will fail at runtime when it is specified.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersLifecyclePreStopTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// Periodic probe of container liveness.
/// Container will be restarted if the probe fails.
/// Cannot be updated.
/// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersLivenessProbe {
    /// Exec specifies a command to execute in the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<IntegrationTemplateSpecInitContainersLivenessProbeExec>,
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded.
    /// Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// GRPC specifies a GRPC HealthCheckRequest.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<IntegrationTemplateSpecInitContainersLivenessProbeGrpc>,
    /// HTTPGet specifies an HTTP GET request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<IntegrationTemplateSpecInitContainersLivenessProbeHttpGet>,
    /// Number of seconds after the container has started before liveness probes are initiated.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    /// How often (in seconds) to perform the probe.
    /// Default to 10 seconds. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    /// Minimum consecutive successes for the probe to be considered successful after having failed.
    /// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// TCPSocket specifies a connection to a TCP port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<IntegrationTemplateSpecInitContainersLivenessProbeTcpSocket>,
    /// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
    /// The grace period is the duration in seconds after the processes running in the pod are sent
    /// a termination signal and the time when the processes are forcibly halted with a kill signal.
    /// Set this value longer than the expected cleanup time for your process.
    /// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
    /// value overrides the value provided by the pod spec.
    /// Value must be non-negative integer. The value zero indicates stop immediately via
    /// the kill signal (no opportunity to shut down).
    /// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
    /// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// Number of seconds after which the probe times out.
    /// Defaults to 1 second. Minimum value is 1.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Exec specifies a command to execute in the container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersLivenessProbeExec {
    /// Command is the command line to execute inside the container, the working directory for the
    /// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
    /// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
    /// a shell, you need to explicitly call out to that shell.
    /// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// GRPC specifies a GRPC HealthCheckRequest.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersLivenessProbeGrpc {
    /// Port number of the gRPC service. Number must be in the range 1 to 65535.
    pub port: i32,
    /// Service is the name of the service to place in the gRPC HealthCheckRequest
    /// (see <https://github.com/grpc/grpc/blob/master/doc/health-checking.md).>
    /// 
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

/// HTTPGet specifies an HTTP GET request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersLivenessProbeHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set
    /// "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<IntegrationTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host.
    /// Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders {
    /// The header field name.
    /// This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// TCPSocket specifies a connection to a TCP port.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersLivenessProbeTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// ContainerPort represents a network port in a single container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersPorts {
    /// Number of port to expose on the pod's IP address.
    /// This must be a valid port number, 0 < x < 65536.
    #[serde(rename = "containerPort")]
    pub container_port: i32,
    /// What host IP to bind the external port to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostIP")]
    pub host_ip: Option<String>,
    /// Number of port to expose on the host.
    /// If specified, this must be a valid port number, 0 < x < 65536.
    /// If HostNetwork is specified, this must match ContainerPort.
    /// Most containers do not need this.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPort")]
    pub host_port: Option<i32>,
    /// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
    /// named port in a pod must have a unique name. Name for the port that can be
    /// referred to by services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Protocol for port. Must be UDP, TCP, or SCTP.
    /// Defaults to "TCP".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
}

/// Periodic probe of container service readiness.
/// Container will be removed from service endpoints if the probe fails.
/// Cannot be updated.
/// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersReadinessProbe {
    /// Exec specifies a command to execute in the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<IntegrationTemplateSpecInitContainersReadinessProbeExec>,
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded.
    /// Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// GRPC specifies a GRPC HealthCheckRequest.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<IntegrationTemplateSpecInitContainersReadinessProbeGrpc>,
    /// HTTPGet specifies an HTTP GET request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<IntegrationTemplateSpecInitContainersReadinessProbeHttpGet>,
    /// Number of seconds after the container has started before liveness probes are initiated.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    /// How often (in seconds) to perform the probe.
    /// Default to 10 seconds. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    /// Minimum consecutive successes for the probe to be considered successful after having failed.
    /// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// TCPSocket specifies a connection to a TCP port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<IntegrationTemplateSpecInitContainersReadinessProbeTcpSocket>,
    /// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
    /// The grace period is the duration in seconds after the processes running in the pod are sent
    /// a termination signal and the time when the processes are forcibly halted with a kill signal.
    /// Set this value longer than the expected cleanup time for your process.
    /// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
    /// value overrides the value provided by the pod spec.
    /// Value must be non-negative integer. The value zero indicates stop immediately via
    /// the kill signal (no opportunity to shut down).
    /// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
    /// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// Number of seconds after which the probe times out.
    /// Defaults to 1 second. Minimum value is 1.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Exec specifies a command to execute in the container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersReadinessProbeExec {
    /// Command is the command line to execute inside the container, the working directory for the
    /// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
    /// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
    /// a shell, you need to explicitly call out to that shell.
    /// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// GRPC specifies a GRPC HealthCheckRequest.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersReadinessProbeGrpc {
    /// Port number of the gRPC service. Number must be in the range 1 to 65535.
    pub port: i32,
    /// Service is the name of the service to place in the gRPC HealthCheckRequest
    /// (see <https://github.com/grpc/grpc/blob/master/doc/health-checking.md).>
    /// 
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

/// HTTPGet specifies an HTTP GET request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersReadinessProbeHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set
    /// "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<IntegrationTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host.
    /// Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders {
    /// The header field name.
    /// This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// TCPSocket specifies a connection to a TCP port.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersReadinessProbeTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// ContainerResizePolicy represents resource resize policy for the container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersResizePolicy {
    /// Name of the resource to which this resource resize policy applies.
    /// Supported values: cpu, memory.
    #[serde(rename = "resourceName")]
    pub resource_name: String,
    /// Restart policy to apply when specified resource is resized.
    /// If not specified, it defaults to NotRequired.
    #[serde(rename = "restartPolicy")]
    pub restart_policy: String,
}

/// Compute Resources required by this container.
/// Cannot be updated.
/// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims,
    /// that are used by this container.
    /// 
    /// This is an alpha field and requires enabling the
    /// DynamicResourceAllocation feature gate.
    /// 
    /// This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<IntegrationTemplateSpecInitContainersResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of
    /// the Pod where this field is used. It makes that resource available
    /// inside a container.
    pub name: String,
    /// Request is the name chosen for a request in the referenced claim.
    /// If empty, everything from the claim is made available, otherwise
    /// only the result of this request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
}

/// SecurityContext defines the security options the container should be run with.
/// If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
/// More info: <https://kubernetes.io/docs/tasks/configure-pod-container/security-context/>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersSecurityContext {
    /// AllowPrivilegeEscalation controls whether a process can gain more
    /// privileges than its parent process. This bool directly controls if
    /// the no_new_privs flag will be set on the container process.
    /// AllowPrivilegeEscalation is true always when the container is:
    /// 1) run as Privileged
    /// 2) has CAP_SYS_ADMIN
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPrivilegeEscalation")]
    pub allow_privilege_escalation: Option<bool>,
    /// appArmorProfile is the AppArmor options to use by this container. If set, this profile
    /// overrides the pod's appArmorProfile.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appArmorProfile")]
    pub app_armor_profile: Option<IntegrationTemplateSpecInitContainersSecurityContextAppArmorProfile>,
    /// The capabilities to add/drop when running containers.
    /// Defaults to the default set of capabilities granted by the container runtime.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<IntegrationTemplateSpecInitContainersSecurityContextCapabilities>,
    /// Run container in privileged mode.
    /// Processes in privileged containers are essentially equivalent to root on the host.
    /// Defaults to false.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    /// procMount denotes the type of proc mount to use for the containers.
    /// The default value is Default which uses the container runtime defaults for
    /// readonly paths and masked paths.
    /// This requires the ProcMountType feature flag to be enabled.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "procMount")]
    pub proc_mount: Option<String>,
    /// Whether this container has a read-only root filesystem.
    /// Default is false.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFilesystem")]
    pub read_only_root_filesystem: Option<bool>,
    /// The GID to run the entrypoint of the container process.
    /// Uses runtime default if unset.
    /// May also be set in PodSecurityContext.  If set in both SecurityContext and
    /// PodSecurityContext, the value specified in SecurityContext takes precedence.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    /// Indicates that the container must run as a non-root user.
    /// If true, the Kubelet will validate the image at runtime to ensure that it
    /// does not run as UID 0 (root) and fail to start the container if it does.
    /// If unset or false, no such validation will be performed.
    /// May also be set in PodSecurityContext.  If set in both SecurityContext and
    /// PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    /// The UID to run the entrypoint of the container process.
    /// Defaults to user specified in image metadata if unspecified.
    /// May also be set in PodSecurityContext.  If set in both SecurityContext and
    /// PodSecurityContext, the value specified in SecurityContext takes precedence.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// The SELinux context to be applied to the container.
    /// If unspecified, the container runtime will allocate a random SELinux context for each
    /// container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
    /// PodSecurityContext, the value specified in SecurityContext takes precedence.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<IntegrationTemplateSpecInitContainersSecurityContextSeLinuxOptions>,
    /// The seccomp options to use by this container. If seccomp options are
    /// provided at both the pod & container level, the container options
    /// override the pod options.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<IntegrationTemplateSpecInitContainersSecurityContextSeccompProfile>,
    /// The Windows specific settings applied to all containers.
    /// If unspecified, the options from the PodSecurityContext will be used.
    /// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    /// Note that this field cannot be set when spec.os.name is linux.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<IntegrationTemplateSpecInitContainersSecurityContextWindowsOptions>,
}

/// appArmorProfile is the AppArmor options to use by this container. If set, this profile
/// overrides the pod's appArmorProfile.
/// Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersSecurityContextAppArmorProfile {
    /// localhostProfile indicates a profile loaded on the node that should be used.
    /// The profile must be preconfigured on the node to work.
    /// Must match the loaded name of the profile.
    /// Must be set if and only if type is "Localhost".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of AppArmor profile will be applied.
    /// Valid options are:
    ///   Localhost - a profile pre-loaded on the node.
    ///   RuntimeDefault - the container runtime's default profile.
    ///   Unconfined - no AppArmor enforcement.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// The capabilities to add/drop when running containers.
/// Defaults to the default set of capabilities granted by the container runtime.
/// Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersSecurityContextCapabilities {
    /// Added capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<String>>,
    /// Removed capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<Vec<String>>,
}

/// The SELinux context to be applied to the container.
/// If unspecified, the container runtime will allocate a random SELinux context for each
/// container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
/// PodSecurityContext, the value specified in SecurityContext takes precedence.
/// Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersSecurityContextSeLinuxOptions {
    /// Level is SELinux level label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// Role is a SELinux role label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Type is a SELinux type label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// User is a SELinux user label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// The seccomp options to use by this container. If seccomp options are
/// provided at both the pod & container level, the container options
/// override the pod options.
/// Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersSecurityContextSeccompProfile {
    /// localhostProfile indicates a profile defined in a file on the node should be used.
    /// The profile must be preconfigured on the node to work.
    /// Must be a descending path, relative to the kubelet's configured seccomp profile location.
    /// Must be set if type is "Localhost". Must NOT be set for any other type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of seccomp profile will be applied.
    /// Valid options are:
    /// 
    /// Localhost - a profile defined in a file on the node should be used.
    /// RuntimeDefault - the container runtime default profile should be used.
    /// Unconfined - no profile should be applied.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// The Windows specific settings applied to all containers.
/// If unspecified, the options from the PodSecurityContext will be used.
/// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
/// Note that this field cannot be set when spec.os.name is linux.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersSecurityContextWindowsOptions {
    /// GMSACredentialSpec is where the GMSA admission webhook
    /// (<https://github.com/kubernetes-sigs/windows-gmsa)> inlines the contents of the
    /// GMSA credential spec named by the GMSACredentialSpecName field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    /// GMSACredentialSpecName is the name of the GMSA credential spec to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    /// HostProcess determines if a container should be run as a 'Host Process' container.
    /// All of a Pod's containers must have the same effective HostProcess value
    /// (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
    /// In addition, if HostProcess is true then HostNetwork must also be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    /// The UserName in Windows to run the entrypoint of the container process.
    /// Defaults to the user specified in image metadata if unspecified.
    /// May also be set in PodSecurityContext. If set in both SecurityContext and
    /// PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

/// StartupProbe indicates that the Pod has successfully initialized.
/// If specified, no other probes are executed until this completes successfully.
/// If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
/// This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
/// when it might take a long time to load data or warm a cache, than during steady-state operation.
/// This cannot be updated.
/// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersStartupProbe {
    /// Exec specifies a command to execute in the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<IntegrationTemplateSpecInitContainersStartupProbeExec>,
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded.
    /// Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// GRPC specifies a GRPC HealthCheckRequest.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<IntegrationTemplateSpecInitContainersStartupProbeGrpc>,
    /// HTTPGet specifies an HTTP GET request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<IntegrationTemplateSpecInitContainersStartupProbeHttpGet>,
    /// Number of seconds after the container has started before liveness probes are initiated.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    /// How often (in seconds) to perform the probe.
    /// Default to 10 seconds. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    /// Minimum consecutive successes for the probe to be considered successful after having failed.
    /// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// TCPSocket specifies a connection to a TCP port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<IntegrationTemplateSpecInitContainersStartupProbeTcpSocket>,
    /// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
    /// The grace period is the duration in seconds after the processes running in the pod are sent
    /// a termination signal and the time when the processes are forcibly halted with a kill signal.
    /// Set this value longer than the expected cleanup time for your process.
    /// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
    /// value overrides the value provided by the pod spec.
    /// Value must be non-negative integer. The value zero indicates stop immediately via
    /// the kill signal (no opportunity to shut down).
    /// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
    /// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// Number of seconds after which the probe times out.
    /// Defaults to 1 second. Minimum value is 1.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Exec specifies a command to execute in the container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersStartupProbeExec {
    /// Command is the command line to execute inside the container, the working directory for the
    /// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
    /// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
    /// a shell, you need to explicitly call out to that shell.
    /// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// GRPC specifies a GRPC HealthCheckRequest.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersStartupProbeGrpc {
    /// Port number of the gRPC service. Number must be in the range 1 to 65535.
    pub port: i32,
    /// Service is the name of the service to place in the gRPC HealthCheckRequest
    /// (see <https://github.com/grpc/grpc/blob/master/doc/health-checking.md).>
    /// 
    /// If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

/// HTTPGet specifies an HTTP GET request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersStartupProbeHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set
    /// "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<IntegrationTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host.
    /// Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders {
    /// The header field name.
    /// This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// TCPSocket specifies a connection to a TCP port.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersStartupProbeTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container.
    /// Number must be in the range 1 to 65535.
    /// Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// volumeDevice describes a mapping of a raw block device within a container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersVolumeDevices {
    /// devicePath is the path inside of the container that the device will be mapped to.
    #[serde(rename = "devicePath")]
    pub device_path: String,
    /// name must match the name of a persistentVolumeClaim in the pod
    pub name: String,
}

/// VolumeMount describes a mounting of a Volume within a container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecInitContainersVolumeMounts {
    /// Path within the container at which the volume should be mounted.  Must
    /// not contain ':'.
    #[serde(rename = "mountPath")]
    pub mount_path: String,
    /// mountPropagation determines how mounts are propagated from the host
    /// to container and the other way around.
    /// When not set, MountPropagationNone is used.
    /// This field is beta in 1.10.
    /// When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
    /// (which defaults to None).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPropagation")]
    pub mount_propagation: Option<String>,
    /// This must match the Name of a Volume.
    pub name: String,
    /// Mounted read-only if true, read-write otherwise (false or unspecified).
    /// Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// RecursiveReadOnly specifies whether read-only mounts should be handled
    /// recursively.
    /// 
    /// If ReadOnly is false, this field has no meaning and must be unspecified.
    /// 
    /// If ReadOnly is true, and this field is set to Disabled, the mount is not made
    /// recursively read-only.  If this field is set to IfPossible, the mount is made
    /// recursively read-only, if it is supported by the container runtime.  If this
    /// field is set to Enabled, the mount is made recursively read-only if it is
    /// supported by the container runtime, otherwise the pod will not be started and
    /// an error will be generated to indicate the reason.
    /// 
    /// If this field is set to IfPossible or Enabled, MountPropagation must be set to
    /// None (or be unspecified, which defaults to None).
    /// 
    /// If this field is not specified, it is treated as an equivalent of Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recursiveReadOnly")]
    pub recursive_read_only: Option<String>,
    /// Path within the volume from which the container's volume should be mounted.
    /// Defaults to "" (volume's root).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPath")]
    pub sub_path: Option<String>,
    /// Expanded path within the volume from which the container's volume should be mounted.
    /// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
    /// Defaults to "" (volume's root).
    /// SubPathExpr and SubPath are mutually exclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPathExpr")]
    pub sub_path_expr: Option<String>,
}

/// PodSecurityContext
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecSecurityContext {
    /// appArmorProfile is the AppArmor options to use by the containers in this pod.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appArmorProfile")]
    pub app_armor_profile: Option<IntegrationTemplateSpecSecurityContextAppArmorProfile>,
    /// A special supplemental group that applies to all containers in a pod.
    /// Some volume types allow the Kubelet to change the ownership of that volume
    /// to be owned by the pod:
    /// 
    /// 1. The owning GID will be the FSGroup
    /// 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
    /// 3. The permission bits are OR'd with rw-rw----
    /// 
    /// If unset, the Kubelet will not modify the ownership and permissions of any volume.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroup")]
    pub fs_group: Option<i64>,
    /// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
    /// before being exposed inside Pod. This field will only apply to
    /// volume types which support fsGroup based ownership(and permissions).
    /// It will have no effect on ephemeral volume types such as: secret, configmaps
    /// and emptydir.
    /// Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroupChangePolicy")]
    pub fs_group_change_policy: Option<String>,
    /// The GID to run the entrypoint of the container process.
    /// Uses runtime default if unset.
    /// May also be set in SecurityContext.  If set in both SecurityContext and
    /// PodSecurityContext, the value specified in SecurityContext takes precedence
    /// for that container.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    /// Indicates that the container must run as a non-root user.
    /// If true, the Kubelet will validate the image at runtime to ensure that it
    /// does not run as UID 0 (root) and fail to start the container if it does.
    /// If unset or false, no such validation will be performed.
    /// May also be set in SecurityContext.  If set in both SecurityContext and
    /// PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    /// The UID to run the entrypoint of the container process.
    /// Defaults to user specified in image metadata if unspecified.
    /// May also be set in SecurityContext.  If set in both SecurityContext and
    /// PodSecurityContext, the value specified in SecurityContext takes precedence
    /// for that container.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.
    /// It has no effect on nodes that do not support SELinux or to volumes does not support SELinux.
    /// Valid values are "MountOption" and "Recursive".
    /// 
    /// "Recursive" means relabeling of all files on all Pod volumes by the container runtime.
    /// This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
    /// 
    /// "MountOption" mounts all eligible Pod volumes with `-o context` mount option.
    /// This requires all Pods that share the same volume to use the same SELinux label.
    /// It is not possible to share the same volume among privileged and unprivileged Pods.
    /// Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes
    /// whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their
    /// CSIDriver instance. Other volumes are always re-labelled recursively.
    /// "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
    /// 
    /// If not specified and SELinuxMount feature gate is enabled, "MountOption" is used.
    /// If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes
    /// and "Recursive" for all other volumes.
    /// 
    /// This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
    /// 
    /// All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxChangePolicy")]
    pub se_linux_change_policy: Option<String>,
    /// The SELinux context to be applied to all containers.
    /// If unspecified, the container runtime will allocate a random SELinux context for each
    /// container.  May also be set in SecurityContext.  If set in
    /// both SecurityContext and PodSecurityContext, the value specified in SecurityContext
    /// takes precedence for that container.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<IntegrationTemplateSpecSecurityContextSeLinuxOptions>,
    /// The seccomp options to use by the containers in this pod.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<IntegrationTemplateSpecSecurityContextSeccompProfile>,
    /// A list of groups applied to the first process run in each container, in
    /// addition to the container's primary GID and fsGroup (if specified).  If
    /// the SupplementalGroupsPolicy feature is enabled, the
    /// supplementalGroupsPolicy field determines whether these are in addition
    /// to or instead of any group memberships defined in the container image.
    /// If unspecified, no additional groups are added, though group memberships
    /// defined in the container image may still be used, depending on the
    /// supplementalGroupsPolicy field.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supplementalGroups")]
    pub supplemental_groups: Option<Vec<i64>>,
    /// Defines how supplemental groups of the first container processes are calculated.
    /// Valid values are "Merge" and "Strict". If not specified, "Merge" is used.
    /// (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled
    /// and the container runtime must implement support for this feature.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supplementalGroupsPolicy")]
    pub supplemental_groups_policy: Option<String>,
    /// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
    /// sysctls (by the container runtime) might fail to launch.
    /// Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sysctls: Option<Vec<IntegrationTemplateSpecSecurityContextSysctls>>,
    /// The Windows specific settings applied to all containers.
    /// If unspecified, the options within a container's SecurityContext will be used.
    /// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    /// Note that this field cannot be set when spec.os.name is linux.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<IntegrationTemplateSpecSecurityContextWindowsOptions>,
}

/// appArmorProfile is the AppArmor options to use by the containers in this pod.
/// Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecSecurityContextAppArmorProfile {
    /// localhostProfile indicates a profile loaded on the node that should be used.
    /// The profile must be preconfigured on the node to work.
    /// Must match the loaded name of the profile.
    /// Must be set if and only if type is "Localhost".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of AppArmor profile will be applied.
    /// Valid options are:
    ///   Localhost - a profile pre-loaded on the node.
    ///   RuntimeDefault - the container runtime's default profile.
    ///   Unconfined - no AppArmor enforcement.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// The SELinux context to be applied to all containers.
/// If unspecified, the container runtime will allocate a random SELinux context for each
/// container.  May also be set in SecurityContext.  If set in
/// both SecurityContext and PodSecurityContext, the value specified in SecurityContext
/// takes precedence for that container.
/// Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecSecurityContextSeLinuxOptions {
    /// Level is SELinux level label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// Role is a SELinux role label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Type is a SELinux type label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// User is a SELinux user label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// The seccomp options to use by the containers in this pod.
/// Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecSecurityContextSeccompProfile {
    /// localhostProfile indicates a profile defined in a file on the node should be used.
    /// The profile must be preconfigured on the node to work.
    /// Must be a descending path, relative to the kubelet's configured seccomp profile location.
    /// Must be set if type is "Localhost". Must NOT be set for any other type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of seccomp profile will be applied.
    /// Valid options are:
    /// 
    /// Localhost - a profile defined in a file on the node should be used.
    /// RuntimeDefault - the container runtime default profile should be used.
    /// Unconfined - no profile should be applied.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Sysctl defines a kernel parameter to be set
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecSecurityContextSysctls {
    /// Name of a property to set
    pub name: String,
    /// Value of a property to set
    pub value: String,
}

/// The Windows specific settings applied to all containers.
/// If unspecified, the options within a container's SecurityContext will be used.
/// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
/// Note that this field cannot be set when spec.os.name is linux.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecSecurityContextWindowsOptions {
    /// GMSACredentialSpec is where the GMSA admission webhook
    /// (<https://github.com/kubernetes-sigs/windows-gmsa)> inlines the contents of the
    /// GMSA credential spec named by the GMSACredentialSpecName field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    /// GMSACredentialSpecName is the name of the GMSA credential spec to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    /// HostProcess determines if a container should be run as a 'Host Process' container.
    /// All of a Pod's containers must have the same effective HostProcess value
    /// (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
    /// In addition, if HostProcess is true then HostNetwork must also be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    /// The UserName in Windows to run the entrypoint of the container process.
    /// Defaults to the user specified in image metadata if unspecified.
    /// May also be set in PodSecurityContext. If set in both SecurityContext and
    /// PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

/// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecTopologySpreadConstraints {
    /// LabelSelector is used to find matching pods.
    /// Pods that match this label selector are counted to determine the number of pods
    /// in their corresponding topology domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<IntegrationTemplateSpecTopologySpreadConstraintsLabelSelector>,
    /// MatchLabelKeys is a set of pod label keys to select the pods over which
    /// spreading will be calculated. The keys are used to lookup values from the
    /// incoming pod labels, those key-value labels are ANDed with labelSelector
    /// to select the group of existing pods over which spreading will be calculated
    /// for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
    /// MatchLabelKeys cannot be set when LabelSelector isn't set.
    /// Keys that don't exist in the incoming pod labels will
    /// be ignored. A null or empty list means only match against labelSelector.
    /// 
    /// This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabelKeys")]
    pub match_label_keys: Option<Vec<String>>,
    /// MaxSkew describes the degree to which pods may be unevenly distributed.
    /// When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
    /// between the number of matching pods in the target topology and the global minimum.
    /// The global minimum is the minimum number of matching pods in an eligible domain
    /// or zero if the number of eligible domains is less than MinDomains.
    /// For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
    /// labelSelector spread as 2/2/1:
    /// In this case, the global minimum is 1.
    /// | zone1 | zone2 | zone3 |
    /// |  P P  |  P P  |   P   |
    /// - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
    /// scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
    /// violate MaxSkew(1).
    /// - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
    /// When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
    /// to topologies that satisfy it.
    /// It's a required field. Default value is 1 and 0 is not allowed.
    #[serde(rename = "maxSkew")]
    pub max_skew: i32,
    /// MinDomains indicates a minimum number of eligible domains.
    /// When the number of eligible domains with matching topology keys is less than minDomains,
    /// Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
    /// And when the number of eligible domains with matching topology keys equals or greater than minDomains,
    /// this value has no effect on scheduling.
    /// As a result, when the number of eligible domains is less than minDomains,
    /// scheduler won't schedule more than maxSkew Pods to those domains.
    /// If value is nil, the constraint behaves as if MinDomains is equal to 1.
    /// Valid values are integers greater than 0.
    /// When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
    /// 
    /// For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
    /// labelSelector spread as 2/2/2:
    /// | zone1 | zone2 | zone3 |
    /// |  P P  |  P P  |  P P  |
    /// The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
    /// In this situation, new pod with the same labelSelector cannot be scheduled,
    /// because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
    /// it will violate MaxSkew.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minDomains")]
    pub min_domains: Option<i32>,
    /// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
    /// when calculating pod topology spread skew. Options are:
    /// - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
    /// - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
    /// 
    /// If this value is nil, the behavior is equivalent to the Honor policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinityPolicy")]
    pub node_affinity_policy: Option<String>,
    /// NodeTaintsPolicy indicates how we will treat node taints when calculating
    /// pod topology spread skew. Options are:
    /// - Honor: nodes without taints, along with tainted nodes for which the incoming pod
    /// has a toleration, are included.
    /// - Ignore: node taints are ignored. All nodes are included.
    /// 
    /// If this value is nil, the behavior is equivalent to the Ignore policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeTaintsPolicy")]
    pub node_taints_policy: Option<String>,
    /// TopologyKey is the key of node labels. Nodes that have a label with this key
    /// and identical values are considered to be in the same topology.
    /// We consider each <key, value> as a "bucket", and try to put balanced number
    /// of pods into each bucket.
    /// We define a domain as a particular instance of a topology.
    /// Also, we define an eligible domain as a domain whose nodes meet the requirements of
    /// nodeAffinityPolicy and nodeTaintsPolicy.
    /// e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
    /// And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
    /// It's a required field.
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
    /// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
    /// the spread constraint.
    /// - DoNotSchedule (default) tells the scheduler not to schedule it.
    /// - ScheduleAnyway tells the scheduler to schedule the pod in any location,
    ///   but giving higher precedence to topologies that would help reduce the
    ///   skew.
    /// A constraint is considered "Unsatisfiable" for an incoming pod
    /// if and only if every possible node assignment for that pod would violate
    /// "MaxSkew" on some topology.
    /// For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
    /// labelSelector spread as 3/1/1:
    /// | zone1 | zone2 | zone3 |
    /// | P P P |   P   |   P   |
    /// If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
    /// to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
    /// MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
    /// won't make it *more* imbalanced.
    /// It's a required field.
    #[serde(rename = "whenUnsatisfiable")]
    pub when_unsatisfiable: String,
}

/// LabelSelector is used to find matching pods.
/// Pods that match this label selector are counted to determine the number of pods
/// in their corresponding topology domain.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecTopologySpreadConstraintsLabelSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<IntegrationTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Volume represents a named volume in a pod that may be accessed by any container in the pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumes {
    /// awsElasticBlockStore represents an AWS Disk resource that is attached to a
    /// kubelet's host machine and then exposed to the pod.
    /// Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree
    /// awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsElasticBlockStore")]
    pub aws_elastic_block_store: Option<IntegrationTemplateSpecVolumesAwsElasticBlockStore>,
    /// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    /// Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type
    /// are redirected to the disk.csi.azure.com CSI driver.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureDisk")]
    pub azure_disk: Option<IntegrationTemplateSpecVolumesAzureDisk>,
    /// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
    /// Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type
    /// are redirected to the file.csi.azure.com CSI driver.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureFile")]
    pub azure_file: Option<IntegrationTemplateSpecVolumesAzureFile>,
    /// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.
    /// Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cephfs: Option<IntegrationTemplateSpecVolumesCephfs>,
    /// cinder represents a cinder volume attached and mounted on kubelets host machine.
    /// Deprecated: Cinder is deprecated. All operations for the in-tree cinder type
    /// are redirected to the cinder.csi.openstack.org CSI driver.
    /// More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cinder: Option<IntegrationTemplateSpecVolumesCinder>,
    /// configMap represents a configMap that should populate this volume
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<IntegrationTemplateSpecVolumesConfigMap>,
    /// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csi: Option<IntegrationTemplateSpecVolumesCsi>,
    /// downwardAPI represents downward API about the pod that should populate this volume
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "downwardAPI")]
    pub downward_api: Option<IntegrationTemplateSpecVolumesDownwardApi>,
    /// emptyDir represents a temporary directory that shares a pod's lifetime.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#emptydir>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emptyDir")]
    pub empty_dir: Option<IntegrationTemplateSpecVolumesEmptyDir>,
    /// ephemeral represents a volume that is handled by a cluster storage driver.
    /// The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
    /// and deleted when the pod is removed.
    /// 
    /// Use this if:
    /// a) the volume is only needed while the pod runs,
    /// b) features of normal volumes like restoring from snapshot or capacity
    ///    tracking are needed,
    /// c) the storage driver is specified through a storage class, and
    /// d) the storage driver supports dynamic volume provisioning through
    ///    a PersistentVolumeClaim (see EphemeralVolumeSource for more
    ///    information on the connection between this volume type
    ///    and PersistentVolumeClaim).
    /// 
    /// Use PersistentVolumeClaim or one of the vendor-specific
    /// APIs for volumes that persist for longer than the lifecycle
    /// of an individual pod.
    /// 
    /// Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
    /// be used that way - see the documentation of the driver for
    /// more information.
    /// 
    /// A pod can use both types of ephemeral volumes and
    /// persistent volumes at the same time.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ephemeral: Option<IntegrationTemplateSpecVolumesEphemeral>,
    /// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fc: Option<IntegrationTemplateSpecVolumesFc>,
    /// flexVolume represents a generic volume resource that is
    /// provisioned/attached using an exec based plugin.
    /// Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flexVolume")]
    pub flex_volume: Option<IntegrationTemplateSpecVolumesFlexVolume>,
    /// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.
    /// Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flocker: Option<IntegrationTemplateSpecVolumesFlocker>,
    /// gcePersistentDisk represents a GCE Disk resource that is attached to a
    /// kubelet's host machine and then exposed to the pod.
    /// Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree
    /// gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gcePersistentDisk")]
    pub gce_persistent_disk: Option<IntegrationTemplateSpecVolumesGcePersistentDisk>,
    /// gitRepo represents a git repository at a particular revision.
    /// Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an
    /// EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
    /// into the Pod's container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gitRepo")]
    pub git_repo: Option<IntegrationTemplateSpecVolumesGitRepo>,
    /// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
    /// Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.
    /// More info: <https://examples.k8s.io/volumes/glusterfs/README.md>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub glusterfs: Option<IntegrationTemplateSpecVolumesGlusterfs>,
    /// hostPath represents a pre-existing file or directory on the host
    /// machine that is directly exposed to the container. This is generally
    /// used for system agents or other privileged things that are allowed
    /// to see the host machine. Most containers will NOT need this.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#hostpath>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPath")]
    pub host_path: Option<IntegrationTemplateSpecVolumesHostPath>,
    /// image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.
    /// The volume is resolved at pod startup depending on which PullPolicy value is provided:
    /// 
    /// - Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
    /// - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
    /// - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
    /// 
    /// The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.
    /// A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.
    /// The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.
    /// The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.
    /// The volume will be mounted read-only (ro) and non-executable files (noexec).
    /// Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath) before 1.33.
    /// The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<IntegrationTemplateSpecVolumesImage>,
    /// iscsi represents an ISCSI Disk resource that is attached to a
    /// kubelet's host machine and then exposed to the pod.
    /// More info: <https://examples.k8s.io/volumes/iscsi/README.md>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iscsi: Option<IntegrationTemplateSpecVolumesIscsi>,
    /// name of the volume.
    /// Must be a DNS_LABEL and unique within the pod.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    pub name: String,
    /// nfs represents an NFS mount on the host that shares a pod's lifetime
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#nfs>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nfs: Option<IntegrationTemplateSpecVolumesNfs>,
    /// persistentVolumeClaimVolumeSource represents a reference to a
    /// PersistentVolumeClaim in the same namespace.
    /// More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeClaim")]
    pub persistent_volume_claim: Option<IntegrationTemplateSpecVolumesPersistentVolumeClaim>,
    /// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.
    /// Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "photonPersistentDisk")]
    pub photon_persistent_disk: Option<IntegrationTemplateSpecVolumesPhotonPersistentDisk>,
    /// portworxVolume represents a portworx volume attached and mounted on kubelets host machine.
    /// Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type
    /// are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate
    /// is on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portworxVolume")]
    pub portworx_volume: Option<IntegrationTemplateSpecVolumesPortworxVolume>,
    /// projected items for all in one resources secrets, configmaps, and downward API
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub projected: Option<IntegrationTemplateSpecVolumesProjected>,
    /// quobyte represents a Quobyte mount on the host that shares a pod's lifetime.
    /// Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quobyte: Option<IntegrationTemplateSpecVolumesQuobyte>,
    /// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
    /// Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.
    /// More info: <https://examples.k8s.io/volumes/rbd/README.md>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rbd: Option<IntegrationTemplateSpecVolumesRbd>,
    /// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
    /// Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scaleIO")]
    pub scale_io: Option<IntegrationTemplateSpecVolumesScaleIo>,
    /// secret represents a secret that should populate this volume.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#secret>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<IntegrationTemplateSpecVolumesSecret>,
    /// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
    /// Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storageos: Option<IntegrationTemplateSpecVolumesStorageos>,
    /// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.
    /// Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type
    /// are redirected to the csi.vsphere.vmware.com CSI driver.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vsphereVolume")]
    pub vsphere_volume: Option<IntegrationTemplateSpecVolumesVsphereVolume>,
}

/// awsElasticBlockStore represents an AWS Disk resource that is attached to a
/// kubelet's host machine and then exposed to the pod.
/// Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree
/// awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.
/// More info: <https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesAwsElasticBlockStore {
    /// fsType is the filesystem type of the volume that you want to mount.
    /// Tip: Ensure that the filesystem type is supported by the host operating system.
    /// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// partition is the partition in the volume that you want to mount.
    /// If omitted, the default is to mount by volume name.
    /// Examples: For volume /dev/sda1, you specify the partition as "1".
    /// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition: Option<i32>,
    /// readOnly value true will force the readOnly setting in VolumeMounts.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore>
    #[serde(rename = "volumeID")]
    pub volume_id: String,
}

/// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
/// Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type
/// are redirected to the disk.csi.azure.com CSI driver.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesAzureDisk {
    /// cachingMode is the Host Caching mode: None, Read Only, Read Write.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cachingMode")]
    pub caching_mode: Option<String>,
    /// diskName is the Name of the data disk in the blob storage
    #[serde(rename = "diskName")]
    pub disk_name: String,
    /// diskURI is the URI of data disk in the blob storage
    #[serde(rename = "diskURI")]
    pub disk_uri: String,
    /// fsType is Filesystem type to mount.
    /// Must be a filesystem type supported by the host operating system.
    /// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// readOnly Defaults to false (read/write). ReadOnly here will force
    /// the ReadOnly setting in VolumeMounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

/// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
/// Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type
/// are redirected to the file.csi.azure.com CSI driver.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesAzureFile {
    /// readOnly defaults to false (read/write). ReadOnly here will force
    /// the ReadOnly setting in VolumeMounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// secretName is the  name of secret that contains Azure Storage Account Name and Key
    #[serde(rename = "secretName")]
    pub secret_name: String,
    /// shareName is the azure share Name
    #[serde(rename = "shareName")]
    pub share_name: String,
}

/// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.
/// Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesCephfs {
    /// monitors is Required: Monitors is a collection of Ceph monitors
    /// More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>
    pub monitors: Vec<String>,
    /// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
    /// the ReadOnly setting in VolumeMounts.
    /// More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
    /// More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretFile")]
    pub secret_file: Option<String>,
    /// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
    /// More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<IntegrationTemplateSpecVolumesCephfsSecretRef>,
    /// user is optional: User is the rados user name, default is admin
    /// More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
/// More info: <https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesCephfsSecretRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// cinder represents a cinder volume attached and mounted on kubelets host machine.
/// Deprecated: Cinder is deprecated. All operations for the in-tree cinder type
/// are redirected to the cinder.csi.openstack.org CSI driver.
/// More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesCinder {
    /// fsType is the filesystem type to mount.
    /// Must be a filesystem type supported by the host operating system.
    /// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    /// More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// readOnly defaults to false (read/write). ReadOnly here will force
    /// the ReadOnly setting in VolumeMounts.
    /// More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// secretRef is optional: points to a secret object containing parameters used to connect
    /// to OpenStack.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<IntegrationTemplateSpecVolumesCinderSecretRef>,
    /// volumeID used to identify the volume in cinder.
    /// More info: <https://examples.k8s.io/mysql-cinder-pd/README.md>
    #[serde(rename = "volumeID")]
    pub volume_id: String,
}

/// secretRef is optional: points to a secret object containing parameters used to connect
/// to OpenStack.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesCinderSecretRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// configMap represents a configMap that should populate this volume
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesConfigMap {
    /// defaultMode is optional: mode bits used to set permissions on created files by default.
    /// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
    /// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
    /// Defaults to 0644.
    /// Directories within the path are not affected by this setting.
    /// This might be in conflict with other options that affect the file
    /// mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    /// items if unspecified, each key-value pair in the Data field of the referenced
    /// ConfigMap will be projected into the volume as a file whose name is the
    /// key and content is the value. If specified, the listed keys will be
    /// projected into the specified paths, and unlisted keys will not be
    /// present. If a key is specified which is not present in the ConfigMap,
    /// the volume setup will error unless it is marked optional. Paths must be
    /// relative and may not contain the '..' path or start with '..'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<IntegrationTemplateSpecVolumesConfigMapItems>>,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// optional specify whether the ConfigMap or its keys must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Maps a string key to a path within a volume.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesConfigMapItems {
    /// key is the key to project.
    pub key: String,
    /// mode is Optional: mode bits used to set permissions on this file.
    /// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
    /// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
    /// If not specified, the volume defaultMode will be used.
    /// This might be in conflict with other options that affect the file
    /// mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    /// path is the relative path of the file to map the key to.
    /// May not be an absolute path.
    /// May not contain the path element '..'.
    /// May not start with the string '..'.
    pub path: String,
}

/// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesCsi {
    /// driver is the name of the CSI driver that handles this volume.
    /// Consult with your admin for the correct name as registered in the cluster.
    pub driver: String,
    /// fsType to mount. Ex. "ext4", "xfs", "ntfs".
    /// If not provided, the empty value is passed to the associated CSI driver
    /// which will determine the default filesystem to apply.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// nodePublishSecretRef is a reference to the secret object containing
    /// sensitive information to pass to the CSI driver to complete the CSI
    /// NodePublishVolume and NodeUnpublishVolume calls.
    /// This field is optional, and  may be empty if no secret is required. If the
    /// secret object contains more than one secret, all secret references are passed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePublishSecretRef")]
    pub node_publish_secret_ref: Option<IntegrationTemplateSpecVolumesCsiNodePublishSecretRef>,
    /// readOnly specifies a read-only configuration for the volume.
    /// Defaults to false (read/write).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// volumeAttributes stores driver-specific properties that are passed to the CSI
    /// driver. Consult your driver's documentation for supported values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeAttributes")]
    pub volume_attributes: Option<BTreeMap<String, String>>,
}

/// nodePublishSecretRef is a reference to the secret object containing
/// sensitive information to pass to the CSI driver to complete the CSI
/// NodePublishVolume and NodeUnpublishVolume calls.
/// This field is optional, and  may be empty if no secret is required. If the
/// secret object contains more than one secret, all secret references are passed.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesCsiNodePublishSecretRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// downwardAPI represents downward API about the pod that should populate this volume
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesDownwardApi {
    /// Optional: mode bits to use on created files by default. Must be a
    /// Optional: mode bits used to set permissions on created files by default.
    /// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
    /// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
    /// Defaults to 0644.
    /// Directories within the path are not affected by this setting.
    /// This might be in conflict with other options that affect the file
    /// mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    /// Items is a list of downward API volume file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<IntegrationTemplateSpecVolumesDownwardApiItems>>,
}

/// DownwardAPIVolumeFile represents information to create the file containing the pod field
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesDownwardApiItems {
    /// Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<IntegrationTemplateSpecVolumesDownwardApiItemsFieldRef>,
    /// Optional: mode bits used to set permissions on this file, must be an octal value
    /// between 0000 and 0777 or a decimal value between 0 and 511.
    /// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
    /// If not specified, the volume defaultMode will be used.
    /// This might be in conflict with other options that affect the file
    /// mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    /// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
    pub path: String,
    /// Selects a resource of the container: only resources limits and requests
    /// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<IntegrationTemplateSpecVolumesDownwardApiItemsResourceFieldRef>,
}

/// Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesDownwardApiItemsFieldRef {
    /// Version of the schema the FieldPath is written in terms of, defaults to "v1".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Path of the field to select in the specified API version.
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Selects a resource of the container: only resources limits and requests
/// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesDownwardApiItemsResourceFieldRef {
    /// Container name: required for volumes, optional for env vars
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    /// Specifies the output format of the exposed resources, defaults to "1"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    /// Required: resource to select
    pub resource: String,
}

/// emptyDir represents a temporary directory that shares a pod's lifetime.
/// More info: <https://kubernetes.io/docs/concepts/storage/volumes#emptydir>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesEmptyDir {
    /// medium represents what type of storage medium should back this directory.
    /// The default is "" which means to use the node's default medium.
    /// Must be an empty string (default) or Memory.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#emptydir>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub medium: Option<String>,
    /// sizeLimit is the total amount of local storage required for this EmptyDir volume.
    /// The size limit is also applicable for memory medium.
    /// The maximum usage on memory medium EmptyDir would be the minimum value between
    /// the SizeLimit specified here and the sum of memory limits of all containers in a pod.
    /// The default is nil which means that the limit is undefined.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#emptydir>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeLimit")]
    pub size_limit: Option<IntOrString>,
}

/// ephemeral represents a volume that is handled by a cluster storage driver.
/// The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
/// and deleted when the pod is removed.
/// 
/// Use this if:
/// a) the volume is only needed while the pod runs,
/// b) features of normal volumes like restoring from snapshot or capacity
///    tracking are needed,
/// c) the storage driver is specified through a storage class, and
/// d) the storage driver supports dynamic volume provisioning through
///    a PersistentVolumeClaim (see EphemeralVolumeSource for more
///    information on the connection between this volume type
///    and PersistentVolumeClaim).
/// 
/// Use PersistentVolumeClaim or one of the vendor-specific
/// APIs for volumes that persist for longer than the lifecycle
/// of an individual pod.
/// 
/// Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
/// be used that way - see the documentation of the driver for
/// more information.
/// 
/// A pod can use both types of ephemeral volumes and
/// persistent volumes at the same time.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesEphemeral {
    /// Will be used to create a stand-alone PVC to provision the volume.
    /// The pod in which this EphemeralVolumeSource is embedded will be the
    /// owner of the PVC, i.e. the PVC will be deleted together with the
    /// pod.  The name of the PVC will be `<pod name>-<volume name>` where
    /// `<volume name>` is the name from the `PodSpec.Volumes` array
    /// entry. Pod validation will reject the pod if the concatenated name
    /// is not valid for a PVC (for example, too long).
    /// 
    /// An existing PVC with that name that is not owned by the pod
    /// will *not* be used for the pod to avoid using an unrelated
    /// volume by mistake. Starting the pod is then blocked until
    /// the unrelated PVC is removed. If such a pre-created PVC is
    /// meant to be used by the pod, the PVC has to updated with an
    /// owner reference to the pod once the pod exists. Normally
    /// this should not be necessary, but it may be useful when
    /// manually reconstructing a broken cluster.
    /// 
    /// This field is read-only and no changes will be made by Kubernetes
    /// to the PVC after it has been created.
    /// 
    /// Required, must not be nil.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeClaimTemplate")]
    pub volume_claim_template: Option<IntegrationTemplateSpecVolumesEphemeralVolumeClaimTemplate>,
}

/// Will be used to create a stand-alone PVC to provision the volume.
/// The pod in which this EphemeralVolumeSource is embedded will be the
/// owner of the PVC, i.e. the PVC will be deleted together with the
/// pod.  The name of the PVC will be `<pod name>-<volume name>` where
/// `<volume name>` is the name from the `PodSpec.Volumes` array
/// entry. Pod validation will reject the pod if the concatenated name
/// is not valid for a PVC (for example, too long).
/// 
/// An existing PVC with that name that is not owned by the pod
/// will *not* be used for the pod to avoid using an unrelated
/// volume by mistake. Starting the pod is then blocked until
/// the unrelated PVC is removed. If such a pre-created PVC is
/// meant to be used by the pod, the PVC has to updated with an
/// owner reference to the pod once the pod exists. Normally
/// this should not be necessary, but it may be useful when
/// manually reconstructing a broken cluster.
/// 
/// This field is read-only and no changes will be made by Kubernetes
/// to the PVC after it has been created.
/// 
/// Required, must not be nil.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesEphemeralVolumeClaimTemplate {
    /// May contain labels and annotations that will be copied into the PVC
    /// when creating it. No other fields are allowed and will be rejected during
    /// validation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<IntegrationTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadata>,
    /// The specification for the PersistentVolumeClaim. The entire content is
    /// copied unchanged into the PVC that gets created from this
    /// template. The same fields as in a PersistentVolumeClaim
    /// are also valid here.
    pub spec: IntegrationTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec,
}

/// May contain labels and annotations that will be copied into the PVC
/// when creating it. No other fields are allowed and will be rejected during
/// validation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadata {
}

/// The specification for the PersistentVolumeClaim. The entire content is
/// copied unchanged into the PVC that gets created from this
/// template. The same fields as in a PersistentVolumeClaim
/// are also valid here.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec {
    /// accessModes contains the desired access modes the volume should have.
    /// More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    /// dataSource field can be used to specify either:
    /// * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
    /// * An existing PVC (PersistentVolumeClaim)
    /// If the provisioner or an external controller can support the specified data source,
    /// it will create a new volume based on the contents of the specified data source.
    /// When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
    /// and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
    /// If the namespace is specified, then dataSourceRef will not be copied to dataSource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSource")]
    pub data_source: Option<IntegrationTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource>,
    /// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
    /// volume is desired. This may be any object from a non-empty API group (non
    /// core object) or a PersistentVolumeClaim object.
    /// When this field is specified, volume binding will only succeed if the type of
    /// the specified object matches some installed volume populator or dynamic
    /// provisioner.
    /// This field will replace the functionality of the dataSource field and as such
    /// if both fields are non-empty, they must have the same value. For backwards
    /// compatibility, when namespace isn't specified in dataSourceRef,
    /// both fields (dataSource and dataSourceRef) will be set to the same
    /// value automatically if one of them is empty and the other is non-empty.
    /// When namespace is specified in dataSourceRef,
    /// dataSource isn't set to the same value and must be empty.
    /// There are three important differences between dataSource and dataSourceRef:
    /// * While dataSource only allows two specific types of objects, dataSourceRef
    ///   allows any non-core object, as well as PersistentVolumeClaim objects.
    /// * While dataSource ignores disallowed values (dropping them), dataSourceRef
    ///   preserves all values, and generates an error if a disallowed value is
    ///   specified.
    /// * While dataSource only allows local objects, dataSourceRef allows objects
    ///   in any namespaces.
    /// (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
    /// (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSourceRef")]
    pub data_source_ref: Option<IntegrationTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef>,
    /// resources represents the minimum resources the volume should have.
    /// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
    /// that are lower than previous value but must still be higher than capacity recorded in the
    /// status field of the claim.
    /// More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<IntegrationTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources>,
    /// selector is a label query over volumes to consider for binding.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<IntegrationTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector>,
    /// storageClassName is the name of the StorageClass required by the claim.
    /// More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    /// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
    /// If specified, the CSI driver will create or update the volume with the attributes defined
    /// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
    /// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
    /// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
    /// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
    /// will be set by the persistentvolume controller if it exists.
    /// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
    /// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
    /// exists.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/>
    /// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeAttributesClassName")]
    pub volume_attributes_class_name: Option<String>,
    /// volumeMode defines what type of volume is required by the claim.
    /// Value of Filesystem is implied when not included in claim spec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMode")]
    pub volume_mode: Option<String>,
    /// volumeName is the binding reference to the PersistentVolume backing this claim.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
}

/// dataSource field can be used to specify either:
/// * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
/// * An existing PVC (PersistentVolumeClaim)
/// If the provisioner or an external controller can support the specified data source,
/// it will create a new volume based on the contents of the specified data source.
/// When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
/// and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
/// If the namespace is specified, then dataSourceRef will not be copied to dataSource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource {
    /// APIGroup is the group for the resource being referenced.
    /// If APIGroup is not specified, the specified Kind must be in the core API group.
    /// For any other third-party types, APIGroup is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    /// Kind is the type of resource being referenced
    pub kind: String,
    /// Name is the name of resource being referenced
    pub name: String,
}

/// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
/// volume is desired. This may be any object from a non-empty API group (non
/// core object) or a PersistentVolumeClaim object.
/// When this field is specified, volume binding will only succeed if the type of
/// the specified object matches some installed volume populator or dynamic
/// provisioner.
/// This field will replace the functionality of the dataSource field and as such
/// if both fields are non-empty, they must have the same value. For backwards
/// compatibility, when namespace isn't specified in dataSourceRef,
/// both fields (dataSource and dataSourceRef) will be set to the same
/// value automatically if one of them is empty and the other is non-empty.
/// When namespace is specified in dataSourceRef,
/// dataSource isn't set to the same value and must be empty.
/// There are three important differences between dataSource and dataSourceRef:
/// * While dataSource only allows two specific types of objects, dataSourceRef
///   allows any non-core object, as well as PersistentVolumeClaim objects.
/// * While dataSource ignores disallowed values (dropping them), dataSourceRef
///   preserves all values, and generates an error if a disallowed value is
///   specified.
/// * While dataSource only allows local objects, dataSourceRef allows objects
///   in any namespaces.
/// (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
/// (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
    /// APIGroup is the group for the resource being referenced.
    /// If APIGroup is not specified, the specified Kind must be in the core API group.
    /// For any other third-party types, APIGroup is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    /// Kind is the type of resource being referenced
    pub kind: String,
    /// Name is the name of resource being referenced
    pub name: String,
    /// Namespace is the namespace of resource being referenced
    /// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
    /// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// resources represents the minimum resources the volume should have.
/// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
/// that are lower than previous value but must still be higher than capacity recorded in the
/// status field of the claim.
/// More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources {
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// selector is a label query over volumes to consider for binding.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<IntegrationTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesFc {
    /// fsType is the filesystem type to mount.
    /// Must be a filesystem type supported by the host operating system.
    /// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// lun is Optional: FC target lun number
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lun: Option<i32>,
    /// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
    /// the ReadOnly setting in VolumeMounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// targetWWNs is Optional: FC target worldwide names (WWNs)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetWWNs")]
    pub target_ww_ns: Option<Vec<String>>,
    /// wwids Optional: FC volume world wide identifiers (wwids)
    /// Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wwids: Option<Vec<String>>,
}

/// flexVolume represents a generic volume resource that is
/// provisioned/attached using an exec based plugin.
/// Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesFlexVolume {
    /// driver is the name of the driver to use for this volume.
    pub driver: String,
    /// fsType is the filesystem type to mount.
    /// Must be a filesystem type supported by the host operating system.
    /// Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// options is Optional: this field holds extra command options if any.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, String>>,
    /// readOnly is Optional: defaults to false (read/write). ReadOnly here will force
    /// the ReadOnly setting in VolumeMounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// secretRef is Optional: secretRef is reference to the secret object containing
    /// sensitive information to pass to the plugin scripts. This may be
    /// empty if no secret object is specified. If the secret object
    /// contains more than one secret, all secrets are passed to the plugin
    /// scripts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<IntegrationTemplateSpecVolumesFlexVolumeSecretRef>,
}

/// secretRef is Optional: secretRef is reference to the secret object containing
/// sensitive information to pass to the plugin scripts. This may be
/// empty if no secret object is specified. If the secret object
/// contains more than one secret, all secrets are passed to the plugin
/// scripts.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesFlexVolumeSecretRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.
/// Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesFlocker {
    /// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
    /// should be considered as deprecated
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetName")]
    pub dataset_name: Option<String>,
    /// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetUUID")]
    pub dataset_uuid: Option<String>,
}

/// gcePersistentDisk represents a GCE Disk resource that is attached to a
/// kubelet's host machine and then exposed to the pod.
/// Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree
/// gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.
/// More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesGcePersistentDisk {
    /// fsType is filesystem type of the volume that you want to mount.
    /// Tip: Ensure that the filesystem type is supported by the host operating system.
    /// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// partition is the partition in the volume that you want to mount.
    /// If omitted, the default is to mount by volume name.
    /// Examples: For volume /dev/sda1, you specify the partition as "1".
    /// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition: Option<i32>,
    /// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>
    #[serde(rename = "pdName")]
    pub pd_name: String,
    /// readOnly here will force the ReadOnly setting in VolumeMounts.
    /// Defaults to false.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

/// gitRepo represents a git repository at a particular revision.
/// Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an
/// EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
/// into the Pod's container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesGitRepo {
    /// directory is the target directory name.
    /// Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
    /// git repository.  Otherwise, if specified, the volume will contain the git repository in
    /// the subdirectory with the given name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<String>,
    /// repository is the URL
    pub repository: String,
    /// revision is the commit hash for the specified revision.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

/// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
/// Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.
/// More info: <https://examples.k8s.io/volumes/glusterfs/README.md>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesGlusterfs {
    /// endpoints is the endpoint name that details Glusterfs topology.
    /// More info: <https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod>
    pub endpoints: String,
    /// path is the Glusterfs volume path.
    /// More info: <https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod>
    pub path: String,
    /// readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
    /// Defaults to false.
    /// More info: <https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

/// hostPath represents a pre-existing file or directory on the host
/// machine that is directly exposed to the container. This is generally
/// used for system agents or other privileged things that are allowed
/// to see the host machine. Most containers will NOT need this.
/// More info: <https://kubernetes.io/docs/concepts/storage/volumes#hostpath>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesHostPath {
    /// path of the directory on the host.
    /// If the path is a symlink, it will follow the link to the real path.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#hostpath>
    pub path: String,
    /// type for HostPath Volume
    /// Defaults to ""
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#hostpath>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.
/// The volume is resolved at pod startup depending on which PullPolicy value is provided:
/// 
/// - Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
/// - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
/// - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
/// 
/// The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.
/// A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.
/// The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.
/// The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.
/// The volume will be mounted read-only (ro) and non-executable files (noexec).
/// Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath) before 1.33.
/// The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesImage {
    /// Policy for pulling OCI objects. Possible values are:
    /// Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
    /// Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
    /// IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
    /// Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullPolicy")]
    pub pull_policy: Option<String>,
    /// Required: Image or artifact reference to be used.
    /// Behaves in the same way as pod.spec.containers[*].image.
    /// Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.
    /// More info: <https://kubernetes.io/docs/concepts/containers/images>
    /// This field is optional to allow higher level config management to default or override
    /// container images in workload controllers like Deployments and StatefulSets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reference: Option<String>,
}

/// iscsi represents an ISCSI Disk resource that is attached to a
/// kubelet's host machine and then exposed to the pod.
/// More info: <https://examples.k8s.io/volumes/iscsi/README.md>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesIscsi {
    /// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chapAuthDiscovery")]
    pub chap_auth_discovery: Option<bool>,
    /// chapAuthSession defines whether support iSCSI Session CHAP authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chapAuthSession")]
    pub chap_auth_session: Option<bool>,
    /// fsType is the filesystem type of the volume that you want to mount.
    /// Tip: Ensure that the filesystem type is supported by the host operating system.
    /// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#iscsi>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// initiatorName is the custom iSCSI Initiator Name.
    /// If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
    /// <target portal>:<volume name> will be created for the connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initiatorName")]
    pub initiator_name: Option<String>,
    /// iqn is the target iSCSI Qualified Name.
    pub iqn: String,
    /// iscsiInterface is the interface Name that uses an iSCSI transport.
    /// Defaults to 'default' (tcp).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iscsiInterface")]
    pub iscsi_interface: Option<String>,
    /// lun represents iSCSI Target Lun number.
    pub lun: i32,
    /// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
    /// is other than default (typically TCP ports 860 and 3260).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub portals: Option<Vec<String>>,
    /// readOnly here will force the ReadOnly setting in VolumeMounts.
    /// Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// secretRef is the CHAP Secret for iSCSI target and initiator authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<IntegrationTemplateSpecVolumesIscsiSecretRef>,
    /// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
    /// is other than default (typically TCP ports 860 and 3260).
    #[serde(rename = "targetPortal")]
    pub target_portal: String,
}

/// secretRef is the CHAP Secret for iSCSI target and initiator authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesIscsiSecretRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// nfs represents an NFS mount on the host that shares a pod's lifetime
/// More info: <https://kubernetes.io/docs/concepts/storage/volumes#nfs>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesNfs {
    /// path that is exported by the NFS server.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#nfs>
    pub path: String,
    /// readOnly here will force the NFS export to be mounted with read-only permissions.
    /// Defaults to false.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#nfs>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// server is the hostname or IP address of the NFS server.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#nfs>
    pub server: String,
}

/// persistentVolumeClaimVolumeSource represents a reference to a
/// PersistentVolumeClaim in the same namespace.
/// More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesPersistentVolumeClaim {
    /// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
    /// More info: <https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims>
    #[serde(rename = "claimName")]
    pub claim_name: String,
    /// readOnly Will force the ReadOnly setting in VolumeMounts.
    /// Default false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

/// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.
/// Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesPhotonPersistentDisk {
    /// fsType is the filesystem type to mount.
    /// Must be a filesystem type supported by the host operating system.
    /// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// pdID is the ID that identifies Photon Controller persistent disk
    #[serde(rename = "pdID")]
    pub pd_id: String,
}

/// portworxVolume represents a portworx volume attached and mounted on kubelets host machine.
/// Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type
/// are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate
/// is on.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesPortworxVolume {
    /// fSType represents the filesystem type to mount
    /// Must be a filesystem type supported by the host operating system.
    /// Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// readOnly defaults to false (read/write). ReadOnly here will force
    /// the ReadOnly setting in VolumeMounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// volumeID uniquely identifies a Portworx volume
    #[serde(rename = "volumeID")]
    pub volume_id: String,
}

/// projected items for all in one resources secrets, configmaps, and downward API
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesProjected {
    /// defaultMode are the mode bits used to set permissions on created files by default.
    /// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
    /// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
    /// Directories within the path are not affected by this setting.
    /// This might be in conflict with other options that affect the file
    /// mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    /// sources is the list of volume projections. Each entry in this list
    /// handles one source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<IntegrationTemplateSpecVolumesProjectedSources>>,
}

/// Projection that may be projected along with other supported volume types.
/// Exactly one of these fields must be set.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesProjectedSources {
    /// ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
    /// of ClusterTrustBundle objects in an auto-updating file.
    /// 
    /// Alpha, gated by the ClusterTrustBundleProjection feature gate.
    /// 
    /// ClusterTrustBundle objects can either be selected by name, or by the
    /// combination of signer name and a label selector.
    /// 
    /// Kubelet performs aggressive normalization of the PEM contents written
    /// into the pod filesystem.  Esoteric PEM features such as inter-block
    /// comments and block headers are stripped.  Certificates are deduplicated.
    /// The ordering of certificates within the file is arbitrary, and Kubelet
    /// may change the order over time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterTrustBundle")]
    pub cluster_trust_bundle: Option<IntegrationTemplateSpecVolumesProjectedSourcesClusterTrustBundle>,
    /// configMap information about the configMap data to project
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<IntegrationTemplateSpecVolumesProjectedSourcesConfigMap>,
    /// downwardAPI information about the downwardAPI data to project
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "downwardAPI")]
    pub downward_api: Option<IntegrationTemplateSpecVolumesProjectedSourcesDownwardApi>,
    /// secret information about the secret data to project
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<IntegrationTemplateSpecVolumesProjectedSourcesSecret>,
    /// serviceAccountToken is information about the serviceAccountToken data to project
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountToken")]
    pub service_account_token: Option<IntegrationTemplateSpecVolumesProjectedSourcesServiceAccountToken>,
}

/// ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
/// of ClusterTrustBundle objects in an auto-updating file.
/// 
/// Alpha, gated by the ClusterTrustBundleProjection feature gate.
/// 
/// ClusterTrustBundle objects can either be selected by name, or by the
/// combination of signer name and a label selector.
/// 
/// Kubelet performs aggressive normalization of the PEM contents written
/// into the pod filesystem.  Esoteric PEM features such as inter-block
/// comments and block headers are stripped.  Certificates are deduplicated.
/// The ordering of certificates within the file is arbitrary, and Kubelet
/// may change the order over time.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesProjectedSourcesClusterTrustBundle {
    /// Select all ClusterTrustBundles that match this label selector.  Only has
    /// effect if signerName is set.  Mutually-exclusive with name.  If unset,
    /// interpreted as "match nothing".  If set but empty, interpreted as "match
    /// everything".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<IntegrationTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector>,
    /// Select a single ClusterTrustBundle by object name.  Mutually-exclusive
    /// with signerName and labelSelector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// If true, don't block pod startup if the referenced ClusterTrustBundle(s)
    /// aren't available.  If using name, then the named ClusterTrustBundle is
    /// allowed not to exist.  If using signerName, then the combination of
    /// signerName and labelSelector is allowed to match zero
    /// ClusterTrustBundles.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
    /// Relative path from the volume root to write the bundle.
    pub path: String,
    /// Select all ClusterTrustBundles that match this signer name.
    /// Mutually-exclusive with name.  The contents of all selected
    /// ClusterTrustBundles will be unified and deduplicated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signerName")]
    pub signer_name: Option<String>,
}

/// Select all ClusterTrustBundles that match this label selector.  Only has
/// effect if signerName is set.  Mutually-exclusive with name.  If unset,
/// interpreted as "match nothing".  If set but empty, interpreted as "match
/// everything".
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<IntegrationTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// configMap information about the configMap data to project
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesProjectedSourcesConfigMap {
    /// items if unspecified, each key-value pair in the Data field of the referenced
    /// ConfigMap will be projected into the volume as a file whose name is the
    /// key and content is the value. If specified, the listed keys will be
    /// projected into the specified paths, and unlisted keys will not be
    /// present. If a key is specified which is not present in the ConfigMap,
    /// the volume setup will error unless it is marked optional. Paths must be
    /// relative and may not contain the '..' path or start with '..'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<IntegrationTemplateSpecVolumesProjectedSourcesConfigMapItems>>,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// optional specify whether the ConfigMap or its keys must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Maps a string key to a path within a volume.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesProjectedSourcesConfigMapItems {
    /// key is the key to project.
    pub key: String,
    /// mode is Optional: mode bits used to set permissions on this file.
    /// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
    /// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
    /// If not specified, the volume defaultMode will be used.
    /// This might be in conflict with other options that affect the file
    /// mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    /// path is the relative path of the file to map the key to.
    /// May not be an absolute path.
    /// May not contain the path element '..'.
    /// May not start with the string '..'.
    pub path: String,
}

/// downwardAPI information about the downwardAPI data to project
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesProjectedSourcesDownwardApi {
    /// Items is a list of DownwardAPIVolume file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<IntegrationTemplateSpecVolumesProjectedSourcesDownwardApiItems>>,
}

/// DownwardAPIVolumeFile represents information to create the file containing the pod field
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesProjectedSourcesDownwardApiItems {
    /// Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<IntegrationTemplateSpecVolumesProjectedSourcesDownwardApiItemsFieldRef>,
    /// Optional: mode bits used to set permissions on this file, must be an octal value
    /// between 0000 and 0777 or a decimal value between 0 and 511.
    /// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
    /// If not specified, the volume defaultMode will be used.
    /// This might be in conflict with other options that affect the file
    /// mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    /// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
    pub path: String,
    /// Selects a resource of the container: only resources limits and requests
    /// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<IntegrationTemplateSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef>,
}

/// Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesProjectedSourcesDownwardApiItemsFieldRef {
    /// Version of the schema the FieldPath is written in terms of, defaults to "v1".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Path of the field to select in the specified API version.
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Selects a resource of the container: only resources limits and requests
/// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef {
    /// Container name: required for volumes, optional for env vars
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    /// Specifies the output format of the exposed resources, defaults to "1"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    /// Required: resource to select
    pub resource: String,
}

/// secret information about the secret data to project
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesProjectedSourcesSecret {
    /// items if unspecified, each key-value pair in the Data field of the referenced
    /// Secret will be projected into the volume as a file whose name is the
    /// key and content is the value. If specified, the listed keys will be
    /// projected into the specified paths, and unlisted keys will not be
    /// present. If a key is specified which is not present in the Secret,
    /// the volume setup will error unless it is marked optional. Paths must be
    /// relative and may not contain the '..' path or start with '..'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<IntegrationTemplateSpecVolumesProjectedSourcesSecretItems>>,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// optional field specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Maps a string key to a path within a volume.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesProjectedSourcesSecretItems {
    /// key is the key to project.
    pub key: String,
    /// mode is Optional: mode bits used to set permissions on this file.
    /// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
    /// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
    /// If not specified, the volume defaultMode will be used.
    /// This might be in conflict with other options that affect the file
    /// mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    /// path is the relative path of the file to map the key to.
    /// May not be an absolute path.
    /// May not contain the path element '..'.
    /// May not start with the string '..'.
    pub path: String,
}

/// serviceAccountToken is information about the serviceAccountToken data to project
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesProjectedSourcesServiceAccountToken {
    /// audience is the intended audience of the token. A recipient of a token
    /// must identify itself with an identifier specified in the audience of the
    /// token, and otherwise should reject the token. The audience defaults to the
    /// identifier of the apiserver.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audience: Option<String>,
    /// expirationSeconds is the requested duration of validity of the service
    /// account token. As the token approaches expiration, the kubelet volume
    /// plugin will proactively rotate the service account token. The kubelet will
    /// start trying to rotate the token if the token is older than 80 percent of
    /// its time to live or if the token is older than 24 hours.Defaults to 1 hour
    /// and must be at least 10 minutes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expirationSeconds")]
    pub expiration_seconds: Option<i64>,
    /// path is the path relative to the mount point of the file to project the
    /// token into.
    pub path: String,
}

/// quobyte represents a Quobyte mount on the host that shares a pod's lifetime.
/// Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesQuobyte {
    /// group to map volume access to
    /// Default is no group
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// readOnly here will force the Quobyte volume to be mounted with read-only permissions.
    /// Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// registry represents a single or multiple Quobyte Registry services
    /// specified as a string as host:port pair (multiple entries are separated with commas)
    /// which acts as the central registry for volumes
    pub registry: String,
    /// tenant owning the given Quobyte volume in the Backend
    /// Used with dynamically provisioned Quobyte volumes, value is set by the plugin
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tenant: Option<String>,
    /// user to map volume access to
    /// Defaults to serivceaccount user
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    /// volume is a string that references an already created Quobyte volume by name.
    pub volume: String,
}

/// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
/// Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.
/// More info: <https://examples.k8s.io/volumes/rbd/README.md>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesRbd {
    /// fsType is the filesystem type of the volume that you want to mount.
    /// Tip: Ensure that the filesystem type is supported by the host operating system.
    /// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#rbd>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// image is the rados image name.
    /// More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>
    pub image: String,
    /// keyring is the path to key ring for RBDUser.
    /// Default is /etc/ceph/keyring.
    /// More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keyring: Option<String>,
    /// monitors is a collection of Ceph monitors.
    /// More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>
    pub monitors: Vec<String>,
    /// pool is the rados pool name.
    /// Default is rbd.
    /// More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pool: Option<String>,
    /// readOnly here will force the ReadOnly setting in VolumeMounts.
    /// Defaults to false.
    /// More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// secretRef is name of the authentication secret for RBDUser. If provided
    /// overrides keyring.
    /// Default is nil.
    /// More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<IntegrationTemplateSpecVolumesRbdSecretRef>,
    /// user is the rados user name.
    /// Default is admin.
    /// More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// secretRef is name of the authentication secret for RBDUser. If provided
/// overrides keyring.
/// Default is nil.
/// More info: <https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesRbdSecretRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
/// Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesScaleIo {
    /// fsType is the filesystem type to mount.
    /// Must be a filesystem type supported by the host operating system.
    /// Ex. "ext4", "xfs", "ntfs".
    /// Default is "xfs".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// gateway is the host address of the ScaleIO API Gateway.
    pub gateway: String,
    /// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protectionDomain")]
    pub protection_domain: Option<String>,
    /// readOnly Defaults to false (read/write). ReadOnly here will force
    /// the ReadOnly setting in VolumeMounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// secretRef references to the secret for ScaleIO user and other
    /// sensitive information. If this is not provided, Login operation will fail.
    #[serde(rename = "secretRef")]
    pub secret_ref: IntegrationTemplateSpecVolumesScaleIoSecretRef,
    /// sslEnabled Flag enable/disable SSL communication with Gateway, default false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslEnabled")]
    pub ssl_enabled: Option<bool>,
    /// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
    /// Default is ThinProvisioned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageMode")]
    pub storage_mode: Option<String>,
    /// storagePool is the ScaleIO Storage Pool associated with the protection domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePool")]
    pub storage_pool: Option<String>,
    /// system is the name of the storage system as configured in ScaleIO.
    pub system: String,
    /// volumeName is the name of a volume already created in the ScaleIO system
    /// that is associated with this volume source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
}

/// secretRef references to the secret for ScaleIO user and other
/// sensitive information. If this is not provided, Login operation will fail.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesScaleIoSecretRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// secret represents a secret that should populate this volume.
/// More info: <https://kubernetes.io/docs/concepts/storage/volumes#secret>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesSecret {
    /// defaultMode is Optional: mode bits used to set permissions on created files by default.
    /// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
    /// YAML accepts both octal and decimal values, JSON requires decimal values
    /// for mode bits. Defaults to 0644.
    /// Directories within the path are not affected by this setting.
    /// This might be in conflict with other options that affect the file
    /// mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    /// items If unspecified, each key-value pair in the Data field of the referenced
    /// Secret will be projected into the volume as a file whose name is the
    /// key and content is the value. If specified, the listed keys will be
    /// projected into the specified paths, and unlisted keys will not be
    /// present. If a key is specified which is not present in the Secret,
    /// the volume setup will error unless it is marked optional. Paths must be
    /// relative and may not contain the '..' path or start with '..'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<IntegrationTemplateSpecVolumesSecretItems>>,
    /// optional field specify whether the Secret or its keys must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
    /// secretName is the name of the secret in the pod's namespace to use.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#secret>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// Maps a string key to a path within a volume.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesSecretItems {
    /// key is the key to project.
    pub key: String,
    /// mode is Optional: mode bits used to set permissions on this file.
    /// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
    /// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
    /// If not specified, the volume defaultMode will be used.
    /// This might be in conflict with other options that affect the file
    /// mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    /// path is the relative path of the file to map the key to.
    /// May not be an absolute path.
    /// May not contain the path element '..'.
    /// May not start with the string '..'.
    pub path: String,
}

/// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
/// Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesStorageos {
    /// fsType is the filesystem type to mount.
    /// Must be a filesystem type supported by the host operating system.
    /// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// readOnly defaults to false (read/write). ReadOnly here will force
    /// the ReadOnly setting in VolumeMounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// secretRef specifies the secret to use for obtaining the StorageOS API
    /// credentials.  If not specified, default values will be attempted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<IntegrationTemplateSpecVolumesStorageosSecretRef>,
    /// volumeName is the human-readable name of the StorageOS volume.  Volume
    /// names are only unique within a namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
    /// volumeNamespace specifies the scope of the volume within StorageOS.  If no
    /// namespace is specified then the Pod's namespace will be used.  This allows the
    /// Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
    /// Set VolumeName to any name to override the default behaviour.
    /// Set to "default" if you are not using namespaces within StorageOS.
    /// Namespaces that do not pre-exist within StorageOS will be created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeNamespace")]
    pub volume_namespace: Option<String>,
}

/// secretRef specifies the secret to use for obtaining the StorageOS API
/// credentials.  If not specified, default values will be attempted.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesStorageosSecretRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.
/// Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type
/// are redirected to the csi.vsphere.vmware.com CSI driver.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTemplateSpecVolumesVsphereVolume {
    /// fsType is filesystem type to mount.
    /// Must be a filesystem type supported by the host operating system.
    /// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePolicyID")]
    pub storage_policy_id: Option<String>,
    /// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePolicyName")]
    pub storage_policy_name: Option<String>,
    /// volumePath is the path that identifies vSphere volume vmdk
    #[serde(rename = "volumePath")]
    pub volume_path: String,
}

/// the traits needed to run this Integration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraits {
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "3scale")]
    pub r#_3scale: Option<IntegrationTraits3scale>,
    /// The extension point with addon traits
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addons: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
    /// The configuration of Affinity trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<IntegrationTraitsAffinity>,
    /// The configuration of Builder trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub builder: Option<IntegrationTraitsBuilder>,
    /// The configuration of Camel trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub camel: Option<IntegrationTraitsCamel>,
    /// The configuration of Container trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<IntegrationTraitsContainer>,
    /// The configuration of Cron trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cron: Option<IntegrationTraitsCron>,
    /// The configuration of Dependencies trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dependencies: Option<IntegrationTraitsDependencies>,
    /// The configuration of Deployer trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployer: Option<IntegrationTraitsDeployer>,
    /// The configuration of Deployment trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<IntegrationTraitsDeployment>,
    /// The configuration of Environment trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<IntegrationTraitsEnvironment>,
    /// The configuration of Error Handler trait
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "error-handler")]
    pub error_handler: Option<IntegrationTraitsErrorHandler>,
    /// The configuration of GC trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gc: Option<IntegrationTraitsGc>,
    /// The configuration of Health trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health: Option<IntegrationTraitsHealth>,
    /// The configuration of Ingress trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingress: Option<IntegrationTraitsIngress>,
    /// The configuration of Init Containers trait
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "init-containers")]
    pub init_containers: Option<IntegrationTraitsInitContainers>,
    /// The configuration of Istio trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub istio: Option<IntegrationTraitsIstio>,
    /// The configuration of Jolokia trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jolokia: Option<IntegrationTraitsJolokia>,
    /// The configuration of JVM trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jvm: Option<IntegrationTraitsJvm>,
    /// The configuration of Kamelets trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kamelets: Option<IntegrationTraitsKamelets>,
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keda: Option<IntegrationTraitsKeda>,
    /// The configuration of Knative trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub knative: Option<IntegrationTraitsKnative>,
    /// The configuration of Knative Service trait
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "knative-service")]
    pub knative_service: Option<IntegrationTraitsKnativeService>,
    /// The configuration of Logging trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logging: Option<IntegrationTraitsLogging>,
    /// The configuration of Master trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub master: Option<IntegrationTraitsMaster>,
    /// The configuration of Mount trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mount: Option<IntegrationTraitsMount>,
    /// The configuration of OpenAPI trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openapi: Option<IntegrationTraitsOpenapi>,
    /// The configuration of Owner trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<IntegrationTraitsOwner>,
    /// The configuration of PDB trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pdb: Option<IntegrationTraitsPdb>,
    /// The configuration of Platform trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<IntegrationTraitsPlatform>,
    /// The configuration of Pod trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod: Option<IntegrationTraitsPod>,
    /// The configuration of Prometheus trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prometheus: Option<IntegrationTraitsPrometheus>,
    /// The configuration of Pull Secret trait
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pull-secret")]
    pub pull_secret: Option<IntegrationTraitsPullSecret>,
    /// The configuration of Quarkus trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quarkus: Option<IntegrationTraitsQuarkus>,
    /// The configuration of Registry trait (support removed since version 2.5.0).
    /// Deprecated: use jvm trait or read documentation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registry: Option<IntegrationTraitsRegistry>,
    /// The configuration of Route trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub route: Option<IntegrationTraitsRoute>,
    /// The configuration of Security Context trait
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "security-context")]
    pub security_context: Option<IntegrationTraitsSecurityContext>,
    /// The configuration of Service trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<IntegrationTraitsService>,
    /// The configuration of Service Binding trait
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "service-binding")]
    pub service_binding: Option<IntegrationTraitsServiceBinding>,
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strimzi: Option<IntegrationTraitsStrimzi>,
    /// The configuration of Telemetry trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub telemetry: Option<IntegrationTraitsTelemetry>,
    /// The configuration of Toleration trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub toleration: Option<IntegrationTraitsToleration>,
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing: Option<IntegrationTraitsTracing>,
}

/// Deprecated: for backward compatibility.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraits3scale {
    /// TraitConfiguration parameters configuration
    pub configuration: BTreeMap<String, serde_json::Value>,
}

/// The configuration of Affinity trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsAffinity {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Defines a set of nodes the integration pod(s) are eligible to be scheduled on, based on labels on the node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinityLabels")]
    pub node_affinity_labels: Option<Vec<String>>,
    /// Always co-locates multiple replicas of the integration in the same node (default `false`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinity")]
    pub pod_affinity: Option<bool>,
    /// Defines a set of pods (namely those matching the label selector, relative to the given namespace) that the
    /// integration pod(s) should be co-located with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinityLabels")]
    pub pod_affinity_labels: Option<Vec<String>>,
    /// Never co-locates multiple replicas of the integration in the same node (default `false`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinity")]
    pub pod_anti_affinity: Option<bool>,
    /// Defines a set of pods (namely those matching the label selector, relative to the given namespace) that the
    /// integration pod(s) should not be co-located with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinityLabels")]
    pub pod_anti_affinity_labels: Option<Vec<String>>,
}

/// The configuration of Builder trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsBuilder {
    /// When using `pod` strategy, annotation to use for the builder pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Specify a base image. In order to have the application working properly it must be a container image which has a Java JDK
    /// installed and ready to use on path (ie `/usr/bin/java`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseImage")]
    pub base_image: Option<String>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Use the incremental image build option, to reuse existing containers (default `true`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "incrementalImageBuild")]
    pub incremental_image_build: Option<bool>,
    /// When using `pod` strategy, the maximum amount of CPU required by the pod builder.
    /// Deprecated: use TasksRequestCPU instead with task name `builder`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitCPU")]
    pub limit_cpu: Option<String>,
    /// When using `pod` strategy, the maximum amount of memory required by the pod builder.
    /// Deprecated: use TasksRequestCPU instead with task name `builder`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitMemory")]
    pub limit_memory: Option<String>,
    /// A list of references pointing to configmaps/secrets that contains a maven profile.
    /// This configmap/secret is a resource of the IntegrationKit created, therefore it needs to be present in the namespace where the operator is going to create the IntegrationKit.
    /// The content of the maven profile is expected to be a text containing a valid maven profile starting with `<profile>` and ending with `</profile>` that will be integrated as an inline profile in the POM.
    /// Syntax: [configmap|secret]:name[/key], where name represents the resource name, key optionally represents the resource key to be filtered (default key value = profile.xml).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mavenProfiles")]
    pub maven_profiles: Option<Vec<String>>,
    /// Defines a set of nodes the builder pod is eligible to be scheduled on, based on labels on the node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// The build order strategy to use, either `dependencies`, `fifo` or `sequential` (default is the platform default)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orderStrategy")]
    pub order_strategy: Option<IntegrationTraitsBuilderOrderStrategy>,
    /// The list of manifest platforms to use to build a container image (default `linux/amd64`).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platforms: Option<Vec<String>>,
    /// A list of properties to be provided to the build task
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<String>>,
    /// When using `pod` strategy, the minimum amount of CPU required by the pod builder.
    /// Deprecated: use TasksRequestCPU instead with task name `builder`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCPU")]
    pub request_cpu: Option<String>,
    /// When using `pod` strategy, the minimum amount of memory required by the pod builder.
    /// Deprecated: use TasksRequestCPU instead with task name `builder`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMemory")]
    pub request_memory: Option<String>,
    /// The strategy to use, either `pod` or `routine` (default `routine`)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<IntegrationTraitsBuilderStrategy>,
    /// A list of tasks to be executed (available only when using `pod` strategy) with format `<name>;<container-image>;<container-command>`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tasks: Option<Vec<String>>,
    /// A list of tasks sorted by the order of execution in a csv format, ie, `<taskName1>,<taskName2>,...`.
    /// Mind that you must include also the operator tasks (`builder`, `quarkus-native`, `package`, `jib`, `s2i`)
    /// if you need to execute them. Useful only with `pod` strategy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tasksFilter")]
    pub tasks_filter: Option<String>,
    /// A list of limit cpu configuration for the specific task with format `<task-name>:<limit-cpu-conf>`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tasksLimitCPU")]
    pub tasks_limit_cpu: Option<Vec<String>>,
    /// A list of limit memory configuration for the specific task with format `<task-name>:<limit-memory-conf>`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tasksLimitMemory")]
    pub tasks_limit_memory: Option<Vec<String>>,
    /// A list of request cpu configuration for the specific task with format `<task-name>:<request-cpu-conf>`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tasksRequestCPU")]
    pub tasks_request_cpu: Option<Vec<String>>,
    /// A list of request memory configuration for the specific task with format `<task-name>:<request-memory-conf>`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tasksRequestMemory")]
    pub tasks_request_memory: Option<Vec<String>>,
    /// Enable verbose logging on build components that support it (e.g. Kaniko build pod).
    /// Deprecated no longer in use
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verbose: Option<bool>,
}

/// The configuration of Builder trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationTraitsBuilderOrderStrategy {
    #[serde(rename = "dependencies")]
    Dependencies,
    #[serde(rename = "fifo")]
    Fifo,
    #[serde(rename = "sequential")]
    Sequential,
}

/// The configuration of Builder trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationTraitsBuilderStrategy {
    #[serde(rename = "pod")]
    Pod,
    #[serde(rename = "routine")]
    Routine,
}

/// The configuration of Camel trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsCamel {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// A list of properties to be provided to the Integration runtime
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<String>>,
    /// The runtime provider to use for the integration. (Default, Camel K Runtime).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeProvider")]
    pub runtime_provider: Option<IntegrationTraitsCamelRuntimeProvider>,
    /// The runtime version to use for the integration. It overrides the default version set in the Integration Platform.
    /// You can use a fixed version (for example "3.2.3") or a semantic version (for example "3.x") which will try to resolve
    /// to the best matching Catalog existing on the cluster (Default, the one provided by the operator version).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeVersion")]
    pub runtime_version: Option<String>,
}

/// The configuration of Camel trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationTraitsCamelRuntimeProvider {
    #[serde(rename = "quarkus")]
    Quarkus,
    #[serde(rename = "plain-quarkus")]
    PlainQuarkus,
}

/// The configuration of Container trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsContainer {
    /// Security Context AllowPrivilegeEscalation configuration (default false).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPrivilegeEscalation")]
    pub allow_privilege_escalation: Option<bool>,
    /// To automatically enable the trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Security Context Capabilities Add configuration (default none).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capabilitiesAdd")]
    pub capabilities_add: Option<Vec<String>>,
    /// Security Context Capabilities Drop configuration (default ALL).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capabilitiesDrop")]
    pub capabilities_drop: Option<Vec<String>>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Can be used to enable/disable http exposure via kubernetes Service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expose: Option<bool>,
    /// The main container image to use for the Integration. When using this parameter the operator will create a synthetic IntegrationKit which
    /// won't be able to execute traits requiring CamelCatalog. If the container image you're using is coming from an IntegrationKit, use instead
    /// Integration `.spec.integrationKit` parameter. If you're moving the Integration across environments, you will also need to create an "external" IntegrationKit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// The pull policy: Always|Never|IfNotPresent
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<IntegrationTraitsContainerImagePullPolicy>,
    /// The maximum amount of CPU to be provided (default 500 millicores).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitCPU")]
    pub limit_cpu: Option<String>,
    /// The maximum amount of memory to be provided (default 512 Mi).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitMemory")]
    pub limit_memory: Option<String>,
    /// The main container name. It's named `integration` by default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// To configure a different http port exposed by the container (default `8080`).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// To configure a different http port name for the port exposed by the container.
    /// It defaults to `http` only when the `expose` parameter is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portName")]
    pub port_name: Option<String>,
    /// List of container ports available in the container (syntax: <port-name>;<port-number>[;port-protocol]).
    /// When omitted, `port-protocol` (admitted values `TCP`, `UDP` or `SCTP`) is `TCP`.
    /// Don't use this for the primary http managed port (for which case you need to use `portName` and `port`).
    /// Don't use in Knative based environments.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<String>>,
    /// The minimum amount of CPU required (default 125 millicores).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCPU")]
    pub request_cpu: Option<String>,
    /// The minimum amount of memory required (default 128 Mi).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMemory")]
    pub request_memory: Option<String>,
    /// Security Context RunAsNonRoot configuration (default false).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    /// Security Context RunAsUser configuration (default none): this value is automatically retrieved in Openshift clusters when not explicitly set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// Security Context SeccompProfileType configuration (default RuntimeDefault).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfileType")]
    pub seccomp_profile_type: Option<IntegrationTraitsContainerSeccompProfileType>,
    /// To configure under which service port the http container port is to be exposed (default `80`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servicePort")]
    pub service_port: Option<i32>,
    /// To configure under which service port name the http container port is to be exposed (default `http`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servicePortName")]
    pub service_port_name: Option<String>,
}

/// The configuration of Container trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationTraitsContainerImagePullPolicy {
    Always,
    Never,
    IfNotPresent,
}

/// The configuration of Container trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationTraitsContainerSeccompProfileType {
    Unconfined,
    RuntimeDefault,
}

/// The configuration of Cron trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsCron {
    /// Specifies the duration in seconds, relative to the start time, that the job
    /// may be continuously active before it is considered to be failed.
    /// It defaults to 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activeDeadlineSeconds")]
    pub active_deadline_seconds: Option<i64>,
    /// Automatically deploy the integration as CronJob when all routes are
    /// either starting from a periodic consumer (only `cron`, `timer` and `quartz` are supported) or a passive consumer (e.g. `direct` is a passive consumer).
    /// 
    /// It's required that all periodic consumers have the same period, and it can be expressed as cron schedule (e.g. `1m` can be expressed as `0/1 * * * *`,
    /// while `35m` or `50s` cannot).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Specifies the number of retries before marking the job failed.
    /// It defaults to 2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backoffLimit")]
    pub backoff_limit: Option<i32>,
    /// A comma separated list of the Camel components that need to be customized in order for them to work when the schedule is triggered externally by Kubernetes.
    /// Supported components are currently: `cron`, `timer` and `quartz`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<String>,
    /// Specifies how to treat concurrent executions of a Job.
    /// Valid values are:
    /// - "Allow": allows CronJobs to run concurrently;
    /// - "Forbid" (default): forbids concurrent runs, skipping next run if previous run hasn't finished yet;
    /// - "Replace": cancels currently running job and replaces it with a new one
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "concurrencyPolicy")]
    pub concurrency_policy: Option<IntegrationTraitsCronConcurrencyPolicy>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Use the default Camel implementation of the `cron` endpoint (`quartz`) instead of trying to materialize the integration
    /// as Kubernetes CronJob.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fallback: Option<bool>,
    /// The CronJob schedule for the whole integration. If multiple routes are declared, they must have the same schedule for this
    /// mechanism to work correctly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
    /// Optional deadline in seconds for starting the job if it misses scheduled
    /// time for any reason.  Missed jobs executions will be counted as failed ones.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startingDeadlineSeconds")]
    pub starting_deadline_seconds: Option<i64>,
    /// The timezone that the CronJob will run on
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    pub time_zone: Option<String>,
}

/// The configuration of Cron trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationTraitsCronConcurrencyPolicy {
    Allow,
    Forbid,
    Replace,
}

/// The configuration of Dependencies trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsDependencies {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The configuration of Deployer trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsDeployer {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Allows to explicitly select the desired deployment kind between `deployment`, `cron-job` or `knative-service` when creating the resources for running the integration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<IntegrationTraitsDeployerKind>,
    /// Deprecated: won't be able to enforce client side update in the future.
    /// Use server-side apply to update the owned resources (default `true`).
    /// Note that it automatically falls back to client-side patching, if SSA is not available, e.g., on old Kubernetes clusters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useSSA")]
    pub use_ssa: Option<bool>,
}

/// The configuration of Deployer trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationTraitsDeployerKind {
    #[serde(rename = "deployment")]
    Deployment,
    #[serde(rename = "cron-job")]
    CronJob,
    #[serde(rename = "knative-service")]
    KnativeService,
}

/// The configuration of Deployment trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsDeployment {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The maximum time in seconds for the deployment to make progress before it
    /// is considered to be failed. It defaults to `60s`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "progressDeadlineSeconds")]
    pub progress_deadline_seconds: Option<i32>,
    /// The maximum number of pods that can be scheduled above the desired number of
    /// pods.
    /// Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
    /// This can not be 0 if MaxUnavailable is 0.
    /// Absolute number is calculated from percentage by rounding up.
    /// Defaults to `25%`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdateMaxSurge")]
    pub rolling_update_max_surge: Option<IntOrString>,
    /// The maximum number of pods that can be unavailable during the update.
    /// Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
    /// Absolute number is calculated from percentage by rounding down.
    /// This can not be 0 if MaxSurge is 0.
    /// Defaults to `25%`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdateMaxUnavailable")]
    pub rolling_update_max_unavailable: Option<IntOrString>,
    /// The deployment strategy to use to replace existing pods with new ones.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<IntegrationTraitsDeploymentStrategy>,
}

/// The configuration of Deployment trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationTraitsDeploymentStrategy {
    Recreate,
    RollingUpdate,
}

/// The configuration of Environment trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsEnvironment {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Enables injection of `NAMESPACE` and `POD_NAME` environment variables (default `true`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerMeta")]
    pub container_meta: Option<bool>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Propagates the `HTTP_PROXY`, `HTTPS_PROXY` and `NO_PROXY` environment variables (default `true`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpProxy")]
    pub http_proxy: Option<bool>,
    /// A list of environment variables to be added to the integration container.
    /// The syntax is either VAR=VALUE or VAR=[configmap|secret]:name/key, where name represents the resource name,
    /// and key represents the resource key to be mapped as and environment variable.
    /// These take precedence over any previously defined environment variables.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vars: Option<Vec<String>>,
}

/// The configuration of Error Handler trait
/// Deprecated: no longer in use.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsErrorHandler {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The error handler ref name provided or found in application properties
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
}

/// The configuration of GC trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsGc {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Discovery client cache to be used, either `disabled`, `disk` or `memory` (default `memory`).
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoveryCache")]
    pub discovery_cache: Option<IntegrationTraitsGcDiscoveryCache>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The configuration of GC trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationTraitsGcDiscoveryCache {
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "disk")]
    Disk,
    #[serde(rename = "memory")]
    Memory,
}

/// The configuration of Health trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsHealth {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Minimum consecutive failures for the liveness probe to be considered failed after having succeeded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessFailureThreshold")]
    pub liveness_failure_threshold: Option<i32>,
    /// Number of seconds after the container has started before the liveness probe is initiated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessInitialDelay")]
    pub liveness_initial_delay: Option<i32>,
    /// How often to perform the liveness probe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessPeriod")]
    pub liveness_period: Option<i32>,
    /// The liveness probe path to use (default provided by the Catalog runtime used).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<String>,
    /// Configures the liveness probe for the integration container (default `false`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbeEnabled")]
    pub liveness_probe_enabled: Option<bool>,
    /// Scheme to use when connecting to the liveness probe (default `HTTP`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessScheme")]
    pub liveness_scheme: Option<String>,
    /// Minimum consecutive successes for the liveness probe to be considered successful after having failed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessSuccessThreshold")]
    pub liveness_success_threshold: Option<i32>,
    /// Number of seconds after which the liveness probe times out.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessTimeout")]
    pub liveness_timeout: Option<i32>,
    /// Minimum consecutive failures for the readiness probe to be considered failed after having succeeded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessFailureThreshold")]
    pub readiness_failure_threshold: Option<i32>,
    /// Number of seconds after the container has started before the readiness probe is initiated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessInitialDelay")]
    pub readiness_initial_delay: Option<i32>,
    /// How often to perform the readiness probe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessPeriod")]
    pub readiness_period: Option<i32>,
    /// The readiness probe path to use (default provided by the Catalog runtime used).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<String>,
    /// Configures the readiness probe for the integration container (default `true`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbeEnabled")]
    pub readiness_probe_enabled: Option<bool>,
    /// Scheme to use when connecting to the readiness probe (default `HTTP`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessScheme")]
    pub readiness_scheme: Option<String>,
    /// Minimum consecutive successes for the readiness probe to be considered successful after having failed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessSuccessThreshold")]
    pub readiness_success_threshold: Option<i32>,
    /// Number of seconds after which the readiness probe times out.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessTimeout")]
    pub readiness_timeout: Option<i32>,
    /// Minimum consecutive failures for the startup probe to be considered failed after having succeeded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupFailureThreshold")]
    pub startup_failure_threshold: Option<i32>,
    /// Number of seconds after the container has started before the startup probe is initiated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupInitialDelay")]
    pub startup_initial_delay: Option<i32>,
    /// How often to perform the startup probe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupPeriod")]
    pub startup_period: Option<i32>,
    /// The startup probe path to use (default provided by the Catalog runtime used).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbe")]
    pub startup_probe: Option<String>,
    /// Configures the startup probe for the integration container (default `false`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbeEnabled")]
    pub startup_probe_enabled: Option<bool>,
    /// Scheme to use when connecting to the startup probe (default `HTTP`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupScheme")]
    pub startup_scheme: Option<String>,
    /// Minimum consecutive successes for the startup probe to be considered successful after having failed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupSuccessThreshold")]
    pub startup_success_threshold: Option<i32>,
    /// Number of seconds after which the startup probe times out.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupTimeout")]
    pub startup_timeout: Option<i32>,
}

/// The configuration of Ingress trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsIngress {
    /// The annotations added to the ingress.
    /// This can be used to set controller specific annotations, e.g., when using the NGINX Ingress controller:
    /// See <https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// To automatically add an ingress whenever the integration uses an HTTP endpoint consumer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// To configure the host exposed by the ingress.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// The Ingress class name as defined by the Ingress spec
    /// See <https://kubernetes.io/docs/concepts/services-networking/ingress/>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressClassName")]
    pub ingress_class_name: Option<String>,
    /// To configure the path exposed by the ingress (default `/`).
    /// Deprecated: In favor of `paths` - left for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// To configure the path type exposed by the ingress.
    /// One of `Exact`, `Prefix`, `ImplementationSpecific` (default to `Prefix`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathType")]
    pub path_type: Option<IntegrationTraitsIngressPathType>,
    /// To configure the paths exposed by the ingress (default `['/']`).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub paths: Option<Vec<String>>,
    /// To configure tls hosts
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsHosts")]
    pub tls_hosts: Option<Vec<String>>,
    /// To configure tls secret name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSecretName")]
    pub tls_secret_name: Option<String>,
}

/// The configuration of Ingress trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationTraitsIngressPathType {
    Exact,
    Prefix,
    ImplementationSpecific,
}

/// The configuration of Init Containers trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsInitContainers {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// A list of init tasks to be executed with format `<name>;<container-image>;<container-command>`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initTasks")]
    pub init_tasks: Option<Vec<String>>,
    /// A list of sidecar tasks to be executed with format `<name>;<container-image>;<container-command>`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sideCarTasks")]
    pub side_car_tasks: Option<Vec<String>>,
}

/// The configuration of Istio trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsIstio {
    /// Configures a (comma-separated) list of CIDR subnets that should not be intercepted by the Istio proxy (`10.0.0.0/8,172.16.0.0/12,192.168.0.0/16` by default).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<String>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Forces the value for labels `sidecar.istio.io/inject`. By default the label is set to `true` on deployment and not set on Knative Service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inject: Option<bool>,
}

/// The configuration of Jolokia trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsJolokia {
    /// The PEM encoded CA certification file path, used to verify client certificates,
    /// applicable when `protocol` is `https` and `use-ssl-client-authentication` is `true`
    /// (default `/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt` for OpenShift).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "CACert")]
    pub ca_cert: Option<String>,
    /// The principal(s) which must be given in a client certificate to allow access to the Jolokia endpoint,
    /// applicable when `protocol` is `https` and `use-ssl-client-authentication` is `true`
    /// (default `clientPrincipal=cn=system:master-proxy`, `cn=hawtio-online.hawtio.svc` and `cn=fuse-console.fuse.svc` for OpenShift).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientPrincipal")]
    pub client_principal: Option<Vec<String>>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Listen for multicast requests (default `false`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoveryEnabled")]
    pub discovery_enabled: Option<bool>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Mandate the client certificate contains a client flag in the extended key usage section,
    /// applicable when `protocol` is `https` and `use-ssl-client-authentication` is `true`
    /// (default `true` for OpenShift).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extendedClientCheck")]
    pub extended_client_check: Option<bool>,
    /// The Host address to which the Jolokia agent should bind to. If `"\*"` or `"0.0.0.0"` is given,
    /// the servers binds to every network interface (default `"*"`).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// A list of additional Jolokia options as defined
    /// in <https://jolokia.org/reference/html/agents.html#agent-jvm-config[JVM> agent configuration options]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<String>>,
    /// The password used for authentication, applicable when the `user` option is set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// The Jolokia endpoint port (default `8778`).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// The protocol to use, either `http` or `https` (default `https` for OpenShift)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Whether client certificates should be used for authentication (default `true` for OpenShift).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useSSLClientAuthentication")]
    pub use_ssl_client_authentication: Option<bool>,
    /// The user to be used for authentication
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// The configuration of JVM trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsJvm {
    /// A list of JVM agents to download and execute with format `<agent-name>;<agent-url>[;<jvm-agent-options>]`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agents: Option<Vec<String>>,
    /// Additional JVM classpath (use `Linux` classpath separator)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub classpath: Option<String>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Activates remote debugging, so that a debugger can be attached to the JVM, e.g., using port-forwarding
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub debug: Option<bool>,
    /// Transport address at which to listen for the newly launched JVM (default `*:5005`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "debugAddress")]
    pub debug_address: Option<String>,
    /// Suspends the target JVM immediately before the main class is loaded
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "debugSuspend")]
    pub debug_suspend: Option<bool>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The Jar dependency which will run the application. Leave it empty for managed Integrations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jar: Option<String>,
    /// A list of JVM options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<String>>,
    /// Prints the command used the start the JVM in the container logs (default `true`)
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "printCommand")]
    pub print_command: Option<bool>,
}

/// The configuration of Kamelets trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsKamelets {
    /// Automatically inject all referenced Kamelets and their default configuration (enabled by default)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Comma separated list of Kamelet names to load into the current integration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub list: Option<String>,
    /// The directory where the application mounts and reads Kamelet spec (default `/etc/camel/kamelets`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPoint")]
    pub mount_point: Option<String>,
}

/// Deprecated: for backward compatibility.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsKeda {
    /// TraitConfiguration parameters configuration
    pub configuration: BTreeMap<String, serde_json::Value>,
}

/// The configuration of Knative trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsKnative {
    /// Enable automatic discovery of all trait properties.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// List of channels used as destination of integration routes.
    /// Can contain simple channel names or full Camel URIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "channelSinks")]
    pub channel_sinks: Option<Vec<String>>,
    /// List of channels used as source of integration routes.
    /// Can contain simple channel names or full Camel URIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "channelSources")]
    pub channel_sources: Option<Vec<String>>,
    /// Can be used to inject a Knative complete configuration in JSON format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<String>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// List of endpoints used as destination of integration routes.
    /// Can contain simple endpoint names or full Camel URIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointSinks")]
    pub endpoint_sinks: Option<Vec<String>>,
    /// List of channels used as source of integration routes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointSources")]
    pub endpoint_sources: Option<Vec<String>>,
    /// List of event types that the integration will produce.
    /// Can contain simple event types or full Camel URIs (to use a specific broker).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventSinks")]
    pub event_sinks: Option<Vec<String>>,
    /// List of event types that the integration will be subscribed to.
    /// Can contain simple event types or full Camel URIs (to use a specific broker different from "default").
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventSources")]
    pub event_sources: Option<Vec<String>>,
    /// Enables the default filtering for the Knative trigger using the event type
    /// If this is true, the created Knative trigger uses the event type as a filter on the event stream when no other filter criteria is given. (default: true)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterEventType")]
    pub filter_event_type: Option<bool>,
    /// Enables filtering on events based on the header "ce-knativehistory". Since this header has been removed in newer versions of
    /// Knative, filtering is disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterSourceChannels")]
    pub filter_source_channels: Option<bool>,
    /// Sets filter attributes on the event stream (such as event type, source, subject and so on).
    /// A list of key-value pairs that represent filter attributes and its values.
    /// The syntax is KEY=VALUE, e.g., `source="my.source"`.
    /// Filter attributes get set on the Knative trigger that is being created as part of this integration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<String>>,
    /// Enables the camel-k-operator to set the "bindings.knative.dev/include=true" label to the namespace
    /// As Knative requires this label to perform injection of K_SINK URL into the service.
    /// If this is false, the integration pod may start and fail, read the SinkBinding Knative documentation. (default: true)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceLabel")]
    pub namespace_label: Option<bool>,
    /// Allows binding the integration to a sink via a Knative SinkBinding resource.
    /// This can be used when the integration targets a single sink.
    /// It's enabled by default when the integration targets a single sink
    /// (except when the integration is owned by a Knative source).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sinkBinding")]
    pub sink_binding: Option<bool>,
}

/// The configuration of Knative Service trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsKnativeService {
    /// The annotations added to route.
    /// This can be used to set knative service specific annotations
    /// CLI usage example: -t "knative-service.annotations.'haproxy.router.openshift.io/balance'=true"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Automatically deploy the integration as Knative service when all conditions hold:
    /// 
    /// * Integration is using the Knative profile
    /// * All routes are either starting from an HTTP based consumer or a passive consumer (e.g. `direct` is a passive consumer)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Configures the Knative autoscaling metric property (e.g. to set `concurrency` based or `cpu` based autoscaling).
    /// 
    /// Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingMetric")]
    pub autoscaling_metric: Option<String>,
    /// Sets the allowed concurrency level or CPU percentage (depending on the autoscaling metric) for each Pod.
    /// 
    /// Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingTarget")]
    pub autoscaling_target: Option<i64>,
    /// Configures the Knative autoscaling class property (e.g. to set `hpa.autoscaling.knative.dev` or `kpa.autoscaling.knative.dev` autoscaling).
    /// 
    /// Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<IntegrationTraitsKnativeServiceClass>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// An upper bound for the number of Pods that can be running in parallel for the integration.
    /// Knative has its own cap value that depends on the installation.
    /// 
    /// Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxScale")]
    pub max_scale: Option<i64>,
    /// The minimum number of Pods that should be running at any time for the integration. It's **zero** by default, meaning that
    /// the integration is scaled down to zero when not used for a configured amount of time.
    /// 
    /// Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minScale")]
    pub min_scale: Option<i64>,
    /// Enables to gradually shift traffic to the latest Revision and sets the rollout duration.
    /// It's disabled by default and must be expressed as a Golang `time.Duration` string representation,
    /// rounded to a second precision.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rolloutDuration")]
    pub rollout_duration: Option<String>,
    /// The maximum duration in seconds that the request instance is allowed to respond to a request.
    /// This field propagates to the integration pod's terminationGracePeriodSeconds
    /// 
    /// Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i64>,
    /// Setting `cluster-local`, Knative service becomes a private service.
    /// Specifically, this option applies the `networking.knative.dev/visibility` label to Knative service.
    /// 
    /// Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub visibility: Option<IntegrationTraitsKnativeServiceVisibility>,
}

/// The configuration of Knative Service trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationTraitsKnativeServiceClass {
    #[serde(rename = "kpa.autoscaling.knative.dev")]
    KpaAutoscalingKnativeDev,
    #[serde(rename = "hpa.autoscaling.knative.dev")]
    HpaAutoscalingKnativeDev,
}

/// The configuration of Knative Service trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationTraitsKnativeServiceVisibility {
    #[serde(rename = "cluster-local")]
    ClusterLocal,
}

/// The configuration of Logging trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsLogging {
    /// Colorize the log output
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub color: Option<bool>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Logs message format
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// Output the logs in JSON
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json: Option<bool>,
    /// Enable "pretty printing" of the JSON logs
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPrettyPrint")]
    pub json_pretty_print: Option<bool>,
    /// Adjust the logging level (defaults to `INFO`)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<IntegrationTraitsLoggingLevel>,
}

/// The configuration of Logging trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationTraitsLoggingLevel {
    #[serde(rename = "FATAL")]
    Fatal,
    #[serde(rename = "WARN")]
    Warn,
    #[serde(rename = "INFO")]
    Info,
    #[serde(rename = "DEBUG")]
    Debug,
    #[serde(rename = "TRACE")]
    Trace,
}

/// The configuration of Master trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsMaster {
    /// Enables automatic configuration of the trait.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// When this flag is active, the operator analyzes the source code to add dependencies required by delegate endpoints.
    /// E.g. when using `master:lockname:timer`, then `camel:timer` is automatically added to the set of dependencies.
    /// It's enabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeDelegateDependencies")]
    pub include_delegate_dependencies: Option<bool>,
    /// Label that will be used to identify all pods contending the lock. Defaults to "camel.apache.org/integration".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelKey")]
    pub label_key: Option<String>,
    /// Label value that will be used to identify all pods contending the lock. Defaults to the integration name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelValue")]
    pub label_value: Option<String>,
    /// Name of the configmap that will be used to store the lock. Defaults to "<integration-name>-lock".
    /// Name of the configmap/lease resource that will be used to store the lock. Defaults to "<integration-name>-lock".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceName")]
    pub resource_name: Option<String>,
    /// Type of Kubernetes resource to use for locking ("ConfigMap" or "Lease"). Defaults to "Lease".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceType")]
    pub resource_type: Option<String>,
}

/// The configuration of Mount trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsMount {
    /// A list of configuration pointing to configmap/secret.
    /// The configuration are expected to be UTF-8 resources as they are processed by runtime Camel Context and tried to be parsed as property files.
    /// They are also made available on the classpath in order to ease their usage directly from the Route.
    /// Syntax: [configmap|secret]:name[/key], where name represents the resource name and key optionally represents the resource key to be filtered
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<Vec<String>>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// A list of EmptyDir volumes to be mounted. An optional size limit may be configured (default 500Mi).
    /// Syntax: name:/container/path[:sizeLimit]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emptyDirs")]
    pub empty_dirs: Option<Vec<String>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Enable "hot reload" when a secret/configmap mounted is edited (default `false`). The configmap/secret must be
    /// marked with `camel.apache.org/integration` label to be taken in account. The resource will be watched for any kind change, also for
    /// changes in metadata.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hotReload")]
    pub hot_reload: Option<bool>,
    /// A list of resources (text or binary content) pointing to configmap/secret.
    /// The resources are expected to be any resource type (text or binary content).
    /// The destination path can be either a default location or any path specified by the user.
    /// Syntax: [configmap|secret]:name[/key][@path], where name represents the resource name, key optionally represents the resource key to be filtered and path represents the destination path
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<String>>,
    /// Deprecated: no longer available since version 2.5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scanKameletsImplicitLabelSecrets")]
    pub scan_kamelets_implicit_label_secrets: Option<bool>,
    /// A list of Persistent Volume Claims to be mounted. Syntax: [pvcname:/container/path]. If the PVC is not found, the Integration fails.
    /// You can use the syntax [pvcname:/container/path:size:accessMode<:storageClass>] to create a dynamic PVC based on the Storage Class provided
    /// or the default cluster Storage Class. However, if the PVC exists, the operator would mount it.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<String>>,
}

/// The configuration of OpenAPI trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsOpenapi {
    /// The configmaps holding the spec of the OpenAPI (compatible with > 3.0 spec only).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configmaps: Option<Vec<String>>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The configuration of Owner trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsOwner {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The set of annotations to be transferred
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetAnnotations")]
    pub target_annotations: Option<Vec<String>>,
    /// The set of labels to be transferred
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetLabels")]
    pub target_labels: Option<Vec<String>>,
}

/// The configuration of PDB trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsPdb {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The number of pods for the Integration that can be unavailable after an eviction.
    /// It can be either an absolute number or a percentage (default `1` if `min-available` is also not set).
    /// Only one of `max-unavailable` and `min-available` can be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<String>,
    /// The number of pods for the Integration that must still be available after an eviction.
    /// It can be either an absolute number or a percentage.
    /// Only one of `min-available` and `max-unavailable` can be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minAvailable")]
    pub min_available: Option<String>,
}

/// The configuration of Platform trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsPlatform {
    /// To automatically detect from the environment if a default platform can be created (it will be created on OpenShift or when a registry address is set).
    /// Deprecated: Platform is auto generated by the operator install procedure - maintained for backward compatibility
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// To create a default (empty) platform when the platform is missing.
    /// Deprecated: Platform is auto generated by the operator install procedure - maintained for backward compatibility
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createDefault")]
    pub create_default: Option<bool>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Indicates if the platform should be created globally in the case of global operator (default true).
    /// Deprecated: Platform is auto generated by the operator install procedure - maintained for backward compatibility
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub global: Option<bool>,
}

/// The configuration of Pod trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsPod {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The configuration of Prometheus trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsPrometheus {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Whether a `PodMonitor` resource is created (default `true`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podMonitor")]
    pub pod_monitor: Option<bool>,
    /// The `PodMonitor` resource labels, applicable when `pod-monitor` is `true`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podMonitorLabels")]
    pub pod_monitor_labels: Option<Vec<String>>,
}

/// The configuration of Pull Secret trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsPullSecret {
    /// Automatically configures the platform registry secret on the pod if it is of type `kubernetes.io/dockerconfigjson`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// When using a global operator with a shared platform, this enables delegation of the `system:image-puller` cluster role on the operator namespace to the integration service account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullerDelegation")]
    pub image_puller_delegation: Option<bool>,
    /// The pull secret name to set on the Pod. If left empty this is automatically taken from the `IntegrationPlatform` registry configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// The configuration of Quarkus trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsQuarkus {
    /// The Quarkus mode to run: either `jvm` or `native` (default `jvm`).
    /// In case both `jvm` and `native` are specified, two `IntegrationKit` resources are created,
    /// with the `native` kit having precedence over the `jvm` one once ready.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildMode")]
    pub build_mode: Option<Vec<String>>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The base image to use when running a native build (default `quay.io/quarkus/quarkus-micro-image:2.0`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nativeBaseImage")]
    pub native_base_image: Option<String>,
    /// The image containing the tooling required for a native build (by default it will use the one provided in the runtime catalog)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nativeBuilderImage")]
    pub native_builder_image: Option<String>,
    /// The Quarkus package types, `fast-jar` or `native` (default `fast-jar`).
    /// In case both `fast-jar` and `native` are specified, two `IntegrationKit` resources are created,
    /// with the native kit having precedence over the `fast-jar` one once ready.
    /// The order influences the resolution of the current kit for the integration.
    /// The kit corresponding to the first package type will be assigned to the
    /// integration in case no existing kit that matches the integration exists.
    /// Deprecated: use `build-mode` instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packageTypes")]
    pub package_types: Option<Vec<String>>,
}

/// The configuration of Registry trait (support removed since version 2.5.0).
/// Deprecated: use jvm trait or read documentation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsRegistry {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The configuration of Route trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsRoute {
    /// The annotations added to route.
    /// This can be used to set route specific annotations
    /// For annotations options see <https://docs.openshift.com/container-platform/3.11/architecture/networking/routes.html#route-specific-annotations>
    /// CLI usage example: -t "route.annotations.'haproxy.router.openshift.io/balance'=true"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// To configure the host exposed by the route.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// The TLS CA certificate contents.
    /// 
    /// Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCACertificate")]
    pub tls_ca_certificate: Option<String>,
    /// The secret name and key reference to the TLS CA certificate. The format is "secret-name[/key-name]", the value represents the secret name, if there is only one key in the secret it will be read, otherwise you can set a key name separated with a "/".
    /// 
    /// Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCACertificateSecret")]
    pub tls_ca_certificate_secret: Option<String>,
    /// The TLS certificate contents.
    /// 
    /// Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCertificate")]
    pub tls_certificate: Option<String>,
    /// The secret name and key reference to the TLS certificate. The format is "secret-name[/key-name]", the value represents the secret name, if there is only one key in the secret it will be read, otherwise you can set a key name separated with a "/".
    /// 
    /// Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCertificateSecret")]
    pub tls_certificate_secret: Option<String>,
    /// The destination CA certificate provides the contents of the ca certificate of the final destination.  When using reencrypt
    /// termination this file should be provided in order to have routers use it for health checks on the secure connection.
    /// If this field is not specified, the router may provide its own destination CA and perform hostname validation using
    /// the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically
    /// verify.
    /// 
    /// Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsDestinationCACertificate")]
    pub tls_destination_ca_certificate: Option<String>,
    /// The secret name and key reference to the destination CA certificate. The format is "secret-name[/key-name]", the value represents the secret name, if there is only one key in the secret it will be read, otherwise you can set a key name separated with a "/".
    /// 
    /// Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsDestinationCACertificateSecret")]
    pub tls_destination_ca_certificate_secret: Option<String>,
    /// To configure how to deal with insecure traffic, e.g. `Allow`, `Disable` or `Redirect` traffic.
    /// 
    /// Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsInsecureEdgeTerminationPolicy")]
    pub tls_insecure_edge_termination_policy: Option<IntegrationTraitsRouteTlsInsecureEdgeTerminationPolicy>,
    /// The TLS certificate key contents.
    /// 
    /// Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
    /// The secret name and key reference to the TLS certificate key. The format is "secret-name[/key-name]", the value represents the secret name, if there is only one key in the secret it will be read, otherwise you can set a key name separated with a "/".
    /// 
    /// Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKeySecret")]
    pub tls_key_secret: Option<String>,
    /// The TLS termination type, like `edge`, `passthrough` or `reencrypt`.
    /// 
    /// Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsTermination")]
    pub tls_termination: Option<IntegrationTraitsRouteTlsTermination>,
}

/// The configuration of Route trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationTraitsRouteTlsInsecureEdgeTerminationPolicy {
    None,
    Allow,
    Redirect,
}

/// The configuration of Route trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationTraitsRouteTlsTermination {
    #[serde(rename = "edge")]
    Edge,
    #[serde(rename = "reencrypt")]
    Reencrypt,
    #[serde(rename = "passthrough")]
    Passthrough,
}

/// The configuration of Security Context trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsSecurityContext {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Security Context RunAsNonRoot configuration (default false).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    /// Security Context RunAsUser configuration (default none): this value is automatically retrieved in Openshift clusters when not explicitly set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// Security Context SeccompProfileType configuration (default RuntimeDefault).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfileType")]
    pub seccomp_profile_type: Option<IntegrationTraitsSecurityContextSeccompProfileType>,
}

/// The configuration of Security Context trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationTraitsSecurityContextSeccompProfileType {
    Unconfined,
    RuntimeDefault,
}

/// The configuration of Service trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsService {
    /// The annotations added to the Service object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// To automatically detect from the code if a Service needs to be created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The labels added to the Service object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Enable Service to be exposed as NodePort (default `false`).
    /// Deprecated: Use service type instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePort")]
    pub node_port: Option<bool>,
    /// List of container ports available in the container to expose
    /// (syntax: <port-name>;<port-number>;<container-port-number>[;<port-protocol]).
    /// When omitted, `port-protocol` (admitted values `TCP`, `UDP` or `SCTP`) is `TCP`.
    /// Don't use this for the primary http managed port (which is managed by container trait).
    /// Don't use in Knative based environments.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<String>>,
    /// The type of service to be used, either 'ClusterIP', 'NodePort' or 'LoadBalancer'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<IntegrationTraitsServiceType>,
}

/// The configuration of Service trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationTraitsServiceType {
    #[serde(rename = "ClusterIP")]
    ClusterIp,
    NodePort,
    LoadBalancer,
}

/// The configuration of Service Binding trait
/// Deprecated: no longer in use.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsServiceBinding {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// List of Services in the form [[apigroup/]version:]kind:[namespace/]name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<String>>,
}

/// Deprecated: for backward compatibility.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsStrimzi {
    /// TraitConfiguration parameters configuration
    pub configuration: BTreeMap<String, serde_json::Value>,
}

/// The configuration of Telemetry trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsTelemetry {
    /// Enables automatic configuration of the trait, including automatic discovery of the telemetry endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The target endpoint of the Telemetry service (automatically discovered by default)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// The sampler of the telemetry used for tracing (default "on")
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sampler: Option<String>,
    /// The sampler of the telemetry used for tracing is parent based (default "true")
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampler-parent-based")]
    pub sampler_parent_based: Option<bool>,
    /// The sampler ratio of the telemetry used for tracing
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampler-ratio")]
    pub sampler_ratio: Option<String>,
    /// The name of the service that publishes telemetry data (defaults to the integration name)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

/// The configuration of Toleration trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsToleration {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The list of taints to tolerate, in the form `Key[=Value]:Effect[:Seconds]`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub taints: Option<Vec<String>>,
}

/// Deprecated: for backward compatibility.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationTraitsTracing {
    /// TraitConfiguration parameters configuration
    pub configuration: BTreeMap<String, serde_json::Value>,
}

/// the status of the Integration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatus {
    /// features offered by the Integration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<Vec<String>>,
    /// the catalog used to build/operate the Integration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub catalog: Option<IntegrationStatusCatalog>,
    /// a list of events happened for the Integration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// Deprecated:
    /// a list of configuration specification
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<Vec<IntegrationStatusConfiguration>>,
    /// a list of dependencies needed by the application
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dependencies: Option<Vec<String>>,
    /// the digest calculated for this Integration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub digest: Option<String>,
    /// a list of sources generated for this Integration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generatedSources")]
    pub generated_sources: Option<Vec<IntegrationStatusGeneratedSources>>,
    /// the container image used
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// the reference of the `IntegrationKit` which is used for this Integration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationKit")]
    pub integration_kit: Option<ObjectReference>,
    /// the Java jar dependency to execute (if available)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jar: Option<String>,
    /// the timestamp representing the last time when this integration was initialized.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastInitTimestamp")]
    pub last_init_timestamp: Option<String>,
    /// ObservedGeneration is the most recent generation observed for this Integration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// the actual phase
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
    /// The IntegrationPlatform watching this Integration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<String>,
    /// the profile needed to run this Integration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profile: Option<String>,
    /// the number of replicas
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i32>,
    /// the runtime provider targeted for this Integration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeProvider")]
    pub runtime_provider: Option<String>,
    /// the runtime version targeted for this Integration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeVersion")]
    pub runtime_version: Option<String>,
    /// label selector
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    /// the traits executed for the Integration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub traits: Option<IntegrationStatusTraits>,
    /// the operator version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// the catalog used to build/operate the Integration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusCatalog {
    /// RuntimeProvider is the provider chosen for the runtime.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// ConfigurationSpec represents a generic configuration specification.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusConfiguration {
    /// represents the type of configuration, ie: property, configmap, secret, ...
    #[serde(rename = "type")]
    pub r#type: String,
    /// the value to assign to the configuration (syntax may vary depending on the `Type`)
    pub value: String,
}

/// SourceSpec defines the configuration for one or more routes to be executed in a certain Camel DSL language.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusGeneratedSources {
    /// if the content is compressed (base64 encrypted)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression: Option<bool>,
    /// the source code (plain text)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// the confimap key holding the source content
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentKey")]
    pub content_key: Option<String>,
    /// the confimap reference holding the source content
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentRef")]
    pub content_ref: Option<String>,
    /// the content type (tipically text or binary)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    /// True if the spec is generated from a Kamelet
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "from-kamelet")]
    pub from_kamelet: Option<bool>,
    /// Interceptors are optional identifiers the org.apache.camel.k.RoutesLoader
    /// uses to pre/post process sources
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interceptors: Option<Vec<String>>,
    /// specify which is the language (Camel DSL) used to interpret this source code
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    /// Loader is an optional id of the org.apache.camel.k.RoutesLoader that will
    /// interpret this source at runtime
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub loader: Option<String>,
    /// the name of the specification
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// the path where the file is stored
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// List of property names defined in the source (e.g. if type is "template")
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "property-names")]
    pub property_names: Option<Vec<String>>,
    /// the source code (binary)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawContent")]
    pub raw_content: Option<String>,
    /// Type defines the kind of source described by this object
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// the reference of the `IntegrationKit` which is used for this Integration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusIntegrationKit {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// the traits executed for the Integration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraits {
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "3scale")]
    pub r#_3scale: Option<IntegrationStatusTraits3scale>,
    /// The extension point with addon traits
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addons: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
    /// The configuration of Affinity trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<IntegrationStatusTraitsAffinity>,
    /// The configuration of Builder trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub builder: Option<IntegrationStatusTraitsBuilder>,
    /// The configuration of Camel trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub camel: Option<IntegrationStatusTraitsCamel>,
    /// The configuration of Container trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<IntegrationStatusTraitsContainer>,
    /// The configuration of Cron trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cron: Option<IntegrationStatusTraitsCron>,
    /// The configuration of Dependencies trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dependencies: Option<IntegrationStatusTraitsDependencies>,
    /// The configuration of Deployer trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployer: Option<IntegrationStatusTraitsDeployer>,
    /// The configuration of Deployment trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<IntegrationStatusTraitsDeployment>,
    /// The configuration of Environment trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<IntegrationStatusTraitsEnvironment>,
    /// The configuration of Error Handler trait
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "error-handler")]
    pub error_handler: Option<IntegrationStatusTraitsErrorHandler>,
    /// The configuration of GC trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gc: Option<IntegrationStatusTraitsGc>,
    /// The configuration of Health trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health: Option<IntegrationStatusTraitsHealth>,
    /// The configuration of Ingress trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingress: Option<IntegrationStatusTraitsIngress>,
    /// The configuration of Init Containers trait
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "init-containers")]
    pub init_containers: Option<IntegrationStatusTraitsInitContainers>,
    /// The configuration of Istio trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub istio: Option<IntegrationStatusTraitsIstio>,
    /// The configuration of Jolokia trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jolokia: Option<IntegrationStatusTraitsJolokia>,
    /// The configuration of JVM trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jvm: Option<IntegrationStatusTraitsJvm>,
    /// The configuration of Kamelets trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kamelets: Option<IntegrationStatusTraitsKamelets>,
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keda: Option<IntegrationStatusTraitsKeda>,
    /// The configuration of Knative trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub knative: Option<IntegrationStatusTraitsKnative>,
    /// The configuration of Knative Service trait
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "knative-service")]
    pub knative_service: Option<IntegrationStatusTraitsKnativeService>,
    /// The configuration of Logging trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logging: Option<IntegrationStatusTraitsLogging>,
    /// The configuration of Master trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub master: Option<IntegrationStatusTraitsMaster>,
    /// The configuration of Mount trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mount: Option<IntegrationStatusTraitsMount>,
    /// The configuration of OpenAPI trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openapi: Option<IntegrationStatusTraitsOpenapi>,
    /// The configuration of Owner trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<IntegrationStatusTraitsOwner>,
    /// The configuration of PDB trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pdb: Option<IntegrationStatusTraitsPdb>,
    /// The configuration of Platform trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<IntegrationStatusTraitsPlatform>,
    /// The configuration of Pod trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod: Option<IntegrationStatusTraitsPod>,
    /// The configuration of Prometheus trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prometheus: Option<IntegrationStatusTraitsPrometheus>,
    /// The configuration of Pull Secret trait
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pull-secret")]
    pub pull_secret: Option<IntegrationStatusTraitsPullSecret>,
    /// The configuration of Quarkus trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quarkus: Option<IntegrationStatusTraitsQuarkus>,
    /// The configuration of Registry trait (support removed since version 2.5.0).
    /// Deprecated: use jvm trait or read documentation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registry: Option<IntegrationStatusTraitsRegistry>,
    /// The configuration of Route trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub route: Option<IntegrationStatusTraitsRoute>,
    /// The configuration of Security Context trait
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "security-context")]
    pub security_context: Option<IntegrationStatusTraitsSecurityContext>,
    /// The configuration of Service trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<IntegrationStatusTraitsService>,
    /// The configuration of Service Binding trait
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "service-binding")]
    pub service_binding: Option<IntegrationStatusTraitsServiceBinding>,
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strimzi: Option<IntegrationStatusTraitsStrimzi>,
    /// The configuration of Telemetry trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub telemetry: Option<IntegrationStatusTraitsTelemetry>,
    /// The configuration of Toleration trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub toleration: Option<IntegrationStatusTraitsToleration>,
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing: Option<IntegrationStatusTraitsTracing>,
}

/// Deprecated: for backward compatibility.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraits3scale {
    /// TraitConfiguration parameters configuration
    pub configuration: BTreeMap<String, serde_json::Value>,
}

/// The configuration of Affinity trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsAffinity {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Defines a set of nodes the integration pod(s) are eligible to be scheduled on, based on labels on the node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinityLabels")]
    pub node_affinity_labels: Option<Vec<String>>,
    /// Always co-locates multiple replicas of the integration in the same node (default `false`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinity")]
    pub pod_affinity: Option<bool>,
    /// Defines a set of pods (namely those matching the label selector, relative to the given namespace) that the
    /// integration pod(s) should be co-located with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinityLabels")]
    pub pod_affinity_labels: Option<Vec<String>>,
    /// Never co-locates multiple replicas of the integration in the same node (default `false`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinity")]
    pub pod_anti_affinity: Option<bool>,
    /// Defines a set of pods (namely those matching the label selector, relative to the given namespace) that the
    /// integration pod(s) should not be co-located with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinityLabels")]
    pub pod_anti_affinity_labels: Option<Vec<String>>,
}

/// The configuration of Builder trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsBuilder {
    /// When using `pod` strategy, annotation to use for the builder pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Specify a base image. In order to have the application working properly it must be a container image which has a Java JDK
    /// installed and ready to use on path (ie `/usr/bin/java`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseImage")]
    pub base_image: Option<String>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Use the incremental image build option, to reuse existing containers (default `true`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "incrementalImageBuild")]
    pub incremental_image_build: Option<bool>,
    /// When using `pod` strategy, the maximum amount of CPU required by the pod builder.
    /// Deprecated: use TasksRequestCPU instead with task name `builder`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitCPU")]
    pub limit_cpu: Option<String>,
    /// When using `pod` strategy, the maximum amount of memory required by the pod builder.
    /// Deprecated: use TasksRequestCPU instead with task name `builder`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitMemory")]
    pub limit_memory: Option<String>,
    /// A list of references pointing to configmaps/secrets that contains a maven profile.
    /// This configmap/secret is a resource of the IntegrationKit created, therefore it needs to be present in the namespace where the operator is going to create the IntegrationKit.
    /// The content of the maven profile is expected to be a text containing a valid maven profile starting with `<profile>` and ending with `</profile>` that will be integrated as an inline profile in the POM.
    /// Syntax: [configmap|secret]:name[/key], where name represents the resource name, key optionally represents the resource key to be filtered (default key value = profile.xml).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mavenProfiles")]
    pub maven_profiles: Option<Vec<String>>,
    /// Defines a set of nodes the builder pod is eligible to be scheduled on, based on labels on the node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// The build order strategy to use, either `dependencies`, `fifo` or `sequential` (default is the platform default)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orderStrategy")]
    pub order_strategy: Option<IntegrationStatusTraitsBuilderOrderStrategy>,
    /// The list of manifest platforms to use to build a container image (default `linux/amd64`).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platforms: Option<Vec<String>>,
    /// A list of properties to be provided to the build task
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<String>>,
    /// When using `pod` strategy, the minimum amount of CPU required by the pod builder.
    /// Deprecated: use TasksRequestCPU instead with task name `builder`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCPU")]
    pub request_cpu: Option<String>,
    /// When using `pod` strategy, the minimum amount of memory required by the pod builder.
    /// Deprecated: use TasksRequestCPU instead with task name `builder`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMemory")]
    pub request_memory: Option<String>,
    /// The strategy to use, either `pod` or `routine` (default `routine`)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<IntegrationStatusTraitsBuilderStrategy>,
    /// A list of tasks to be executed (available only when using `pod` strategy) with format `<name>;<container-image>;<container-command>`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tasks: Option<Vec<String>>,
    /// A list of tasks sorted by the order of execution in a csv format, ie, `<taskName1>,<taskName2>,...`.
    /// Mind that you must include also the operator tasks (`builder`, `quarkus-native`, `package`, `jib`, `s2i`)
    /// if you need to execute them. Useful only with `pod` strategy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tasksFilter")]
    pub tasks_filter: Option<String>,
    /// A list of limit cpu configuration for the specific task with format `<task-name>:<limit-cpu-conf>`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tasksLimitCPU")]
    pub tasks_limit_cpu: Option<Vec<String>>,
    /// A list of limit memory configuration for the specific task with format `<task-name>:<limit-memory-conf>`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tasksLimitMemory")]
    pub tasks_limit_memory: Option<Vec<String>>,
    /// A list of request cpu configuration for the specific task with format `<task-name>:<request-cpu-conf>`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tasksRequestCPU")]
    pub tasks_request_cpu: Option<Vec<String>>,
    /// A list of request memory configuration for the specific task with format `<task-name>:<request-memory-conf>`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tasksRequestMemory")]
    pub tasks_request_memory: Option<Vec<String>>,
    /// Enable verbose logging on build components that support it (e.g. Kaniko build pod).
    /// Deprecated no longer in use
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verbose: Option<bool>,
}

/// The configuration of Builder trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationStatusTraitsBuilderOrderStrategy {
    #[serde(rename = "dependencies")]
    Dependencies,
    #[serde(rename = "fifo")]
    Fifo,
    #[serde(rename = "sequential")]
    Sequential,
}

/// The configuration of Builder trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationStatusTraitsBuilderStrategy {
    #[serde(rename = "pod")]
    Pod,
    #[serde(rename = "routine")]
    Routine,
}

/// The configuration of Camel trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsCamel {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// A list of properties to be provided to the Integration runtime
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<String>>,
    /// The runtime provider to use for the integration. (Default, Camel K Runtime).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeProvider")]
    pub runtime_provider: Option<IntegrationStatusTraitsCamelRuntimeProvider>,
    /// The runtime version to use for the integration. It overrides the default version set in the Integration Platform.
    /// You can use a fixed version (for example "3.2.3") or a semantic version (for example "3.x") which will try to resolve
    /// to the best matching Catalog existing on the cluster (Default, the one provided by the operator version).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeVersion")]
    pub runtime_version: Option<String>,
}

/// The configuration of Camel trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationStatusTraitsCamelRuntimeProvider {
    #[serde(rename = "quarkus")]
    Quarkus,
    #[serde(rename = "plain-quarkus")]
    PlainQuarkus,
}

/// The configuration of Container trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsContainer {
    /// Security Context AllowPrivilegeEscalation configuration (default false).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPrivilegeEscalation")]
    pub allow_privilege_escalation: Option<bool>,
    /// To automatically enable the trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Security Context Capabilities Add configuration (default none).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capabilitiesAdd")]
    pub capabilities_add: Option<Vec<String>>,
    /// Security Context Capabilities Drop configuration (default ALL).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capabilitiesDrop")]
    pub capabilities_drop: Option<Vec<String>>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Can be used to enable/disable http exposure via kubernetes Service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expose: Option<bool>,
    /// The main container image to use for the Integration. When using this parameter the operator will create a synthetic IntegrationKit which
    /// won't be able to execute traits requiring CamelCatalog. If the container image you're using is coming from an IntegrationKit, use instead
    /// Integration `.spec.integrationKit` parameter. If you're moving the Integration across environments, you will also need to create an "external" IntegrationKit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// The pull policy: Always|Never|IfNotPresent
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<IntegrationStatusTraitsContainerImagePullPolicy>,
    /// The maximum amount of CPU to be provided (default 500 millicores).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitCPU")]
    pub limit_cpu: Option<String>,
    /// The maximum amount of memory to be provided (default 512 Mi).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitMemory")]
    pub limit_memory: Option<String>,
    /// The main container name. It's named `integration` by default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// To configure a different http port exposed by the container (default `8080`).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// To configure a different http port name for the port exposed by the container.
    /// It defaults to `http` only when the `expose` parameter is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portName")]
    pub port_name: Option<String>,
    /// List of container ports available in the container (syntax: <port-name>;<port-number>[;port-protocol]).
    /// When omitted, `port-protocol` (admitted values `TCP`, `UDP` or `SCTP`) is `TCP`.
    /// Don't use this for the primary http managed port (for which case you need to use `portName` and `port`).
    /// Don't use in Knative based environments.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<String>>,
    /// The minimum amount of CPU required (default 125 millicores).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCPU")]
    pub request_cpu: Option<String>,
    /// The minimum amount of memory required (default 128 Mi).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMemory")]
    pub request_memory: Option<String>,
    /// Security Context RunAsNonRoot configuration (default false).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    /// Security Context RunAsUser configuration (default none): this value is automatically retrieved in Openshift clusters when not explicitly set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// Security Context SeccompProfileType configuration (default RuntimeDefault).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfileType")]
    pub seccomp_profile_type: Option<IntegrationStatusTraitsContainerSeccompProfileType>,
    /// To configure under which service port the http container port is to be exposed (default `80`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servicePort")]
    pub service_port: Option<i32>,
    /// To configure under which service port name the http container port is to be exposed (default `http`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servicePortName")]
    pub service_port_name: Option<String>,
}

/// The configuration of Container trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationStatusTraitsContainerImagePullPolicy {
    Always,
    Never,
    IfNotPresent,
}

/// The configuration of Container trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationStatusTraitsContainerSeccompProfileType {
    Unconfined,
    RuntimeDefault,
}

/// The configuration of Cron trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsCron {
    /// Specifies the duration in seconds, relative to the start time, that the job
    /// may be continuously active before it is considered to be failed.
    /// It defaults to 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activeDeadlineSeconds")]
    pub active_deadline_seconds: Option<i64>,
    /// Automatically deploy the integration as CronJob when all routes are
    /// either starting from a periodic consumer (only `cron`, `timer` and `quartz` are supported) or a passive consumer (e.g. `direct` is a passive consumer).
    /// 
    /// It's required that all periodic consumers have the same period, and it can be expressed as cron schedule (e.g. `1m` can be expressed as `0/1 * * * *`,
    /// while `35m` or `50s` cannot).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Specifies the number of retries before marking the job failed.
    /// It defaults to 2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backoffLimit")]
    pub backoff_limit: Option<i32>,
    /// A comma separated list of the Camel components that need to be customized in order for them to work when the schedule is triggered externally by Kubernetes.
    /// Supported components are currently: `cron`, `timer` and `quartz`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<String>,
    /// Specifies how to treat concurrent executions of a Job.
    /// Valid values are:
    /// - "Allow": allows CronJobs to run concurrently;
    /// - "Forbid" (default): forbids concurrent runs, skipping next run if previous run hasn't finished yet;
    /// - "Replace": cancels currently running job and replaces it with a new one
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "concurrencyPolicy")]
    pub concurrency_policy: Option<IntegrationStatusTraitsCronConcurrencyPolicy>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Use the default Camel implementation of the `cron` endpoint (`quartz`) instead of trying to materialize the integration
    /// as Kubernetes CronJob.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fallback: Option<bool>,
    /// The CronJob schedule for the whole integration. If multiple routes are declared, they must have the same schedule for this
    /// mechanism to work correctly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
    /// Optional deadline in seconds for starting the job if it misses scheduled
    /// time for any reason.  Missed jobs executions will be counted as failed ones.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startingDeadlineSeconds")]
    pub starting_deadline_seconds: Option<i64>,
    /// The timezone that the CronJob will run on
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    pub time_zone: Option<String>,
}

/// The configuration of Cron trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationStatusTraitsCronConcurrencyPolicy {
    Allow,
    Forbid,
    Replace,
}

/// The configuration of Dependencies trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsDependencies {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The configuration of Deployer trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsDeployer {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Allows to explicitly select the desired deployment kind between `deployment`, `cron-job` or `knative-service` when creating the resources for running the integration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<IntegrationStatusTraitsDeployerKind>,
    /// Deprecated: won't be able to enforce client side update in the future.
    /// Use server-side apply to update the owned resources (default `true`).
    /// Note that it automatically falls back to client-side patching, if SSA is not available, e.g., on old Kubernetes clusters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useSSA")]
    pub use_ssa: Option<bool>,
}

/// The configuration of Deployer trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationStatusTraitsDeployerKind {
    #[serde(rename = "deployment")]
    Deployment,
    #[serde(rename = "cron-job")]
    CronJob,
    #[serde(rename = "knative-service")]
    KnativeService,
}

/// The configuration of Deployment trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsDeployment {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The maximum time in seconds for the deployment to make progress before it
    /// is considered to be failed. It defaults to `60s`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "progressDeadlineSeconds")]
    pub progress_deadline_seconds: Option<i32>,
    /// The maximum number of pods that can be scheduled above the desired number of
    /// pods.
    /// Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
    /// This can not be 0 if MaxUnavailable is 0.
    /// Absolute number is calculated from percentage by rounding up.
    /// Defaults to `25%`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdateMaxSurge")]
    pub rolling_update_max_surge: Option<IntOrString>,
    /// The maximum number of pods that can be unavailable during the update.
    /// Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
    /// Absolute number is calculated from percentage by rounding down.
    /// This can not be 0 if MaxSurge is 0.
    /// Defaults to `25%`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdateMaxUnavailable")]
    pub rolling_update_max_unavailable: Option<IntOrString>,
    /// The deployment strategy to use to replace existing pods with new ones.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<IntegrationStatusTraitsDeploymentStrategy>,
}

/// The configuration of Deployment trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationStatusTraitsDeploymentStrategy {
    Recreate,
    RollingUpdate,
}

/// The configuration of Environment trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsEnvironment {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Enables injection of `NAMESPACE` and `POD_NAME` environment variables (default `true`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerMeta")]
    pub container_meta: Option<bool>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Propagates the `HTTP_PROXY`, `HTTPS_PROXY` and `NO_PROXY` environment variables (default `true`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpProxy")]
    pub http_proxy: Option<bool>,
    /// A list of environment variables to be added to the integration container.
    /// The syntax is either VAR=VALUE or VAR=[configmap|secret]:name/key, where name represents the resource name,
    /// and key represents the resource key to be mapped as and environment variable.
    /// These take precedence over any previously defined environment variables.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vars: Option<Vec<String>>,
}

/// The configuration of Error Handler trait
/// Deprecated: no longer in use.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsErrorHandler {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The error handler ref name provided or found in application properties
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
}

/// The configuration of GC trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsGc {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Discovery client cache to be used, either `disabled`, `disk` or `memory` (default `memory`).
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoveryCache")]
    pub discovery_cache: Option<IntegrationStatusTraitsGcDiscoveryCache>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The configuration of GC trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationStatusTraitsGcDiscoveryCache {
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "disk")]
    Disk,
    #[serde(rename = "memory")]
    Memory,
}

/// The configuration of Health trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsHealth {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Minimum consecutive failures for the liveness probe to be considered failed after having succeeded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessFailureThreshold")]
    pub liveness_failure_threshold: Option<i32>,
    /// Number of seconds after the container has started before the liveness probe is initiated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessInitialDelay")]
    pub liveness_initial_delay: Option<i32>,
    /// How often to perform the liveness probe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessPeriod")]
    pub liveness_period: Option<i32>,
    /// The liveness probe path to use (default provided by the Catalog runtime used).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<String>,
    /// Configures the liveness probe for the integration container (default `false`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbeEnabled")]
    pub liveness_probe_enabled: Option<bool>,
    /// Scheme to use when connecting to the liveness probe (default `HTTP`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessScheme")]
    pub liveness_scheme: Option<String>,
    /// Minimum consecutive successes for the liveness probe to be considered successful after having failed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessSuccessThreshold")]
    pub liveness_success_threshold: Option<i32>,
    /// Number of seconds after which the liveness probe times out.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessTimeout")]
    pub liveness_timeout: Option<i32>,
    /// Minimum consecutive failures for the readiness probe to be considered failed after having succeeded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessFailureThreshold")]
    pub readiness_failure_threshold: Option<i32>,
    /// Number of seconds after the container has started before the readiness probe is initiated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessInitialDelay")]
    pub readiness_initial_delay: Option<i32>,
    /// How often to perform the readiness probe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessPeriod")]
    pub readiness_period: Option<i32>,
    /// The readiness probe path to use (default provided by the Catalog runtime used).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<String>,
    /// Configures the readiness probe for the integration container (default `true`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbeEnabled")]
    pub readiness_probe_enabled: Option<bool>,
    /// Scheme to use when connecting to the readiness probe (default `HTTP`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessScheme")]
    pub readiness_scheme: Option<String>,
    /// Minimum consecutive successes for the readiness probe to be considered successful after having failed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessSuccessThreshold")]
    pub readiness_success_threshold: Option<i32>,
    /// Number of seconds after which the readiness probe times out.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessTimeout")]
    pub readiness_timeout: Option<i32>,
    /// Minimum consecutive failures for the startup probe to be considered failed after having succeeded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupFailureThreshold")]
    pub startup_failure_threshold: Option<i32>,
    /// Number of seconds after the container has started before the startup probe is initiated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupInitialDelay")]
    pub startup_initial_delay: Option<i32>,
    /// How often to perform the startup probe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupPeriod")]
    pub startup_period: Option<i32>,
    /// The startup probe path to use (default provided by the Catalog runtime used).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbe")]
    pub startup_probe: Option<String>,
    /// Configures the startup probe for the integration container (default `false`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbeEnabled")]
    pub startup_probe_enabled: Option<bool>,
    /// Scheme to use when connecting to the startup probe (default `HTTP`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupScheme")]
    pub startup_scheme: Option<String>,
    /// Minimum consecutive successes for the startup probe to be considered successful after having failed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupSuccessThreshold")]
    pub startup_success_threshold: Option<i32>,
    /// Number of seconds after which the startup probe times out.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupTimeout")]
    pub startup_timeout: Option<i32>,
}

/// The configuration of Ingress trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsIngress {
    /// The annotations added to the ingress.
    /// This can be used to set controller specific annotations, e.g., when using the NGINX Ingress controller:
    /// See <https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// To automatically add an ingress whenever the integration uses an HTTP endpoint consumer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// To configure the host exposed by the ingress.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// The Ingress class name as defined by the Ingress spec
    /// See <https://kubernetes.io/docs/concepts/services-networking/ingress/>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressClassName")]
    pub ingress_class_name: Option<String>,
    /// To configure the path exposed by the ingress (default `/`).
    /// Deprecated: In favor of `paths` - left for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// To configure the path type exposed by the ingress.
    /// One of `Exact`, `Prefix`, `ImplementationSpecific` (default to `Prefix`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathType")]
    pub path_type: Option<IntegrationStatusTraitsIngressPathType>,
    /// To configure the paths exposed by the ingress (default `['/']`).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub paths: Option<Vec<String>>,
    /// To configure tls hosts
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsHosts")]
    pub tls_hosts: Option<Vec<String>>,
    /// To configure tls secret name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSecretName")]
    pub tls_secret_name: Option<String>,
}

/// The configuration of Ingress trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationStatusTraitsIngressPathType {
    Exact,
    Prefix,
    ImplementationSpecific,
}

/// The configuration of Init Containers trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsInitContainers {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// A list of init tasks to be executed with format `<name>;<container-image>;<container-command>`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initTasks")]
    pub init_tasks: Option<Vec<String>>,
    /// A list of sidecar tasks to be executed with format `<name>;<container-image>;<container-command>`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sideCarTasks")]
    pub side_car_tasks: Option<Vec<String>>,
}

/// The configuration of Istio trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsIstio {
    /// Configures a (comma-separated) list of CIDR subnets that should not be intercepted by the Istio proxy (`10.0.0.0/8,172.16.0.0/12,192.168.0.0/16` by default).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<String>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Forces the value for labels `sidecar.istio.io/inject`. By default the label is set to `true` on deployment and not set on Knative Service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inject: Option<bool>,
}

/// The configuration of Jolokia trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsJolokia {
    /// The PEM encoded CA certification file path, used to verify client certificates,
    /// applicable when `protocol` is `https` and `use-ssl-client-authentication` is `true`
    /// (default `/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt` for OpenShift).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "CACert")]
    pub ca_cert: Option<String>,
    /// The principal(s) which must be given in a client certificate to allow access to the Jolokia endpoint,
    /// applicable when `protocol` is `https` and `use-ssl-client-authentication` is `true`
    /// (default `clientPrincipal=cn=system:master-proxy`, `cn=hawtio-online.hawtio.svc` and `cn=fuse-console.fuse.svc` for OpenShift).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientPrincipal")]
    pub client_principal: Option<Vec<String>>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Listen for multicast requests (default `false`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoveryEnabled")]
    pub discovery_enabled: Option<bool>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Mandate the client certificate contains a client flag in the extended key usage section,
    /// applicable when `protocol` is `https` and `use-ssl-client-authentication` is `true`
    /// (default `true` for OpenShift).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extendedClientCheck")]
    pub extended_client_check: Option<bool>,
    /// The Host address to which the Jolokia agent should bind to. If `"\*"` or `"0.0.0.0"` is given,
    /// the servers binds to every network interface (default `"*"`).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// A list of additional Jolokia options as defined
    /// in <https://jolokia.org/reference/html/agents.html#agent-jvm-config[JVM> agent configuration options]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<String>>,
    /// The password used for authentication, applicable when the `user` option is set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// The Jolokia endpoint port (default `8778`).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// The protocol to use, either `http` or `https` (default `https` for OpenShift)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Whether client certificates should be used for authentication (default `true` for OpenShift).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useSSLClientAuthentication")]
    pub use_ssl_client_authentication: Option<bool>,
    /// The user to be used for authentication
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// The configuration of JVM trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsJvm {
    /// A list of JVM agents to download and execute with format `<agent-name>;<agent-url>[;<jvm-agent-options>]`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agents: Option<Vec<String>>,
    /// Additional JVM classpath (use `Linux` classpath separator)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub classpath: Option<String>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Activates remote debugging, so that a debugger can be attached to the JVM, e.g., using port-forwarding
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub debug: Option<bool>,
    /// Transport address at which to listen for the newly launched JVM (default `*:5005`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "debugAddress")]
    pub debug_address: Option<String>,
    /// Suspends the target JVM immediately before the main class is loaded
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "debugSuspend")]
    pub debug_suspend: Option<bool>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The Jar dependency which will run the application. Leave it empty for managed Integrations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jar: Option<String>,
    /// A list of JVM options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<String>>,
    /// Prints the command used the start the JVM in the container logs (default `true`)
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "printCommand")]
    pub print_command: Option<bool>,
}

/// The configuration of Kamelets trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsKamelets {
    /// Automatically inject all referenced Kamelets and their default configuration (enabled by default)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Comma separated list of Kamelet names to load into the current integration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub list: Option<String>,
    /// The directory where the application mounts and reads Kamelet spec (default `/etc/camel/kamelets`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPoint")]
    pub mount_point: Option<String>,
}

/// Deprecated: for backward compatibility.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsKeda {
    /// TraitConfiguration parameters configuration
    pub configuration: BTreeMap<String, serde_json::Value>,
}

/// The configuration of Knative trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsKnative {
    /// Enable automatic discovery of all trait properties.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// List of channels used as destination of integration routes.
    /// Can contain simple channel names or full Camel URIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "channelSinks")]
    pub channel_sinks: Option<Vec<String>>,
    /// List of channels used as source of integration routes.
    /// Can contain simple channel names or full Camel URIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "channelSources")]
    pub channel_sources: Option<Vec<String>>,
    /// Can be used to inject a Knative complete configuration in JSON format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<String>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// List of endpoints used as destination of integration routes.
    /// Can contain simple endpoint names or full Camel URIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointSinks")]
    pub endpoint_sinks: Option<Vec<String>>,
    /// List of channels used as source of integration routes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointSources")]
    pub endpoint_sources: Option<Vec<String>>,
    /// List of event types that the integration will produce.
    /// Can contain simple event types or full Camel URIs (to use a specific broker).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventSinks")]
    pub event_sinks: Option<Vec<String>>,
    /// List of event types that the integration will be subscribed to.
    /// Can contain simple event types or full Camel URIs (to use a specific broker different from "default").
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventSources")]
    pub event_sources: Option<Vec<String>>,
    /// Enables the default filtering for the Knative trigger using the event type
    /// If this is true, the created Knative trigger uses the event type as a filter on the event stream when no other filter criteria is given. (default: true)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterEventType")]
    pub filter_event_type: Option<bool>,
    /// Enables filtering on events based on the header "ce-knativehistory". Since this header has been removed in newer versions of
    /// Knative, filtering is disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterSourceChannels")]
    pub filter_source_channels: Option<bool>,
    /// Sets filter attributes on the event stream (such as event type, source, subject and so on).
    /// A list of key-value pairs that represent filter attributes and its values.
    /// The syntax is KEY=VALUE, e.g., `source="my.source"`.
    /// Filter attributes get set on the Knative trigger that is being created as part of this integration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<String>>,
    /// Enables the camel-k-operator to set the "bindings.knative.dev/include=true" label to the namespace
    /// As Knative requires this label to perform injection of K_SINK URL into the service.
    /// If this is false, the integration pod may start and fail, read the SinkBinding Knative documentation. (default: true)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceLabel")]
    pub namespace_label: Option<bool>,
    /// Allows binding the integration to a sink via a Knative SinkBinding resource.
    /// This can be used when the integration targets a single sink.
    /// It's enabled by default when the integration targets a single sink
    /// (except when the integration is owned by a Knative source).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sinkBinding")]
    pub sink_binding: Option<bool>,
}

/// The configuration of Knative Service trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsKnativeService {
    /// The annotations added to route.
    /// This can be used to set knative service specific annotations
    /// CLI usage example: -t "knative-service.annotations.'haproxy.router.openshift.io/balance'=true"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Automatically deploy the integration as Knative service when all conditions hold:
    /// 
    /// * Integration is using the Knative profile
    /// * All routes are either starting from an HTTP based consumer or a passive consumer (e.g. `direct` is a passive consumer)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Configures the Knative autoscaling metric property (e.g. to set `concurrency` based or `cpu` based autoscaling).
    /// 
    /// Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingMetric")]
    pub autoscaling_metric: Option<String>,
    /// Sets the allowed concurrency level or CPU percentage (depending on the autoscaling metric) for each Pod.
    /// 
    /// Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingTarget")]
    pub autoscaling_target: Option<i64>,
    /// Configures the Knative autoscaling class property (e.g. to set `hpa.autoscaling.knative.dev` or `kpa.autoscaling.knative.dev` autoscaling).
    /// 
    /// Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<IntegrationStatusTraitsKnativeServiceClass>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// An upper bound for the number of Pods that can be running in parallel for the integration.
    /// Knative has its own cap value that depends on the installation.
    /// 
    /// Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxScale")]
    pub max_scale: Option<i64>,
    /// The minimum number of Pods that should be running at any time for the integration. It's **zero** by default, meaning that
    /// the integration is scaled down to zero when not used for a configured amount of time.
    /// 
    /// Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minScale")]
    pub min_scale: Option<i64>,
    /// Enables to gradually shift traffic to the latest Revision and sets the rollout duration.
    /// It's disabled by default and must be expressed as a Golang `time.Duration` string representation,
    /// rounded to a second precision.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rolloutDuration")]
    pub rollout_duration: Option<String>,
    /// The maximum duration in seconds that the request instance is allowed to respond to a request.
    /// This field propagates to the integration pod's terminationGracePeriodSeconds
    /// 
    /// Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i64>,
    /// Setting `cluster-local`, Knative service becomes a private service.
    /// Specifically, this option applies the `networking.knative.dev/visibility` label to Knative service.
    /// 
    /// Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub visibility: Option<IntegrationStatusTraitsKnativeServiceVisibility>,
}

/// The configuration of Knative Service trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationStatusTraitsKnativeServiceClass {
    #[serde(rename = "kpa.autoscaling.knative.dev")]
    KpaAutoscalingKnativeDev,
    #[serde(rename = "hpa.autoscaling.knative.dev")]
    HpaAutoscalingKnativeDev,
}

/// The configuration of Knative Service trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationStatusTraitsKnativeServiceVisibility {
    #[serde(rename = "cluster-local")]
    ClusterLocal,
}

/// The configuration of Logging trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsLogging {
    /// Colorize the log output
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub color: Option<bool>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Logs message format
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// Output the logs in JSON
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json: Option<bool>,
    /// Enable "pretty printing" of the JSON logs
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPrettyPrint")]
    pub json_pretty_print: Option<bool>,
    /// Adjust the logging level (defaults to `INFO`)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<IntegrationStatusTraitsLoggingLevel>,
}

/// The configuration of Logging trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationStatusTraitsLoggingLevel {
    #[serde(rename = "FATAL")]
    Fatal,
    #[serde(rename = "WARN")]
    Warn,
    #[serde(rename = "INFO")]
    Info,
    #[serde(rename = "DEBUG")]
    Debug,
    #[serde(rename = "TRACE")]
    Trace,
}

/// The configuration of Master trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsMaster {
    /// Enables automatic configuration of the trait.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// When this flag is active, the operator analyzes the source code to add dependencies required by delegate endpoints.
    /// E.g. when using `master:lockname:timer`, then `camel:timer` is automatically added to the set of dependencies.
    /// It's enabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeDelegateDependencies")]
    pub include_delegate_dependencies: Option<bool>,
    /// Label that will be used to identify all pods contending the lock. Defaults to "camel.apache.org/integration".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelKey")]
    pub label_key: Option<String>,
    /// Label value that will be used to identify all pods contending the lock. Defaults to the integration name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelValue")]
    pub label_value: Option<String>,
    /// Name of the configmap that will be used to store the lock. Defaults to "<integration-name>-lock".
    /// Name of the configmap/lease resource that will be used to store the lock. Defaults to "<integration-name>-lock".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceName")]
    pub resource_name: Option<String>,
    /// Type of Kubernetes resource to use for locking ("ConfigMap" or "Lease"). Defaults to "Lease".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceType")]
    pub resource_type: Option<String>,
}

/// The configuration of Mount trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsMount {
    /// A list of configuration pointing to configmap/secret.
    /// The configuration are expected to be UTF-8 resources as they are processed by runtime Camel Context and tried to be parsed as property files.
    /// They are also made available on the classpath in order to ease their usage directly from the Route.
    /// Syntax: [configmap|secret]:name[/key], where name represents the resource name and key optionally represents the resource key to be filtered
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<Vec<String>>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// A list of EmptyDir volumes to be mounted. An optional size limit may be configured (default 500Mi).
    /// Syntax: name:/container/path[:sizeLimit]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emptyDirs")]
    pub empty_dirs: Option<Vec<String>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Enable "hot reload" when a secret/configmap mounted is edited (default `false`). The configmap/secret must be
    /// marked with `camel.apache.org/integration` label to be taken in account. The resource will be watched for any kind change, also for
    /// changes in metadata.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hotReload")]
    pub hot_reload: Option<bool>,
    /// A list of resources (text or binary content) pointing to configmap/secret.
    /// The resources are expected to be any resource type (text or binary content).
    /// The destination path can be either a default location or any path specified by the user.
    /// Syntax: [configmap|secret]:name[/key][@path], where name represents the resource name, key optionally represents the resource key to be filtered and path represents the destination path
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<String>>,
    /// Deprecated: no longer available since version 2.5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scanKameletsImplicitLabelSecrets")]
    pub scan_kamelets_implicit_label_secrets: Option<bool>,
    /// A list of Persistent Volume Claims to be mounted. Syntax: [pvcname:/container/path]. If the PVC is not found, the Integration fails.
    /// You can use the syntax [pvcname:/container/path:size:accessMode<:storageClass>] to create a dynamic PVC based on the Storage Class provided
    /// or the default cluster Storage Class. However, if the PVC exists, the operator would mount it.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<String>>,
}

/// The configuration of OpenAPI trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsOpenapi {
    /// The configmaps holding the spec of the OpenAPI (compatible with > 3.0 spec only).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configmaps: Option<Vec<String>>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The configuration of Owner trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsOwner {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The set of annotations to be transferred
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetAnnotations")]
    pub target_annotations: Option<Vec<String>>,
    /// The set of labels to be transferred
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetLabels")]
    pub target_labels: Option<Vec<String>>,
}

/// The configuration of PDB trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsPdb {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The number of pods for the Integration that can be unavailable after an eviction.
    /// It can be either an absolute number or a percentage (default `1` if `min-available` is also not set).
    /// Only one of `max-unavailable` and `min-available` can be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<String>,
    /// The number of pods for the Integration that must still be available after an eviction.
    /// It can be either an absolute number or a percentage.
    /// Only one of `min-available` and `max-unavailable` can be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minAvailable")]
    pub min_available: Option<String>,
}

/// The configuration of Platform trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsPlatform {
    /// To automatically detect from the environment if a default platform can be created (it will be created on OpenShift or when a registry address is set).
    /// Deprecated: Platform is auto generated by the operator install procedure - maintained for backward compatibility
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// To create a default (empty) platform when the platform is missing.
    /// Deprecated: Platform is auto generated by the operator install procedure - maintained for backward compatibility
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createDefault")]
    pub create_default: Option<bool>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Indicates if the platform should be created globally in the case of global operator (default true).
    /// Deprecated: Platform is auto generated by the operator install procedure - maintained for backward compatibility
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub global: Option<bool>,
}

/// The configuration of Pod trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsPod {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The configuration of Prometheus trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsPrometheus {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Whether a `PodMonitor` resource is created (default `true`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podMonitor")]
    pub pod_monitor: Option<bool>,
    /// The `PodMonitor` resource labels, applicable when `pod-monitor` is `true`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podMonitorLabels")]
    pub pod_monitor_labels: Option<Vec<String>>,
}

/// The configuration of Pull Secret trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsPullSecret {
    /// Automatically configures the platform registry secret on the pod if it is of type `kubernetes.io/dockerconfigjson`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// When using a global operator with a shared platform, this enables delegation of the `system:image-puller` cluster role on the operator namespace to the integration service account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullerDelegation")]
    pub image_puller_delegation: Option<bool>,
    /// The pull secret name to set on the Pod. If left empty this is automatically taken from the `IntegrationPlatform` registry configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// The configuration of Quarkus trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsQuarkus {
    /// The Quarkus mode to run: either `jvm` or `native` (default `jvm`).
    /// In case both `jvm` and `native` are specified, two `IntegrationKit` resources are created,
    /// with the `native` kit having precedence over the `jvm` one once ready.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildMode")]
    pub build_mode: Option<Vec<String>>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The base image to use when running a native build (default `quay.io/quarkus/quarkus-micro-image:2.0`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nativeBaseImage")]
    pub native_base_image: Option<String>,
    /// The image containing the tooling required for a native build (by default it will use the one provided in the runtime catalog)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nativeBuilderImage")]
    pub native_builder_image: Option<String>,
    /// The Quarkus package types, `fast-jar` or `native` (default `fast-jar`).
    /// In case both `fast-jar` and `native` are specified, two `IntegrationKit` resources are created,
    /// with the native kit having precedence over the `fast-jar` one once ready.
    /// The order influences the resolution of the current kit for the integration.
    /// The kit corresponding to the first package type will be assigned to the
    /// integration in case no existing kit that matches the integration exists.
    /// Deprecated: use `build-mode` instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packageTypes")]
    pub package_types: Option<Vec<String>>,
}

/// The configuration of Registry trait (support removed since version 2.5.0).
/// Deprecated: use jvm trait or read documentation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsRegistry {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The configuration of Route trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsRoute {
    /// The annotations added to route.
    /// This can be used to set route specific annotations
    /// For annotations options see <https://docs.openshift.com/container-platform/3.11/architecture/networking/routes.html#route-specific-annotations>
    /// CLI usage example: -t "route.annotations.'haproxy.router.openshift.io/balance'=true"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// To configure the host exposed by the route.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// The TLS CA certificate contents.
    /// 
    /// Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCACertificate")]
    pub tls_ca_certificate: Option<String>,
    /// The secret name and key reference to the TLS CA certificate. The format is "secret-name[/key-name]", the value represents the secret name, if there is only one key in the secret it will be read, otherwise you can set a key name separated with a "/".
    /// 
    /// Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCACertificateSecret")]
    pub tls_ca_certificate_secret: Option<String>,
    /// The TLS certificate contents.
    /// 
    /// Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCertificate")]
    pub tls_certificate: Option<String>,
    /// The secret name and key reference to the TLS certificate. The format is "secret-name[/key-name]", the value represents the secret name, if there is only one key in the secret it will be read, otherwise you can set a key name separated with a "/".
    /// 
    /// Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCertificateSecret")]
    pub tls_certificate_secret: Option<String>,
    /// The destination CA certificate provides the contents of the ca certificate of the final destination.  When using reencrypt
    /// termination this file should be provided in order to have routers use it for health checks on the secure connection.
    /// If this field is not specified, the router may provide its own destination CA and perform hostname validation using
    /// the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically
    /// verify.
    /// 
    /// Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsDestinationCACertificate")]
    pub tls_destination_ca_certificate: Option<String>,
    /// The secret name and key reference to the destination CA certificate. The format is "secret-name[/key-name]", the value represents the secret name, if there is only one key in the secret it will be read, otherwise you can set a key name separated with a "/".
    /// 
    /// Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsDestinationCACertificateSecret")]
    pub tls_destination_ca_certificate_secret: Option<String>,
    /// To configure how to deal with insecure traffic, e.g. `Allow`, `Disable` or `Redirect` traffic.
    /// 
    /// Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsInsecureEdgeTerminationPolicy")]
    pub tls_insecure_edge_termination_policy: Option<IntegrationStatusTraitsRouteTlsInsecureEdgeTerminationPolicy>,
    /// The TLS certificate key contents.
    /// 
    /// Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
    /// The secret name and key reference to the TLS certificate key. The format is "secret-name[/key-name]", the value represents the secret name, if there is only one key in the secret it will be read, otherwise you can set a key name separated with a "/".
    /// 
    /// Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKeySecret")]
    pub tls_key_secret: Option<String>,
    /// The TLS termination type, like `edge`, `passthrough` or `reencrypt`.
    /// 
    /// Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsTermination")]
    pub tls_termination: Option<IntegrationStatusTraitsRouteTlsTermination>,
}

/// The configuration of Route trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationStatusTraitsRouteTlsInsecureEdgeTerminationPolicy {
    None,
    Allow,
    Redirect,
}

/// The configuration of Route trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationStatusTraitsRouteTlsTermination {
    #[serde(rename = "edge")]
    Edge,
    #[serde(rename = "reencrypt")]
    Reencrypt,
    #[serde(rename = "passthrough")]
    Passthrough,
}

/// The configuration of Security Context trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsSecurityContext {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Security Context RunAsNonRoot configuration (default false).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    /// Security Context RunAsUser configuration (default none): this value is automatically retrieved in Openshift clusters when not explicitly set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// Security Context SeccompProfileType configuration (default RuntimeDefault).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfileType")]
    pub seccomp_profile_type: Option<IntegrationStatusTraitsSecurityContextSeccompProfileType>,
}

/// The configuration of Security Context trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationStatusTraitsSecurityContextSeccompProfileType {
    Unconfined,
    RuntimeDefault,
}

/// The configuration of Service trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsService {
    /// The annotations added to the Service object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// To automatically detect from the code if a Service needs to be created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The labels added to the Service object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Enable Service to be exposed as NodePort (default `false`).
    /// Deprecated: Use service type instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePort")]
    pub node_port: Option<bool>,
    /// List of container ports available in the container to expose
    /// (syntax: <port-name>;<port-number>;<container-port-number>[;<port-protocol]).
    /// When omitted, `port-protocol` (admitted values `TCP`, `UDP` or `SCTP`) is `TCP`.
    /// Don't use this for the primary http managed port (which is managed by container trait).
    /// Don't use in Knative based environments.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<String>>,
    /// The type of service to be used, either 'ClusterIP', 'NodePort' or 'LoadBalancer'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<IntegrationStatusTraitsServiceType>,
}

/// The configuration of Service trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationStatusTraitsServiceType {
    #[serde(rename = "ClusterIP")]
    ClusterIp,
    NodePort,
    LoadBalancer,
}

/// The configuration of Service Binding trait
/// Deprecated: no longer in use.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsServiceBinding {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// List of Services in the form [[apigroup/]version:]kind:[namespace/]name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<String>>,
}

/// Deprecated: for backward compatibility.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsStrimzi {
    /// TraitConfiguration parameters configuration
    pub configuration: BTreeMap<String, serde_json::Value>,
}

/// The configuration of Telemetry trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsTelemetry {
    /// Enables automatic configuration of the trait, including automatic discovery of the telemetry endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The target endpoint of the Telemetry service (automatically discovered by default)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// The sampler of the telemetry used for tracing (default "on")
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sampler: Option<String>,
    /// The sampler of the telemetry used for tracing is parent based (default "true")
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampler-parent-based")]
    pub sampler_parent_based: Option<bool>,
    /// The sampler ratio of the telemetry used for tracing
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampler-ratio")]
    pub sampler_ratio: Option<String>,
    /// The name of the service that publishes telemetry data (defaults to the integration name)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

/// The configuration of Toleration trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsToleration {
    /// Legacy trait configuration parameters.
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The list of taints to tolerate, in the form `Key[=Value]:Effect[:Seconds]`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub taints: Option<Vec<String>>,
}

/// Deprecated: for backward compatibility.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationStatusTraitsTracing {
    /// TraitConfiguration parameters configuration
    pub configuration: BTreeMap<String, serde_json::Value>,
}

