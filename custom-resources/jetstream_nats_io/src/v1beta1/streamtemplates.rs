// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/nats-io/nack/jetstream.nats.io/v1beta1/streamtemplates.yaml
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "jetstream.nats.io", version = "v1beta1", kind = "StreamTemplate", plural = "streamtemplates")]
#[kube(namespaced)]
#[kube(status = "StreamTemplateStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct StreamTemplateSpec {
    /// When a Stream reach it's limits either old messages are deleted or new ones are denied.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub discard: Option<StreamTemplateDiscard>,
    /// The duration window to track duplicate messages for.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "duplicateWindow")]
    pub duplicate_window: Option<String>,
    /// Maximum age of any message in the stream, expressed in Go's time.Duration format. Empty for unlimited.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAge")]
    pub max_age: Option<String>,
    /// How big the Stream may be, when the combined stream size exceeds this old messages are removed. -1 for unlimited.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBytes")]
    pub max_bytes: Option<i64>,
    /// How many Consumers can be defined for a given Stream. -1 for unlimited.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConsumers")]
    pub max_consumers: Option<i64>,
    /// The largest message that will be accepted by the Stream. -1 for unlimited.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxMsgSize")]
    pub max_msg_size: Option<i64>,
    /// How many messages may be in a Stream, oldest messages will be removed if the Stream exceeds this size. -1 for unlimited.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxMsgs")]
    pub max_msgs: Option<i64>,
    /// The maximum number of Streams this Template can create, -1 for unlimited.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxStreams")]
    pub max_streams: Option<i64>,
    /// A unique name for the Stream Template.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Disables acknowledging messages that are received by the Stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noAck")]
    pub no_ack: Option<bool>,
    /// How many replicas to keep for each message.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i64>,
    /// How messages are retained in the Stream, once this is exceeded old messages are removed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retention: Option<StreamTemplateRetention>,
    /// The storage backend to use for the Stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<StreamTemplateStorage>,
    /// A list of subjects to consume, supports wildcards.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subjects: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum StreamTemplateDiscard {
    #[serde(rename = "old")]
    Old,
    #[serde(rename = "new")]
    New,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum StreamTemplateRetention {
    #[serde(rename = "limits")]
    Limits,
    #[serde(rename = "interest")]
    Interest,
    #[serde(rename = "workqueue")]
    Workqueue,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum StreamTemplateStorage {
    #[serde(rename = "file")]
    File,
    #[serde(rename = "memory")]
    Memory,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StreamTemplateStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

