// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/nats-io/nack/jetstream.nats.io/v1beta2/accounts.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "jetstream.nats.io", version = "v1beta2", kind = "Account", plural = "accounts")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct AccountSpec {
    /// The creds to be used to connect to the NATS Service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub creds: Option<AccountCreds>,
    /// A unique name for the Account.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A list of servers to connect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub servers: Option<Vec<String>>,
    /// The TLS certs to be used to connect to the NATS Service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<AccountTls>,
}

/// The creds to be used to connect to the NATS Service.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AccountCreds {
    /// Credentials file, generated with github.com/nats-io/nsc tool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AccountCredsSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AccountCredsSecret {
    /// Name of the secret with the creds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// The TLS certs to be used to connect to the NATS Service.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AccountTls {
    /// Filename of the Root CA of the TLS cert.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<String>,
    /// Filename of the TLS cert.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<String>,
    /// Filename of the TLS cert key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<AccountTlsSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AccountTlsSecret {
    /// Name of the TLS secret with the certs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

