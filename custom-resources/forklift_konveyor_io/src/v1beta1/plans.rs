// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/kubev2v/forklift/forklift.konveyor.io/v1beta1/plans.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use k8s_openapi::api::core::v1::ObjectReference;
}
use self::prelude::*;

/// PlanSpec defines the desired state of Plan.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "forklift.konveyor.io", version = "v1beta1", kind = "Plan", plural = "plans")]
#[kube(namespaced)]
#[kube(status = "PlanStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct PlanSpec {
    /// Whether this plan should be archived.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub archived: Option<bool>,
    /// Description
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Deprecated: this field will be deprecated in 2.8.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskBus")]
    pub disk_bus: Option<String>,
    /// Resource mapping.
    pub map: PlanMap,
    /// Determines if the plan should migrate shared disks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "migrateSharedDisks")]
    pub migrate_shared_disks: Option<bool>,
    /// NetworkNameTemplate is a template for generating network interface names in the target virtual machine.
    /// It follows Go template syntax and has access to the following variables:
    ///   - .NetworkName: If target network is multus, name of the Multus network attachment definition, empty otherwise.
    ///   - .NetworkNamespace: If target network is multus, namespace where the network attachment definition is located.
    ///   - .NetworkType: type of the network ("Multus" or "Pod")
    ///   - .NetworkIndex: sequential index of the network interface (0-based)
    /// The template can be used to customize network interface names based on target network configuration.
    /// Note:
    ///   - This template can be overridden at the individual VM level
    ///   - If not specified on VM level and on Plan leverl, default naming conventions will be used
    /// Examples:
    ///   "net-{{.NetworkIndex}}"
    ///   "{{if eq .NetworkType "Pod"}}pod{{else}}multus-{{.NetworkIndex}}{{end}}"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkNameTemplate")]
    pub network_name_template: Option<String>,
    /// Preserve the CPU model and flags the VM runs with in its oVirt cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveClusterCpuModel")]
    pub preserve_cluster_cpu_model: Option<bool>,
    /// Preserve static IPs of VMs in vSphere
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveStaticIPs")]
    pub preserve_static_i_ps: Option<bool>,
    /// Providers.
    pub provider: PlanProvider,
    /// PVCNameTemplate is a template for generating PVC names for VM disks.
    /// It follows Go template syntax and has access to the following variables:
    ///   - .VmName: name of the VM
    ///   - .PlanName: name of the migration plan
    ///   - .DiskIndex: initial volume index of the disk
    ///   - .RootDiskIndex: index of the root disk
    /// Note:
    ///   This template can be overridden at the individual VM level.
    /// Examples:
    ///   "{{.VmName}}-disk-{{.DiskIndex}}"
    ///   "{{if eq .DiskIndex .RootDiskIndex}}root{{else}}data{{end}}-{{.DiskIndex}}"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pvcNameTemplate")]
    pub pvc_name_template: Option<String>,
    /// Target namespace.
    #[serde(rename = "targetNamespace")]
    pub target_namespace: String,
    /// The network attachment definition that should be used for disk transfer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transferNetwork")]
    pub transfer_network: Option<ObjectReference>,
    /// List of VMs.
    pub vms: Vec<PlanVms>,
    /// VolumeNameTemplate is a template for generating volume interface names in the target virtual machine.
    /// It follows Go template syntax and has access to the following variables:
    ///   - .PVCName: name of the PVC mounted to the VM using this volume
    ///   - .VolumeIndex: sequential index of the volume interface (0-based)
    /// Note:
    ///   - This template can be overridden at the individual VM level
    ///   - If not specified on VM level and on Plan leverl, default naming conventions will be used
    /// Examples:
    ///   "disk-{{.VolumeIndex}}"
    ///   "pvc-{{.PVCName}}"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeNameTemplate")]
    pub volume_name_template: Option<String>,
    /// Whether this is a warm migration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub warm: Option<bool>,
}

/// Resource mapping.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanMap {
    /// Network.
    pub network: ObjectReference,
    /// Storage.
    pub storage: ObjectReference,
}

/// Network.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanMapNetwork {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    /// TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// Storage.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanMapStorage {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    /// TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// Providers.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanProvider {
    /// Destination.
    pub destination: ObjectReference,
    /// Source.
    pub source: ObjectReference,
}

/// Destination.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanProviderDestination {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    /// TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// Source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanProviderSource {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    /// TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// The network attachment definition that should be used for disk transfer.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanTransferNetwork {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    /// TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// A VM listed on the plan.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanVms {
    /// Enable hooks.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hooks: Option<Vec<PlanVmsHooks>>,
    /// The object ID.
    /// vsphere:
    ///   The managed object ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Selected InstanceType that will override the VM properties.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    pub instance_type: Option<String>,
    /// Disk decryption LUKS keys
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub luks: Option<ObjectReference>,
    /// An object Name.
    /// vsphere:
    ///   A qualified name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The VM Namespace
    /// Only relevant for an openshift source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// NetworkNameTemplate is a template for generating network interface names in the target virtual machine.
    /// It follows Go template syntax and has access to the following variables:
    ///   - .NetworkName: If target network is multus, name of the Multus network attachment definition, empty otherwise.
    ///   - .NetworkNamespace: If target network is multus, namespace where the network attachment definition is located.
    ///   - .NetworkType: type of the network ("Multus" or "Pod")
    ///   - .NetworkIndex: sequential index of the network interface (0-based)
    /// The template can be used to customize network interface names based on target network configuration.
    /// Note:
    ///   - This template will override at the plan level template
    ///   - If not specified on VM level and on Plan leverl, default naming conventions will be used
    /// Examples:
    ///   "net-{{.NetworkIndex}}"
    ///   "{{if eq .NetworkType "Pod"}}pod{{else}}multus-{{.NetworkIndex}}{{end}}"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkNameTemplate")]
    pub network_name_template: Option<String>,
    /// PVCNameTemplate is a template for generating PVC names for VM disks.
    /// It follows Go template syntax and has access to the following variables:
    ///   - .VmName: name of the VM
    ///   - .PlanName: name of the migration plan
    ///   - .DiskIndex: initial volume index of the disk
    ///   - .RootDiskIndex: index of the root disk
    /// Note:
    ///   This template overrides the plan level template.
    /// Examples:
    ///   "{{.VmName}}-disk-{{.DiskIndex}}"
    ///   "{{if eq .DiskIndex .RootDiskIndex}}root{{else}}data{{end}}-{{.DiskIndex}}"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pvcNameTemplate")]
    pub pvc_name_template: Option<String>,
    /// Choose the primary disk the VM boots from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootDisk")]
    pub root_disk: Option<String>,
    /// TargetName specifies a custom name for the VM in the target cluster.
    /// If not provided, the original VM name will be used and automatically adjusted to meet k8s DNS1123 requirements.
    /// If provided, this exact name will be used instead. The migration will fail if the name is not unique or already in use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetName")]
    pub target_name: Option<String>,
    /// Type used to qualify the name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// VolumeNameTemplate is a template for generating volume interface names in the target virtual machine.
    /// It follows Go template syntax and has access to the following variables:
    ///   - .PVCName: name of the PVC mounted to the VM using this volume
    ///   - .VolumeIndex: sequential index of the volume interface (0-based)
    /// Note:
    ///   - This template will override at the plan level template
    ///   - If not specified on VM level and on Plan leverl, default naming conventions will be used
    /// Examples:
    ///   "disk-{{.VolumeIndex}}"
    ///   "pvc-{{.PVCName}}"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeNameTemplate")]
    pub volume_name_template: Option<String>,
}

/// Plan hook.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanVmsHooks {
    /// Hook reference.
    pub hook: ObjectReference,
    /// Pipeline step.
    pub step: String,
}

/// Hook reference.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanVmsHooksHook {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    /// TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// Disk decryption LUKS keys
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanVmsLuks {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    /// TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// PlanStatus defines the observed state of Plan.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatus {
    /// List of conditions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// Migration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub migration: Option<PlanStatusMigration>,
    /// The most recent generation observed by the controller.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

/// Migration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigration {
    /// Completed timestamp.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub completed: Option<String>,
    /// History
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub history: Option<Vec<PlanStatusMigrationHistory>>,
    /// Started timestamp.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub started: Option<String>,
    /// VM status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vms: Option<Vec<PlanStatusMigrationVms>>,
}

/// Snapshot
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationHistory {
    /// List of conditions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// Map.
    pub map: PlanStatusMigrationHistoryMap,
    /// Migration
    pub migration: PlanStatusMigrationHistoryMigration,
    /// Plan
    pub plan: PlanStatusMigrationHistoryPlan,
    /// Provider
    pub provider: PlanStatusMigrationHistoryProvider,
}

/// Map.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationHistoryMap {
    /// Snapshot object reference.
    pub network: PlanStatusMigrationHistoryMapNetwork,
    /// Snapshot object reference.
    pub storage: PlanStatusMigrationHistoryMapStorage,
}

/// Snapshot object reference.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationHistoryMapNetwork {
    pub generation: i64,
    pub name: String,
    pub namespace: String,
    /// UID is a type that holds unique ID values, including UUIDs.  Because we
    /// don't ONLY use UUIDs, this is an alias to string.  Being a type captures
    /// intent and helps make sure that UIDs and names do not get conflated.
    pub uid: String,
}

/// Snapshot object reference.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationHistoryMapStorage {
    pub generation: i64,
    pub name: String,
    pub namespace: String,
    /// UID is a type that holds unique ID values, including UUIDs.  Because we
    /// don't ONLY use UUIDs, this is an alias to string.  Being a type captures
    /// intent and helps make sure that UIDs and names do not get conflated.
    pub uid: String,
}

/// Migration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationHistoryMigration {
    pub generation: i64,
    pub name: String,
    pub namespace: String,
    /// UID is a type that holds unique ID values, including UUIDs.  Because we
    /// don't ONLY use UUIDs, this is an alias to string.  Being a type captures
    /// intent and helps make sure that UIDs and names do not get conflated.
    pub uid: String,
}

/// Plan
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationHistoryPlan {
    pub generation: i64,
    pub name: String,
    pub namespace: String,
    /// UID is a type that holds unique ID values, including UUIDs.  Because we
    /// don't ONLY use UUIDs, this is an alias to string.  Being a type captures
    /// intent and helps make sure that UIDs and names do not get conflated.
    pub uid: String,
}

/// Provider
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationHistoryProvider {
    /// Snapshot object reference.
    pub destination: PlanStatusMigrationHistoryProviderDestination,
    /// Snapshot object reference.
    pub source: PlanStatusMigrationHistoryProviderSource,
}

/// Snapshot object reference.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationHistoryProviderDestination {
    pub generation: i64,
    pub name: String,
    pub namespace: String,
    /// UID is a type that holds unique ID values, including UUIDs.  Because we
    /// don't ONLY use UUIDs, this is an alias to string.  Being a type captures
    /// intent and helps make sure that UIDs and names do not get conflated.
    pub uid: String,
}

/// Snapshot object reference.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationHistoryProviderSource {
    pub generation: i64,
    pub name: String,
    pub namespace: String,
    /// UID is a type that holds unique ID values, including UUIDs.  Because we
    /// don't ONLY use UUIDs, this is an alias to string.  Being a type captures
    /// intent and helps make sure that UIDs and names do not get conflated.
    pub uid: String,
}

/// VM Status
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationVms {
    /// Completed timestamp.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub completed: Option<String>,
    /// List of conditions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// Errors
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<PlanStatusMigrationVmsError>,
    /// The firmware type detected from the OVF file produced by virt-v2v.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub firmware: Option<String>,
    /// Enable hooks.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hooks: Option<Vec<PlanStatusMigrationVmsHooks>>,
    /// The object ID.
    /// vsphere:
    ///   The managed object ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Selected InstanceType that will override the VM properties.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    pub instance_type: Option<String>,
    /// Disk decryption LUKS keys
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub luks: Option<ObjectReference>,
    /// An object Name.
    /// vsphere:
    ///   A qualified name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The VM Namespace
    /// Only relevant for an openshift source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// NetworkNameTemplate is a template for generating network interface names in the target virtual machine.
    /// It follows Go template syntax and has access to the following variables:
    ///   - .NetworkName: If target network is multus, name of the Multus network attachment definition, empty otherwise.
    ///   - .NetworkNamespace: If target network is multus, namespace where the network attachment definition is located.
    ///   - .NetworkType: type of the network ("Multus" or "Pod")
    ///   - .NetworkIndex: sequential index of the network interface (0-based)
    /// The template can be used to customize network interface names based on target network configuration.
    /// Note:
    ///   - This template will override at the plan level template
    ///   - If not specified on VM level and on Plan leverl, default naming conventions will be used
    /// Examples:
    ///   "net-{{.NetworkIndex}}"
    ///   "{{if eq .NetworkType "Pod"}}pod{{else}}multus-{{.NetworkIndex}}{{end}}"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkNameTemplate")]
    pub network_name_template: Option<String>,
    /// The new name of the VM after matching DNS1123 requirements.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "newName")]
    pub new_name: Option<String>,
    /// The Operating System detected by virt-v2v.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operatingSystem")]
    pub operating_system: Option<String>,
    /// Phase
    pub phase: String,
    /// Migration pipeline.
    pub pipeline: Vec<PlanStatusMigrationVmsPipeline>,
    /// PVCNameTemplate is a template for generating PVC names for VM disks.
    /// It follows Go template syntax and has access to the following variables:
    ///   - .VmName: name of the VM
    ///   - .PlanName: name of the migration plan
    ///   - .DiskIndex: initial volume index of the disk
    ///   - .RootDiskIndex: index of the root disk
    /// Note:
    ///   This template overrides the plan level template.
    /// Examples:
    ///   "{{.VmName}}-disk-{{.DiskIndex}}"
    ///   "{{if eq .DiskIndex .RootDiskIndex}}root{{else}}data{{end}}-{{.DiskIndex}}"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pvcNameTemplate")]
    pub pvc_name_template: Option<String>,
    /// Source VM power state before migration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restorePowerState")]
    pub restore_power_state: Option<String>,
    /// Choose the primary disk the VM boots from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootDisk")]
    pub root_disk: Option<String>,
    /// Started timestamp.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub started: Option<String>,
    /// TargetName specifies a custom name for the VM in the target cluster.
    /// If not provided, the original VM name will be used and automatically adjusted to meet k8s DNS1123 requirements.
    /// If provided, this exact name will be used instead. The migration will fail if the name is not unique or already in use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetName")]
    pub target_name: Option<String>,
    /// Type used to qualify the name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// VolumeNameTemplate is a template for generating volume interface names in the target virtual machine.
    /// It follows Go template syntax and has access to the following variables:
    ///   - .PVCName: name of the PVC mounted to the VM using this volume
    ///   - .VolumeIndex: sequential index of the volume interface (0-based)
    /// Note:
    ///   - This template will override at the plan level template
    ///   - If not specified on VM level and on Plan leverl, default naming conventions will be used
    /// Examples:
    ///   "disk-{{.VolumeIndex}}"
    ///   "pvc-{{.PVCName}}"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeNameTemplate")]
    pub volume_name_template: Option<String>,
    /// Warm migration status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub warm: Option<PlanStatusMigrationVmsWarm>,
}

/// Errors
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationVmsError {
    pub phase: String,
    pub reasons: Vec<String>,
}

/// Plan hook.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationVmsHooks {
    /// Hook reference.
    pub hook: ObjectReference,
    /// Pipeline step.
    pub step: String,
}

/// Hook reference.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationVmsHooksHook {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    /// TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// Disk decryption LUKS keys
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationVmsLuks {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    /// TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// Pipeline step.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationVmsPipeline {
    /// Annotations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Completed timestamp.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub completed: Option<String>,
    /// Name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<PlanStatusMigrationVmsPipelineError>,
    /// Name.
    pub name: String,
    /// Phase
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
    /// Progress.
    pub progress: PlanStatusMigrationVmsPipelineProgress,
    /// Reason
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Started timestamp.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub started: Option<String>,
    /// Nested tasks.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tasks: Option<Vec<PlanStatusMigrationVmsPipelineTasks>>,
}

/// Error.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationVmsPipelineError {
    pub phase: String,
    pub reasons: Vec<String>,
}

/// Progress.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationVmsPipelineProgress {
    /// Completed units.
    pub completed: i64,
    /// Total units.
    pub total: i64,
}

/// Migration task.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationVmsPipelineTasks {
    /// Annotations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Completed timestamp.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub completed: Option<String>,
    /// Name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<PlanStatusMigrationVmsPipelineTasksError>,
    /// Name.
    pub name: String,
    /// Phase
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
    /// Progress.
    pub progress: PlanStatusMigrationVmsPipelineTasksProgress,
    /// Reason
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Started timestamp.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub started: Option<String>,
}

/// Error.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationVmsPipelineTasksError {
    pub phase: String,
    pub reasons: Vec<String>,
}

/// Progress.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationVmsPipelineTasksProgress {
    /// Completed units.
    pub completed: i64,
    /// Total units.
    pub total: i64,
}

/// Warm migration status
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationVmsWarm {
    #[serde(rename = "consecutiveFailures")]
    pub consecutive_failures: i64,
    pub failures: i64,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nextPrecopyAt")]
    pub next_precopy_at: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub precopies: Option<Vec<PlanStatusMigrationVmsWarmPrecopies>>,
    pub successes: i64,
}

/// Precopy durations
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationVmsWarmPrecopies {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createTaskId")]
    pub create_task_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deltas: Option<Vec<PlanStatusMigrationVmsWarmPrecopiesDeltas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "removeTaskId")]
    pub remove_task_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub snapshot: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PlanStatusMigrationVmsWarmPrecopiesDeltas {
    #[serde(rename = "deltaId")]
    pub delta_id: String,
    pub disk: String,
}

