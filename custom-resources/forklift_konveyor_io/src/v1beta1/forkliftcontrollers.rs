// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/kubev2v/forklift/forklift.konveyor.io/v1beta1/forkliftcontrollers.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// Spec defines the desired state of ForkliftController
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "forklift.konveyor.io", version = "v1beta1", kind = "ForkliftController", plural = "forkliftcontrollers")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ForkliftControllerSpec {
    /// API service CPU limit (default: 1000m)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api_container_limits_cpu: Option<String>,
    /// API service memory limit (default: 1Gi)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api_container_limits_memory: Option<String>,
    /// API service CPU request (default: 100m)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api_container_requests_cpu: Option<String>,
    /// API service memory request (default: 150Mi)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api_container_requests_memory: Option<String>,
    /// API service image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api_image_fqin: Option<String>,
    /// CLI download service CPU limit (default: 100m)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cli_download_container_limits_cpu: Option<String>,
    /// CLI download service memory limit (default: 128Mi)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cli_download_container_limits_memory: Option<String>,
    /// CLI download service CPU request (default: 50m)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cli_download_container_requests_cpu: Option<String>,
    /// CLI download service memory request (default: 64Mi)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cli_download_container_requests_memory: Option<String>,
    /// CLI download service image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cli_download_image_fqin: Option<String>,
    /// Block overhead in bytes (default: 0)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_block_overhead: Option<String>,
    /// Cleanup retry count (default: 10)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_cleanup_retries: Option<String>,
    /// Controller CPU limit (default: 500m)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_container_limits_cpu: Option<String>,
    /// Controller memory limit (default: 800Mi)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_container_limits_memory: Option<String>,
    /// Controller CPU request (default: 100m)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_container_requests_cpu: Option<String>,
    /// Controller memory request (default: 350Mi)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_container_requests_memory: Option<String>,
    /// DataVolume status check retries (default: 10)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_dv_status_check_retries: Option<String>,
    /// Filesystem overhead percentage (default: 10)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_filesystem_overhead: Option<String>,
    /// Controller pod image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_image_fqin: Option<String>,
    /// Log verbosity level (default: 3)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_log_level: Option<String>,
    /// Max concurrent reconciles (default: 10)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_max_concurrent_reconciles: Option<String>,
    /// Max concurrent VM migrations (default: 20)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_max_vm_inflight: Option<String>,
    /// Enable oVirt warm migration (default: true)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_ovirt_warm_migration: Option<ForkliftControllerControllerOvirtWarmMigration>,
    /// Precopy interval in minutes (default: 60)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_precopy_interval: Option<String>,
    /// Retain precopy pods (default: false)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_retain_precopy_importer_pods: Option<ForkliftControllerControllerRetainPrecopyImporterPods>,
    /// Snapshot removal retries (default: 20)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_snapshot_removal_check_retries: Option<String>,
    /// Snapshot removal timeout in minutes (default: 120)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_snapshot_removal_timeout_minuts: Option<String>,
    /// Snapshot status check rate in seconds (default: 10)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_snapshot_status_check_rate_seconds: Option<String>,
    /// Enable static udn IP addresses feature (default: false)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_static_udn_ip_addresses: Option<ForkliftControllerControllerStaticUdnIpAddresses>,
    /// TLS connection timeout seconds (default: 5)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_tls_connection_timeout_sec: Option<String>,
    /// VDDK job timeout in seconds (default: 300)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_vddk_job_active_deadline_sec: Option<String>,
    /// Use vSphere incremental backup (default: true)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller_vsphere_incremental_backup: Option<ForkliftControllerControllerVsphereIncrementalBackup>,
    /// Require authentication (default: true)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub feature_auth_required: Option<ForkliftControllerFeatureAuthRequired>,
    /// Enable CLI download service (default: true)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub feature_cli_download: Option<ForkliftControllerFeatureCliDownload>,
    /// Enable copy offload plugins (default: false)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub feature_copy_offload: Option<ForkliftControllerFeatureCopyOffload>,
    /// Enable OCP live migration (default: false)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub feature_ocp_live_migration: Option<ForkliftControllerFeatureOcpLiveMigration>,
    /// Enable OVA appliance management endpoints (default: false)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub feature_ova_appliance_management: Option<ForkliftControllerFeatureOvaApplianceManagement>,
    /// Enable UI plugin (default: true)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub feature_ui_plugin: Option<ForkliftControllerFeatureUiPlugin>,
    /// Enable validation service (default: true)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub feature_validation: Option<ForkliftControllerFeatureValidation>,
    /// Use VMware system serial numbers (default: true)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub feature_vmware_system_serial_number: Option<ForkliftControllerFeatureVmwareSystemSerialNumber>,
    /// Enable volume populators (default: true)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub feature_volume_populator: Option<ForkliftControllerFeatureVolumePopulator>,
    /// Hooks CPU limit (default: 1000m)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hooks_container_limits_cpu: Option<String>,
    /// Hooks memory limit (default: 1Gi)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hooks_container_limits_memory: Option<String>,
    /// Hooks CPU request (default: 100m)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hooks_container_requests_cpu: Option<String>,
    /// Hooks memory request (default: 150Mi)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hooks_container_requests_memory: Option<String>,
    /// Image pull policy (default: Always)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image_pull_policy: Option<ForkliftControllerImagePullPolicy>,
    /// Inventory CPU limit (default: 1000m)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inventory_container_limits_cpu: Option<String>,
    /// Inventory memory limit (default: 1Gi)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inventory_container_limits_memory: Option<String>,
    /// Inventory CPU request (default: 500m)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inventory_container_requests_cpu: Option<String>,
    /// Inventory memory request (default: 500Mi)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inventory_container_requests_memory: Option<String>,
    /// Whether running on Kubernetes (vs OpenShift) (default: false)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub k8s_cluster: Option<ForkliftControllerK8sCluster>,
    /// Must-gather debugging image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub must_gather_image_fqin: Option<String>,
    /// OVA CPU limit (default: 1000m)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ova_container_limits_cpu: Option<String>,
    /// OVA memory limit (default: 1Gi)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ova_container_limits_memory: Option<String>,
    /// OVA CPU request (default: 100m)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ova_container_requests_cpu: Option<String>,
    /// OVA memory request (default: 150Mi)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ova_container_requests_memory: Option<String>,
    /// OVA provider server image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ova_provider_server_fqin: Option<String>,
    /// OVA Proxy CPU limit (default: 1000m)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ova_proxy_container_limits_cpu: Option<String>,
    /// OVA Proxy memory limit (default: 1Gi)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ova_proxy_container_limits_memory: Option<String>,
    /// OVA Proxy CPU request (default: 250m)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ova_proxy_container_requests_cpu: Option<String>,
    /// OVA Proxy memory request (default: 512Mi)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ova_proxy_container_requests_memory: Option<String>,
    /// OVA inventory proxy image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ova_proxy_fqin: Option<String>,
    /// Volume populator controller image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub populator_controller_image_fqin: Option<String>,
    /// OpenStack populator image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub populator_openstack_image_fqin: Option<String>,
    /// oVirt populator image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub populator_ovirt_image_fqin: Option<String>,
    /// vSphere xcopy populator image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub populator_vsphere_xcopy_volume_image_fqin: Option<String>,
    /// UI plugin CPU limit (default: 100m)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ui_plugin_container_limits_cpu: Option<String>,
    /// UI plugin memory limit (default: 800Mi)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ui_plugin_container_limits_memory: Option<String>,
    /// UI plugin CPU request (default: 100m)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ui_plugin_container_requests_cpu: Option<String>,
    /// UI plugin memory request (default: 150Mi)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ui_plugin_container_requests_memory: Option<String>,
    /// UI plugin image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ui_plugin_image_fqin: Option<String>,
    /// Validation CPU limit (default: 1000m)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation_container_limits_cpu: Option<String>,
    /// Validation memory limit (default: 300Mi)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation_container_limits_memory: Option<String>,
    /// Validation CPU request (default: 400m)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation_container_requests_cpu: Option<String>,
    /// Validation memory request (default: 50Mi)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation_container_requests_memory: Option<String>,
    /// Validation service image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation_image_fqin: Option<String>,
    /// Policy agent search interval in seconds (default: 120)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation_policy_agent_search_interval: Option<String>,
    /// VDDK image for VMware disk access
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vddk_image: Option<String>,
    /// virt-v2v CPU limit (default: 4000m)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub virt_v2v_container_limits_cpu: Option<String>,
    /// virt-v2v memory limit (default: 8Gi)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub virt_v2v_container_limits_memory: Option<String>,
    /// virt-v2v CPU request (default: 1000m)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub virt_v2v_container_requests_cpu: Option<String>,
    /// virt-v2v memory request (default: 1Gi)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub virt_v2v_container_requests_memory: Option<String>,
    /// Don't request KVM for virt-v2v
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub virt_v2v_dont_request_kvm: Option<ForkliftControllerVirtV2vDontRequestKvm>,
    /// Additional arguments for virt-v2v
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub virt_v2v_extra_args: Option<String>,
    /// ConfigMap name containing extra virt-v2v configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub virt_v2v_extra_conf_config_map: Option<String>,
    /// Virt-v2v conversion image used by migration pods
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub virt_v2v_image_fqin: Option<String>,
}

/// Spec defines the desired state of ForkliftController
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ForkliftControllerControllerOvirtWarmMigration {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

/// Spec defines the desired state of ForkliftController
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ForkliftControllerControllerRetainPrecopyImporterPods {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

/// Spec defines the desired state of ForkliftController
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ForkliftControllerControllerStaticUdnIpAddresses {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

/// Spec defines the desired state of ForkliftController
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ForkliftControllerControllerVsphereIncrementalBackup {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

/// Spec defines the desired state of ForkliftController
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ForkliftControllerFeatureAuthRequired {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

/// Spec defines the desired state of ForkliftController
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ForkliftControllerFeatureCliDownload {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

/// Spec defines the desired state of ForkliftController
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ForkliftControllerFeatureCopyOffload {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

/// Spec defines the desired state of ForkliftController
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ForkliftControllerFeatureOcpLiveMigration {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

/// Spec defines the desired state of ForkliftController
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ForkliftControllerFeatureOvaApplianceManagement {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

/// Spec defines the desired state of ForkliftController
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ForkliftControllerFeatureUiPlugin {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

/// Spec defines the desired state of ForkliftController
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ForkliftControllerFeatureValidation {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

/// Spec defines the desired state of ForkliftController
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ForkliftControllerFeatureVmwareSystemSerialNumber {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

/// Spec defines the desired state of ForkliftController
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ForkliftControllerFeatureVolumePopulator {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

/// Spec defines the desired state of ForkliftController
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ForkliftControllerImagePullPolicy {
    Always,
    IfNotPresent,
    Never,
}

/// Spec defines the desired state of ForkliftController
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ForkliftControllerK8sCluster {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

/// Spec defines the desired state of ForkliftController
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ForkliftControllerVirtV2vDontRequestKvm {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

