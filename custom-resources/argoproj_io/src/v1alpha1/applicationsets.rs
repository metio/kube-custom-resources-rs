// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/argoproj-labs/argocd-operator/argoproj.io/v1alpha1/applicationsets.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "argoproj.io", version = "v1alpha1", kind = "ApplicationSet", plural = "applicationsets")]
#[kube(namespaced)]
#[kube(status = "ApplicationSetStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ApplicationSetSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applyNestedSelectors")]
    pub apply_nested_selectors: Option<bool>,
    pub generators: Vec<ApplicationSetGenerators>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "goTemplate")]
    pub go_template: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "goTemplateOptions")]
    pub go_template_options: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreApplicationDifferences")]
    pub ignore_application_differences: Option<Vec<ApplicationSetIgnoreApplicationDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preservedFields")]
    pub preserved_fields: Option<ApplicationSetPreservedFields>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<ApplicationSetStrategy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetSyncPolicy>,
    pub template: ApplicationSetTemplate,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "templatePatch")]
    pub template_patch: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGenerators {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterDecisionResource")]
    pub cluster_decision_resource: Option<ApplicationSetGeneratorsClusterDecisionResource>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<ApplicationSetGeneratorsClusters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git: Option<ApplicationSetGeneratorsGit>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub list: Option<ApplicationSetGeneratorsList>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matrix: Option<ApplicationSetGeneratorsMatrix>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merge: Option<ApplicationSetGeneratorsMerge>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullRequest")]
    pub pull_request: Option<ApplicationSetGeneratorsPullRequest>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scmProvider")]
    pub scm_provider: Option<ApplicationSetGeneratorsScmProvider>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<ApplicationSetGeneratorsSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResource {
    #[serde(rename = "configMapRef")]
    pub config_map_ref: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<ApplicationSetGeneratorsClusterDecisionResourceLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requeueAfterSeconds")]
    pub requeue_after_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<ApplicationSetGeneratorsClusterDecisionResourceLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceLabelSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplate {
    pub metadata: ApplicationSetGeneratorsClusterDecisionResourceTemplateMetadata,
    pub spec: ApplicationSetGeneratorsClusterDecisionResourceTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpec {
    pub destination: ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClusters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flatList")]
    pub flat_list: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<ApplicationSetGeneratorsClustersSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsClustersTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<ApplicationSetGeneratorsClustersSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplate {
    pub metadata: ApplicationSetGeneratorsClustersTemplateMetadata,
    pub spec: ApplicationSetGeneratorsClustersTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpec {
    pub destination: ApplicationSetGeneratorsClustersTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsClustersTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsClustersTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsClustersTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsClustersTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsClustersTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsClustersTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsClustersTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsClustersTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsClustersTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsClustersTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsClustersTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsClustersTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsClustersTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsClustersTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsClustersTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsClustersTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsClustersTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsClustersTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsClustersTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsClustersTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsClustersTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsClustersTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsClustersTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsClustersTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsClustersTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsClustersTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsClustersTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsClustersTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsClustersTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsClustersTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsClustersTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsClustersTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsClustersTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsClustersTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsClustersTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsClustersTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsClustersTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsClustersTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsClustersTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsClustersTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsClustersTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsClustersTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGit {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directories: Option<Vec<ApplicationSetGeneratorsGitDirectories>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub files: Option<Vec<ApplicationSetGeneratorsGitFiles>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathParamPrefix")]
    pub path_param_prefix: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requeueAfterSeconds")]
    pub requeue_after_seconds: Option<i64>,
    pub revision: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsGitTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitDirectories {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<bool>,
    pub path: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitFiles {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<bool>,
    pub path: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplate {
    pub metadata: ApplicationSetGeneratorsGitTemplateMetadata,
    pub spec: ApplicationSetGeneratorsGitTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpec {
    pub destination: ApplicationSetGeneratorsGitTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsGitTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsGitTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsGitTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsGitTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsGitTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsGitTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsGitTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsGitTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsGitTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsGitTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsGitTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsGitTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsGitTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsGitTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsGitTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsGitTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsGitTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsGitTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsGitTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsGitTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsGitTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsGitTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsGitTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsGitTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsGitTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsGitTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsGitTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsGitTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsGitTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsGitTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsGitTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsGitTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsGitTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsGitTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsGitTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsGitTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsGitTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsGitTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsGitTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsGitTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsGitTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsGitTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub elements: Option<Vec<serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elementsYaml")]
    pub elements_yaml: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsListTemplate>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplate {
    pub metadata: ApplicationSetGeneratorsListTemplateMetadata,
    pub spec: ApplicationSetGeneratorsListTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpec {
    pub destination: ApplicationSetGeneratorsListTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsListTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsListTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsListTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsListTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsListTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsListTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsListTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsListTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsListTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsListTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsListTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsListTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsListTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsListTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsListTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsListTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsListTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsListTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsListTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsListTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsListTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsListTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsListTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsListTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsListTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsListTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsListTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsListTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsListTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsListTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsListTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsListTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsListTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsListTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsListTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsListTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsListTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsListTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsListTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsListTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsListTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsListTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrix {
    pub generators: Vec<ApplicationSetGeneratorsMatrixGenerators>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsMatrixTemplate>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGenerators {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterDecisionResource")]
    pub cluster_decision_resource: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResource>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<ApplicationSetGeneratorsMatrixGeneratorsClusters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git: Option<ApplicationSetGeneratorsMatrixGeneratorsGit>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub list: Option<ApplicationSetGeneratorsMatrixGeneratorsList>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matrix: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merge: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMatrixGeneratorsPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullRequest")]
    pub pull_request: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequest>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scmProvider")]
    pub scm_provider: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProvider>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<ApplicationSetGeneratorsMatrixGeneratorsSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResource {
    #[serde(rename = "configMapRef")]
    pub config_map_ref: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requeueAfterSeconds")]
    pub requeue_after_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceLabelSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplate {
    pub metadata: ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateMetadata,
    pub spec: ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpec {
    pub destination: ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClusters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flatList")]
    pub flat_list: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClustersSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplate {
    pub metadata: ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateMetadata,
    pub spec: ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpec {
    pub destination: ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsClustersTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGit {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directories: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitDirectories>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub files: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitFiles>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathParamPrefix")]
    pub path_param_prefix: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requeueAfterSeconds")]
    pub requeue_after_seconds: Option<i64>,
    pub revision: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitDirectories {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<bool>,
    pub path: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitFiles {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<bool>,
    pub path: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplate {
    pub metadata: ApplicationSetGeneratorsMatrixGeneratorsGitTemplateMetadata,
    pub spec: ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpec {
    pub destination: ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsGitTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub elements: Option<Vec<serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elementsYaml")]
    pub elements_yaml: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplate>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplate {
    pub metadata: ApplicationSetGeneratorsMatrixGeneratorsListTemplateMetadata,
    pub spec: ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpec {
    pub destination: ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsListTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPlugin {
    #[serde(rename = "configMapRef")]
    pub config_map_ref: ApplicationSetGeneratorsMatrixGeneratorsPluginConfigMapRef,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub input: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginInput>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requeueAfterSeconds")]
    pub requeue_after_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginConfigMapRef {
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginInput {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplate {
    pub metadata: ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateMetadata,
    pub spec: ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpec {
    pub destination: ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPluginTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequest {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azuredevops: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestAzuredevops>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bitbucket: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitbucketServer")]
    pub bitbucket_server: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucketServer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPullRequestFilters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gitea: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestGitea>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub github: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestGithub>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gitlab: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestGitlab>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requeueAfterSeconds")]
    pub requeue_after_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestAzuredevops {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<String>>,
    pub organization: String,
    pub project: String,
    pub repo: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestAzuredevopsTokenRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestAzuredevopsTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucketBasicAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerToken")]
    pub bearer_token: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucketBearerToken>,
    pub owner: String,
    pub repo: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucketBasicAuth {
    #[serde(rename = "passwordRef")]
    pub password_ref: ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucketBasicAuthPasswordRef,
    pub username: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucketBasicAuthPasswordRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucketBearerToken {
    #[serde(rename = "tokenRef")]
    pub token_ref: ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucketBearerTokenTokenRef,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucketBearerTokenTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucketServer {
    pub api: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucketServerBasicAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerToken")]
    pub bearer_token: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucketServerBearerToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caRef")]
    pub ca_ref: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucketServerCaRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    pub project: String,
    pub repo: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucketServerBasicAuth {
    #[serde(rename = "passwordRef")]
    pub password_ref: ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucketServerBasicAuthPasswordRef,
    pub username: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucketServerBasicAuthPasswordRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucketServerBearerToken {
    #[serde(rename = "tokenRef")]
    pub token_ref: ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucketServerBearerTokenTokenRef,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucketServerBearerTokenTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestBitbucketServerCaRef {
    #[serde(rename = "configMapName")]
    pub config_map_name: String,
    pub key: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestFilters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "branchMatch")]
    pub branch_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetBranchMatch")]
    pub target_branch_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestGitea {
    pub api: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<String>>,
    pub owner: String,
    pub repo: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestGiteaTokenRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestGiteaTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestGithub {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appSecretName")]
    pub app_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<String>>,
    pub owner: String,
    pub repo: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestGithubTokenRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestGithubTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestGitlab {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caRef")]
    pub ca_ref: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestGitlabCaRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<String>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullRequestState")]
    pub pull_request_state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestGitlabTokenRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestGitlabCaRef {
    #[serde(rename = "configMapName")]
    pub config_map_name: String,
    pub key: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestGitlabTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplate {
    pub metadata: ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateMetadata,
    pub spec: ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpec {
    pub destination: ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsPullRequestTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProvider {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsCodeCommit")]
    pub aws_code_commit: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderAwsCodeCommit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureDevOps")]
    pub azure_dev_ops: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderAzureDevOps>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bitbucket: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderBitbucket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitbucketServer")]
    pub bitbucket_server: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderBitbucketServer>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloneProtocol")]
    pub clone_protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderFilters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gitea: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderGitea>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub github: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderGithub>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gitlab: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderGitlab>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requeueAfterSeconds")]
    pub requeue_after_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderAwsCodeCommit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagFilters")]
    pub tag_filters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderAwsCodeCommitTagFilters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderAwsCodeCommitTagFilters {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderAzureDevOps {
    #[serde(rename = "accessTokenRef")]
    pub access_token_ref: ApplicationSetGeneratorsMatrixGeneratorsScmProviderAzureDevOpsAccessTokenRef,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    pub organization: String,
    #[serde(rename = "teamProject")]
    pub team_project: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderAzureDevOpsAccessTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderBitbucket {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    #[serde(rename = "appPasswordRef")]
    pub app_password_ref: ApplicationSetGeneratorsMatrixGeneratorsScmProviderBitbucketAppPasswordRef,
    pub owner: String,
    pub user: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderBitbucketAppPasswordRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderBitbucketServer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    pub api: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderBitbucketServerBasicAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerToken")]
    pub bearer_token: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderBitbucketServerBearerToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caRef")]
    pub ca_ref: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderBitbucketServerCaRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    pub project: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderBitbucketServerBasicAuth {
    #[serde(rename = "passwordRef")]
    pub password_ref: ApplicationSetGeneratorsMatrixGeneratorsScmProviderBitbucketServerBasicAuthPasswordRef,
    pub username: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderBitbucketServerBasicAuthPasswordRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderBitbucketServerBearerToken {
    #[serde(rename = "tokenRef")]
    pub token_ref: ApplicationSetGeneratorsMatrixGeneratorsScmProviderBitbucketServerBearerTokenTokenRef,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderBitbucketServerBearerTokenTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderBitbucketServerCaRef {
    #[serde(rename = "configMapName")]
    pub config_map_name: String,
    pub key: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderFilters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "branchMatch")]
    pub branch_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelMatch")]
    pub label_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathsDoNotExist")]
    pub paths_do_not_exist: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathsExist")]
    pub paths_exist: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryMatch")]
    pub repository_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderGitea {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    pub api: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    pub owner: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderGiteaTokenRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderGiteaTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderGithub {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appSecretName")]
    pub app_secret_name: Option<String>,
    pub organization: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderGithubTokenRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderGithubTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderGitlab {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caRef")]
    pub ca_ref: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderGitlabCaRef>,
    pub group: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeSharedProjects")]
    pub include_shared_projects: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeSubgroups")]
    pub include_subgroups: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderGitlabTokenRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderGitlabCaRef {
    #[serde(rename = "configMapName")]
    pub config_map_name: String,
    pub key: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderGitlabTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplate {
    pub metadata: ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateMetadata,
    pub spec: ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpec {
    pub destination: ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsScmProviderTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<ApplicationSetGeneratorsMatrixGeneratorsSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixGeneratorsSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplate {
    pub metadata: ApplicationSetGeneratorsMatrixTemplateMetadata,
    pub spec: ApplicationSetGeneratorsMatrixTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpec {
    pub destination: ApplicationSetGeneratorsMatrixTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsMatrixTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsMatrixTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsMatrixTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsMatrixTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsMatrixTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsMatrixTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMatrixTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMatrixTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMatrixTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMatrixTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMatrixTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMatrixTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMatrixTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMatrixTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMatrixTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMatrixTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMatrixTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMatrixTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsMatrixTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsMatrixTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsMatrixTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMatrixTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMatrixTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMatrixTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMatrixTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMatrixTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMatrixTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMatrixTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMatrixTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMatrixTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMatrixTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMatrixTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMatrixTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMatrixTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsMatrixTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsMatrixTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsMatrixTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMatrixTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMerge {
    pub generators: Vec<ApplicationSetGeneratorsMergeGenerators>,
    #[serde(rename = "mergeKeys")]
    pub merge_keys: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsMergeTemplate>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGenerators {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterDecisionResource")]
    pub cluster_decision_resource: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResource>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<ApplicationSetGeneratorsMergeGeneratorsClusters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git: Option<ApplicationSetGeneratorsMergeGeneratorsGit>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub list: Option<ApplicationSetGeneratorsMergeGeneratorsList>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matrix: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merge: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMergeGeneratorsPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullRequest")]
    pub pull_request: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequest>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scmProvider")]
    pub scm_provider: Option<ApplicationSetGeneratorsMergeGeneratorsScmProvider>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<ApplicationSetGeneratorsMergeGeneratorsSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResource {
    #[serde(rename = "configMapRef")]
    pub config_map_ref: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requeueAfterSeconds")]
    pub requeue_after_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceLabelSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplate {
    pub metadata: ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateMetadata,
    pub spec: ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpec {
    pub destination: ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClusters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flatList")]
    pub flat_list: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<ApplicationSetGeneratorsMergeGeneratorsClustersSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClustersSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplate {
    pub metadata: ApplicationSetGeneratorsMergeGeneratorsClustersTemplateMetadata,
    pub spec: ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpec {
    pub destination: ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsClustersTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGit {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directories: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitDirectories>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub files: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitFiles>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathParamPrefix")]
    pub path_param_prefix: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requeueAfterSeconds")]
    pub requeue_after_seconds: Option<i64>,
    pub revision: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitDirectories {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<bool>,
    pub path: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitFiles {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<bool>,
    pub path: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplate {
    pub metadata: ApplicationSetGeneratorsMergeGeneratorsGitTemplateMetadata,
    pub spec: ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpec {
    pub destination: ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsGitTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub elements: Option<Vec<serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elementsYaml")]
    pub elements_yaml: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplate>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplate {
    pub metadata: ApplicationSetGeneratorsMergeGeneratorsListTemplateMetadata,
    pub spec: ApplicationSetGeneratorsMergeGeneratorsListTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpec {
    pub destination: ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsListTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPlugin {
    #[serde(rename = "configMapRef")]
    pub config_map_ref: ApplicationSetGeneratorsMergeGeneratorsPluginConfigMapRef,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub input: Option<ApplicationSetGeneratorsMergeGeneratorsPluginInput>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requeueAfterSeconds")]
    pub requeue_after_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginConfigMapRef {
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginInput {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplate {
    pub metadata: ApplicationSetGeneratorsMergeGeneratorsPluginTemplateMetadata,
    pub spec: ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpec {
    pub destination: ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPluginTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequest {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azuredevops: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestAzuredevops>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bitbucket: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitbucketServer")]
    pub bitbucket_server: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucketServer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPullRequestFilters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gitea: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestGitea>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub github: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestGithub>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gitlab: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestGitlab>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requeueAfterSeconds")]
    pub requeue_after_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestAzuredevops {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<String>>,
    pub organization: String,
    pub project: String,
    pub repo: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestAzuredevopsTokenRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestAzuredevopsTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucketBasicAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerToken")]
    pub bearer_token: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucketBearerToken>,
    pub owner: String,
    pub repo: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucketBasicAuth {
    #[serde(rename = "passwordRef")]
    pub password_ref: ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucketBasicAuthPasswordRef,
    pub username: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucketBasicAuthPasswordRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucketBearerToken {
    #[serde(rename = "tokenRef")]
    pub token_ref: ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucketBearerTokenTokenRef,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucketBearerTokenTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucketServer {
    pub api: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucketServerBasicAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerToken")]
    pub bearer_token: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucketServerBearerToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caRef")]
    pub ca_ref: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucketServerCaRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    pub project: String,
    pub repo: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucketServerBasicAuth {
    #[serde(rename = "passwordRef")]
    pub password_ref: ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucketServerBasicAuthPasswordRef,
    pub username: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucketServerBasicAuthPasswordRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucketServerBearerToken {
    #[serde(rename = "tokenRef")]
    pub token_ref: ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucketServerBearerTokenTokenRef,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucketServerBearerTokenTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestBitbucketServerCaRef {
    #[serde(rename = "configMapName")]
    pub config_map_name: String,
    pub key: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestFilters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "branchMatch")]
    pub branch_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetBranchMatch")]
    pub target_branch_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestGitea {
    pub api: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<String>>,
    pub owner: String,
    pub repo: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestGiteaTokenRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestGiteaTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestGithub {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appSecretName")]
    pub app_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<String>>,
    pub owner: String,
    pub repo: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestGithubTokenRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestGithubTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestGitlab {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caRef")]
    pub ca_ref: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestGitlabCaRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<String>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullRequestState")]
    pub pull_request_state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestGitlabTokenRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestGitlabCaRef {
    #[serde(rename = "configMapName")]
    pub config_map_name: String,
    pub key: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestGitlabTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplate {
    pub metadata: ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateMetadata,
    pub spec: ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpec {
    pub destination: ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsPullRequestTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProvider {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsCodeCommit")]
    pub aws_code_commit: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderAwsCodeCommit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureDevOps")]
    pub azure_dev_ops: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderAzureDevOps>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bitbucket: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderBitbucket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitbucketServer")]
    pub bitbucket_server: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderBitbucketServer>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloneProtocol")]
    pub clone_protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderFilters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gitea: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderGitea>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub github: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderGithub>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gitlab: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderGitlab>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requeueAfterSeconds")]
    pub requeue_after_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderAwsCodeCommit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagFilters")]
    pub tag_filters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderAwsCodeCommitTagFilters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderAwsCodeCommitTagFilters {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderAzureDevOps {
    #[serde(rename = "accessTokenRef")]
    pub access_token_ref: ApplicationSetGeneratorsMergeGeneratorsScmProviderAzureDevOpsAccessTokenRef,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    pub organization: String,
    #[serde(rename = "teamProject")]
    pub team_project: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderAzureDevOpsAccessTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderBitbucket {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    #[serde(rename = "appPasswordRef")]
    pub app_password_ref: ApplicationSetGeneratorsMergeGeneratorsScmProviderBitbucketAppPasswordRef,
    pub owner: String,
    pub user: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderBitbucketAppPasswordRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderBitbucketServer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    pub api: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderBitbucketServerBasicAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerToken")]
    pub bearer_token: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderBitbucketServerBearerToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caRef")]
    pub ca_ref: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderBitbucketServerCaRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    pub project: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderBitbucketServerBasicAuth {
    #[serde(rename = "passwordRef")]
    pub password_ref: ApplicationSetGeneratorsMergeGeneratorsScmProviderBitbucketServerBasicAuthPasswordRef,
    pub username: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderBitbucketServerBasicAuthPasswordRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderBitbucketServerBearerToken {
    #[serde(rename = "tokenRef")]
    pub token_ref: ApplicationSetGeneratorsMergeGeneratorsScmProviderBitbucketServerBearerTokenTokenRef,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderBitbucketServerBearerTokenTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderBitbucketServerCaRef {
    #[serde(rename = "configMapName")]
    pub config_map_name: String,
    pub key: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderFilters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "branchMatch")]
    pub branch_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelMatch")]
    pub label_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathsDoNotExist")]
    pub paths_do_not_exist: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathsExist")]
    pub paths_exist: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryMatch")]
    pub repository_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderGitea {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    pub api: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    pub owner: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderGiteaTokenRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderGiteaTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderGithub {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appSecretName")]
    pub app_secret_name: Option<String>,
    pub organization: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderGithubTokenRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderGithubTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderGitlab {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caRef")]
    pub ca_ref: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderGitlabCaRef>,
    pub group: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeSharedProjects")]
    pub include_shared_projects: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeSubgroups")]
    pub include_subgroups: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderGitlabTokenRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderGitlabCaRef {
    #[serde(rename = "configMapName")]
    pub config_map_name: String,
    pub key: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderGitlabTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplate {
    pub metadata: ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateMetadata,
    pub spec: ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpec {
    pub destination: ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsScmProviderTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<ApplicationSetGeneratorsMergeGeneratorsSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeGeneratorsSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplate {
    pub metadata: ApplicationSetGeneratorsMergeTemplateMetadata,
    pub spec: ApplicationSetGeneratorsMergeTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpec {
    pub destination: ApplicationSetGeneratorsMergeTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsMergeTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsMergeTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsMergeTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsMergeTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsMergeTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsMergeTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMergeTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMergeTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMergeTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMergeTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMergeTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMergeTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMergeTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMergeTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMergeTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMergeTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMergeTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMergeTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsMergeTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsMergeTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsMergeTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsMergeTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsMergeTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsMergeTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsMergeTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsMergeTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsMergeTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsMergeTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsMergeTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsMergeTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsMergeTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsMergeTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsMergeTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsMergeTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsMergeTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsMergeTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsMergeTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsMergeTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsMergeTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPlugin {
    #[serde(rename = "configMapRef")]
    pub config_map_ref: ApplicationSetGeneratorsPluginConfigMapRef,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub input: Option<ApplicationSetGeneratorsPluginInput>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requeueAfterSeconds")]
    pub requeue_after_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsPluginTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginConfigMapRef {
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginInput {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplate {
    pub metadata: ApplicationSetGeneratorsPluginTemplateMetadata,
    pub spec: ApplicationSetGeneratorsPluginTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpec {
    pub destination: ApplicationSetGeneratorsPluginTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsPluginTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsPluginTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsPluginTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsPluginTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsPluginTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsPluginTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsPluginTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsPluginTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsPluginTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsPluginTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsPluginTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsPluginTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsPluginTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsPluginTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsPluginTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsPluginTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsPluginTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsPluginTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsPluginTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsPluginTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsPluginTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsPluginTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsPluginTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsPluginTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsPluginTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsPluginTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsPluginTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsPluginTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsPluginTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsPluginTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsPluginTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsPluginTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsPluginTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsPluginTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsPluginTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsPluginTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsPluginTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsPluginTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsPluginTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsPluginTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsPluginTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPluginTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequest {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azuredevops: Option<ApplicationSetGeneratorsPullRequestAzuredevops>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bitbucket: Option<ApplicationSetGeneratorsPullRequestBitbucket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitbucketServer")]
    pub bitbucket_server: Option<ApplicationSetGeneratorsPullRequestBitbucketServer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<ApplicationSetGeneratorsPullRequestFilters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gitea: Option<ApplicationSetGeneratorsPullRequestGitea>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub github: Option<ApplicationSetGeneratorsPullRequestGithub>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gitlab: Option<ApplicationSetGeneratorsPullRequestGitlab>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requeueAfterSeconds")]
    pub requeue_after_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsPullRequestTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestAzuredevops {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<String>>,
    pub organization: String,
    pub project: String,
    pub repo: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsPullRequestAzuredevopsTokenRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestAzuredevopsTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestBitbucket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<ApplicationSetGeneratorsPullRequestBitbucketBasicAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerToken")]
    pub bearer_token: Option<ApplicationSetGeneratorsPullRequestBitbucketBearerToken>,
    pub owner: String,
    pub repo: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestBitbucketBasicAuth {
    #[serde(rename = "passwordRef")]
    pub password_ref: ApplicationSetGeneratorsPullRequestBitbucketBasicAuthPasswordRef,
    pub username: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestBitbucketBasicAuthPasswordRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestBitbucketBearerToken {
    #[serde(rename = "tokenRef")]
    pub token_ref: ApplicationSetGeneratorsPullRequestBitbucketBearerTokenTokenRef,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestBitbucketBearerTokenTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestBitbucketServer {
    pub api: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<ApplicationSetGeneratorsPullRequestBitbucketServerBasicAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerToken")]
    pub bearer_token: Option<ApplicationSetGeneratorsPullRequestBitbucketServerBearerToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caRef")]
    pub ca_ref: Option<ApplicationSetGeneratorsPullRequestBitbucketServerCaRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    pub project: String,
    pub repo: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestBitbucketServerBasicAuth {
    #[serde(rename = "passwordRef")]
    pub password_ref: ApplicationSetGeneratorsPullRequestBitbucketServerBasicAuthPasswordRef,
    pub username: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestBitbucketServerBasicAuthPasswordRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestBitbucketServerBearerToken {
    #[serde(rename = "tokenRef")]
    pub token_ref: ApplicationSetGeneratorsPullRequestBitbucketServerBearerTokenTokenRef,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestBitbucketServerBearerTokenTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestBitbucketServerCaRef {
    #[serde(rename = "configMapName")]
    pub config_map_name: String,
    pub key: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestFilters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "branchMatch")]
    pub branch_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetBranchMatch")]
    pub target_branch_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestGitea {
    pub api: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<String>>,
    pub owner: String,
    pub repo: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsPullRequestGiteaTokenRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestGiteaTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestGithub {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appSecretName")]
    pub app_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<String>>,
    pub owner: String,
    pub repo: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsPullRequestGithubTokenRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestGithubTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestGitlab {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caRef")]
    pub ca_ref: Option<ApplicationSetGeneratorsPullRequestGitlabCaRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<String>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullRequestState")]
    pub pull_request_state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsPullRequestGitlabTokenRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestGitlabCaRef {
    #[serde(rename = "configMapName")]
    pub config_map_name: String,
    pub key: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestGitlabTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplate {
    pub metadata: ApplicationSetGeneratorsPullRequestTemplateMetadata,
    pub spec: ApplicationSetGeneratorsPullRequestTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpec {
    pub destination: ApplicationSetGeneratorsPullRequestTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsPullRequestTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsPullRequestTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsPullRequestTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsPullRequestTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsPullRequestTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsPullRequestTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsPullRequestTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsPullRequestTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsPullRequestTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsPullRequestTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsPullRequestTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsPullRequestTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsPullRequestTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsPullRequestTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsPullRequestTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsPullRequestTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsPullRequestTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsPullRequestTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsPullRequestTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsPullRequestTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsPullRequestTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsPullRequestTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsPullRequestTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsPullRequestTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsPullRequestTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsPullRequestTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsPullRequestTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsPullRequestTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsPullRequestTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsPullRequestTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsPullRequestTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsPullRequestTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsPullRequestTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsPullRequestTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsPullRequestTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsPullRequestTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsPullRequestTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsPullRequestTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProvider {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsCodeCommit")]
    pub aws_code_commit: Option<ApplicationSetGeneratorsScmProviderAwsCodeCommit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureDevOps")]
    pub azure_dev_ops: Option<ApplicationSetGeneratorsScmProviderAzureDevOps>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bitbucket: Option<ApplicationSetGeneratorsScmProviderBitbucket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bitbucketServer")]
    pub bitbucket_server: Option<ApplicationSetGeneratorsScmProviderBitbucketServer>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloneProtocol")]
    pub clone_protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<ApplicationSetGeneratorsScmProviderFilters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gitea: Option<ApplicationSetGeneratorsScmProviderGitea>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub github: Option<ApplicationSetGeneratorsScmProviderGithub>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gitlab: Option<ApplicationSetGeneratorsScmProviderGitlab>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requeueAfterSeconds")]
    pub requeue_after_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationSetGeneratorsScmProviderTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderAwsCodeCommit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagFilters")]
    pub tag_filters: Option<Vec<ApplicationSetGeneratorsScmProviderAwsCodeCommitTagFilters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderAwsCodeCommitTagFilters {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderAzureDevOps {
    #[serde(rename = "accessTokenRef")]
    pub access_token_ref: ApplicationSetGeneratorsScmProviderAzureDevOpsAccessTokenRef,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    pub organization: String,
    #[serde(rename = "teamProject")]
    pub team_project: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderAzureDevOpsAccessTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderBitbucket {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    #[serde(rename = "appPasswordRef")]
    pub app_password_ref: ApplicationSetGeneratorsScmProviderBitbucketAppPasswordRef,
    pub owner: String,
    pub user: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderBitbucketAppPasswordRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderBitbucketServer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    pub api: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<ApplicationSetGeneratorsScmProviderBitbucketServerBasicAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerToken")]
    pub bearer_token: Option<ApplicationSetGeneratorsScmProviderBitbucketServerBearerToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caRef")]
    pub ca_ref: Option<ApplicationSetGeneratorsScmProviderBitbucketServerCaRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    pub project: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderBitbucketServerBasicAuth {
    #[serde(rename = "passwordRef")]
    pub password_ref: ApplicationSetGeneratorsScmProviderBitbucketServerBasicAuthPasswordRef,
    pub username: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderBitbucketServerBasicAuthPasswordRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderBitbucketServerBearerToken {
    #[serde(rename = "tokenRef")]
    pub token_ref: ApplicationSetGeneratorsScmProviderBitbucketServerBearerTokenTokenRef,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderBitbucketServerBearerTokenTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderBitbucketServerCaRef {
    #[serde(rename = "configMapName")]
    pub config_map_name: String,
    pub key: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderFilters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "branchMatch")]
    pub branch_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelMatch")]
    pub label_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathsDoNotExist")]
    pub paths_do_not_exist: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathsExist")]
    pub paths_exist: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryMatch")]
    pub repository_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderGitea {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    pub api: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    pub owner: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsScmProviderGiteaTokenRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderGiteaTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderGithub {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appSecretName")]
    pub app_secret_name: Option<String>,
    pub organization: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsScmProviderGithubTokenRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderGithubTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderGitlab {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allBranches")]
    pub all_branches: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caRef")]
    pub ca_ref: Option<ApplicationSetGeneratorsScmProviderGitlabCaRef>,
    pub group: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeSharedProjects")]
    pub include_shared_projects: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeSubgroups")]
    pub include_subgroups: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenRef")]
    pub token_ref: Option<ApplicationSetGeneratorsScmProviderGitlabTokenRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderGitlabCaRef {
    #[serde(rename = "configMapName")]
    pub config_map_name: String,
    pub key: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderGitlabTokenRef {
    pub key: String,
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplate {
    pub metadata: ApplicationSetGeneratorsScmProviderTemplateMetadata,
    pub spec: ApplicationSetGeneratorsScmProviderTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpec {
    pub destination: ApplicationSetGeneratorsScmProviderTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetGeneratorsScmProviderTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetGeneratorsScmProviderTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetGeneratorsScmProviderTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetGeneratorsScmProviderTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetGeneratorsScmProviderTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetGeneratorsScmProviderTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsScmProviderTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsScmProviderTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsScmProviderTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsScmProviderTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsScmProviderTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsScmProviderTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsScmProviderTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsScmProviderTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsScmProviderTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsScmProviderTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsScmProviderTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetGeneratorsScmProviderTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetGeneratorsScmProviderTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetGeneratorsScmProviderTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetGeneratorsScmProviderTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetGeneratorsScmProviderTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetGeneratorsScmProviderTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetGeneratorsScmProviderTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetGeneratorsScmProviderTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetGeneratorsScmProviderTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetGeneratorsScmProviderTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetGeneratorsScmProviderTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsScmProviderTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetGeneratorsScmProviderTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetGeneratorsScmProviderTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetGeneratorsScmProviderTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetGeneratorsScmProviderTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetGeneratorsScmProviderTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetGeneratorsScmProviderTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetGeneratorsScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetGeneratorsScmProviderTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetGeneratorsScmProviderTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsScmProviderTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<ApplicationSetGeneratorsSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetGeneratorsSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetIgnoreApplicationDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetPreservedFields {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetStrategy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingSync")]
    pub rolling_sync: Option<ApplicationSetStrategyRollingSync>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetStrategyRollingSync {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub steps: Option<Vec<ApplicationSetStrategyRollingSyncSteps>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetStrategyRollingSyncSteps {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<ApplicationSetStrategyRollingSyncStepsMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUpdate")]
    pub max_update: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetStrategyRollingSyncStepsMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationsSync")]
    pub applications_sync: Option<ApplicationSetSyncPolicyApplicationsSync>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveResourcesOnDeletion")]
    pub preserve_resources_on_deletion: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ApplicationSetSyncPolicyApplicationsSync {
    #[serde(rename = "create-only")]
    CreateOnly,
    #[serde(rename = "create-update")]
    CreateUpdate,
    #[serde(rename = "create-delete")]
    CreateDelete,
    #[serde(rename = "sync")]
    Sync,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplate {
    pub metadata: ApplicationSetTemplateMetadata,
    pub spec: ApplicationSetTemplateSpec,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpec {
    pub destination: ApplicationSetTemplateSpecDestination,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationSetTemplateSpecIgnoreDifferences>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationSetTemplateSpecInfo>>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSetTemplateSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceHydrator")]
    pub source_hydrator: Option<ApplicationSetTemplateSpecSourceHydrator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSetTemplateSpecSources>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSetTemplateSpecSyncPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecInfo {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetTemplateSpecSourceDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetTemplateSpecSourceHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetTemplateSpecSourceKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetTemplateSpecSourcePlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourceDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetTemplateSpecSourceDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourceDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetTemplateSpecSourceDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetTemplateSpecSourceDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourceHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetTemplateSpecSourceHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetTemplateSpecSourceHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourceHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourceHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourceKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetTemplateSpecSourceKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetTemplateSpecSourceKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetTemplateSpecSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourceKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourcePlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetTemplateSpecSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetTemplateSpecSourcePluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourcePluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourcePluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourceHydrator {
    #[serde(rename = "drySource")]
    pub dry_source: ApplicationSetTemplateSpecSourceHydratorDrySource,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hydrateTo")]
    pub hydrate_to: Option<ApplicationSetTemplateSpecSourceHydratorHydrateTo>,
    #[serde(rename = "syncSource")]
    pub sync_source: ApplicationSetTemplateSpecSourceHydratorSyncSource,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourceHydratorDrySource {
    pub path: String,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(rename = "targetRevision")]
    pub target_revision: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourceHydratorHydrateTo {
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourceHydratorSyncSource {
    pub path: String,
    #[serde(rename = "targetBranch")]
    pub target_branch: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSetTemplateSpecSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSetTemplateSpecSourcesHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSetTemplateSpecSourcesKustomize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSetTemplateSpecSourcesPlugin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSetTemplateSpecSourcesDirectoryJsonnet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourcesDirectoryJsonnet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSetTemplateSpecSourcesDirectoryJsonnetExtVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSetTemplateSpecSourcesDirectoryJsonnetTlas>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourcesHelm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSetTemplateSpecSourcesHelmFileParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetTemplateSpecSourcesHelmParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipSchemaValidation")]
    pub skip_schema_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipTests")]
    pub skip_tests: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourcesHelmFileParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourcesHelmParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourcesKustomize {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersions")]
    pub api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingComponents")]
    pub ignore_missing_components: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeVersion")]
    pub kube_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelIncludeTemplates")]
    pub label_include_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelWithoutSelector")]
    pub label_without_selector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSetTemplateSpecSourcesKustomizePatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSetTemplateSpecSourcesKustomizeReplicas>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSetTemplateSpecSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourcesKustomizeReplicas {
    pub count: IntOrString,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourcesPlugin {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSetTemplateSpecSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSetTemplateSpecSourcesPluginParameters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourcesPluginEnv {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSourcesPluginParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSyncPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSetTemplateSpecSyncPolicyAutomated>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSetTemplateSpecSyncPolicyManagedNamespaceMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSetTemplateSpecSyncPolicyRetry>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSyncPolicyAutomated {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSyncPolicyRetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSetTemplateSpecSyncPolicyRetryBackoff>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetTemplateSpecSyncPolicyRetryBackoff {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationStatus")]
    pub application_status: Option<Vec<ApplicationSetStatusApplicationStatus>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<ApplicationSetStatusResources>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetStatusApplicationStatus {
    pub application: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    pub message: String,
    pub status: String,
    pub step: String,
    #[serde(rename = "targetRevisions")]
    pub target_revisions: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetStatusResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health: Option<ApplicationSetStatusResourcesHealth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hook: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiresDeletionConfirmation")]
    pub requires_deletion_confirmation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiresPruning")]
    pub requires_pruning: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncWave")]
    pub sync_wave: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSetStatusResourcesHealth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

