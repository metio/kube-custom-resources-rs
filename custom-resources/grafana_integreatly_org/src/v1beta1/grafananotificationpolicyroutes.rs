// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/grafana/grafana-operator/grafana.integreatly.org/v1beta1/grafananotificationpolicyroutes.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// GrafanaNotificationPolicyRouteSpec defines the desired state of GrafanaNotificationPolicyRoute
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "grafana.integreatly.org", version = "v1beta1", kind = "GrafanaNotificationPolicyRoute", plural = "grafananotificationpolicyroutes")]
#[kube(namespaced)]
#[kube(status = "GrafanaNotificationPolicyRouteStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct GrafanaNotificationPolicyRouteSpec {
    /// continue
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "continue")]
    pub r#continue: Option<bool>,
    /// group by
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_by: Option<Vec<String>>,
    /// group interval
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_interval: Option<String>,
    /// group wait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_wait: Option<String>,
    /// match re
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub match_re: Option<BTreeMap<String, String>>,
    /// matchers
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<GrafanaNotificationPolicyRouteMatchers>>,
    /// mute time intervals
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mute_time_intervals: Option<Vec<String>>,
    /// object matchers
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object_matchers: Option<Vec<String>>,
    /// provenance
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provenance: Option<String>,
    /// receiver
    pub receiver: String,
    /// repeat interval
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repeat_interval: Option<String>,
    /// selects GrafanaNotificationPolicyRoutes to merge in when specified
    /// mutually exclusive with Routes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeSelector")]
    pub route_selector: Option<GrafanaNotificationPolicyRouteRouteSelector>,
    /// routes, mutually exclusive with RouteSelector
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub routes: Option<serde_json::Value>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GrafanaNotificationPolicyRouteMatchers {
    /// is equal
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isEqual")]
    pub is_equal: Option<bool>,
    /// is regex
    #[serde(rename = "isRegex")]
    pub is_regex: bool,
    /// name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// value
    pub value: String,
}

/// selects GrafanaNotificationPolicyRoutes to merge in when specified
/// mutually exclusive with Routes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GrafanaNotificationPolicyRouteRouteSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<GrafanaNotificationPolicyRouteRouteSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GrafanaNotificationPolicyRouteRouteSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// The most recent observed state of a Grafana resource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GrafanaNotificationPolicyRouteStatus {
    /// Results when synchonizing resource with Grafana instances
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// Last time the resource was synchronized with Grafana instances
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastResync")]
    pub last_resync: Option<String>,
}

