// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/project-akri/akri/akri.sh/v0/instances.yaml
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// Defines the information in the Instance CRD
/// 
/// An Instance is a specific instance described by a Configuration.  For example, a Configuration may describe many cameras, each camera will be represented by a Instance.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "akri.sh", version = "v0", kind = "Instance", plural = "instances")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct InstanceSpec {
    /// This defines some properties that will be set as environment variables in broker Pods that request the resource this Instance represents. It contains the `Configuration.broker_properties` from this Instance's Configuration and the `Device.properties` set by the Discovery Handler that discovered the resource this Instance represents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "brokerProperties")]
    pub broker_properties: Option<BTreeMap<String, String>>,
    /// This contains the number of slots for the Instance
    pub capacity: i64,
    /// This contains the CDI fully qualified name of the device linked to the Instance
    #[serde(rename = "cdiName")]
    pub cdi_name: String,
    /// This contains the name of the corresponding Configuration
    #[serde(rename = "configurationName")]
    pub configuration_name: String,
    /// This contains a map of capability slots to node names.  The number of slots corresponds to the associated Configuration.capacity field.  Each slot will either map to an empty string (if the slot has not been claimed) or to a node name (corresponding to the node that has claimed the slot)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceUsage")]
    pub device_usage: Option<BTreeMap<String, String>>,
    /// This contains a list of the nodes that can access this capability instance
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// This defines whether the capability is to be shared by multiple nodes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shared: Option<bool>,
}

