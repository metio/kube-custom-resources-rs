// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/vmware-tanzu/velero/velero.io/v1/restores.yaml
// kopium version: 0.22.4

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// RestoreSpec defines the specification for a Velero restore.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "velero.io", version = "v1", kind = "Restore", plural = "restores")]
#[kube(namespaced)]
#[kube(status = "RestoreStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct RestoreSpec {
    /// BackupName is the unique name of the Velero backup to restore
    /// from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupName")]
    pub backup_name: Option<String>,
    /// ExcludedNamespaces contains a list of namespaces that are not
    /// included in the restore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedNamespaces")]
    pub excluded_namespaces: Option<Vec<String>>,
    /// ExcludedResources is a slice of resource names that are not
    /// included in the restore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedResources")]
    pub excluded_resources: Option<Vec<String>>,
    /// ExistingResourcePolicy specifies the restore behavior for the Kubernetes resource to be restored
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "existingResourcePolicy")]
    pub existing_resource_policy: Option<String>,
    /// Hooks represent custom behaviors that should be executed during or post restore.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hooks: Option<RestoreHooks>,
    /// IncludeClusterResources specifies whether cluster-scoped resources
    /// should be included for consideration in the restore. If null, defaults
    /// to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeClusterResources")]
    pub include_cluster_resources: Option<bool>,
    /// IncludedNamespaces is a slice of namespace names to include objects
    /// from. If empty, all namespaces are included.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includedNamespaces")]
    pub included_namespaces: Option<Vec<String>>,
    /// IncludedResources is a slice of resource names to include
    /// in the restore. If empty, all resources in the backup are included.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includedResources")]
    pub included_resources: Option<Vec<String>>,
    /// ItemOperationTimeout specifies the time used to wait for RestoreItemAction operations
    /// The default value is 4 hour.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "itemOperationTimeout")]
    pub item_operation_timeout: Option<String>,
    /// LabelSelector is a metav1.LabelSelector to filter with
    /// when restoring individual objects from the backup. If empty
    /// or nil, all objects are included. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<RestoreLabelSelector>,
    /// NamespaceMapping is a map of source namespace names
    /// to target namespace names to restore into. Any source
    /// namespaces not included in the map will be restored into
    /// namespaces of the same name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceMapping")]
    pub namespace_mapping: Option<BTreeMap<String, String>>,
    /// OrLabelSelectors is list of metav1.LabelSelector to filter with
    /// when restoring individual objects from the backup. If multiple provided
    /// they will be joined by the OR operator. LabelSelector as well as
    /// OrLabelSelectors cannot co-exist in restore request, only one of them
    /// can be used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orLabelSelectors")]
    pub or_label_selectors: Option<Vec<RestoreOrLabelSelectors>>,
    /// PreserveNodePorts specifies whether to restore old nodePorts from backup.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveNodePorts")]
    pub preserve_node_ports: Option<bool>,
    /// ResourceModifier specifies the reference to JSON resource patches that should be applied to resources before restoration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceModifier")]
    pub resource_modifier: Option<RestoreResourceModifier>,
    /// RestorePVs specifies whether to restore all included
    /// PVs from snapshot
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restorePVs")]
    pub restore_p_vs: Option<bool>,
    /// RestoreStatus specifies which resources we should restore the status
    /// field. If nil, no objects are included. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restoreStatus")]
    pub restore_status: Option<RestoreRestoreStatus>,
    /// ScheduleName is the unique name of the Velero schedule to restore
    /// from. If specified, and BackupName is empty, Velero will restore
    /// from the most recent successful backup created from this schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scheduleName")]
    pub schedule_name: Option<String>,
    /// UploaderConfig specifies the configuration for the restore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uploaderConfig")]
    pub uploader_config: Option<RestoreUploaderConfig>,
}

/// Hooks represent custom behaviors that should be executed during or post restore.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RestoreHooks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<RestoreHooksResources>>,
}

/// RestoreResourceHookSpec defines one or more RestoreResrouceHooks that should be executed based on
/// the rules defined for namespaces, resources, and label selector.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RestoreHooksResources {
    /// ExcludedNamespaces specifies the namespaces to which this hook spec does not apply.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedNamespaces")]
    pub excluded_namespaces: Option<Vec<String>>,
    /// ExcludedResources specifies the resources to which this hook spec does not apply.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedResources")]
    pub excluded_resources: Option<Vec<String>>,
    /// IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies
    /// to all namespaces.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includedNamespaces")]
    pub included_namespaces: Option<Vec<String>>,
    /// IncludedResources specifies the resources to which this hook spec applies. If empty, it applies
    /// to all resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includedResources")]
    pub included_resources: Option<Vec<String>>,
    /// LabelSelector, if specified, filters the resources to which this hook spec applies.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<RestoreHooksResourcesLabelSelector>,
    /// Name is the name of this hook.
    pub name: String,
    /// PostHooks is a list of RestoreResourceHooks to execute during and after restoring a resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postHooks")]
    pub post_hooks: Option<Vec<RestoreHooksResourcesPostHooks>>,
}

/// LabelSelector, if specified, filters the resources to which this hook spec applies.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RestoreHooksResourcesLabelSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<RestoreHooksResourcesLabelSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RestoreHooksResourcesLabelSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// RestoreResourceHook defines a restore hook for a resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RestoreHooksResourcesPostHooks {
    /// Exec defines an exec restore hook.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<RestoreHooksResourcesPostHooksExec>,
    /// Init defines an init restore hook.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub init: Option<RestoreHooksResourcesPostHooksInit>,
}

/// Exec defines an exec restore hook.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RestoreHooksResourcesPostHooksExec {
    /// Command is the command and arguments to execute from within a container after a pod has been restored.
    pub command: Vec<String>,
    /// Container is the container in the pod where the command should be executed. If not specified,
    /// the pod's first container is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    /// ExecTimeout defines the maximum amount of time Velero should wait for the hook to complete before
    /// considering the execution a failure.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "execTimeout")]
    pub exec_timeout: Option<String>,
    /// OnError specifies how Velero should behave if it encounters an error executing this hook.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onError")]
    pub on_error: Option<RestoreHooksResourcesPostHooksExecOnError>,
    /// WaitForReady ensures command will be launched when container is Ready instead of Running.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "waitForReady")]
    pub wait_for_ready: Option<bool>,
    /// WaitTimeout defines the maximum amount of time Velero should wait for the container to be Ready
    /// before attempting to run the command.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "waitTimeout")]
    pub wait_timeout: Option<String>,
}

/// Exec defines an exec restore hook.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum RestoreHooksResourcesPostHooksExecOnError {
    Continue,
    Fail,
}

/// Init defines an init restore hook.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RestoreHooksResourcesPostHooksInit {
    /// InitContainers is list of init containers to be added to a pod during its restore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initContainers")]
    pub init_containers: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// Timeout defines the maximum amount of time Velero should wait for the initContainers to complete.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// LabelSelector is a metav1.LabelSelector to filter with
/// when restoring individual objects from the backup. If empty
/// or nil, all objects are included. Optional.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RestoreLabelSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<RestoreLabelSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RestoreLabelSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// A label selector is a label query over a set of resources. The result of matchLabels and
/// matchExpressions are ANDed. An empty label selector matches all objects. A null
/// label selector matches no objects.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RestoreOrLabelSelectors {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<RestoreOrLabelSelectorsMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RestoreOrLabelSelectorsMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// ResourceModifier specifies the reference to JSON resource patches that should be applied to resources before restoration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RestoreResourceModifier {
    /// APIGroup is the group for the resource being referenced.
    /// If APIGroup is not specified, the specified Kind must be in the core API group.
    /// For any other third-party types, APIGroup is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    /// Kind is the type of resource being referenced
    pub kind: String,
    /// Name is the name of resource being referenced
    pub name: String,
}

/// RestoreStatus specifies which resources we should restore the status
/// field. If nil, no objects are included. Optional.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RestoreRestoreStatus {
    /// ExcludedResources specifies the resources to which will not restore the status.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedResources")]
    pub excluded_resources: Option<Vec<String>>,
    /// IncludedResources specifies the resources to which will restore the status.
    /// If empty, it applies to all resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includedResources")]
    pub included_resources: Option<Vec<String>>,
}

/// UploaderConfig specifies the configuration for the restore.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RestoreUploaderConfig {
    /// ParallelFilesDownload is the concurrency number setting for restore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parallelFilesDownload")]
    pub parallel_files_download: Option<i64>,
    /// WriteSparseFiles is a flag to indicate whether write files sparsely or not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeSparseFiles")]
    pub write_sparse_files: Option<bool>,
}

/// RestoreStatus captures the current status of a Velero restore
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RestoreStatus {
    /// CompletionTimestamp records the time the restore operation was completed.
    /// Completion time is recorded even on failed restore.
    /// The server's time is used for StartTimestamps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "completionTimestamp")]
    pub completion_timestamp: Option<String>,
    /// Errors is a count of all error messages that were generated during
    /// execution of the restore. The actual errors are stored in object storage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub errors: Option<i64>,
    /// FailureReason is an error that caused the entire restore to fail.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureReason")]
    pub failure_reason: Option<String>,
    /// HookStatus contains information about the status of the hooks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hookStatus")]
    pub hook_status: Option<RestoreStatusHookStatus>,
    /// Phase is the current state of the Restore
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<RestoreStatusPhase>,
    /// Progress contains information about the restore's execution progress. Note
    /// that this information is best-effort only -- if Velero fails to update it
    /// during a restore for any reason, it may be inaccurate/stale.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub progress: Option<RestoreStatusProgress>,
    /// RestoreItemOperationsAttempted is the total number of attempted
    /// async RestoreItemAction operations for this restore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restoreItemOperationsAttempted")]
    pub restore_item_operations_attempted: Option<i64>,
    /// RestoreItemOperationsCompleted is the total number of successfully completed
    /// async RestoreItemAction operations for this restore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restoreItemOperationsCompleted")]
    pub restore_item_operations_completed: Option<i64>,
    /// RestoreItemOperationsFailed is the total number of async
    /// RestoreItemAction operations for this restore which ended with an error.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restoreItemOperationsFailed")]
    pub restore_item_operations_failed: Option<i64>,
    /// StartTimestamp records the time the restore operation was started.
    /// The server's time is used for StartTimestamps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTimestamp")]
    pub start_timestamp: Option<String>,
    /// ValidationErrors is a slice of all validation errors (if
    /// applicable)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationErrors")]
    pub validation_errors: Option<Vec<String>>,
    /// Warnings is a count of all warning messages that were generated during
    /// execution of the restore. The actual warnings are stored in object storage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub warnings: Option<i64>,
}

/// HookStatus contains information about the status of the hooks.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RestoreStatusHookStatus {
    /// HooksAttempted is the total number of attempted hooks
    /// Specifically, HooksAttempted represents the number of hooks that failed to execute
    /// and the number of hooks that executed successfully.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hooksAttempted")]
    pub hooks_attempted: Option<i64>,
    /// HooksFailed is the total number of hooks which ended with an error
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hooksFailed")]
    pub hooks_failed: Option<i64>,
}

/// RestoreStatus captures the current status of a Velero restore
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum RestoreStatusPhase {
    New,
    FailedValidation,
    InProgress,
    WaitingForPluginOperations,
    WaitingForPluginOperationsPartiallyFailed,
    Completed,
    PartiallyFailed,
    Failed,
    Finalizing,
    FinalizingPartiallyFailed,
}

/// Progress contains information about the restore's execution progress. Note
/// that this information is best-effort only -- if Velero fails to update it
/// during a restore for any reason, it may be inaccurate/stale.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RestoreStatusProgress {
    /// ItemsRestored is the number of items that have actually been restored so far
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "itemsRestored")]
    pub items_restored: Option<i64>,
    /// TotalItems is the total number of items to be restored. This number may change
    /// throughout the execution of the restore due to plugins that return additional related
    /// items to restore
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalItems")]
    pub total_items: Option<i64>,
}

