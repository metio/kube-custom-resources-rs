// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/kube-logging/logging-operator/logging.banzaicloud.io/v1beta1/syslogngclusterflows.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "logging.banzaicloud.io", version = "v1beta1", kind = "SyslogNGClusterFlow", plural = "syslogngclusterflows")]
#[kube(namespaced)]
#[kube(status = "SyslogNgClusterFlowStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct SyslogNgClusterFlowSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<SyslogNgClusterFlowFilters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalOutputRefs")]
    pub global_output_refs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingRef")]
    pub logging_ref: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<SyslogNgClusterFlowMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputMetrics")]
    pub output_metrics: Option<Vec<SyslogNgClusterFlowOutputMetrics>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFilters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<SyslogNgClusterFlowFiltersMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parser: Option<SyslogNgClusterFlowFiltersParser>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rewrite: Option<Vec<SyslogNgClusterFlowFiltersRewrite>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNgClusterFlowFiltersMatchRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersMatchRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersParser {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metrics-probe")]
    pub metrics_probe: Option<SyslogNgClusterFlowFiltersParserMetricsProbe>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNgClusterFlowFiltersParserRegexp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syslog-parser")]
    pub syslog_parser: Option<SyslogNgClusterFlowFiltersParserSyslogParser>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersParserMetricsProbe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersParserRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub patterns: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersParserSyslogParser {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersRewrite {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_unset: Option<SyslogNgClusterFlowFiltersRewriteGroupUnset>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rename: Option<SyslogNgClusterFlowFiltersRewriteRename>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub set: Option<SyslogNgClusterFlowFiltersRewriteSet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subst: Option<SyslogNgClusterFlowFiltersRewriteSubst>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unset: Option<SyslogNgClusterFlowFiltersRewriteUnset>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersRewriteGroupUnset {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<SyslogNgClusterFlowFiltersRewriteGroupUnsetCondition>,
    pub pattern: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersRewriteGroupUnsetCondition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNgClusterFlowFiltersRewriteGroupUnsetConditionRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersRewriteGroupUnsetConditionRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersRewriteRename {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<SyslogNgClusterFlowFiltersRewriteRenameCondition>,
    #[serde(rename = "newName")]
    pub new_name: String,
    #[serde(rename = "oldName")]
    pub old_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersRewriteRenameCondition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNgClusterFlowFiltersRewriteRenameConditionRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersRewriteRenameConditionRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersRewriteSet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<SyslogNgClusterFlowFiltersRewriteSetCondition>,
    pub field: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersRewriteSetCondition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNgClusterFlowFiltersRewriteSetConditionRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersRewriteSetConditionRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersRewriteSubst {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<SyslogNgClusterFlowFiltersRewriteSubstCondition>,
    pub field: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    pub replace: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersRewriteSubstCondition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNgClusterFlowFiltersRewriteSubstConditionRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersRewriteSubstConditionRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersRewriteUnset {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<SyslogNgClusterFlowFiltersRewriteUnsetCondition>,
    pub field: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersRewriteUnsetCondition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNgClusterFlowFiltersRewriteUnsetConditionRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowFiltersRewriteUnsetConditionRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNgClusterFlowMatchRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowMatchRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowOutputMetrics {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterFlowStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub problems: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "problemsCount")]
    pub problems_count: Option<i64>,
}

