// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/kube-logging/logging-operator/logging.banzaicloud.io/v1beta1/fluentbitagents.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
    pub use k8s_openapi::api::core::v1::ObjectReference;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "logging.banzaicloud.io", version = "v1beta1", kind = "FluentbitAgent", plural = "fluentbitagents")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct FluentbitAgentSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "HostNetwork")]
    pub host_network: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<FluentbitAgentAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferStorage")]
    pub buffer_storage: Option<FluentbitAgentBufferStorage>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferStorageVolume")]
    pub buffer_storage_volume: Option<FluentbitAgentBufferStorageVolume>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferVolumeArgs")]
    pub buffer_volume_args: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferVolumeImage")]
    pub buffer_volume_image: Option<FluentbitAgentBufferVolumeImage>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferVolumeLivenessProbe")]
    pub buffer_volume_liveness_probe: Option<FluentbitAgentBufferVolumeLivenessProbe>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferVolumeMetrics")]
    pub buffer_volume_metrics: Option<FluentbitAgentBufferVolumeMetrics>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferVolumeResources")]
    pub buffer_volume_resources: Option<FluentbitAgentBufferVolumeResources>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configHotReload")]
    pub config_hot_reload: Option<FluentbitAgentConfigHotReload>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coroStackSize")]
    pub coro_stack_size: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customConfigSecret")]
    pub custom_config_secret: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customParsers")]
    pub custom_parsers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "daemonsetAnnotations")]
    pub daemonset_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableKubernetesFilter")]
    pub disable_kubernetes_filter: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableVarLibDockerContainers")]
    pub disable_var_lib_docker_containers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableVarLog")]
    pub disable_var_log: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsConfig")]
    pub dns_config: Option<FluentbitAgentDnsConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsPolicy")]
    pub dns_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableUpstream")]
    pub enable_upstream: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enabledIPv6")]
    pub enabled_i_pv6: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envVars")]
    pub env_vars: Option<Vec<FluentbitAgentEnvVars>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraVolumeMounts")]
    pub extra_volume_mounts: Option<Vec<FluentbitAgentExtraVolumeMounts>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterAws")]
    pub filter_aws: Option<FluentbitAgentFilterAws>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterGrep")]
    pub filter_grep: Option<FluentbitAgentFilterGrep>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterKubernetes")]
    pub filter_kubernetes: Option<FluentbitAgentFilterKubernetes>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterModify")]
    pub filter_modify: Option<Vec<FluentbitAgentFilterModify>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceHotReloadAfterGrace")]
    pub force_hot_reload_after_grace: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardOptions")]
    pub forward_options: Option<FluentbitAgentForwardOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grace: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheck")]
    pub health_check: Option<FluentbitAgentHealthCheck>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<FluentbitAgentImage>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputTail")]
    pub input_tail: Option<FluentbitAgentInputTail>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessDefaultCheck")]
    pub liveness_default_check: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<FluentbitAgentLivenessProbe>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingRef")]
    pub logging_ref: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics: Option<FluentbitAgentMetrics>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    pub mount_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<FluentbitAgentNetwork>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parser: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPriorityClassName")]
    pub pod_priority_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub position_db: Option<FluentbitAgentPositionDb>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub positiondb: Option<FluentbitAgentPositiondb>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<FluentbitAgentReadinessProbe>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<FluentbitAgentResources>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub security: Option<FluentbitAgentSecurity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<FluentbitAgentServiceAccount>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub syslogng_output: Option<FluentbitAgentSyslogngOutput>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetHost")]
    pub target_host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<FluentbitAgentTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<FluentbitAgentTolerations>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateStrategy")]
    pub update_strategy: Option<FluentbitAgentUpdateStrategy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinity")]
    pub node_affinity: Option<FluentbitAgentAffinityNodeAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinity")]
    pub pod_affinity: Option<FluentbitAgentAffinityPodAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinity")]
    pub pod_anti_affinity: Option<FluentbitAgentAffinityPodAntiAffinity>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityNodeAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<FluentbitAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<FluentbitAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    pub preference: FluentbitAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference,
    pub weight: i32,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<FluentbitAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<FluentbitAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(rename = "nodeSelectorTerms")]
    pub node_selector_terms: Vec<FluentbitAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<FluentbitAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<FluentbitAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<FluentbitAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<FluentbitAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(rename = "podAffinityTerm")]
    pub pod_affinity_term: FluentbitAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm,
    pub weight: i32,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<FluentbitAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabelKeys")]
    pub match_label_keys: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mismatchLabelKeys")]
    pub mismatch_label_keys: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<FluentbitAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<FluentbitAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<FluentbitAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<FluentbitAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabelKeys")]
    pub match_label_keys: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mismatchLabelKeys")]
    pub mismatch_label_keys: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<FluentbitAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<FluentbitAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<FluentbitAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAntiAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<FluentbitAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<FluentbitAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(rename = "podAffinityTerm")]
    pub pod_affinity_term: FluentbitAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm,
    pub weight: i32,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<FluentbitAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabelKeys")]
    pub match_label_keys: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mismatchLabelKeys")]
    pub mismatch_label_keys: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<FluentbitAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<FluentbitAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<FluentbitAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<FluentbitAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabelKeys")]
    pub match_label_keys: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mismatchLabelKeys")]
    pub mismatch_label_keys: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<FluentbitAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<FluentbitAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<FluentbitAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferStorage {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storage.backlog.mem_limit")]
    pub storage_backlog_mem_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storage.checksum")]
    pub storage_checksum: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storage.delete_irrecoverable_chunks")]
    pub storage_delete_irrecoverable_chunks: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storage.max_chunks_up")]
    pub storage_max_chunks_up: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storage.metrics")]
    pub storage_metrics: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storage.path")]
    pub storage_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storage.sync")]
    pub storage_sync: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferStorageVolume {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<FluentbitAgentBufferStorageVolumeConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emptyDir")]
    pub empty_dir: Option<FluentbitAgentBufferStorageVolumeEmptyDir>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPath")]
    pub host_path: Option<FluentbitAgentBufferStorageVolumeHostPath>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "host_path")]
    pub host_path_x: Option<FluentbitAgentBufferStorageVolumeHostPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pvc: Option<FluentbitAgentBufferStorageVolumePvc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<FluentbitAgentBufferStorageVolumeSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferStorageVolumeConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<FluentbitAgentBufferStorageVolumeConfigMapItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferStorageVolumeConfigMapItems {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    pub path: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferStorageVolumeEmptyDir {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub medium: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeLimit")]
    pub size_limit: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferStorageVolumeHostPath {
    pub path: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferStorageVolumePvc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<FluentbitAgentBufferStorageVolumePvcSource>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<FluentbitAgentBufferStorageVolumePvcSpec>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferStorageVolumePvcSource {
    #[serde(rename = "claimName")]
    pub claim_name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferStorageVolumePvcSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSource")]
    pub data_source: Option<FluentbitAgentBufferStorageVolumePvcSpecDataSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSourceRef")]
    pub data_source_ref: Option<FluentbitAgentBufferStorageVolumePvcSpecDataSourceRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<FluentbitAgentBufferStorageVolumePvcSpecResources>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<FluentbitAgentBufferStorageVolumePvcSpecSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeAttributesClassName")]
    pub volume_attributes_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMode")]
    pub volume_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferStorageVolumePvcSpecDataSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    pub kind: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferStorageVolumePvcSpecDataSourceRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    pub kind: String,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferStorageVolumePvcSpecResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferStorageVolumePvcSpecSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<FluentbitAgentBufferStorageVolumePvcSpecSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferStorageVolumePvcSpecSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferStorageVolumeSecret {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<FluentbitAgentBufferStorageVolumeSecretItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferStorageVolumeSecretItems {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    pub path: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeImage {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<FluentbitAgentBufferVolumeImageImagePullSecrets>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullPolicy")]
    pub pull_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeImageImagePullSecrets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeLivenessProbe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<FluentbitAgentBufferVolumeLivenessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<FluentbitAgentBufferVolumeLivenessProbeGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<FluentbitAgentBufferVolumeLivenessProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<FluentbitAgentBufferVolumeLivenessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeLivenessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeLivenessProbeGrpc {
    pub port: i32,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeLivenessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<FluentbitAgentBufferVolumeLivenessProbeHttpGetHttpHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub port: IntOrString,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeLivenessProbeHttpGetHttpHeaders {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeLivenessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    pub port: IntOrString,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeMetrics {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prometheusAnnotations")]
    pub prometheus_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prometheusRules")]
    pub prometheus_rules: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prometheusRulesOverride")]
    pub prometheus_rules_override: Option<Vec<FluentbitAgentBufferVolumeMetricsPrometheusRulesOverride>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceMonitor")]
    pub service_monitor: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceMonitorConfig")]
    pub service_monitor_config: Option<FluentbitAgentBufferVolumeMetricsServiceMonitorConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeMetricsPrometheusRulesOverride {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expr: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "for")]
    pub r#for: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_firing_for: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub record: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeMetricsServiceMonitorConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalLabels")]
    pub additional_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "honorLabels")]
    pub honor_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricRelabelings")]
    pub metric_relabelings: Option<Vec<FluentbitAgentBufferVolumeMetricsServiceMonitorConfigMetricRelabelings>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub relabelings: Option<Vec<FluentbitAgentBufferVolumeMetricsServiceMonitorConfigRelabelings>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<FluentbitAgentBufferVolumeMetricsServiceMonitorConfigTlsConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeMetricsServiceMonitorConfigMetricRelabelings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<FluentbitAgentBufferVolumeMetricsServiceMonitorConfigMetricRelabelingsAction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub modulus: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replacement: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceLabels")]
    pub source_labels: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetLabel")]
    pub target_label: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum FluentbitAgentBufferVolumeMetricsServiceMonitorConfigMetricRelabelingsAction {
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "Replace")]
    ReplaceX,
    #[serde(rename = "keep")]
    Keep,
    #[serde(rename = "Keep")]
    KeepX,
    #[serde(rename = "drop")]
    Drop,
    #[serde(rename = "Drop")]
    DropX,
    #[serde(rename = "hashmod")]
    Hashmod,
    HashMod,
    #[serde(rename = "labelmap")]
    Labelmap,
    LabelMap,
    #[serde(rename = "labeldrop")]
    Labeldrop,
    LabelDrop,
    #[serde(rename = "labelkeep")]
    Labelkeep,
    LabelKeep,
    #[serde(rename = "lowercase")]
    Lowercase,
    #[serde(rename = "Lowercase")]
    LowercaseX,
    #[serde(rename = "uppercase")]
    Uppercase,
    #[serde(rename = "Uppercase")]
    UppercaseX,
    #[serde(rename = "keepequal")]
    Keepequal,
    KeepEqual,
    #[serde(rename = "dropequal")]
    Dropequal,
    DropEqual,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeMetricsServiceMonitorConfigRelabelings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<FluentbitAgentBufferVolumeMetricsServiceMonitorConfigRelabelingsAction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub modulus: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replacement: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceLabels")]
    pub source_labels: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetLabel")]
    pub target_label: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum FluentbitAgentBufferVolumeMetricsServiceMonitorConfigRelabelingsAction {
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "Replace")]
    ReplaceX,
    #[serde(rename = "keep")]
    Keep,
    #[serde(rename = "Keep")]
    KeepX,
    #[serde(rename = "drop")]
    Drop,
    #[serde(rename = "Drop")]
    DropX,
    #[serde(rename = "hashmod")]
    Hashmod,
    HashMod,
    #[serde(rename = "labelmap")]
    Labelmap,
    LabelMap,
    #[serde(rename = "labeldrop")]
    Labeldrop,
    LabelDrop,
    #[serde(rename = "labelkeep")]
    Labelkeep,
    LabelKeep,
    #[serde(rename = "lowercase")]
    Lowercase,
    #[serde(rename = "Lowercase")]
    LowercaseX,
    #[serde(rename = "uppercase")]
    Uppercase,
    #[serde(rename = "Uppercase")]
    UppercaseX,
    #[serde(rename = "keepequal")]
    Keepequal,
    KeepEqual,
    #[serde(rename = "dropequal")]
    Dropequal,
    DropEqual,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeMetricsServiceMonitorConfigTlsConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<FluentbitAgentBufferVolumeMetricsServiceMonitorConfigTlsConfigCa>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caFile")]
    pub ca_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<FluentbitAgentBufferVolumeMetricsServiceMonitorConfigTlsConfigCert>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certFile")]
    pub cert_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyFile")]
    pub key_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    pub key_secret: Option<FluentbitAgentBufferVolumeMetricsServiceMonitorConfigTlsConfigKeySecret>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxVersion")]
    pub max_version: Option<FluentbitAgentBufferVolumeMetricsServiceMonitorConfigTlsConfigMaxVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minVersion")]
    pub min_version: Option<FluentbitAgentBufferVolumeMetricsServiceMonitorConfigTlsConfigMinVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeMetricsServiceMonitorConfigTlsConfigCa {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<FluentbitAgentBufferVolumeMetricsServiceMonitorConfigTlsConfigCaConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<FluentbitAgentBufferVolumeMetricsServiceMonitorConfigTlsConfigCaSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeMetricsServiceMonitorConfigTlsConfigCaConfigMap {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeMetricsServiceMonitorConfigTlsConfigCaSecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeMetricsServiceMonitorConfigTlsConfigCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<FluentbitAgentBufferVolumeMetricsServiceMonitorConfigTlsConfigCertConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<FluentbitAgentBufferVolumeMetricsServiceMonitorConfigTlsConfigCertSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeMetricsServiceMonitorConfigTlsConfigCertConfigMap {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeMetricsServiceMonitorConfigTlsConfigCertSecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeMetricsServiceMonitorConfigTlsConfigKeySecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum FluentbitAgentBufferVolumeMetricsServiceMonitorConfigTlsConfigMaxVersion {
    #[serde(rename = "TLS10")]
    Tls10,
    #[serde(rename = "TLS11")]
    Tls11,
    #[serde(rename = "TLS12")]
    Tls12,
    #[serde(rename = "TLS13")]
    Tls13,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum FluentbitAgentBufferVolumeMetricsServiceMonitorConfigTlsConfigMinVersion {
    #[serde(rename = "TLS10")]
    Tls10,
    #[serde(rename = "TLS11")]
    Tls11,
    #[serde(rename = "TLS12")]
    Tls12,
    #[serde(rename = "TLS13")]
    Tls13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<FluentbitAgentBufferVolumeResourcesClaims>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentBufferVolumeResourcesClaims {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentConfigHotReload {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<FluentbitAgentConfigHotReloadImage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<FluentbitAgentConfigHotReloadResources>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentConfigHotReloadImage {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<FluentbitAgentConfigHotReloadImageImagePullSecrets>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullPolicy")]
    pub pull_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentConfigHotReloadImageImagePullSecrets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentConfigHotReloadResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<FluentbitAgentConfigHotReloadResourcesClaims>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentConfigHotReloadResourcesClaims {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentDnsConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nameservers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<FluentbitAgentDnsConfigOptions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub searches: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentDnsConfigOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentEnvVars {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<FluentbitAgentEnvVarsValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentEnvVarsValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<FluentbitAgentEnvVarsValueFromConfigMapKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<FluentbitAgentEnvVarsValueFromFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<FluentbitAgentEnvVarsValueFromResourceFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<FluentbitAgentEnvVarsValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentEnvVarsValueFromConfigMapKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentEnvVarsValueFromFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentEnvVarsValueFromResourceFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    pub resource: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentEnvVarsValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentExtraVolumeMounts {
    pub destination: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    pub source: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterAws {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Match")]
    pub r#match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub account_id: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ami_id: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub az: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ec2_instance_id: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ec2_instance_type: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub imds_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub private_ip: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vpc_id: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterGrep {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Exclude")]
    pub exclude: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "LogicalOp")]
    pub logical_op: Option<FluentbitAgentFilterGrepLogicalOp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Match")]
    pub r#match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Regex")]
    pub regex: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum FluentbitAgentFilterGrepLogicalOp {
    #[serde(rename = "legacy")]
    Legacy,
    #[serde(rename = "AND")]
    And,
    #[serde(rename = "OR")]
    Or,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterKubernetes {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Annotations")]
    pub annotations: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Buffer_Size")]
    pub buffer_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Cache_Use_Docker_Id")]
    pub cache_use_docker_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "DNS_Retries")]
    pub dns_retries: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "DNS_Wait_Time")]
    pub dns_wait_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Dummy_Meta")]
    pub dummy_meta: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "K8S-Logging.Exclude")]
    pub k8s_logging_exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "K8S-Logging.Parser")]
    pub k8s_logging_parser: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Keep_Log")]
    pub keep_log: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Kube_CA_File")]
    pub kube_ca_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Kube_CA_Path")]
    pub kube_ca_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Kube_Meta_Cache_TTL")]
    pub kube_meta_cache_ttl: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Kube_Tag_Prefix")]
    pub kube_tag_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Kube_Token_File")]
    pub kube_token_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Kube_Token_TTL")]
    pub kube_token_ttl: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Kube_URL")]
    pub kube_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Kube_meta_preload_cache_dir")]
    pub kube_meta_preload_cache_dir: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Kubelet_Port")]
    pub kubelet_port: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Labels")]
    pub labels: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Match")]
    pub r#match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Merge_Log")]
    pub merge_log: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Merge_Log_Key")]
    pub merge_log_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Merge_Log_Trim")]
    pub merge_log_trim: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Merge_Parser")]
    pub merge_parser: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Regex_Parser")]
    pub regex_parser: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Use_Journal")]
    pub use_journal: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Use_Kubelet")]
    pub use_kubelet: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kube_meta_namespace_cache_ttl: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace_annotations: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace_labels: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tls.debug")]
    pub tls_debug: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tls.verify")]
    pub tls_verify: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModify {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<FluentbitAgentFilterModifyConditions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rules: Option<Vec<FluentbitAgentFilterModifyRules>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyConditions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "A_key_matches")]
    pub a_key_matches: Option<FluentbitAgentFilterModifyConditionsAKeyMatches>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Key_does_not_exist")]
    pub key_does_not_exist: Option<FluentbitAgentFilterModifyConditionsKeyDoesNotExist>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Key_exists")]
    pub key_exists: Option<FluentbitAgentFilterModifyConditionsKeyExists>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Key_value_does_not_equal")]
    pub key_value_does_not_equal: Option<FluentbitAgentFilterModifyConditionsKeyValueDoesNotEqual>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Key_value_does_not_match")]
    pub key_value_does_not_match: Option<FluentbitAgentFilterModifyConditionsKeyValueDoesNotMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Key_value_equals")]
    pub key_value_equals: Option<FluentbitAgentFilterModifyConditionsKeyValueEquals>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Key_value_matches")]
    pub key_value_matches: Option<FluentbitAgentFilterModifyConditionsKeyValueMatches>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Matching_keys_do_not_have_matching_values")]
    pub matching_keys_do_not_have_matching_values: Option<FluentbitAgentFilterModifyConditionsMatchingKeysDoNotHaveMatchingValues>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Matching_keys_have_matching_values")]
    pub matching_keys_have_matching_values: Option<FluentbitAgentFilterModifyConditionsMatchingKeysHaveMatchingValues>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "No_key_matches")]
    pub no_key_matches: Option<FluentbitAgentFilterModifyConditionsNoKeyMatches>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyConditionsAKeyMatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyConditionsKeyDoesNotExist {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyConditionsKeyExists {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyConditionsKeyValueDoesNotEqual {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyConditionsKeyValueDoesNotMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyConditionsKeyValueEquals {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyConditionsKeyValueMatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyConditionsMatchingKeysDoNotHaveMatchingValues {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyConditionsMatchingKeysHaveMatchingValues {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyConditionsNoKeyMatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyRules {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Add")]
    pub add: Option<FluentbitAgentFilterModifyRulesAdd>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Copy")]
    pub copy: Option<FluentbitAgentFilterModifyRulesCopy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Hard_copy")]
    pub hard_copy: Option<FluentbitAgentFilterModifyRulesHardCopy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Hard_rename")]
    pub hard_rename: Option<FluentbitAgentFilterModifyRulesHardRename>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Remove")]
    pub remove: Option<FluentbitAgentFilterModifyRulesRemove>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Remove_regex")]
    pub remove_regex: Option<FluentbitAgentFilterModifyRulesRemoveRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Remove_wildcard")]
    pub remove_wildcard: Option<FluentbitAgentFilterModifyRulesRemoveWildcard>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Rename")]
    pub rename: Option<FluentbitAgentFilterModifyRulesRename>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Set")]
    pub set: Option<FluentbitAgentFilterModifyRulesSet>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyRulesAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyRulesCopy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyRulesHardCopy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyRulesHardRename {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyRulesRemove {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyRulesRemoveRegex {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyRulesRemoveWildcard {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyRulesRename {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentFilterModifyRulesSet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentForwardOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Require_ack_response")]
    pub require_ack_response: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Retry_Limit")]
    pub retry_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Send_options")]
    pub send_options: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Tag")]
    pub tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Time_as_Integer")]
    pub time_as_integer: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Workers")]
    pub workers: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storage.total_limit_size")]
    pub storage_total_limit_size: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentHealthCheck {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hcErrorsCount")]
    pub hc_errors_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hcPeriod")]
    pub hc_period: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hcRetryFailureCount")]
    pub hc_retry_failure_count: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentImage {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<FluentbitAgentImageImagePullSecrets>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullPolicy")]
    pub pull_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentImageImagePullSecrets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentInputTail {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Buffer_Chunk_Size")]
    pub buffer_chunk_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Buffer_Max_Size")]
    pub buffer_max_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "DB")]
    pub db: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "DB.journal_mode")]
    pub db_journal_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "DB.locking")]
    pub db_locking: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "DB_Sync")]
    pub db_sync: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Docker_Mode")]
    pub docker_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Docker_Mode_Flush")]
    pub docker_mode_flush: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Docker_Mode_Parser")]
    pub docker_mode_parser: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Exclude_Path")]
    pub exclude_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Ignore_Older")]
    pub ignore_older: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Key")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Mem_Buf_Limit")]
    pub mem_buf_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Multiline")]
    pub multiline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Multiline_Flush")]
    pub multiline_flush: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Parser")]
    pub parser: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Parser_Firstline")]
    pub parser_firstline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Parser_N")]
    pub parser_n: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Path")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Path_Key")]
    pub path_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Read_From_Head")]
    pub read_from_head: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Refresh_Interval")]
    pub refresh_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Rotate_Wait")]
    pub rotate_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Skip_Long_Lines")]
    pub skip_long_lines: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Tag")]
    pub tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Tag_Regex")]
    pub tag_regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiline.parser")]
    pub multiline_parser: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storage.pause_on_chunks_overlimit")]
    pub storage_pause_on_chunks_overlimit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storage.type")]
    pub storage_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentLivenessProbe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<FluentbitAgentLivenessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<FluentbitAgentLivenessProbeGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<FluentbitAgentLivenessProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<FluentbitAgentLivenessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentLivenessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentLivenessProbeGrpc {
    pub port: i32,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentLivenessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<FluentbitAgentLivenessProbeHttpGetHttpHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub port: IntOrString,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentLivenessProbeHttpGetHttpHeaders {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentLivenessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    pub port: IntOrString,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentMetrics {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prometheusAnnotations")]
    pub prometheus_annotations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prometheusRules")]
    pub prometheus_rules: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prometheusRulesOverride")]
    pub prometheus_rules_override: Option<Vec<FluentbitAgentMetricsPrometheusRulesOverride>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceMonitor")]
    pub service_monitor: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceMonitorConfig")]
    pub service_monitor_config: Option<FluentbitAgentMetricsServiceMonitorConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentMetricsPrometheusRulesOverride {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expr: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "for")]
    pub r#for: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_firing_for: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub record: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentMetricsServiceMonitorConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalLabels")]
    pub additional_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "honorLabels")]
    pub honor_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricRelabelings")]
    pub metric_relabelings: Option<Vec<FluentbitAgentMetricsServiceMonitorConfigMetricRelabelings>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub relabelings: Option<Vec<FluentbitAgentMetricsServiceMonitorConfigRelabelings>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<FluentbitAgentMetricsServiceMonitorConfigTlsConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentMetricsServiceMonitorConfigMetricRelabelings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<FluentbitAgentMetricsServiceMonitorConfigMetricRelabelingsAction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub modulus: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replacement: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceLabels")]
    pub source_labels: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetLabel")]
    pub target_label: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum FluentbitAgentMetricsServiceMonitorConfigMetricRelabelingsAction {
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "Replace")]
    ReplaceX,
    #[serde(rename = "keep")]
    Keep,
    #[serde(rename = "Keep")]
    KeepX,
    #[serde(rename = "drop")]
    Drop,
    #[serde(rename = "Drop")]
    DropX,
    #[serde(rename = "hashmod")]
    Hashmod,
    HashMod,
    #[serde(rename = "labelmap")]
    Labelmap,
    LabelMap,
    #[serde(rename = "labeldrop")]
    Labeldrop,
    LabelDrop,
    #[serde(rename = "labelkeep")]
    Labelkeep,
    LabelKeep,
    #[serde(rename = "lowercase")]
    Lowercase,
    #[serde(rename = "Lowercase")]
    LowercaseX,
    #[serde(rename = "uppercase")]
    Uppercase,
    #[serde(rename = "Uppercase")]
    UppercaseX,
    #[serde(rename = "keepequal")]
    Keepequal,
    KeepEqual,
    #[serde(rename = "dropequal")]
    Dropequal,
    DropEqual,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentMetricsServiceMonitorConfigRelabelings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<FluentbitAgentMetricsServiceMonitorConfigRelabelingsAction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub modulus: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replacement: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceLabels")]
    pub source_labels: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetLabel")]
    pub target_label: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum FluentbitAgentMetricsServiceMonitorConfigRelabelingsAction {
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "Replace")]
    ReplaceX,
    #[serde(rename = "keep")]
    Keep,
    #[serde(rename = "Keep")]
    KeepX,
    #[serde(rename = "drop")]
    Drop,
    #[serde(rename = "Drop")]
    DropX,
    #[serde(rename = "hashmod")]
    Hashmod,
    HashMod,
    #[serde(rename = "labelmap")]
    Labelmap,
    LabelMap,
    #[serde(rename = "labeldrop")]
    Labeldrop,
    LabelDrop,
    #[serde(rename = "labelkeep")]
    Labelkeep,
    LabelKeep,
    #[serde(rename = "lowercase")]
    Lowercase,
    #[serde(rename = "Lowercase")]
    LowercaseX,
    #[serde(rename = "uppercase")]
    Uppercase,
    #[serde(rename = "Uppercase")]
    UppercaseX,
    #[serde(rename = "keepequal")]
    Keepequal,
    KeepEqual,
    #[serde(rename = "dropequal")]
    Dropequal,
    DropEqual,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentMetricsServiceMonitorConfigTlsConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<FluentbitAgentMetricsServiceMonitorConfigTlsConfigCa>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caFile")]
    pub ca_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<FluentbitAgentMetricsServiceMonitorConfigTlsConfigCert>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certFile")]
    pub cert_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyFile")]
    pub key_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    pub key_secret: Option<FluentbitAgentMetricsServiceMonitorConfigTlsConfigKeySecret>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxVersion")]
    pub max_version: Option<FluentbitAgentMetricsServiceMonitorConfigTlsConfigMaxVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minVersion")]
    pub min_version: Option<FluentbitAgentMetricsServiceMonitorConfigTlsConfigMinVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentMetricsServiceMonitorConfigTlsConfigCa {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<FluentbitAgentMetricsServiceMonitorConfigTlsConfigCaConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<FluentbitAgentMetricsServiceMonitorConfigTlsConfigCaSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentMetricsServiceMonitorConfigTlsConfigCaConfigMap {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentMetricsServiceMonitorConfigTlsConfigCaSecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentMetricsServiceMonitorConfigTlsConfigCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<FluentbitAgentMetricsServiceMonitorConfigTlsConfigCertConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<FluentbitAgentMetricsServiceMonitorConfigTlsConfigCertSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentMetricsServiceMonitorConfigTlsConfigCertConfigMap {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentMetricsServiceMonitorConfigTlsConfigCertSecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentMetricsServiceMonitorConfigTlsConfigKeySecret {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum FluentbitAgentMetricsServiceMonitorConfigTlsConfigMaxVersion {
    #[serde(rename = "TLS10")]
    Tls10,
    #[serde(rename = "TLS11")]
    Tls11,
    #[serde(rename = "TLS12")]
    Tls12,
    #[serde(rename = "TLS13")]
    Tls13,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum FluentbitAgentMetricsServiceMonitorConfigTlsConfigMinVersion {
    #[serde(rename = "TLS10")]
    Tls10,
    #[serde(rename = "TLS11")]
    Tls11,
    #[serde(rename = "TLS12")]
    Tls12,
    #[serde(rename = "TLS13")]
    Tls13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentNetwork {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectTimeout")]
    pub connect_timeout: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectTimeoutLogError")]
    pub connect_timeout_log_error: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsMode")]
    pub dns_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsPreferIpv4")]
    pub dns_prefer_ipv4: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsResolver")]
    pub dns_resolver: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keepalive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepaliveIdleTimeout")]
    pub keepalive_idle_timeout: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepaliveMaxRecycle")]
    pub keepalive_max_recycle: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxWorkerConnections")]
    pub max_worker_connections: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceAddress")]
    pub source_address: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositionDb {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<FluentbitAgentPositionDbConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emptyDir")]
    pub empty_dir: Option<FluentbitAgentPositionDbEmptyDir>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPath")]
    pub host_path: Option<FluentbitAgentPositionDbHostPath>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "host_path")]
    pub host_path_x: Option<FluentbitAgentPositionDbHostPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pvc: Option<FluentbitAgentPositionDbPvc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<FluentbitAgentPositionDbSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositionDbConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<FluentbitAgentPositionDbConfigMapItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositionDbConfigMapItems {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    pub path: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositionDbEmptyDir {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub medium: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeLimit")]
    pub size_limit: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositionDbHostPath {
    pub path: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositionDbPvc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<FluentbitAgentPositionDbPvcSource>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<FluentbitAgentPositionDbPvcSpec>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositionDbPvcSource {
    #[serde(rename = "claimName")]
    pub claim_name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositionDbPvcSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSource")]
    pub data_source: Option<FluentbitAgentPositionDbPvcSpecDataSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSourceRef")]
    pub data_source_ref: Option<FluentbitAgentPositionDbPvcSpecDataSourceRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<FluentbitAgentPositionDbPvcSpecResources>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<FluentbitAgentPositionDbPvcSpecSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeAttributesClassName")]
    pub volume_attributes_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMode")]
    pub volume_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositionDbPvcSpecDataSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    pub kind: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositionDbPvcSpecDataSourceRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    pub kind: String,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositionDbPvcSpecResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositionDbPvcSpecSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<FluentbitAgentPositionDbPvcSpecSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositionDbPvcSpecSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositionDbSecret {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<FluentbitAgentPositionDbSecretItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositionDbSecretItems {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    pub path: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositiondb {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<FluentbitAgentPositiondbConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emptyDir")]
    pub empty_dir: Option<FluentbitAgentPositiondbEmptyDir>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPath")]
    pub host_path: Option<FluentbitAgentPositiondbHostPath>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "host_path")]
    pub host_path_x: Option<FluentbitAgentPositiondbHostPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pvc: Option<FluentbitAgentPositiondbPvc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<FluentbitAgentPositiondbSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositiondbConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<FluentbitAgentPositiondbConfigMapItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositiondbConfigMapItems {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    pub path: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositiondbEmptyDir {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub medium: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeLimit")]
    pub size_limit: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositiondbHostPath {
    pub path: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositiondbPvc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<FluentbitAgentPositiondbPvcSource>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<FluentbitAgentPositiondbPvcSpec>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositiondbPvcSource {
    #[serde(rename = "claimName")]
    pub claim_name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositiondbPvcSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSource")]
    pub data_source: Option<FluentbitAgentPositiondbPvcSpecDataSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSourceRef")]
    pub data_source_ref: Option<FluentbitAgentPositiondbPvcSpecDataSourceRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<FluentbitAgentPositiondbPvcSpecResources>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<FluentbitAgentPositiondbPvcSpecSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeAttributesClassName")]
    pub volume_attributes_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMode")]
    pub volume_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositiondbPvcSpecDataSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    pub kind: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositiondbPvcSpecDataSourceRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    pub kind: String,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositiondbPvcSpecResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositiondbPvcSpecSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<FluentbitAgentPositiondbPvcSpecSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositiondbPvcSpecSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositiondbSecret {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<FluentbitAgentPositiondbSecretItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentPositiondbSecretItems {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    pub path: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentReadinessProbe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<FluentbitAgentReadinessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<FluentbitAgentReadinessProbeGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<FluentbitAgentReadinessProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<FluentbitAgentReadinessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentReadinessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentReadinessProbeGrpc {
    pub port: i32,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentReadinessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<FluentbitAgentReadinessProbeHttpGetHttpHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub port: IntOrString,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentReadinessProbeHttpGetHttpHeaders {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentReadinessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    pub port: IntOrString,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<FluentbitAgentResourcesClaims>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentResourcesClaims {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentSecurity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createOpenShiftSCC")]
    pub create_open_shift_scc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podSecurityContext")]
    pub pod_security_context: Option<FluentbitAgentSecurityPodSecurityContext>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podSecurityPolicyCreate")]
    pub pod_security_policy_create: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleBasedAccessControlCreate")]
    pub role_based_access_control_create: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<FluentbitAgentSecuritySecurityContext>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentSecurityPodSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appArmorProfile")]
    pub app_armor_profile: Option<FluentbitAgentSecurityPodSecurityContextAppArmorProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroup")]
    pub fs_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroupChangePolicy")]
    pub fs_group_change_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxChangePolicy")]
    pub se_linux_change_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<FluentbitAgentSecurityPodSecurityContextSeLinuxOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<FluentbitAgentSecurityPodSecurityContextSeccompProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supplementalGroups")]
    pub supplemental_groups: Option<Vec<i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supplementalGroupsPolicy")]
    pub supplemental_groups_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sysctls: Option<Vec<FluentbitAgentSecurityPodSecurityContextSysctls>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<FluentbitAgentSecurityPodSecurityContextWindowsOptions>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentSecurityPodSecurityContextAppArmorProfile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    #[serde(rename = "type")]
    pub r#type: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentSecurityPodSecurityContextSeLinuxOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentSecurityPodSecurityContextSeccompProfile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    #[serde(rename = "type")]
    pub r#type: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentSecurityPodSecurityContextSysctls {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentSecurityPodSecurityContextWindowsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentSecuritySecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPrivilegeEscalation")]
    pub allow_privilege_escalation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appArmorProfile")]
    pub app_armor_profile: Option<FluentbitAgentSecuritySecurityContextAppArmorProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<FluentbitAgentSecuritySecurityContextCapabilities>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "procMount")]
    pub proc_mount: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFilesystem")]
    pub read_only_root_filesystem: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<FluentbitAgentSecuritySecurityContextSeLinuxOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<FluentbitAgentSecuritySecurityContextSeccompProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<FluentbitAgentSecuritySecurityContextWindowsOptions>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentSecuritySecurityContextAppArmorProfile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    #[serde(rename = "type")]
    pub r#type: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentSecuritySecurityContextCapabilities {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentSecuritySecurityContextSeLinuxOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentSecuritySecurityContextSeccompProfile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    #[serde(rename = "type")]
    pub r#type: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentSecuritySecurityContextWindowsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentServiceAccount {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "automountServiceAccountToken")]
    pub automount_service_account_token: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<FluentbitAgentServiceAccountImagePullSecrets>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<FluentbitAgentServiceAccountMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secrets: Option<Vec<ObjectReference>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentServiceAccountImagePullSecrets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentServiceAccountMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentSyslogngOutput {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Retry_Limit")]
    pub retry_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "Workers")]
    pub workers: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json_date_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json_date_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentTls {
    pub enabled: bool,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sharedKey")]
    pub shared_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentTolerations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentUpdateStrategy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdate")]
    pub rolling_update: Option<FluentbitAgentUpdateStrategyRollingUpdate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentUpdateStrategyRollingUpdate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSurge")]
    pub max_surge: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FluentbitAgentStatus {
}

