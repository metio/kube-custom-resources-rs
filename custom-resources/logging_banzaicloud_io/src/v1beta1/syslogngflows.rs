// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/kube-logging/logging-operator/logging.banzaicloud.io/v1beta1/syslogngflows.yaml
// kopium version: 0.22.4

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "logging.banzaicloud.io", version = "v1beta1", kind = "SyslogNGFlow", plural = "syslogngflows")]
#[kube(namespaced)]
#[kube(status = "SyslogNgFlowStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct SyslogNgFlowSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<SyslogNgFlowFilters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalOutputRefs")]
    pub global_output_refs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localOutputRefs")]
    pub local_output_refs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingRef")]
    pub logging_ref: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<SyslogNgFlowMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputMetrics")]
    pub output_metrics: Option<Vec<SyslogNgFlowOutputMetrics>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFilters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<SyslogNgFlowFiltersMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parser: Option<SyslogNgFlowFiltersParser>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rewrite: Option<Vec<SyslogNgFlowFiltersRewrite>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNgFlowFiltersMatchRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersMatchRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersParser {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metrics-probe")]
    pub metrics_probe: Option<SyslogNgFlowFiltersParserMetricsProbe>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNgFlowFiltersParserRegexp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syslog-parser")]
    pub syslog_parser: Option<SyslogNgFlowFiltersParserSyslogParser>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersParserMetricsProbe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersParserRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub patterns: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersParserSyslogParser {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersRewrite {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_unset: Option<SyslogNgFlowFiltersRewriteGroupUnset>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rename: Option<SyslogNgFlowFiltersRewriteRename>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub set: Option<SyslogNgFlowFiltersRewriteSet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subst: Option<SyslogNgFlowFiltersRewriteSubst>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unset: Option<SyslogNgFlowFiltersRewriteUnset>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersRewriteGroupUnset {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<SyslogNgFlowFiltersRewriteGroupUnsetCondition>,
    pub pattern: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersRewriteGroupUnsetCondition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNgFlowFiltersRewriteGroupUnsetConditionRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersRewriteGroupUnsetConditionRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersRewriteRename {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<SyslogNgFlowFiltersRewriteRenameCondition>,
    #[serde(rename = "newName")]
    pub new_name: String,
    #[serde(rename = "oldName")]
    pub old_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersRewriteRenameCondition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNgFlowFiltersRewriteRenameConditionRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersRewriteRenameConditionRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersRewriteSet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<SyslogNgFlowFiltersRewriteSetCondition>,
    pub field: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersRewriteSetCondition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNgFlowFiltersRewriteSetConditionRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersRewriteSetConditionRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersRewriteSubst {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<SyslogNgFlowFiltersRewriteSubstCondition>,
    pub field: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    pub replace: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersRewriteSubstCondition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNgFlowFiltersRewriteSubstConditionRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersRewriteSubstConditionRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersRewriteUnset {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<SyslogNgFlowFiltersRewriteUnsetCondition>,
    pub field: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersRewriteUnsetCondition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNgFlowFiltersRewriteUnsetConditionRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowFiltersRewriteUnsetConditionRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNgFlowMatchRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowMatchRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowOutputMetrics {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgFlowStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub problems: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "problemsCount")]
    pub problems_count: Option<i64>,
}

