// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/kube-logging/logging-operator/logging.banzaicloud.io/v1beta1/syslogngoutputs.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "logging.banzaicloud.io", version = "v1beta1", kind = "SyslogNGOutput", plural = "syslogngoutputs")]
#[kube(namespaced)]
#[kube(status = "SyslogNgOutputStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct SyslogNgOutputSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub elasticsearch: Option<SyslogNgOutputElasticsearch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticsearch-datastream")]
    pub elasticsearch_datastream: Option<SyslogNgOutputElasticsearchDatastream>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<SyslogNgOutputFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<SyslogNgOutputHttp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingRef")]
    pub logging_ref: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub loggly: Option<SyslogNgOutputLoggly>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logscale: Option<SyslogNgOutputLogscale>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub loki: Option<SyslogNgOutputLoki>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mongodb: Option<SyslogNgOutputMongodb>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mqtt: Option<SyslogNgOutputMqtt>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openobserve: Option<SyslogNgOutputOpenobserve>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub opentelemetry: Option<SyslogNgOutputOpentelemetry>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redis: Option<SyslogNgOutputRedis>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3: Option<SyslogNgOutputS3>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub splunk_hec_event: Option<SyslogNgOutputSplunkHecEvent>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sumologic-http")]
    pub sumologic_http: Option<SyslogNgOutputSumologicHttp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sumologic-syslog")]
    pub sumologic_syslog: Option<SyslogNgOutputSumologicSyslog>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub syslog: Option<SyslogNgOutputSyslog>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-prefix")]
    pub body_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-suffix")]
    pub body_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgOutputElasticsearchDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_prefix_separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<SyslogNgOutputElasticsearchPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "response-action")]
    pub response_action: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgOutputElasticsearchTls>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "user-agent")]
    pub user_agent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputElasticsearchPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputElasticsearchPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputElasticsearchPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputElasticsearchPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNgOutputElasticsearchTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgOutputElasticsearchTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgOutputElasticsearchTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgOutputElasticsearchTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNgOutputElasticsearchTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputElasticsearchTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputElasticsearchTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputElasticsearchTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputElasticsearchTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputElasticsearchTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputElasticsearchTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputElasticsearchTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputElasticsearchTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputElasticsearchTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputElasticsearchTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputElasticsearchTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputElasticsearchTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputElasticsearchTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputElasticsearchTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputElasticsearchTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputElasticsearchTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgOutputElasticsearchTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastream {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-prefix")]
    pub body_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-suffix")]
    pub body_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgOutputElasticsearchDatastreamDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<SyslogNgOutputElasticsearchDatastreamPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub record: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "response-action")]
    pub response_action: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgOutputElasticsearchDatastreamTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "user-agent")]
    pub user_agent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputElasticsearchDatastreamPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputElasticsearchDatastreamPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputElasticsearchDatastreamPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputElasticsearchDatastreamPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNgOutputElasticsearchDatastreamTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgOutputElasticsearchDatastreamTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgOutputElasticsearchDatastreamTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgOutputElasticsearchDatastreamTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNgOutputElasticsearchDatastreamTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputElasticsearchDatastreamTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputElasticsearchDatastreamTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputElasticsearchDatastreamTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputElasticsearchDatastreamTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputElasticsearchDatastreamTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputElasticsearchDatastreamTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputElasticsearchDatastreamTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputElasticsearchDatastreamTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputElasticsearchDatastreamTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputElasticsearchDatastreamTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputElasticsearchDatastreamTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputElasticsearchDatastreamTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputElasticsearchDatastreamTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputElasticsearchDatastreamTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputElasticsearchDatastreamTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputElasticsearchDatastreamTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputElasticsearchDatastreamTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgOutputElasticsearchDatastreamTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputFile {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub create_dirs: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir_group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir_owner: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir_perm: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgOutputFileDiskBuffer>,
    pub path: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputFileDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttp {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-prefix")]
    pub body_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-suffix")]
    pub body_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgOutputHttpDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<SyslogNgOutputHttpPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "response-action")]
    pub response_action: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgOutputHttpTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "user-agent")]
    pub user_agent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputHttpPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputHttpPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputHttpPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputHttpPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNgOutputHttpTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgOutputHttpTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgOutputHttpTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgOutputHttpTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNgOutputHttpTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputHttpTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputHttpTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputHttpTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputHttpTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputHttpTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputHttpTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputHttpTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputHttpTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputHttpTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputHttpTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputHttpTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputHttpTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputHttpTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputHttpTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputHttpTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputHttpTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputHttpTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgOutputHttpTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLoggly {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub close_on_input: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgOutputLogglyDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-protocol")]
    pub ip_protocol: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub so_keepalive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suppress: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_escape: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgOutputLogglyTls>,
    pub token: SyslogNgOutputLogglyToken,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ts_format: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgOutputLogglyIpProtocol {
    #[serde(rename = "4")]
    r#_4,
    #[serde(rename = "6")]
    r#_6,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNgOutputLogglyTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgOutputLogglyTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgOutputLogglyTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgOutputLogglyTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNgOutputLogglyTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputLogglyTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputLogglyTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputLogglyTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputLogglyTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputLogglyTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputLogglyTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputLogglyTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputLogglyTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputLogglyTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputLogglyTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputLogglyTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputLogglyTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputLogglyTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputLogglyTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputLogglyTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputLogglyTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgOutputLogglyTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputLogglyTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputLogglyTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputLogglyTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputLogglyTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogglyTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogscale {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgOutputLogscaleDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extra_headers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rawstring: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<SyslogNgOutputLogscaleToken>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<SyslogNgOutputLogscaleUrl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogscaleDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogscaleToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputLogscaleTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputLogscaleTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogscaleTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputLogscaleTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogscaleTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogscaleTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputLogscaleTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogscaleTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogscaleUrl {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputLogscaleUrlMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputLogscaleUrlValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogscaleUrlMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputLogscaleUrlMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogscaleUrlMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogscaleUrlValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputLogscaleUrlValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLogscaleUrlValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLoki {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<SyslogNgOutputLokiAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgOutputLokiDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tenant-id")]
    pub tenant_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<SyslogNgOutputLokiTimestamp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub adc: Option<SyslogNgOutputLokiAuthAdc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alts: Option<SyslogNgOutputLokiAuthAlts>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<SyslogNgOutputLokiAuthInsecure>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgOutputLokiAuthTls>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiAuthAdc {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiAuthAlts {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "target-service-accounts")]
    pub target_service_accounts: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiAuthInsecure {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiAuthTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgOutputLokiAuthTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgOutputLokiAuthTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgOutputLokiAuthTlsKeyFile>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiAuthTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputLokiAuthTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputLokiAuthTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiAuthTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputLokiAuthTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiAuthTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiAuthTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputLokiAuthTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiAuthTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiAuthTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputLokiAuthTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputLokiAuthTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiAuthTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputLokiAuthTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiAuthTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiAuthTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputLokiAuthTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiAuthTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiAuthTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputLokiAuthTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputLokiAuthTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiAuthTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputLokiAuthTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiAuthTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiAuthTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputLokiAuthTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiAuthTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputLokiDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgOutputLokiTimestamp {
    #[serde(rename = "current")]
    Current,
    #[serde(rename = "received")]
    Received,
    #[serde(rename = "msg")]
    Msg,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputMongodb {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk_bypass_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk_unordered: Option<bool>,
    pub collection: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgOutputMongodbDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<SyslogNgOutputMongodbUri>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value_pairs: Option<SyslogNgOutputMongodbValuePairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub write_concern: Option<SyslogNgOutputMongodbWriteConcern>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputMongodbDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputMongodbUri {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputMongodbUriMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputMongodbUriValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputMongodbUriMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputMongodbUriMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputMongodbUriMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputMongodbUriValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputMongodbUriValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputMongodbUriValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputMongodbValuePairs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pair: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgOutputMongodbWriteConcern {
    #[serde(rename = "unacked")]
    Unacked,
    #[serde(rename = "acked")]
    Acked,
    #[serde(rename = "majority")]
    Majority,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputMqtt {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fallback-topic")]
    pub fallback_topic: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qos: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserve {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-prefix")]
    pub body_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-suffix")]
    pub body_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgOutputOpenobserveDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<SyslogNgOutputOpenobservePassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub record: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "response-action")]
    pub response_action: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stream: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgOutputOpenobserveTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "user-agent")]
    pub user_agent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobservePassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputOpenobservePasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputOpenobservePasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobservePasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputOpenobservePasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobservePasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobservePasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputOpenobservePasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobservePasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNgOutputOpenobserveTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgOutputOpenobserveTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgOutputOpenobserveTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgOutputOpenobserveTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNgOutputOpenobserveTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputOpenobserveTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputOpenobserveTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputOpenobserveTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputOpenobserveTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputOpenobserveTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputOpenobserveTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputOpenobserveTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputOpenobserveTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputOpenobserveTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputOpenobserveTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputOpenobserveTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputOpenobserveTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputOpenobserveTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputOpenobserveTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputOpenobserveTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputOpenobserveTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpenobserveTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgOutputOpenobserveTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<SyslogNgOutputOpentelemetryAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel_args: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgOutputOpentelemetryDiskBuffer>,
    pub url: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub adc: Option<SyslogNgOutputOpentelemetryAuthAdc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alts: Option<SyslogNgOutputOpentelemetryAuthAlts>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<SyslogNgOutputOpentelemetryAuthInsecure>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgOutputOpentelemetryAuthTls>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryAuthAdc {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryAuthAlts {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "target-service-accounts")]
    pub target_service_accounts: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryAuthInsecure {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryAuthTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgOutputOpentelemetryAuthTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgOutputOpentelemetryAuthTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgOutputOpentelemetryAuthTlsKeyFile>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryAuthTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputOpentelemetryAuthTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputOpentelemetryAuthTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryAuthTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputOpentelemetryAuthTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryAuthTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryAuthTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputOpentelemetryAuthTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryAuthTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryAuthTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputOpentelemetryAuthTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputOpentelemetryAuthTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryAuthTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputOpentelemetryAuthTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryAuthTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryAuthTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputOpentelemetryAuthTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryAuthTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryAuthTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputOpentelemetryAuthTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputOpentelemetryAuthTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryAuthTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputOpentelemetryAuthTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryAuthTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryAuthTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputOpentelemetryAuthTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryAuthTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputOpentelemetryDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputRedis {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<SyslogNgOutputRedisAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<SyslogNgOutputRedisCommand>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command_and_arguments: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgOutputRedisDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub throttle: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "time-reopen")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputRedisAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputRedisAuthMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputRedisAuthValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputRedisAuthMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputRedisAuthMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputRedisAuthMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputRedisAuthValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputRedisAuthValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputRedisAuthValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputRedisCommand {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "string-list")]
    pub string_list: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputRedisDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputS3 {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub access_key: Option<SyslogNgOutputS3AccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub canned_acl: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compresslevel: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgOutputS3DiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_grace_period: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kms_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_object_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_pending_uploads: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object_key_timestamp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret_key: Option<SyslogNgOutputS3SecretKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server_side_encryption: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage_class: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub throttle: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upload_threads: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputS3AccessKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputS3AccessKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputS3AccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputS3AccessKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputS3AccessKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputS3AccessKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputS3AccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputS3AccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputS3AccessKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputS3DiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputS3SecretKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputS3SecretKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputS3SecretKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputS3SecretKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputS3SecretKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputS3SecretKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputS3SecretKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputS3SecretKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputS3SecretKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEvent {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-prefix")]
    pub body_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-suffix")]
    pub body_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_index: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_source: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_sourcetype: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgOutputSplunkHecEventDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub event: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extra_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extra_queries: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<SyslogNgOutputSplunkHecEventPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "response-action")]
    pub response_action: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sourcetype: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgOutputSplunkHecEventTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<SyslogNgOutputSplunkHecEventToken>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "user-agent")]
    pub user_agent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputSplunkHecEventPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputSplunkHecEventPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSplunkHecEventPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSplunkHecEventPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNgOutputSplunkHecEventTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgOutputSplunkHecEventTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgOutputSplunkHecEventTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgOutputSplunkHecEventTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNgOutputSplunkHecEventTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputSplunkHecEventTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputSplunkHecEventTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSplunkHecEventTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSplunkHecEventTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputSplunkHecEventTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputSplunkHecEventTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSplunkHecEventTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSplunkHecEventTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputSplunkHecEventTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputSplunkHecEventTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSplunkHecEventTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSplunkHecEventTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputSplunkHecEventTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputSplunkHecEventTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSplunkHecEventTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSplunkHecEventTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgOutputSplunkHecEventTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputSplunkHecEventTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputSplunkHecEventTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSplunkHecEventTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSplunkHecEventTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSplunkHecEventTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttp {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collector: Option<SyslogNgOutputSumologicHttpCollector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgOutputSumologicHttpDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgOutputSumologicHttpTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<SyslogNgOutputSumologicHttpUrl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpCollector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputSumologicHttpCollectorMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputSumologicHttpCollectorValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpCollectorMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSumologicHttpCollectorMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpCollectorMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpCollectorValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSumologicHttpCollectorValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpCollectorValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNgOutputSumologicHttpTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgOutputSumologicHttpTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgOutputSumologicHttpTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgOutputSumologicHttpTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNgOutputSumologicHttpTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputSumologicHttpTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputSumologicHttpTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSumologicHttpTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSumologicHttpTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputSumologicHttpTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputSumologicHttpTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSumologicHttpTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSumologicHttpTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputSumologicHttpTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputSumologicHttpTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSumologicHttpTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSumologicHttpTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputSumologicHttpTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputSumologicHttpTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSumologicHttpTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSumologicHttpTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgOutputSumologicHttpTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpUrl {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputSumologicHttpUrlMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputSumologicHttpUrlValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpUrlMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSumologicHttpUrlMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpUrlMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpUrlValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSumologicHttpUrlValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicHttpUrlValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslog {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgOutputSumologicSyslogDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgOutputSumologicSyslogTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNgOutputSumologicSyslogTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgOutputSumologicSyslogTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgOutputSumologicSyslogTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgOutputSumologicSyslogTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNgOutputSumologicSyslogTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputSumologicSyslogTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputSumologicSyslogTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSumologicSyslogTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSumologicSyslogTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputSumologicSyslogTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputSumologicSyslogTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSumologicSyslogTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSumologicSyslogTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputSumologicSyslogTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputSumologicSyslogTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSumologicSyslogTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSumologicSyslogTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputSumologicSyslogTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputSumologicSyslogTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSumologicSyslogTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSumologicSyslogTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSumologicSyslogTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgOutputSumologicSyslogTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslog {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub close_on_input: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgOutputSyslogDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-protocol")]
    pub ip_protocol: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub so_keepalive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suppress: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_escape: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgOutputSyslogTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ts_format: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgOutputSyslogIpProtocol {
    #[serde(rename = "4")]
    r#_4,
    #[serde(rename = "6")]
    r#_6,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNgOutputSyslogTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgOutputSyslogTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgOutputSyslogTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgOutputSyslogTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNgOutputSyslogTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputSyslogTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputSyslogTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSyslogTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSyslogTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputSyslogTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputSyslogTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSyslogTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSyslogTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputSyslogTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputSyslogTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSyslogTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSyslogTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgOutputSyslogTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgOutputSyslogTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSyslogTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgOutputSyslogTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputSyslogTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgOutputSyslogTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgOutputStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub problems: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "problemsCount")]
    pub problems_count: Option<i64>,
}

