// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/kube-logging/logging-operator/logging.banzaicloud.io/v1beta1/syslogngclusteroutputs.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "logging.banzaicloud.io", version = "v1beta1", kind = "SyslogNGClusterOutput", plural = "syslogngclusteroutputs")]
#[kube(namespaced)]
#[kube(status = "SyslogNgClusterOutputStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct SyslogNgClusterOutputSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub elasticsearch: Option<SyslogNgClusterOutputElasticsearch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticsearch-datastream")]
    pub elasticsearch_datastream: Option<SyslogNgClusterOutputElasticsearchDatastream>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<SyslogNgClusterOutputFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<SyslogNgClusterOutputHttp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingRef")]
    pub logging_ref: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub loggly: Option<SyslogNgClusterOutputLoggly>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logscale: Option<SyslogNgClusterOutputLogscale>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub loki: Option<SyslogNgClusterOutputLoki>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mongodb: Option<SyslogNgClusterOutputMongodb>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mqtt: Option<SyslogNgClusterOutputMqtt>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openobserve: Option<SyslogNgClusterOutputOpenobserve>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub opentelemetry: Option<SyslogNgClusterOutputOpentelemetry>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protected: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redis: Option<SyslogNgClusterOutputRedis>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3: Option<SyslogNgClusterOutputS3>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub splunk_hec_event: Option<SyslogNgClusterOutputSplunkHecEvent>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sumologic-http")]
    pub sumologic_http: Option<SyslogNgClusterOutputSumologicHttp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sumologic-syslog")]
    pub sumologic_syslog: Option<SyslogNgClusterOutputSumologicSyslog>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub syslog: Option<SyslogNgClusterOutputSyslog>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-prefix")]
    pub body_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-suffix")]
    pub body_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgClusterOutputElasticsearchDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_prefix_separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<SyslogNgClusterOutputElasticsearchPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "response-action")]
    pub response_action: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgClusterOutputElasticsearchTls>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "user-agent")]
    pub user_agent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputElasticsearchPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputElasticsearchPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputElasticsearchPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputElasticsearchPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNgClusterOutputElasticsearchTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgClusterOutputElasticsearchTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgClusterOutputElasticsearchTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgClusterOutputElasticsearchTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNgClusterOutputElasticsearchTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputElasticsearchTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputElasticsearchTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputElasticsearchTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputElasticsearchTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputElasticsearchTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputElasticsearchTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputElasticsearchTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputElasticsearchTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputElasticsearchTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputElasticsearchTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputElasticsearchTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputElasticsearchTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputElasticsearchTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputElasticsearchTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputElasticsearchTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputElasticsearchTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgClusterOutputElasticsearchTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastream {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-prefix")]
    pub body_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-suffix")]
    pub body_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgClusterOutputElasticsearchDatastreamDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<SyslogNgClusterOutputElasticsearchDatastreamPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub record: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "response-action")]
    pub response_action: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgClusterOutputElasticsearchDatastreamTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "user-agent")]
    pub user_agent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputElasticsearchDatastreamPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputElasticsearchDatastreamPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputElasticsearchDatastreamPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputElasticsearchDatastreamPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputElasticsearchDatastreamTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputElasticsearchDatastreamTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgClusterOutputElasticsearchDatastreamTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputFile {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub create_dirs: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir_group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir_owner: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir_perm: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgClusterOutputFileDiskBuffer>,
    pub path: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputFileDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttp {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-prefix")]
    pub body_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-suffix")]
    pub body_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgClusterOutputHttpDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<SyslogNgClusterOutputHttpPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "response-action")]
    pub response_action: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgClusterOutputHttpTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "user-agent")]
    pub user_agent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputHttpPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputHttpPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputHttpPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputHttpPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNgClusterOutputHttpTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgClusterOutputHttpTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgClusterOutputHttpTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgClusterOutputHttpTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNgClusterOutputHttpTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputHttpTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputHttpTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputHttpTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputHttpTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputHttpTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputHttpTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputHttpTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputHttpTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputHttpTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputHttpTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputHttpTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputHttpTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputHttpTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputHttpTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputHttpTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputHttpTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputHttpTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgClusterOutputHttpTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLoggly {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub close_on_input: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgClusterOutputLogglyDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-protocol")]
    pub ip_protocol: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub so_keepalive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suppress: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_escape: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgClusterOutputLogglyTls>,
    pub token: SyslogNgClusterOutputLogglyToken,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ts_format: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgClusterOutputLogglyIpProtocol {
    #[serde(rename = "4")]
    r#_4,
    #[serde(rename = "6")]
    r#_6,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNgClusterOutputLogglyTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgClusterOutputLogglyTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgClusterOutputLogglyTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgClusterOutputLogglyTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNgClusterOutputLogglyTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputLogglyTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputLogglyTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputLogglyTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputLogglyTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputLogglyTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputLogglyTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputLogglyTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputLogglyTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputLogglyTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputLogglyTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputLogglyTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputLogglyTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputLogglyTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputLogglyTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputLogglyTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputLogglyTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgClusterOutputLogglyTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputLogglyTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputLogglyTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputLogglyTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputLogglyTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogglyTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogscale {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgClusterOutputLogscaleDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extra_headers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rawstring: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<SyslogNgClusterOutputLogscaleToken>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<SyslogNgClusterOutputLogscaleUrl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogscaleDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogscaleToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputLogscaleTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputLogscaleTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogscaleTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputLogscaleTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogscaleTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogscaleTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputLogscaleTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogscaleTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogscaleUrl {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputLogscaleUrlMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputLogscaleUrlValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogscaleUrlMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputLogscaleUrlMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogscaleUrlMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogscaleUrlValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputLogscaleUrlValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLogscaleUrlValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLoki {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<SyslogNgClusterOutputLokiAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgClusterOutputLokiDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tenant-id")]
    pub tenant_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<SyslogNgClusterOutputLokiTimestamp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub adc: Option<SyslogNgClusterOutputLokiAuthAdc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alts: Option<SyslogNgClusterOutputLokiAuthAlts>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<SyslogNgClusterOutputLokiAuthInsecure>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgClusterOutputLokiAuthTls>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiAuthAdc {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiAuthAlts {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "target-service-accounts")]
    pub target_service_accounts: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiAuthInsecure {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiAuthTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgClusterOutputLokiAuthTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgClusterOutputLokiAuthTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgClusterOutputLokiAuthTlsKeyFile>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiAuthTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputLokiAuthTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputLokiAuthTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiAuthTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputLokiAuthTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiAuthTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiAuthTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputLokiAuthTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiAuthTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiAuthTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputLokiAuthTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputLokiAuthTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiAuthTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputLokiAuthTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiAuthTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiAuthTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputLokiAuthTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiAuthTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiAuthTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputLokiAuthTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputLokiAuthTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiAuthTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputLokiAuthTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiAuthTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiAuthTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputLokiAuthTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiAuthTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputLokiDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgClusterOutputLokiTimestamp {
    #[serde(rename = "current")]
    Current,
    #[serde(rename = "received")]
    Received,
    #[serde(rename = "msg")]
    Msg,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputMongodb {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk_bypass_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk_unordered: Option<bool>,
    pub collection: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgClusterOutputMongodbDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<SyslogNgClusterOutputMongodbUri>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value_pairs: Option<SyslogNgClusterOutputMongodbValuePairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub write_concern: Option<SyslogNgClusterOutputMongodbWriteConcern>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputMongodbDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputMongodbUri {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputMongodbUriMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputMongodbUriValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputMongodbUriMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputMongodbUriMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputMongodbUriMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputMongodbUriValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputMongodbUriValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputMongodbUriValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputMongodbValuePairs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pair: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgClusterOutputMongodbWriteConcern {
    #[serde(rename = "unacked")]
    Unacked,
    #[serde(rename = "acked")]
    Acked,
    #[serde(rename = "majority")]
    Majority,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputMqtt {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fallback-topic")]
    pub fallback_topic: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qos: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserve {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-prefix")]
    pub body_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-suffix")]
    pub body_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgClusterOutputOpenobserveDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<SyslogNgClusterOutputOpenobservePassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub record: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "response-action")]
    pub response_action: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stream: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgClusterOutputOpenobserveTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "user-agent")]
    pub user_agent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobservePassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputOpenobservePasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputOpenobservePasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobservePasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputOpenobservePasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobservePasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobservePasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputOpenobservePasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobservePasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNgClusterOutputOpenobserveTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgClusterOutputOpenobserveTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgClusterOutputOpenobserveTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgClusterOutputOpenobserveTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNgClusterOutputOpenobserveTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputOpenobserveTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputOpenobserveTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputOpenobserveTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputOpenobserveTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputOpenobserveTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputOpenobserveTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputOpenobserveTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputOpenobserveTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputOpenobserveTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputOpenobserveTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputOpenobserveTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputOpenobserveTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputOpenobserveTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputOpenobserveTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputOpenobserveTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputOpenobserveTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpenobserveTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgClusterOutputOpenobserveTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<SyslogNgClusterOutputOpentelemetryAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel_args: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgClusterOutputOpentelemetryDiskBuffer>,
    pub url: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub adc: Option<SyslogNgClusterOutputOpentelemetryAuthAdc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alts: Option<SyslogNgClusterOutputOpentelemetryAuthAlts>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<SyslogNgClusterOutputOpentelemetryAuthInsecure>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgClusterOutputOpentelemetryAuthTls>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryAuthAdc {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryAuthAlts {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "target-service-accounts")]
    pub target_service_accounts: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryAuthInsecure {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryAuthTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgClusterOutputOpentelemetryAuthTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgClusterOutputOpentelemetryAuthTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgClusterOutputOpentelemetryAuthTlsKeyFile>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryAuthTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputOpentelemetryAuthTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputOpentelemetryAuthTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryAuthTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputOpentelemetryAuthTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryAuthTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryAuthTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputOpentelemetryAuthTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryAuthTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryAuthTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputOpentelemetryAuthTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputOpentelemetryAuthTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryAuthTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputOpentelemetryAuthTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryAuthTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryAuthTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputOpentelemetryAuthTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryAuthTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryAuthTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputOpentelemetryAuthTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputOpentelemetryAuthTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryAuthTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputOpentelemetryAuthTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryAuthTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryAuthTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputOpentelemetryAuthTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryAuthTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputOpentelemetryDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputRedis {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<SyslogNgClusterOutputRedisAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<SyslogNgClusterOutputRedisCommand>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command_and_arguments: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgClusterOutputRedisDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub throttle: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "time-reopen")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputRedisAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputRedisAuthMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputRedisAuthValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputRedisAuthMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputRedisAuthMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputRedisAuthMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputRedisAuthValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputRedisAuthValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputRedisAuthValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputRedisCommand {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "string-list")]
    pub string_list: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputRedisDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputS3 {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub access_key: Option<SyslogNgClusterOutputS3AccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub canned_acl: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compresslevel: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgClusterOutputS3DiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_grace_period: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kms_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_object_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_pending_uploads: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object_key_timestamp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret_key: Option<SyslogNgClusterOutputS3SecretKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server_side_encryption: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage_class: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub throttle: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upload_threads: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputS3AccessKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputS3AccessKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputS3AccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputS3AccessKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputS3AccessKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputS3AccessKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputS3AccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputS3AccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputS3AccessKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputS3DiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputS3SecretKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputS3SecretKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputS3SecretKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputS3SecretKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputS3SecretKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputS3SecretKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputS3SecretKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputS3SecretKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputS3SecretKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEvent {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-prefix")]
    pub body_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-suffix")]
    pub body_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_index: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_source: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_sourcetype: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgClusterOutputSplunkHecEventDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub event: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extra_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extra_queries: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<SyslogNgClusterOutputSplunkHecEventPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "response-action")]
    pub response_action: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sourcetype: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgClusterOutputSplunkHecEventTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<SyslogNgClusterOutputSplunkHecEventToken>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "user-agent")]
    pub user_agent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputSplunkHecEventPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputSplunkHecEventPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSplunkHecEventPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSplunkHecEventPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNgClusterOutputSplunkHecEventTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgClusterOutputSplunkHecEventTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgClusterOutputSplunkHecEventTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgClusterOutputSplunkHecEventTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNgClusterOutputSplunkHecEventTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputSplunkHecEventTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputSplunkHecEventTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSplunkHecEventTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSplunkHecEventTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputSplunkHecEventTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputSplunkHecEventTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSplunkHecEventTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSplunkHecEventTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputSplunkHecEventTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputSplunkHecEventTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSplunkHecEventTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSplunkHecEventTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputSplunkHecEventTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputSplunkHecEventTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSplunkHecEventTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSplunkHecEventTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgClusterOutputSplunkHecEventTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputSplunkHecEventTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputSplunkHecEventTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSplunkHecEventTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSplunkHecEventTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSplunkHecEventTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttp {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collector: Option<SyslogNgClusterOutputSumologicHttpCollector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgClusterOutputSumologicHttpDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgClusterOutputSumologicHttpTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<SyslogNgClusterOutputSumologicHttpUrl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpCollector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputSumologicHttpCollectorMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputSumologicHttpCollectorValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpCollectorMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSumologicHttpCollectorMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpCollectorMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpCollectorValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSumologicHttpCollectorValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpCollectorValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNgClusterOutputSumologicHttpTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgClusterOutputSumologicHttpTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgClusterOutputSumologicHttpTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgClusterOutputSumologicHttpTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNgClusterOutputSumologicHttpTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputSumologicHttpTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputSumologicHttpTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSumologicHttpTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSumologicHttpTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputSumologicHttpTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputSumologicHttpTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSumologicHttpTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSumologicHttpTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputSumologicHttpTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputSumologicHttpTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSumologicHttpTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSumologicHttpTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputSumologicHttpTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputSumologicHttpTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSumologicHttpTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSumologicHttpTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgClusterOutputSumologicHttpTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpUrl {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputSumologicHttpUrlMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputSumologicHttpUrlValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpUrlMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSumologicHttpUrlMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpUrlMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpUrlValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSumologicHttpUrlValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicHttpUrlValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslog {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgClusterOutputSumologicSyslogDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgClusterOutputSumologicSyslogTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNgClusterOutputSumologicSyslogTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgClusterOutputSumologicSyslogTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgClusterOutputSumologicSyslogTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgClusterOutputSumologicSyslogTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNgClusterOutputSumologicSyslogTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputSumologicSyslogTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputSumologicSyslogTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSumologicSyslogTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSumologicSyslogTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputSumologicSyslogTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputSumologicSyslogTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSumologicSyslogTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSumologicSyslogTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputSumologicSyslogTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputSumologicSyslogTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSumologicSyslogTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSumologicSyslogTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputSumologicSyslogTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputSumologicSyslogTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSumologicSyslogTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSumologicSyslogTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSumologicSyslogTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgClusterOutputSumologicSyslogTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslog {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub close_on_input: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNgClusterOutputSyslogDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-protocol")]
    pub ip_protocol: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub so_keepalive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suppress: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_escape: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNgClusterOutputSyslogTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ts_format: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qout_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgClusterOutputSyslogIpProtocol {
    #[serde(rename = "4")]
    r#_4,
    #[serde(rename = "6")]
    r#_6,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNgClusterOutputSyslogTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNgClusterOutputSyslogTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNgClusterOutputSyslogTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNgClusterOutputSyslogTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNgClusterOutputSyslogTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputSyslogTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputSyslogTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSyslogTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSyslogTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputSyslogTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputSyslogTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSyslogTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSyslogTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputSyslogTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputSyslogTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSyslogTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSyslogTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNgClusterOutputSyslogTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNgClusterOutputSyslogTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSyslogTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNgClusterOutputSyslogTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputSyslogTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNgClusterOutputSyslogTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNgClusterOutputStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub problems: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "problemsCount")]
    pub problems_count: Option<i64>,
}

