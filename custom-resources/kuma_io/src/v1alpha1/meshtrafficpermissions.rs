// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/kumahq/kuma/kuma.io/v1alpha1/meshtrafficpermissions.yaml
// kopium version: 0.22.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// Spec is the specification of the Kuma MeshTrafficPermission resource.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "kuma.io", version = "v1alpha1", kind = "MeshTrafficPermission", plural = "meshtrafficpermissions")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct MeshTrafficPermissionSpec {
    /// From list makes a match between clients and corresponding configurations
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<Vec<MeshTrafficPermissionFrom>>,
    /// Rules defines inbound permissions configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rules: Option<Vec<MeshTrafficPermissionRules>>,
    /// TargetRef is a reference to the resource the policy takes an effect on.
    /// The resource could be either a real store object or virtual resource
    /// defined inplace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRef")]
    pub target_ref: Option<MeshTrafficPermissionTargetRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshTrafficPermissionFrom {
    /// Default is a configuration specific to the group of clients referenced in
    /// 'targetRef'
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default: Option<MeshTrafficPermissionFromDefault>,
    /// TargetRef is a reference to the resource that represents a group of
    /// clients.
    #[serde(rename = "targetRef")]
    pub target_ref: MeshTrafficPermissionFromTargetRef,
}

/// Default is a configuration specific to the group of clients referenced in
/// 'targetRef'
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MeshTrafficPermissionFromDefault {
    /// Action defines a behavior for the specified group of clients:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<MeshTrafficPermissionFromDefaultAction>,
}

/// Default is a configuration specific to the group of clients referenced in
/// 'targetRef'
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MeshTrafficPermissionFromDefaultAction {
    Allow,
    Deny,
    AllowWithShadowDeny,
}

/// TargetRef is a reference to the resource that represents a group of
/// clients.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshTrafficPermissionFromTargetRef {
    /// Kind of the referenced resource
    pub kind: MeshTrafficPermissionFromTargetRefKind,
    /// Labels are used to select group of MeshServices that match labels. Either Labels or
    /// Name and Namespace can be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Mesh is reserved for future use to identify cross mesh resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mesh: Option<String>,
    /// Name of the referenced resource. Can only be used with kinds: `MeshService`,
    /// `MeshServiceSubset` and `MeshGatewayRoute`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace specifies the namespace of target resource. If empty only resources in policy namespace
    /// will be targeted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// ProxyTypes specifies the data plane types that are subject to the policy. When not specified,
    /// all data plane types are targeted by the policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyTypes")]
    pub proxy_types: Option<Vec<String>>,
    /// SectionName is used to target specific section of resource.
    /// For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sectionName")]
    pub section_name: Option<String>,
    /// Tags used to select a subset of proxies by tags. Can only be used with kinds
    /// `MeshSubset` and `MeshServiceSubset`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
}

/// TargetRef is a reference to the resource that represents a group of
/// clients.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MeshTrafficPermissionFromTargetRefKind {
    Mesh,
    MeshSubset,
    MeshGateway,
    MeshService,
    MeshExternalService,
    MeshMultiZoneService,
    MeshServiceSubset,
    #[serde(rename = "MeshHTTPRoute")]
    MeshHttpRoute,
    Dataplane,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MeshTrafficPermissionRules {
    pub default: MeshTrafficPermissionRulesDefault,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MeshTrafficPermissionRulesDefault {
    /// Allow definees a list of matches for which access will be allowed
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<Vec<MeshTrafficPermissionRulesDefaultAllow>>,
    /// AllowWithShadowDeny defines a list of matches for which access will be allowed but emits logs as if
    /// requests are denied
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowWithShadowDeny")]
    pub allow_with_shadow_deny: Option<Vec<MeshTrafficPermissionRulesDefaultAllowWithShadowDeny>>,
    /// Deny defines a list of matches for which access will be denied
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deny: Option<Vec<MeshTrafficPermissionRulesDefaultDeny>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MeshTrafficPermissionRulesDefaultAllow {
    /// SpiffeID defines a matcher configuration for SpiffeID matching
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spiffeID")]
    pub spiffe_id: Option<MeshTrafficPermissionRulesDefaultAllowSpiffeId>,
}

/// SpiffeID defines a matcher configuration for SpiffeID matching
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshTrafficPermissionRulesDefaultAllowSpiffeId {
    /// Type defines how to match incoming traffic by SpiffeID. `Exact` or `Prefix` are allowed.
    #[serde(rename = "type")]
    pub r#type: MeshTrafficPermissionRulesDefaultAllowSpiffeIdType,
    /// Value is SpiffeId of a client that needs to match for the configuration to be applied
    pub value: String,
}

/// SpiffeID defines a matcher configuration for SpiffeID matching
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MeshTrafficPermissionRulesDefaultAllowSpiffeIdType {
    Exact,
    Prefix,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MeshTrafficPermissionRulesDefaultAllowWithShadowDeny {
    /// SpiffeID defines a matcher configuration for SpiffeID matching
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spiffeID")]
    pub spiffe_id: Option<MeshTrafficPermissionRulesDefaultAllowWithShadowDenySpiffeId>,
}

/// SpiffeID defines a matcher configuration for SpiffeID matching
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshTrafficPermissionRulesDefaultAllowWithShadowDenySpiffeId {
    /// Type defines how to match incoming traffic by SpiffeID. `Exact` or `Prefix` are allowed.
    #[serde(rename = "type")]
    pub r#type: MeshTrafficPermissionRulesDefaultAllowWithShadowDenySpiffeIdType,
    /// Value is SpiffeId of a client that needs to match for the configuration to be applied
    pub value: String,
}

/// SpiffeID defines a matcher configuration for SpiffeID matching
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MeshTrafficPermissionRulesDefaultAllowWithShadowDenySpiffeIdType {
    Exact,
    Prefix,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MeshTrafficPermissionRulesDefaultDeny {
    /// SpiffeID defines a matcher configuration for SpiffeID matching
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spiffeID")]
    pub spiffe_id: Option<MeshTrafficPermissionRulesDefaultDenySpiffeId>,
}

/// SpiffeID defines a matcher configuration for SpiffeID matching
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshTrafficPermissionRulesDefaultDenySpiffeId {
    /// Type defines how to match incoming traffic by SpiffeID. `Exact` or `Prefix` are allowed.
    #[serde(rename = "type")]
    pub r#type: MeshTrafficPermissionRulesDefaultDenySpiffeIdType,
    /// Value is SpiffeId of a client that needs to match for the configuration to be applied
    pub value: String,
}

/// SpiffeID defines a matcher configuration for SpiffeID matching
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MeshTrafficPermissionRulesDefaultDenySpiffeIdType {
    Exact,
    Prefix,
}

/// TargetRef is a reference to the resource the policy takes an effect on.
/// The resource could be either a real store object or virtual resource
/// defined inplace.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshTrafficPermissionTargetRef {
    /// Kind of the referenced resource
    pub kind: MeshTrafficPermissionTargetRefKind,
    /// Labels are used to select group of MeshServices that match labels. Either Labels or
    /// Name and Namespace can be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Mesh is reserved for future use to identify cross mesh resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mesh: Option<String>,
    /// Name of the referenced resource. Can only be used with kinds: `MeshService`,
    /// `MeshServiceSubset` and `MeshGatewayRoute`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace specifies the namespace of target resource. If empty only resources in policy namespace
    /// will be targeted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// ProxyTypes specifies the data plane types that are subject to the policy. When not specified,
    /// all data plane types are targeted by the policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyTypes")]
    pub proxy_types: Option<Vec<String>>,
    /// SectionName is used to target specific section of resource.
    /// For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sectionName")]
    pub section_name: Option<String>,
    /// Tags used to select a subset of proxies by tags. Can only be used with kinds
    /// `MeshSubset` and `MeshServiceSubset`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
}

/// TargetRef is a reference to the resource the policy takes an effect on.
/// The resource could be either a real store object or virtual resource
/// defined inplace.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MeshTrafficPermissionTargetRefKind {
    Mesh,
    MeshSubset,
    MeshGateway,
    MeshService,
    MeshExternalService,
    MeshMultiZoneService,
    MeshServiceSubset,
    #[serde(rename = "MeshHTTPRoute")]
    MeshHttpRoute,
    Dataplane,
}

