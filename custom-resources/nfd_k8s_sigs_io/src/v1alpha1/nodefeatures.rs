// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/kubernetes-sigs/node-feature-discovery-operator/nfd.k8s-sigs.io/v1alpha1/nodefeatures.yaml
// kopium version: 0.22.4

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// NodeFeatureSpec describes a NodeFeature object.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "nfd.k8s-sigs.io", version = "v1alpha1", kind = "NodeFeature", plural = "nodefeatures")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct NodeFeatureSpec {
    /// Features is the full "raw" features data that has been discovered.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub features: Option<NodeFeatureFeatures>,
    /// Labels is the set of node labels that are requested to be created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// Features is the full "raw" features data that has been discovered.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeFeatureFeatures {
    /// Attributes contains all the attribute-type features of the node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, NodeFeatureFeaturesAttributes>>,
    /// Flags contains all the flag-type features of the node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<BTreeMap<String, NodeFeatureFeaturesFlags>>,
    /// Instances contains all the instance-type features of the node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instances: Option<BTreeMap<String, NodeFeatureFeaturesInstances>>,
}

/// Attributes contains all the attribute-type features of the node.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeFeatureFeaturesAttributes {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub elements: Option<BTreeMap<String, String>>,
}

/// Flags contains all the flag-type features of the node.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeFeatureFeaturesFlags {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub elements: Option<BTreeMap<String, NodeFeatureFeaturesFlagsElements>>,
}

/// Nil is a dummy empty struct for protobuf compatibility
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeFeatureFeaturesFlagsElements {
}

/// Instances contains all the instance-type features of the node.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeFeatureFeaturesInstances {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub elements: Option<Vec<NodeFeatureFeaturesInstancesElements>>,
}

/// InstanceFeature represents one instance of a complex features, e.g. a device.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeFeatureFeaturesInstancesElements {
    pub attributes: BTreeMap<String, String>,
}

