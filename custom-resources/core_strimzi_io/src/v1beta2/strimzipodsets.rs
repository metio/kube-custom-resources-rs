// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/strimzi/strimzi-kafka-operator/core.strimzi.io/v1beta2/strimzipodsets.yaml
// kopium version: 0.22.3

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// The specification of the StrimziPodSet.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "core.strimzi.io", version = "v1beta2", kind = "StrimziPodSet", plural = "strimzipodsets")]
#[kube(namespaced)]
#[kube(status = "StrimziPodSetStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct StrimziPodSetSpec {
    /// The Pods managed by this StrimziPodSet.
    pub pods: Vec<BTreeMap<String, serde_json::Value>>,
    /// Selector is a label query which matches all the pods managed by this `StrimziPodSet`. Only `matchLabels` is supported. If `matchExpressions` is set, it will be ignored.
    pub selector: StrimziPodSetSelector,
}

/// Selector is a label query which matches all the pods managed by this `StrimziPodSet`. Only `matchLabels` is supported. If `matchExpressions` is set, it will be ignored.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StrimziPodSetSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<StrimziPodSetSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StrimziPodSetSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// The status of the StrimziPodSet.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StrimziPodSetStatus {
    /// List of status conditions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// Number of pods managed by this `StrimziPodSet` resource that have the current revision.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "currentPods")]
    pub current_pods: Option<i64>,
    /// The generation of the CRD that was last reconciled by the operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// Number of pods managed by this `StrimziPodSet` resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<i64>,
    /// Number of pods managed by this `StrimziPodSet` resource that are ready.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readyPods")]
    pub ready_pods: Option<i64>,
}

