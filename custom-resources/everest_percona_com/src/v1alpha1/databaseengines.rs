// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/percona/everest-operator/everest.percona.com/v1alpha1/databaseengines.yaml
// kopium version: 0.22.4

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// DatabaseEngineSpec is a spec for a database engine.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "everest.percona.com", version = "v1alpha1", kind = "DatabaseEngine", plural = "databaseengines")]
#[kube(namespaced)]
#[kube(status = "DatabaseEngineStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct DatabaseEngineSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedVersions")]
    pub allowed_versions: Option<Vec<String>>,
    /// SecretKeys contains the definition of the various Secrets that
    /// the given DBEngine supports.
    /// This information acts like metadata for the Everest UI to guide the users
    /// in filling out the correct Secret keys for their clusters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeys")]
    pub secret_keys: Option<DatabaseEngineSecretKeys>,
    /// EngineType stands for the supported database engines. Right now it's only pxc
    /// and psmdb. However, it can be ps, pg and any other source.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// SecretKeys contains the definition of the various Secrets that
/// the given DBEngine supports.
/// This information acts like metadata for the Everest UI to guide the users
/// in filling out the correct Secret keys for their clusters.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseEngineSecretKeys {
    /// User secret keys are used to store the details of the users.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<Vec<DatabaseEngineSecretKeysUser>>,
}

/// SecretKey defines a single Secret key.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseEngineSecretKeysUser {
    /// Description is a human-readable description of the Secret key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Name is the name of the Secret key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// DatabaseEngineStatus defines the observed state of DatabaseEngine.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseEngineStatus {
    /// Versions struct represents available versions of database engine components.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availableVersions")]
    pub available_versions: Option<DatabaseEngineStatusAvailableVersions>,
    /// OperatorUpgrade contains the status of the operator upgrade.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operatorUpgrade")]
    pub operator_upgrade: Option<DatabaseEngineStatusOperatorUpgrade>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operatorVersion")]
    pub operator_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pendingOperatorUpgrades")]
    pub pending_operator_upgrades: Option<Vec<DatabaseEngineStatusPendingOperatorUpgrades>>,
    /// EngineState represents state of engine in a k8s cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Versions struct represents available versions of database engine components.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseEngineStatusAvailableVersions {
    /// ComponentsMap is a map of database engine components.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backup: Option<BTreeMap<String, DatabaseEngineStatusAvailableVersionsBackup>>,
    /// ComponentsMap is a map of database engine components.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub engine: Option<BTreeMap<String, DatabaseEngineStatusAvailableVersionsEngine>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<BTreeMap<String, BTreeMap<String, DatabaseEngineStatusAvailableVersionsProxy>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tools: Option<BTreeMap<String, BTreeMap<String, DatabaseEngineStatusAvailableVersionsTools>>>,
}

/// ComponentsMap is a map of database engine components.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseEngineStatusAvailableVersionsBackup {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub critical: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageHash")]
    pub image_hash: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePath")]
    pub image_path: Option<String>,
    /// ComponentStatus represents status of the database engine component.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// ComponentsMap is a map of database engine components.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseEngineStatusAvailableVersionsEngine {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub critical: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageHash")]
    pub image_hash: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePath")]
    pub image_path: Option<String>,
    /// ComponentStatus represents status of the database engine component.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// ComponentsMap is a map of database engine components.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseEngineStatusAvailableVersionsProxy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub critical: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageHash")]
    pub image_hash: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePath")]
    pub image_path: Option<String>,
    /// ComponentStatus represents status of the database engine component.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// ComponentsMap is a map of database engine components.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseEngineStatusAvailableVersionsTools {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub critical: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageHash")]
    pub image_hash: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePath")]
    pub image_path: Option<String>,
    /// ComponentStatus represents status of the database engine component.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// OperatorUpgrade contains the status of the operator upgrade.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseEngineStatusOperatorUpgrade {
    /// InstallPlanRef is a reference to the InstallPlan object created for the operator upgrade.
    /// 
    /// We do not recommended approving this InstallPlan directly from the Kubernetes API.
    /// This is because this InstallPlan may also upgrade other operators in the namespace and that
    /// can have unintended consequences.
    /// This behaviour is not a bug from Everest, but an unfortunate limitation of OLM.
    /// We suggest using the Everest API/UI to handle operator upgrades, which will perform a series
    /// of checks and safely upgrade all operators in the namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installPlanRef")]
    pub install_plan_ref: Option<DatabaseEngineStatusOperatorUpgradeInstallPlanRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// UpgradePhase represents the phase of the operator upgrade.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startedAt")]
    pub started_at: Option<String>,
    /// TargetVersion is the version to which the operator should be upgraded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetVersion")]
    pub target_version: Option<String>,
}

/// InstallPlanRef is a reference to the InstallPlan object created for the operator upgrade.
/// 
/// We do not recommended approving this InstallPlan directly from the Kubernetes API.
/// This is because this InstallPlan may also upgrade other operators in the namespace and that
/// can have unintended consequences.
/// This behaviour is not a bug from Everest, but an unfortunate limitation of OLM.
/// We suggest using the Everest API/UI to handle operator upgrades, which will perform a series
/// of checks and safely upgrade all operators in the namespace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseEngineStatusOperatorUpgradeInstallPlanRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// OperatorUpgrade contains the information about the operator upgrade.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseEngineStatusPendingOperatorUpgrades {
    /// InstallPlanRef is a reference to the InstallPlan object created for the operator upgrade.
    /// 
    /// We do not recommended approving this InstallPlan directly from the Kubernetes API.
    /// This is because this InstallPlan may also upgrade other operators in the namespace and that
    /// can have unintended consequences.
    /// This behaviour is not a bug from Everest, but an unfortunate limitation of OLM.
    /// We suggest using the Everest API/UI to handle operator upgrades, which will perform a series
    /// of checks and safely upgrade all operators in the namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installPlanRef")]
    pub install_plan_ref: Option<DatabaseEngineStatusPendingOperatorUpgradesInstallPlanRef>,
    /// TargetVersion is the version to which the operator should be upgraded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetVersion")]
    pub target_version: Option<String>,
}

/// InstallPlanRef is a reference to the InstallPlan object created for the operator upgrade.
/// 
/// We do not recommended approving this InstallPlan directly from the Kubernetes API.
/// This is because this InstallPlan may also upgrade other operators in the namespace and that
/// can have unintended consequences.
/// This behaviour is not a bug from Everest, but an unfortunate limitation of OLM.
/// We suggest using the Everest API/UI to handle operator upgrades, which will perform a series
/// of checks and safely upgrade all operators in the namespace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseEngineStatusPendingOperatorUpgradesInstallPlanRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

