// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/kubeedge/kubeedge/apps.kubeedge.io/v1alpha1/edgeapplications.yaml
// kopium version: 0.22.4

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
}
use self::prelude::*;

/// Spec represents the desired behavior of EdgeApplication.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "apps.kubeedge.io", version = "v1alpha1", kind = "EdgeApplication", plural = "edgeapplications")]
#[kube(namespaced)]
#[kube(status = "EdgeApplicationStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct EdgeApplicationSpec {
    /// WorkloadScope represents which node groups the workload will be deployed in.
    #[serde(rename = "workloadScope")]
    pub workload_scope: EdgeApplicationWorkloadScope,
    /// WorkloadTemplate contains original templates of resources to be deployed
    /// as an EdgeApplication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workloadTemplate")]
    pub workload_template: Option<EdgeApplicationWorkloadTemplate>,
}

/// WorkloadScope represents which node groups the workload will be deployed in.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScope {
    /// TargetNodeGroups represents the target node groups of workload to be deployed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetNodeGroups")]
    pub target_node_groups: Option<Vec<EdgeApplicationWorkloadScopeTargetNodeGroups>>,
    /// TargetNodeLabels represents the target nodes with specified labels of workload to be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetNodeLabels")]
    pub target_node_labels: Option<Vec<EdgeApplicationWorkloadScopeTargetNodeLabels>>,
}

/// TargetNodeGroup represents the target node group of workload to be deployed, including
/// override rules to apply for this node group.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeGroups {
    /// Name represents the name of target node group
    pub name: String,
    /// Overriders represents the override rules that would apply on workload.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overriders: Option<EdgeApplicationWorkloadScopeTargetNodeGroupsOverriders>,
}

/// Overriders represents the override rules that would apply on workload.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeGroupsOverriders {
    /// ArgsOverriders represents the rules dedicated to handling container args
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "argsOverriders")]
    pub args_overriders: Option<Vec<EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersArgsOverriders>>,
    /// CommandOverriders represents the rules dedicated to handling container command
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commandOverriders")]
    pub command_overriders: Option<Vec<EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersCommandOverriders>>,
    /// EnvOverriders will override the env field of the container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envOverriders")]
    pub env_overriders: Option<Vec<EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersEnvOverriders>>,
    /// ImageOverriders represents the rules dedicated to handling image overrides.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageOverriders")]
    pub image_overriders: Option<Vec<EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersImageOverriders>>,
    /// Replicas will override the replicas field of deployment
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i64>,
    /// ResourcesOverriders will override the resources field of the container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourcesOverriders")]
    pub resources_overriders: Option<Vec<EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersResourcesOverriders>>,
}

/// CommandArgsOverrider represents the rules dedicated to handling command/args overrides.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersArgsOverriders {
    /// The name of container
    #[serde(rename = "containerName")]
    pub container_name: String,
    /// Operator represents the operator which will apply on the command/args.
    pub operator: EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersArgsOverridersOperator,
    /// Value to be applied to command/args.
    /// Items in Value which will be appended after command/args when Operator is 'add'.
    /// Items in Value which match in command/args will be deleted when Operator is 'remove'.
    /// If Value is empty, then the command/args will remain the same.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<String>>,
}

/// CommandArgsOverrider represents the rules dedicated to handling command/args overrides.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersArgsOverridersOperator {
    #[serde(rename = "add")]
    Add,
    #[serde(rename = "remove")]
    Remove,
}

/// CommandArgsOverrider represents the rules dedicated to handling command/args overrides.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersCommandOverriders {
    /// The name of container
    #[serde(rename = "containerName")]
    pub container_name: String,
    /// Operator represents the operator which will apply on the command/args.
    pub operator: EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersCommandOverridersOperator,
    /// Value to be applied to command/args.
    /// Items in Value which will be appended after command/args when Operator is 'add'.
    /// Items in Value which match in command/args will be deleted when Operator is 'remove'.
    /// If Value is empty, then the command/args will remain the same.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<String>>,
}

/// CommandArgsOverrider represents the rules dedicated to handling command/args overrides.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersCommandOverridersOperator {
    #[serde(rename = "add")]
    Add,
    #[serde(rename = "remove")]
    Remove,
}

/// EnvOverrider represents the rules dedicated to handling env overrides.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersEnvOverriders {
    /// The name of container
    #[serde(rename = "containerName")]
    pub container_name: String,
    /// Operator represents the operator which will apply on the env.
    pub operator: EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersEnvOverridersOperator,
    /// Value to be applied to env.
    /// Must not be empty when operator is 'add' or 'replace'.
    /// When the operator is 'remove', the matched value in env will be deleted
    /// and only the name of the value will be matched.
    /// If Value is empty, then the env will remain the same.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersEnvOverridersValue>>,
}

/// EnvOverrider represents the rules dedicated to handling env overrides.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersEnvOverridersOperator {
    #[serde(rename = "add")]
    Add,
    #[serde(rename = "remove")]
    Remove,
    #[serde(rename = "replace")]
    Replace,
}

/// EnvVar represents an environment variable present in a Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersEnvOverridersValue {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    /// Variable references $(VAR_NAME) are expanded
    /// using the previously defined environment variables in the container and
    /// any service environment variables. If a variable cannot be resolved,
    /// the reference in the input string will be unchanged. Double $$ are reduced
    /// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
    /// "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
    /// Escaped references will never be expanded, regardless of whether the variable
    /// exists or not.
    /// Defaults to "".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// Source for the environment variable's value. Cannot be used if value is not empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersEnvOverridersValueValueFrom>,
}

/// Source for the environment variable's value. Cannot be used if value is not empty.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersEnvOverridersValueValueFrom {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersEnvOverridersValueValueFromConfigMapKeyRef>,
    /// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
    /// spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersEnvOverridersValueValueFromFieldRef>,
    /// Selects a resource of the container: only resources limits and requests
    /// (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersEnvOverridersValueValueFromResourceFieldRef>,
    /// Selects a key of a secret in the pod's namespace
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersEnvOverridersValueValueFromSecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersEnvOverridersValueValueFromConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
/// spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersEnvOverridersValueValueFromFieldRef {
    /// Version of the schema the FieldPath is written in terms of, defaults to "v1".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Path of the field to select in the specified API version.
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Selects a resource of the container: only resources limits and requests
/// (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersEnvOverridersValueValueFromResourceFieldRef {
    /// Container name: required for volumes, optional for env vars
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    /// Specifies the output format of the exposed resources, defaults to "1"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    /// Required: resource to select
    pub resource: String,
}

/// Selects a key of a secret in the pod's namespace
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersEnvOverridersValueValueFromSecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// ImageOverrider represents the rules dedicated to handling image overrides.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersImageOverriders {
    /// Component is part of image name.
    /// Basically we presume an image can be made of '[registry/]repository[:tag]'.
    /// The registry could be:
    /// - k8s.gcr.io
    /// - fictional.registry.example:10443
    /// The repository could be:
    /// - kube-apiserver
    /// - fictional/nginx
    /// The tag cloud be:
    /// - latest
    /// - v1.19.1
    /// - @sha256:dbcc1c35ac38df41fd2f5e4130b32ffdb93ebae8b3dbe638c23575912276fc9c
    pub component: EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersImageOverridersComponent,
    /// Operator represents the operator which will apply on the image.
    pub operator: EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersImageOverridersOperator,
    /// Predicate filters images before applying the rule.
    /// 
    /// Defaults to nil, in that case, the system will automatically detect image fields if the resource type is
    /// Pod, ReplicaSet, Deployment or StatefulSet by following rule:
    ///   - Pod: /spec/containers/<N>/image
    ///   - ReplicaSet: /spec/template/spec/containers/<N>/image
    ///   - Deployment: /spec/template/spec/containers/<N>/image
    ///   - StatefulSet: /spec/template/spec/containers/<N>/image
    /// In addition, all images will be processed if the resource object has more than one containers.
    /// 
    /// If not nil, only images matches the filters will be processed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub predicate: Option<EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersImageOverridersPredicate>,
    /// Value to be applied to image.
    /// Must not be empty when operator is 'add' or 'replace'.
    /// Defaults to empty and ignored when operator is 'remove'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ImageOverrider represents the rules dedicated to handling image overrides.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersImageOverridersComponent {
    Registry,
    Repository,
    Tag,
}

/// ImageOverrider represents the rules dedicated to handling image overrides.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersImageOverridersOperator {
    #[serde(rename = "add")]
    Add,
    #[serde(rename = "remove")]
    Remove,
    #[serde(rename = "replace")]
    Replace,
}

/// Predicate filters images before applying the rule.
/// 
/// Defaults to nil, in that case, the system will automatically detect image fields if the resource type is
/// Pod, ReplicaSet, Deployment or StatefulSet by following rule:
///   - Pod: /spec/containers/<N>/image
///   - ReplicaSet: /spec/template/spec/containers/<N>/image
///   - Deployment: /spec/template/spec/containers/<N>/image
///   - StatefulSet: /spec/template/spec/containers/<N>/image
/// In addition, all images will be processed if the resource object has more than one containers.
/// 
/// If not nil, only images matches the filters will be processed.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersImageOverridersPredicate {
    /// Path indicates the path of target field
    pub path: String,
}

/// ResourcesOverrider represents the rules dedicated to handling resources overrides.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersResourcesOverriders {
    /// The name of container
    #[serde(rename = "containerName")]
    pub container_name: String,
    /// Value to be applied to resources.
    /// Must not be empty
    pub value: EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersResourcesOverridersValue,
}

/// Value to be applied to resources.
/// Must not be empty
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersResourcesOverridersValue {
    /// Claims lists the names of resources, defined in spec.resourceClaims,
    /// that are used by this container.
    /// 
    /// This is an alpha field and requires enabling the
    /// DynamicResourceAllocation feature gate.
    /// 
    /// This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersResourcesOverridersValueClaims>>,
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeGroupsOverridersResourcesOverridersValueClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of
    /// the Pod where this field is used. It makes that resource available
    /// inside a container.
    pub name: String,
    /// Request is the name chosen for a request in the referenced claim.
    /// If empty, everything from the claim is made available, otherwise
    /// only the result of this request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
}

/// TargetNodeLabels represents the target nodes with specified labels of workload to be deployed, including
/// override rules to apply for the node.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeLabels {
    /// LabelSelector represents the label selectors used to match nodes for workload deployment.
    /// It defines the criteria for selecting the target nodes based on their labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<EdgeApplicationWorkloadScopeTargetNodeLabelsLabelSelector>,
    /// Overriders represents the override rules that would apply to the workload for the nodes
    /// selected by the label selector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overriders: Option<EdgeApplicationWorkloadScopeTargetNodeLabelsOverriders>,
}

/// LabelSelector represents the label selectors used to match nodes for workload deployment.
/// It defines the criteria for selecting the target nodes based on their labels.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeLabelsLabelSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<EdgeApplicationWorkloadScopeTargetNodeLabelsLabelSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeLabelsLabelSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Overriders represents the override rules that would apply to the workload for the nodes
/// selected by the label selector.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeLabelsOverriders {
    /// ArgsOverriders represents the rules dedicated to handling container args
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "argsOverriders")]
    pub args_overriders: Option<Vec<EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersArgsOverriders>>,
    /// CommandOverriders represents the rules dedicated to handling container command
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commandOverriders")]
    pub command_overriders: Option<Vec<EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersCommandOverriders>>,
    /// EnvOverriders will override the env field of the container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envOverriders")]
    pub env_overriders: Option<Vec<EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersEnvOverriders>>,
    /// ImageOverriders represents the rules dedicated to handling image overrides.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageOverriders")]
    pub image_overriders: Option<Vec<EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersImageOverriders>>,
    /// Replicas will override the replicas field of deployment
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i64>,
    /// ResourcesOverriders will override the resources field of the container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourcesOverriders")]
    pub resources_overriders: Option<Vec<EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersResourcesOverriders>>,
}

/// CommandArgsOverrider represents the rules dedicated to handling command/args overrides.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersArgsOverriders {
    /// The name of container
    #[serde(rename = "containerName")]
    pub container_name: String,
    /// Operator represents the operator which will apply on the command/args.
    pub operator: EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersArgsOverridersOperator,
    /// Value to be applied to command/args.
    /// Items in Value which will be appended after command/args when Operator is 'add'.
    /// Items in Value which match in command/args will be deleted when Operator is 'remove'.
    /// If Value is empty, then the command/args will remain the same.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<String>>,
}

/// CommandArgsOverrider represents the rules dedicated to handling command/args overrides.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersArgsOverridersOperator {
    #[serde(rename = "add")]
    Add,
    #[serde(rename = "remove")]
    Remove,
}

/// CommandArgsOverrider represents the rules dedicated to handling command/args overrides.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersCommandOverriders {
    /// The name of container
    #[serde(rename = "containerName")]
    pub container_name: String,
    /// Operator represents the operator which will apply on the command/args.
    pub operator: EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersCommandOverridersOperator,
    /// Value to be applied to command/args.
    /// Items in Value which will be appended after command/args when Operator is 'add'.
    /// Items in Value which match in command/args will be deleted when Operator is 'remove'.
    /// If Value is empty, then the command/args will remain the same.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<String>>,
}

/// CommandArgsOverrider represents the rules dedicated to handling command/args overrides.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersCommandOverridersOperator {
    #[serde(rename = "add")]
    Add,
    #[serde(rename = "remove")]
    Remove,
}

/// EnvOverrider represents the rules dedicated to handling env overrides.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersEnvOverriders {
    /// The name of container
    #[serde(rename = "containerName")]
    pub container_name: String,
    /// Operator represents the operator which will apply on the env.
    pub operator: EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersEnvOverridersOperator,
    /// Value to be applied to env.
    /// Must not be empty when operator is 'add' or 'replace'.
    /// When the operator is 'remove', the matched value in env will be deleted
    /// and only the name of the value will be matched.
    /// If Value is empty, then the env will remain the same.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersEnvOverridersValue>>,
}

/// EnvOverrider represents the rules dedicated to handling env overrides.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersEnvOverridersOperator {
    #[serde(rename = "add")]
    Add,
    #[serde(rename = "remove")]
    Remove,
    #[serde(rename = "replace")]
    Replace,
}

/// EnvVar represents an environment variable present in a Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersEnvOverridersValue {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    /// Variable references $(VAR_NAME) are expanded
    /// using the previously defined environment variables in the container and
    /// any service environment variables. If a variable cannot be resolved,
    /// the reference in the input string will be unchanged. Double $$ are reduced
    /// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
    /// "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
    /// Escaped references will never be expanded, regardless of whether the variable
    /// exists or not.
    /// Defaults to "".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// Source for the environment variable's value. Cannot be used if value is not empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersEnvOverridersValueValueFrom>,
}

/// Source for the environment variable's value. Cannot be used if value is not empty.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersEnvOverridersValueValueFrom {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersEnvOverridersValueValueFromConfigMapKeyRef>,
    /// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
    /// spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersEnvOverridersValueValueFromFieldRef>,
    /// Selects a resource of the container: only resources limits and requests
    /// (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersEnvOverridersValueValueFromResourceFieldRef>,
    /// Selects a key of a secret in the pod's namespace
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersEnvOverridersValueValueFromSecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersEnvOverridersValueValueFromConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
/// spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersEnvOverridersValueValueFromFieldRef {
    /// Version of the schema the FieldPath is written in terms of, defaults to "v1".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Path of the field to select in the specified API version.
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Selects a resource of the container: only resources limits and requests
/// (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersEnvOverridersValueValueFromResourceFieldRef {
    /// Container name: required for volumes, optional for env vars
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    /// Specifies the output format of the exposed resources, defaults to "1"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    /// Required: resource to select
    pub resource: String,
}

/// Selects a key of a secret in the pod's namespace
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersEnvOverridersValueValueFromSecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// ImageOverrider represents the rules dedicated to handling image overrides.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersImageOverriders {
    /// Component is part of image name.
    /// Basically we presume an image can be made of '[registry/]repository[:tag]'.
    /// The registry could be:
    /// - k8s.gcr.io
    /// - fictional.registry.example:10443
    /// The repository could be:
    /// - kube-apiserver
    /// - fictional/nginx
    /// The tag cloud be:
    /// - latest
    /// - v1.19.1
    /// - @sha256:dbcc1c35ac38df41fd2f5e4130b32ffdb93ebae8b3dbe638c23575912276fc9c
    pub component: EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersImageOverridersComponent,
    /// Operator represents the operator which will apply on the image.
    pub operator: EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersImageOverridersOperator,
    /// Predicate filters images before applying the rule.
    /// 
    /// Defaults to nil, in that case, the system will automatically detect image fields if the resource type is
    /// Pod, ReplicaSet, Deployment or StatefulSet by following rule:
    ///   - Pod: /spec/containers/<N>/image
    ///   - ReplicaSet: /spec/template/spec/containers/<N>/image
    ///   - Deployment: /spec/template/spec/containers/<N>/image
    ///   - StatefulSet: /spec/template/spec/containers/<N>/image
    /// In addition, all images will be processed if the resource object has more than one containers.
    /// 
    /// If not nil, only images matches the filters will be processed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub predicate: Option<EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersImageOverridersPredicate>,
    /// Value to be applied to image.
    /// Must not be empty when operator is 'add' or 'replace'.
    /// Defaults to empty and ignored when operator is 'remove'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ImageOverrider represents the rules dedicated to handling image overrides.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersImageOverridersComponent {
    Registry,
    Repository,
    Tag,
}

/// ImageOverrider represents the rules dedicated to handling image overrides.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersImageOverridersOperator {
    #[serde(rename = "add")]
    Add,
    #[serde(rename = "remove")]
    Remove,
    #[serde(rename = "replace")]
    Replace,
}

/// Predicate filters images before applying the rule.
/// 
/// Defaults to nil, in that case, the system will automatically detect image fields if the resource type is
/// Pod, ReplicaSet, Deployment or StatefulSet by following rule:
///   - Pod: /spec/containers/<N>/image
///   - ReplicaSet: /spec/template/spec/containers/<N>/image
///   - Deployment: /spec/template/spec/containers/<N>/image
///   - StatefulSet: /spec/template/spec/containers/<N>/image
/// In addition, all images will be processed if the resource object has more than one containers.
/// 
/// If not nil, only images matches the filters will be processed.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersImageOverridersPredicate {
    /// Path indicates the path of target field
    pub path: String,
}

/// ResourcesOverrider represents the rules dedicated to handling resources overrides.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersResourcesOverriders {
    /// The name of container
    #[serde(rename = "containerName")]
    pub container_name: String,
    /// Value to be applied to resources.
    /// Must not be empty
    pub value: EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersResourcesOverridersValue,
}

/// Value to be applied to resources.
/// Must not be empty
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersResourcesOverridersValue {
    /// Claims lists the names of resources, defined in spec.resourceClaims,
    /// that are used by this container.
    /// 
    /// This is an alpha field and requires enabling the
    /// DynamicResourceAllocation feature gate.
    /// 
    /// This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersResourcesOverridersValueClaims>>,
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadScopeTargetNodeLabelsOverridersResourcesOverridersValueClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of
    /// the Pod where this field is used. It makes that resource available
    /// inside a container.
    pub name: String,
    /// Request is the name chosen for a request in the referenced claim.
    /// If empty, everything from the claim is made available, otherwise
    /// only the result of this request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
}

/// WorkloadTemplate contains original templates of resources to be deployed
/// as an EdgeApplication.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationWorkloadTemplate {
    /// Manifests represent a list of Kubernetes resources to be deployed on the managed node groups.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub manifests: Option<Vec<BTreeMap<String, serde_json::Value>>>,
}

/// Status represents the status of PropagationStatus.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationStatus {
    /// WorkloadStatus contains running statuses of generated resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workloadStatus")]
    pub workload_status: Option<Vec<EdgeApplicationStatusWorkloadStatus>>,
}

/// ManifestStatus contains running status of a specific manifest in spec.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationStatusWorkloadStatus {
    /// Conditions contain the different condition statuses for this manifest.
    /// Valid condition types are:
    /// 1. Processing: this workload is under processing and the current state of manifest does not match the desired.
    /// 2. Available: the current status of this workload matches the desired.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<EdgeApplicationStatusWorkloadStatusConditions>,
    /// Identifier represents the identity of a resource linking to manifests in spec.
    pub identifier: EdgeApplicationStatusWorkloadStatusIdentifier,
}

/// ManifestStatus contains running status of a specific manifest in spec.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum EdgeApplicationStatusWorkloadStatusConditions {
    Processing,
    Available,
}

/// Identifier represents the identity of a resource linking to manifests in spec.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct EdgeApplicationStatusWorkloadStatusIdentifier {
    /// Group is the group of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// Kind is the kind of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name is the name of the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace is the namespace of the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Ordinal represents an index in manifests list, so the condition can still be linked
    /// to a manifest even though manifest cannot be parsed successfully.
    pub ordinal: i64,
    /// Resource is the resource type of the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
    /// Version is the version of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

