// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/flanksource/canary-checker/canaries.flanksource.com/v1/topologies.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "canaries.flanksource.com", version = "v1", kind = "Topology", plural = "topologies")]
#[kube(namespaced)]
#[kube(status = "TopologyStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct TopologySpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<TopologyComponents>>,
    /// Lookup and associate config items with this component
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<Vec<TopologyConfigs>>,
    /// Specify the catalog tag (& optionally the tag selector) to group
    /// the topology.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupBy")]
    pub group_by: Option<TopologyGroupBy>,
    /// statusExpr allows defining a cel expression to evaluate the status of a component
    /// based on the summary.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthExpr")]
    pub health_expr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<TopologyId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// Properties are created once the full component tree is created, property lookup functions
    /// can return a map of coomponent name => properties to allow for bulk property lookups
    /// being applied to multiple components in the tree
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<TopologyProperties>>,
    /// Agent will push topology to specified path
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub push: Option<TopologyPush>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
    /// statusExpr allows defining a cel expression to evaluate the status of a component
    /// based on the summary.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusExpr")]
    pub status_expr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tooltip: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// ComponentSpec defines the specification for a component.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyComponents {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub checks: Option<Vec<TopologyComponentsChecks>>,
    /// Create new child components
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<TopologyComponentsComponents>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configID")]
    pub config_id: Option<String>,
    /// Lookup and associate config items with this component
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<Vec<TopologyComponentsConfigs>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalID")]
    pub external_id: Option<String>,
    /// Only applies when using lookup, when specified the components and properties
    /// specified under ForEach will be templated using the components returned by the lookup
    /// ${.properties} can be used to reference the properties of the component
    /// ${.component} can be used to reference the component itself
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forEach")]
    pub for_each: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health: Option<String>,
    /// healthExpr allows defining a cel expression to evaluate the health of a component
    /// based on the summary.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthExpr")]
    pub health_expr: Option<String>,
    /// If set to true, do not display in UI
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hidden: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<TopologyComponentsId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// The lifecycle state of the component e.g. production, staging, dev, etc.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lifecycle: Option<String>,
    /// Logs is a list of logs selector for apm-hub.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logs: Option<Vec<TopologyComponentsLogs>>,
    /// Lookup component definitions from an external source, use the
    /// forEach property to iterate over the results to further enrich each component.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lookup: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// Reference to populate parent_id
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parentLookup")]
    pub parent_lookup: Option<TopologyComponentsParentLookup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<TopologyComponentsProperties>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub relationships: Option<Vec<TopologyComponentsRelationships>>,
    /// Lookup and associcate other components with this component
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selectors: Option<Vec<TopologyComponentsSelectors>>,
    /// statusExpr allows defining a cel expression to evaluate the status of a component
    /// based on the summary.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusExpr")]
    pub status_expr: Option<String>,
    /// Summary is the health, incidents, insights & check summary
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub summary: Option<TopologyComponentsSummary>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tooltip: Option<String>,
    /// The type of component, e.g. service, API, website, library, database, etc.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyComponentsChecks {
    /// CanarySpec defines the desired state of Canary
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<TopologyComponentsChecksSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyComponentsChecksSelector {
    /// Agent can be the agent id or the name of the agent.
    ///  Additionally, the special "self" value can be used to select resources without an agent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agent: Option<String>,
    /// Cache directives
    ///  'no-cache' (should not fetch from cache but can be cached)
    ///  'no-store' (should not cache)
    ///  'max-age=X' (cache for X duration)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelector")]
    pub field_selector: Option<String>,
    /// Health filters resources by the health.
    /// Multiple healths can be provided separated by comma.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeDeleted")]
    pub include_deleted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// Search query that applies to the resource name, tag & labels.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    /// Statuses filter resources by the status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagSelector")]
    pub tag_selector: Option<String>,
    /// Types filter resources by the type
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyComponentsComponents {
}

/// ConfigQuery is used to look up and associate
/// config items with a component.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyComponentsConfigs {
    /// Agent can be the agent id or the name of the agent.
    ///  Additionally, the special "self" value can be used to select resources without an agent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agent: Option<String>,
    /// Cache directives
    ///  'no-cache' (should not fetch from cache but can be cached)
    ///  'no-store' (should not cache)
    ///  'max-age=X' (cache for X duration)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache: Option<String>,
    /// Deprecated. Use `fieldSelector (config_class=)`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
    /// Deprecated. Use `fieldSelector (external_id=)`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelector")]
    pub field_selector: Option<String>,
    /// Health filters resources by the health.
    /// Multiple healths can be provided separated by comma.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeDeleted")]
    pub include_deleted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// Search query that applies to the resource name, tag & labels.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    /// Statuses filter resources by the status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagSelector")]
    pub tag_selector: Option<String>,
    /// Deprecated. Use `labelSelector`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
    /// Deprecated. Use `types`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// Types filter resources by the type
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyComponentsId {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub javascript: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    pub json_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyComponentsLogs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Reference to populate parent_id
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyComponentsParentLookup {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalID")]
    pub external_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyComponentsProperties {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configLookup")]
    pub config_lookup: Option<TopologyComponentsPropertiesConfigLookup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hidden: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransition")]
    pub last_transition: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<Vec<TopologyComponentsPropertiesLinks>>,
    /// CanarySpec defines the desired state of Canary
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lookup: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub summary: Option<TopologyComponentsPropertiesSummary>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tooltip: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// e.g. milliseconds, bytes, millicores, epoch etc.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyComponentsPropertiesConfigLookup {
    /// Lookup a config by it
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<TopologyComponentsPropertiesConfigLookupConfig>,
    /// Apply transformations to the value
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub display: Option<TopologyComponentsPropertiesConfigLookupDisplay>,
    /// A JSONPath expression to lookup the value in the config
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

/// Lookup a config by it
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyComponentsPropertiesConfigLookupConfig {
    /// Agent can be the agent id or the name of the agent.
    ///  Additionally, the special "self" value can be used to select resources without an agent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agent: Option<String>,
    /// Cache directives
    ///  'no-cache' (should not fetch from cache but can be cached)
    ///  'no-store' (should not cache)
    ///  'max-age=X' (cache for X duration)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache: Option<String>,
    /// Deprecated. Use `fieldSelector (config_class=)`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
    /// Deprecated. Use `fieldSelector (external_id=)`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelector")]
    pub field_selector: Option<String>,
    /// Health filters resources by the health.
    /// Multiple healths can be provided separated by comma.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeDeleted")]
    pub include_deleted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// Search query that applies to the resource name, tag & labels.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    /// Statuses filter resources by the status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagSelector")]
    pub tag_selector: Option<String>,
    /// Deprecated. Use `labelSelector`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
    /// Deprecated. Use `types`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// Types filter resources by the type
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<String>>,
}

/// Apply transformations to the value
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyComponentsPropertiesConfigLookupDisplay {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub javascript: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    pub json_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyComponentsPropertiesLinks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tooltip: Option<String>,
    /// e.g. documentation, support, playbook
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyComponentsPropertiesSummary {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub javascript: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    pub json_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyComponentsRelationships {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    /// The type of relationship, e.g. dependsOn, subcomponentOf, providesApis, consumesApis
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyComponentsSelectors {
    /// Agent can be the agent id or the name of the agent.
    ///  Additionally, the special "self" value can be used to select resources without an agent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agent: Option<String>,
    /// Cache directives
    ///  'no-cache' (should not fetch from cache but can be cached)
    ///  'no-store' (should not cache)
    ///  'max-age=X' (cache for X duration)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelector")]
    pub field_selector: Option<String>,
    /// Health filters resources by the health.
    /// Multiple healths can be provided separated by comma.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeDeleted")]
    pub include_deleted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// Search query that applies to the resource name, tag & labels.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    /// Statuses filter resources by the status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagSelector")]
    pub tag_selector: Option<String>,
    /// Types filter resources by the type
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<String>>,
}

/// Summary is the health, incidents, insights & check summary
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyComponentsSummary {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub checks: Option<BTreeMap<String, i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub healthy: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub incidents: Option<BTreeMap<String, BTreeMap<String, i64>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insights: Option<BTreeMap<String, BTreeMap<String, i64>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unhealthy: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub warning: Option<i64>,
}

/// ConfigQuery is used to look up and associate
/// config items with a component.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyConfigs {
    /// Agent can be the agent id or the name of the agent.
    ///  Additionally, the special "self" value can be used to select resources without an agent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agent: Option<String>,
    /// Cache directives
    ///  'no-cache' (should not fetch from cache but can be cached)
    ///  'no-store' (should not cache)
    ///  'max-age=X' (cache for X duration)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache: Option<String>,
    /// Deprecated. Use `fieldSelector (config_class=)`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
    /// Deprecated. Use `fieldSelector (external_id=)`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelector")]
    pub field_selector: Option<String>,
    /// Health filters resources by the health.
    /// Multiple healths can be provided separated by comma.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeDeleted")]
    pub include_deleted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// Search query that applies to the resource name, tag & labels.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    /// Statuses filter resources by the status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagSelector")]
    pub tag_selector: Option<String>,
    /// Deprecated. Use `labelSelector`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
    /// Deprecated. Use `types`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// Types filter resources by the type
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<String>>,
}

/// Specify the catalog tag (& optionally the tag selector) to group
/// the topology.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyGroupBy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<TopologyGroupBySelector>,
    pub tag: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyGroupBySelector {
    /// Agent can be the agent id or the name of the agent.
    ///  Additionally, the special "self" value can be used to select resources without an agent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agent: Option<String>,
    /// Cache directives
    ///  'no-cache' (should not fetch from cache but can be cached)
    ///  'no-store' (should not cache)
    ///  'max-age=X' (cache for X duration)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelector")]
    pub field_selector: Option<String>,
    /// Health filters resources by the health.
    /// Multiple healths can be provided separated by comma.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeDeleted")]
    pub include_deleted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// Search query that applies to the resource name, tag & labels.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    /// Statuses filter resources by the status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagSelector")]
    pub tag_selector: Option<String>,
    /// Types filter resources by the type
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyId {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub javascript: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    pub json_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyProperties {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configLookup")]
    pub config_lookup: Option<TopologyPropertiesConfigLookup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hidden: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransition")]
    pub last_transition: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<Vec<TopologyPropertiesLinks>>,
    /// CanarySpec defines the desired state of Canary
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lookup: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub summary: Option<TopologyPropertiesSummary>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tooltip: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// e.g. milliseconds, bytes, millicores, epoch etc.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPropertiesConfigLookup {
    /// Lookup a config by it
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<TopologyPropertiesConfigLookupConfig>,
    /// Apply transformations to the value
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub display: Option<TopologyPropertiesConfigLookupDisplay>,
    /// A JSONPath expression to lookup the value in the config
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

/// Lookup a config by it
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPropertiesConfigLookupConfig {
    /// Agent can be the agent id or the name of the agent.
    ///  Additionally, the special "self" value can be used to select resources without an agent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agent: Option<String>,
    /// Cache directives
    ///  'no-cache' (should not fetch from cache but can be cached)
    ///  'no-store' (should not cache)
    ///  'max-age=X' (cache for X duration)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache: Option<String>,
    /// Deprecated. Use `fieldSelector (config_class=)`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
    /// Deprecated. Use `fieldSelector (external_id=)`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelector")]
    pub field_selector: Option<String>,
    /// Health filters resources by the health.
    /// Multiple healths can be provided separated by comma.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeDeleted")]
    pub include_deleted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// Search query that applies to the resource name, tag & labels.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    /// Statuses filter resources by the status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagSelector")]
    pub tag_selector: Option<String>,
    /// Deprecated. Use `labelSelector`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
    /// Deprecated. Use `types`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// Types filter resources by the type
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<String>>,
}

/// Apply transformations to the value
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPropertiesConfigLookupDisplay {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub javascript: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    pub json_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPropertiesLinks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tooltip: Option<String>,
    /// e.g. documentation, support, playbook
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPropertiesSummary {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub javascript: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    pub json_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
}

/// Agent will push topology to specified path
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPush {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bearer: Option<TopologyPushBearer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub digest: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ntlm: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ntlmv2: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth: Option<TopologyPushOauth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<TopologyPushPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<TopologyPushTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<TopologyPushUsername>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushBearer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<TopologyPushBearerValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushBearerValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<TopologyPushBearerValueFromConfigMapKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "helmRef")]
    pub helm_ref: Option<TopologyPushBearerValueFromHelmRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<TopologyPushBearerValueFromSecretKeyRef>,
    /// ServiceAccount specifies the service account whose token should be fetched
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushBearerValueFromConfigMapKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushBearerValueFromHelmRef {
    /// Key is a JSONPath expression used to fetch the key from the merged JSON.
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushBearerValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushOauth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientID")]
    pub client_id: Option<TopologyPushOauthClientId>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSecret")]
    pub client_secret: Option<TopologyPushOauthClientSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub params: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenURL")]
    pub token_url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushOauthClientId {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<TopologyPushOauthClientIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushOauthClientIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<TopologyPushOauthClientIdValueFromConfigMapKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "helmRef")]
    pub helm_ref: Option<TopologyPushOauthClientIdValueFromHelmRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<TopologyPushOauthClientIdValueFromSecretKeyRef>,
    /// ServiceAccount specifies the service account whose token should be fetched
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushOauthClientIdValueFromConfigMapKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushOauthClientIdValueFromHelmRef {
    /// Key is a JSONPath expression used to fetch the key from the merged JSON.
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushOauthClientIdValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushOauthClientSecret {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<TopologyPushOauthClientSecretValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushOauthClientSecretValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<TopologyPushOauthClientSecretValueFromConfigMapKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "helmRef")]
    pub helm_ref: Option<TopologyPushOauthClientSecretValueFromHelmRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<TopologyPushOauthClientSecretValueFromSecretKeyRef>,
    /// ServiceAccount specifies the service account whose token should be fetched
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushOauthClientSecretValueFromConfigMapKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushOauthClientSecretValueFromHelmRef {
    /// Key is a JSONPath expression used to fetch the key from the merged JSON.
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushOauthClientSecretValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushPassword {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<TopologyPushPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<TopologyPushPasswordValueFromConfigMapKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "helmRef")]
    pub helm_ref: Option<TopologyPushPasswordValueFromHelmRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<TopologyPushPasswordValueFromSecretKeyRef>,
    /// ServiceAccount specifies the service account whose token should be fetched
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushPasswordValueFromConfigMapKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushPasswordValueFromHelmRef {
    /// Key is a JSONPath expression used to fetch the key from the merged JSON.
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushTls {
    /// PEM encoded certificate of the CA to verify the server certificate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<TopologyPushTlsCa>,
    /// PEM encoded client certificate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<TopologyPushTlsCert>,
    /// HandshakeTimeout defaults to 10 seconds
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "handshakeTimeout")]
    pub handshake_timeout: Option<i64>,
    /// InsecureSkipVerify controls whether a client verifies the server's
    /// certificate chain and host name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    /// PEM encoded client private key
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<TopologyPushTlsKey>,
}

/// PEM encoded certificate of the CA to verify the server certificate
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushTlsCa {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<TopologyPushTlsCaValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushTlsCaValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<TopologyPushTlsCaValueFromConfigMapKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "helmRef")]
    pub helm_ref: Option<TopologyPushTlsCaValueFromHelmRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<TopologyPushTlsCaValueFromSecretKeyRef>,
    /// ServiceAccount specifies the service account whose token should be fetched
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushTlsCaValueFromConfigMapKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushTlsCaValueFromHelmRef {
    /// Key is a JSONPath expression used to fetch the key from the merged JSON.
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushTlsCaValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PEM encoded client certificate
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushTlsCert {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<TopologyPushTlsCertValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushTlsCertValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<TopologyPushTlsCertValueFromConfigMapKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "helmRef")]
    pub helm_ref: Option<TopologyPushTlsCertValueFromHelmRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<TopologyPushTlsCertValueFromSecretKeyRef>,
    /// ServiceAccount specifies the service account whose token should be fetched
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushTlsCertValueFromConfigMapKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushTlsCertValueFromHelmRef {
    /// Key is a JSONPath expression used to fetch the key from the merged JSON.
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushTlsCertValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PEM encoded client private key
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushTlsKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<TopologyPushTlsKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushTlsKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<TopologyPushTlsKeyValueFromConfigMapKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "helmRef")]
    pub helm_ref: Option<TopologyPushTlsKeyValueFromHelmRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<TopologyPushTlsKeyValueFromSecretKeyRef>,
    /// ServiceAccount specifies the service account whose token should be fetched
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushTlsKeyValueFromConfigMapKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushTlsKeyValueFromHelmRef {
    /// Key is a JSONPath expression used to fetch the key from the merged JSON.
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushTlsKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushUsername {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<TopologyPushUsernameValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushUsernameValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<TopologyPushUsernameValueFromConfigMapKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "helmRef")]
    pub helm_ref: Option<TopologyPushUsernameValueFromHelmRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<TopologyPushUsernameValueFromSecretKeyRef>,
    /// ServiceAccount specifies the service account whose token should be fetched
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushUsernameValueFromConfigMapKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushUsernameValueFromHelmRef {
    /// Key is a JSONPath expression used to fetch the key from the merged JSON.
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyPushUsernameValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TopologyStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentID")]
    pub persistent_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

