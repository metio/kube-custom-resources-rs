// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/flanksource/canary-checker/canaries.flanksource.com/v1/components.yaml
// kopium version: 0.22.4

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// ComponentSpec defines the specification for a component.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "canaries.flanksource.com", version = "v1", kind = "Component", plural = "components")]
#[kube(namespaced)]
#[kube(status = "ComponentStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ComponentSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub checks: Option<Vec<ComponentChecks>>,
    /// Create new child components
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<ComponentComponents>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configID")]
    pub config_id: Option<String>,
    /// Lookup and associate config items with this component
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<Vec<ComponentConfigs>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalID")]
    pub external_id: Option<String>,
    /// Only applies when using lookup, when specified the components and properties
    /// specified under ForEach will be templated using the components returned by the lookup
    /// ${.properties} can be used to reference the properties of the component
    /// ${.component} can be used to reference the component itself
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forEach")]
    pub for_each: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health: Option<String>,
    /// healthExpr allows defining a cel expression to evaluate the health of a component
    /// based on the summary.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthExpr")]
    pub health_expr: Option<String>,
    /// If set to true, do not display in UI
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hidden: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<ComponentId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// The lifecycle state of the component e.g. production, staging, dev, etc.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lifecycle: Option<String>,
    /// Logs is a list of logs selector for apm-hub.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logs: Option<Vec<ComponentLogs>>,
    /// Lookup component definitions from an external source, use the
    /// forEach property to iterate over the results to further enrich each component.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lookup: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// Reference to populate parent_id
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parentLookup")]
    pub parent_lookup: Option<ComponentParentLookup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<ComponentProperties>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub relationships: Option<Vec<ComponentRelationships>>,
    /// Lookup and associcate other components with this component
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selectors: Option<Vec<ComponentSelectors>>,
    /// statusExpr allows defining a cel expression to evaluate the status of a component
    /// based on the summary.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusExpr")]
    pub status_expr: Option<String>,
    /// Summary is the health, incidents, insights & check summary
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub summary: Option<ComponentSummary>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tooltip: Option<String>,
    /// The type of component, e.g. service, API, website, library, database, etc.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ComponentChecks {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ComponentComponents {
}

/// ConfigQuery is used to look up and associate
/// config items with a component.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ComponentConfigs {
    /// Agent can be the agent id or the name of the agent.
    ///  Additionally, the special "self" value can be used to select resources without an agent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agent: Option<String>,
    /// Cache directives
    ///  'no-cache' (should not fetch from cache but can be cached)
    ///  'no-store' (should not cache)
    ///  'max-age=X' (cache for X duration)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache: Option<String>,
    /// Deprecated. Use `fieldSelector (config_class=)`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
    /// Deprecated. Use `fieldSelector (external_id=)`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelector")]
    pub field_selector: Option<String>,
    /// Health filters resources by the health.
    /// Multiple healths can be provided separated by comma.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeDeleted")]
    pub include_deleted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// Search query that applies to the resource name, tag & labels.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    /// Statuses filter resources by the status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagSelector")]
    pub tag_selector: Option<String>,
    /// Deprecated. Use `labelSelector`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
    /// Deprecated. Use `types`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// Types filter resources by the type
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ComponentId {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub javascript: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    pub json_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ComponentLogs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Reference to populate parent_id
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ComponentParentLookup {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalID")]
    pub external_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ComponentProperties {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configLookup")]
    pub config_lookup: Option<ComponentPropertiesConfigLookup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hidden: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransition")]
    pub last_transition: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<Vec<ComponentPropertiesLinks>>,
    /// CanarySpec defines the desired state of Canary
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lookup: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub summary: Option<ComponentPropertiesSummary>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tooltip: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// e.g. milliseconds, bytes, millicores, epoch etc.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ComponentPropertiesConfigLookup {
    /// Lookup a config by it
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<ComponentPropertiesConfigLookupConfig>,
    /// Apply transformations to the value
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub display: Option<ComponentPropertiesConfigLookupDisplay>,
    /// A JSONPath expression to lookup the value in the config
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

/// Lookup a config by it
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ComponentPropertiesConfigLookupConfig {
    /// Agent can be the agent id or the name of the agent.
    ///  Additionally, the special "self" value can be used to select resources without an agent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agent: Option<String>,
    /// Cache directives
    ///  'no-cache' (should not fetch from cache but can be cached)
    ///  'no-store' (should not cache)
    ///  'max-age=X' (cache for X duration)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache: Option<String>,
    /// Deprecated. Use `fieldSelector (config_class=)`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
    /// Deprecated. Use `fieldSelector (external_id=)`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelector")]
    pub field_selector: Option<String>,
    /// Health filters resources by the health.
    /// Multiple healths can be provided separated by comma.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeDeleted")]
    pub include_deleted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// Search query that applies to the resource name, tag & labels.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    /// Statuses filter resources by the status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagSelector")]
    pub tag_selector: Option<String>,
    /// Deprecated. Use `labelSelector`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
    /// Deprecated. Use `types`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// Types filter resources by the type
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<String>>,
}

/// Apply transformations to the value
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ComponentPropertiesConfigLookupDisplay {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub javascript: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    pub json_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ComponentPropertiesLinks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tooltip: Option<String>,
    /// e.g. documentation, support, playbook
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ComponentPropertiesSummary {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub javascript: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    pub json_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ComponentRelationships {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    /// The type of relationship, e.g. dependsOn, subcomponentOf, providesApis, consumesApis
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ComponentSelectors {
    /// Agent can be the agent id or the name of the agent.
    ///  Additionally, the special "self" value can be used to select resources without an agent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agent: Option<String>,
    /// Cache directives
    ///  'no-cache' (should not fetch from cache but can be cached)
    ///  'no-store' (should not cache)
    ///  'max-age=X' (cache for X duration)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelector")]
    pub field_selector: Option<String>,
    /// Health filters resources by the health.
    /// Multiple healths can be provided separated by comma.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeDeleted")]
    pub include_deleted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// Search query that applies to the resource name, tag & labels.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    /// Statuses filter resources by the status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagSelector")]
    pub tag_selector: Option<String>,
    /// Types filter resources by the type
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<String>>,
}

/// Summary is the health, incidents, insights & check summary
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ComponentSummary {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub checks: Option<BTreeMap<String, i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub healthy: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub incidents: Option<BTreeMap<String, BTreeMap<String, i64>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insights: Option<BTreeMap<String, BTreeMap<String, i64>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unhealthy: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub warning: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ComponentStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

