// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/Altinity/clickhouse-operator/clickhouse.altinity.com/v1/clickhouseoperatorconfigurations.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// Allows to define settings of the clickhouse-operator.
/// More info: <https://github.com/Altinity/clickhouse-operator/blob/master/config/config.yaml>
/// Check into etc-clickhouse-operator* ConfigMaps if you need more control
/// 
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "clickhouse.altinity.com", version = "v1", kind = "ClickHouseOperatorConfiguration", plural = "clickhouseoperatorconfigurations")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ClickHouseOperatorConfigurationSpec {
    /// defines which metadata.annotations items will include or exclude during render StatefulSet, Pod, PVC resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotation: Option<ClickHouseOperatorConfigurationAnnotation>,
    /// Clickhouse related parameters used by clickhouse-operator
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clickhouse: Option<ClickHouseOperatorConfigurationClickhouse>,
    /// defines which metadata.labels will include or exclude during render StatefulSet, Pod, PVC resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<ClickHouseOperatorConfigurationLabel>,
    /// allow setup clickhouse-operator logger behavior
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logger: Option<ClickHouseOperatorConfigurationLogger>,
    /// defines metrics exporter options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics: Option<ClickHouseOperatorConfigurationMetrics>,
    /// define pod specific parameters
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod: Option<ClickHouseOperatorConfigurationPod>,
    /// allow tuning reconciling process
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reconcile: Option<ClickHouseOperatorConfigurationReconcile>,
    /// define StatefulSet-specific parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statefulSet")]
    pub stateful_set: Option<ClickHouseOperatorConfigurationStatefulSet>,
    /// defines status options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<ClickHouseOperatorConfigurationStatus>,
    /// Parameters which are used if you want to generate ClickHouseInstallationTemplate custom resources from files which are stored inside clickhouse-operator deployment
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ClickHouseOperatorConfigurationTemplate>,
    /// Parameters for watch kubernetes resources which used by clickhouse-operator deployment
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub watch: Option<ClickHouseOperatorConfigurationWatch>,
}

/// defines which metadata.annotations items will include or exclude during render StatefulSet, Pod, PVC resources
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationAnnotation {
    /// When propagating labels from the chi's `metadata.annotations` section to child objects' `metadata.annotations`,
    /// exclude annotations with names from the following list
    /// 
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Vec<String>>,
    /// When propagating labels from the chi's `metadata.annotations` section to child objects' `metadata.annotations`,
    /// include annotations with names from the following list
    /// 
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<Vec<String>>,
}

/// Clickhouse related parameters used by clickhouse-operator
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationClickhouse {
    /// parameters which use for connect to clickhouse from clickhouse-operator deployment
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub access: Option<ClickHouseOperatorConfigurationClickhouseAccess>,
    /// Configuration addons specifies additional settings
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addons: Option<ClickHouseOperatorConfigurationClickhouseAddons>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<ClickHouseOperatorConfigurationClickhouseConfiguration>,
    /// Configuration restart policy describes what configuration changes require ClickHouse restart
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configurationRestartPolicy")]
    pub configuration_restart_policy: Option<ClickHouseOperatorConfigurationClickhouseConfigurationRestartPolicy>,
    /// parameters which use for connect to fetch metrics from clickhouse by clickhouse-operator
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics: Option<ClickHouseOperatorConfigurationClickhouseMetrics>,
}

/// parameters which use for connect to clickhouse from clickhouse-operator deployment
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationClickhouseAccess {
    /// ClickHouse password to be used by operator to connect to ClickHouse instances, deprecated, use chCredentialsSecretName
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// Port to be used by operator to connect to ClickHouse instances
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// Root certificate authority that clients use when verifying server certificates. Used for https connection to ClickHouse
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCA")]
    pub root_ca: Option<String>,
    /// The scheme to user for connecting to ClickHouse. Possible values: http, https, auto
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<ClickHouseOperatorConfigurationClickhouseAccessSecret>,
    /// Timeouts used to limit connection and queries from the operator to ClickHouse instances, In seconds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeouts: Option<ClickHouseOperatorConfigurationClickhouseAccessTimeouts>,
    /// ClickHouse username to be used by operator to connect to ClickHouse instances, deprecated, use chCredentialsSecretName
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationClickhouseAccessSecret {
    /// Name of k8s Secret with username and password to be used by operator to connect to ClickHouse instances
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Location of k8s Secret with username and password to be used by operator to connect to ClickHouse instances
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Timeouts used to limit connection and queries from the operator to ClickHouse instances, In seconds
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationClickhouseAccessTimeouts {
    /// Timout to setup connection from the operator to ClickHouse instances. In seconds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connect: Option<i64>,
    /// Timout to perform SQL query from the operator to ClickHouse instances. In seconds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub query: Option<i64>,
}

/// Configuration addons specifies additional settings
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationClickhouseAddons {
    /// Array of set of rules per specified ClickHouse versions
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rules: Option<Vec<ClickHouseOperatorConfigurationClickhouseAddonsRules>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationClickhouseAddonsRules {
    /// spec
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<ClickHouseOperatorConfigurationClickhouseAddonsRulesSpec>,
    /// ClickHouse version expression
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// spec
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationClickhouseAddonsRulesSpec {
    /// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<ClickHouseOperatorConfigurationClickhouseAddonsRulesSpecConfiguration>,
}

/// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationClickhouseAddonsRulesSpecConfiguration {
    /// see same section from CR spec
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub files: Option<BTreeMap<String, serde_json::Value>>,
    /// see same section from CR spec
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profiles: Option<BTreeMap<String, serde_json::Value>>,
    /// see same section from CR spec
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quotas: Option<BTreeMap<String, serde_json::Value>>,
    /// see same section from CR spec
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<BTreeMap<String, serde_json::Value>>,
    /// see same section from CR spec
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub users: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationClickhouseConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<ClickHouseOperatorConfigurationClickhouseConfigurationFile>,
    /// Default network parameters for any user which will create
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<ClickHouseOperatorConfigurationClickhouseConfigurationNetwork>,
    /// Default parameters for any user which will create
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<ClickHouseOperatorConfigurationClickhouseConfigurationUser>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationClickhouseConfigurationFile {
    /// Each 'path' can be either absolute or relative.
    /// In case path is absolute - it is used as is.
    /// In case path is relative - it is relative to the folder where configuration file you are reading right now is located.
    /// 
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<ClickHouseOperatorConfigurationClickhouseConfigurationFilePath>,
}

/// Each 'path' can be either absolute or relative.
/// In case path is absolute - it is used as is.
/// In case path is relative - it is relative to the folder where configuration file you are reading right now is located.
/// 
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationClickhouseConfigurationFilePath {
    /// Path to the folder where ClickHouse configuration files common for all instances within a CHI are located.
    /// Default value - config.d
    /// 
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub common: Option<String>,
    /// Path to the folder where ClickHouse configuration files unique for each instance (host) within a CHI are located.
    /// Default value - conf.d
    /// 
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Path to the folder where ClickHouse configuration files with users settings are located.
    /// Files are common for all instances within a CHI.
    /// Default value - users.d
    /// 
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// Default network parameters for any user which will create
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationClickhouseConfigurationNetwork {
    /// ClickHouse server configuration `<host_regexp>...</host_regexp>` for any <user>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostRegexpTemplate")]
    pub host_regexp_template: Option<String>,
}

/// Default parameters for any user which will create
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationClickhouseConfigurationUser {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default: Option<ClickHouseOperatorConfigurationClickhouseConfigurationUserDefault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationClickhouseConfigurationUserDefault {
    /// ClickHouse server configuration `<networks><ip>...</ip></networks>` for any <user>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networksIP")]
    pub networks_ip: Option<Vec<String>>,
    /// ClickHouse server configuration `<password>...</password>` for any <user>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// ClickHouse server configuration `<profile>...</profile>` for any <user>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profile: Option<String>,
    /// ClickHouse server configuration `<quota>...</quota>` for any <user>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quota: Option<String>,
}

/// Configuration restart policy describes what configuration changes require ClickHouse restart
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationClickhouseConfigurationRestartPolicy {
    /// Array of set of rules per specified ClickHouse versions
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rules: Option<Vec<ClickHouseOperatorConfigurationClickhouseConfigurationRestartPolicyRules>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationClickhouseConfigurationRestartPolicyRules {
    /// Set of configuration rules for specified ClickHouse version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rules: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// ClickHouse version expression
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// parameters which use for connect to fetch metrics from clickhouse by clickhouse-operator
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationClickhouseMetrics {
    /// Timeouts used to limit connection and queries from the metrics exporter to ClickHouse instances
    /// Specified in seconds.
    /// 
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeouts: Option<ClickHouseOperatorConfigurationClickhouseMetricsTimeouts>,
}

/// Timeouts used to limit connection and queries from the metrics exporter to ClickHouse instances
/// Specified in seconds.
/// 
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationClickhouseMetricsTimeouts {
    /// Timeout used to limit metrics collection request. In seconds.
    /// Upon reaching this timeout metrics collection is aborted and no more metrics are collected in this cycle.
    /// All collected metrics are returned.
    /// 
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collect: Option<i64>,
}

/// defines which metadata.labels will include or exclude during render StatefulSet, Pod, PVC resources
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationLabel {
    /// Whether to append *Scope* labels to StatefulSet and Pod
    /// - "LabelShardScopeIndex"
    /// - "LabelReplicaScopeIndex"
    /// - "LabelCHIScopeIndex"
    /// - "LabelCHIScopeCycleSize"
    /// - "LabelCHIScopeCycleIndex"
    /// - "LabelCHIScopeCycleOffset"
    /// - "LabelClusterScopeIndex"
    /// - "LabelClusterScopeCycleSize"
    /// - "LabelClusterScopeCycleIndex"
    /// - "LabelClusterScopeCycleOffset"
    /// 
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appendScope")]
    pub append_scope: Option<ClickHouseOperatorConfigurationLabelAppendScope>,
    /// When propagating labels from the chi's `metadata.labels` section to child objects' `metadata.labels`,
    /// exclude labels from the following list
    /// 
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Vec<String>>,
    /// When propagating labels from the chi's `metadata.labels` section to child objects' `metadata.labels`,
    /// include labels from the following list
    /// 
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<Vec<String>>,
}

/// defines which metadata.labels will include or exclude during render StatefulSet, Pod, PVC resources
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClickHouseOperatorConfigurationLabelAppendScope {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "0")]
    r#_0,
    #[serde(rename = "1")]
    r#_1,
    False,
    #[serde(rename = "false")]
    FalseX,
    True,
    #[serde(rename = "true")]
    TrueX,
    No,
    #[serde(rename = "no")]
    NoX,
    Yes,
    #[serde(rename = "yes")]
    YesX,
    Off,
    #[serde(rename = "off")]
    OffX,
    On,
    #[serde(rename = "on")]
    OnX,
    Disable,
    #[serde(rename = "disable")]
    DisableX,
    Enable,
    #[serde(rename = "enable")]
    EnableX,
    Disabled,
    #[serde(rename = "disabled")]
    DisabledX,
    Enabled,
    #[serde(rename = "enabled")]
    EnabledX,
}

/// allow setup clickhouse-operator logger behavior
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationLogger {
    /// boolean allows logs to stderr and files both
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alsologtostderr: Option<String>,
    /// It can be set to a file and line number with a logging line.
    /// Ex.: file.go:123
    /// Each time when this line is being executed, a stack trace will be written to the Info log.
    /// 
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_backtrace_at: Option<String>,
    /// boolean, allows logs to stderr
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logtostderr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stderrthreshold: Option<String>,
    /// verbosity level of clickhouse-operator log, default - 1 max - 9
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub v: Option<String>,
    /// Comma-separated list of filename=N, where filename (can be a pattern) must have no .go ext, and N is a V level.
    /// Ex.: file*=2 sets the 'V' to 2 in all files with names like file*.
    /// 
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vmodule: Option<String>,
}

/// defines metrics exporter options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationMetrics {
    /// defines metric labels options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<ClickHouseOperatorConfigurationMetricsLabels>,
}

/// defines metric labels options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationMetricsLabels {
    /// When adding labels to a metric exclude labels with names from the following list
    /// 
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Vec<String>>,
}

/// define pod specific parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationPod {
    /// Optional duration in seconds the pod needs to terminate gracefully. 
    /// Look details in `pod.spec.terminationGracePeriodSeconds`
    /// 
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriod")]
    pub termination_grace_period: Option<i64>,
}

/// allow tuning reconciling process
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationReconcile {
    /// Whether the operator during reconcile procedure should wait for a ClickHouse host:
    ///   - to be excluded from a ClickHouse cluster
    ///   - to complete all running queries
    ///   - to be included into a ClickHouse cluster
    /// respectfully before moving forward
    /// 
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<ClickHouseOperatorConfigurationReconcileHost>,
    /// runtime parameters for clickhouse-operator process which are used during reconcile cycle
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub runtime: Option<ClickHouseOperatorConfigurationReconcileRuntime>,
    /// Allow change default behavior for reconciling StatefulSet which generated by clickhouse-operator
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statefulSet")]
    pub stateful_set: Option<ClickHouseOperatorConfigurationReconcileStatefulSet>,
}

/// Whether the operator during reconcile procedure should wait for a ClickHouse host:
///   - to be excluded from a ClickHouse cluster
///   - to complete all running queries
///   - to be included into a ClickHouse cluster
/// respectfully before moving forward
/// 
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationReconcileHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wait: Option<ClickHouseOperatorConfigurationReconcileHostWait>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationReconcileHostWait {
    /// Whether the operator during reconcile procedure should wait for a ClickHouse host to be excluded from a ClickHouse cluster
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<ClickHouseOperatorConfigurationReconcileHostWaitExclude>,
    /// Whether the operator during reconcile procedure should wait for a ClickHouse host to be included into a ClickHouse cluster
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<ClickHouseOperatorConfigurationReconcileHostWaitInclude>,
    /// Whether the operator during reconcile procedure should wait for a ClickHouse host to complete all running queries
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queries: Option<ClickHouseOperatorConfigurationReconcileHostWaitQueries>,
    /// Whether the operator during reconcile procedure should wait for replicas to catch-up
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<ClickHouseOperatorConfigurationReconcileHostWaitReplicas>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClickHouseOperatorConfigurationReconcileHostWaitExclude {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "0")]
    r#_0,
    #[serde(rename = "1")]
    r#_1,
    False,
    #[serde(rename = "false")]
    FalseX,
    True,
    #[serde(rename = "true")]
    TrueX,
    No,
    #[serde(rename = "no")]
    NoX,
    Yes,
    #[serde(rename = "yes")]
    YesX,
    Off,
    #[serde(rename = "off")]
    OffX,
    On,
    #[serde(rename = "on")]
    OnX,
    Disable,
    #[serde(rename = "disable")]
    DisableX,
    Enable,
    #[serde(rename = "enable")]
    EnableX,
    Disabled,
    #[serde(rename = "disabled")]
    DisabledX,
    Enabled,
    #[serde(rename = "enabled")]
    EnabledX,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClickHouseOperatorConfigurationReconcileHostWaitInclude {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "0")]
    r#_0,
    #[serde(rename = "1")]
    r#_1,
    False,
    #[serde(rename = "false")]
    FalseX,
    True,
    #[serde(rename = "true")]
    TrueX,
    No,
    #[serde(rename = "no")]
    NoX,
    Yes,
    #[serde(rename = "yes")]
    YesX,
    Off,
    #[serde(rename = "off")]
    OffX,
    On,
    #[serde(rename = "on")]
    OnX,
    Disable,
    #[serde(rename = "disable")]
    DisableX,
    Enable,
    #[serde(rename = "enable")]
    EnableX,
    Disabled,
    #[serde(rename = "disabled")]
    DisabledX,
    Enabled,
    #[serde(rename = "enabled")]
    EnabledX,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClickHouseOperatorConfigurationReconcileHostWaitQueries {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "0")]
    r#_0,
    #[serde(rename = "1")]
    r#_1,
    False,
    #[serde(rename = "false")]
    FalseX,
    True,
    #[serde(rename = "true")]
    TrueX,
    No,
    #[serde(rename = "no")]
    NoX,
    Yes,
    #[serde(rename = "yes")]
    YesX,
    Off,
    #[serde(rename = "off")]
    OffX,
    On,
    #[serde(rename = "on")]
    OnX,
    Disable,
    #[serde(rename = "disable")]
    DisableX,
    Enable,
    #[serde(rename = "enable")]
    EnableX,
    Disabled,
    #[serde(rename = "disabled")]
    DisabledX,
    Enabled,
    #[serde(rename = "enabled")]
    EnabledX,
}

/// Whether the operator during reconcile procedure should wait for replicas to catch-up
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationReconcileHostWaitReplicas {
    /// Whether the operator during reconcile procedure should wait for all replicas to catch-up
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub all: Option<ClickHouseOperatorConfigurationReconcileHostWaitReplicasAll>,
    /// replication max absolute delay to consider replica is not delayed
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delay: Option<i64>,
    /// Whether the operator during reconcile procedure should wait for new replicas to catch-up
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub new: Option<ClickHouseOperatorConfigurationReconcileHostWaitReplicasNew>,
}

/// Whether the operator during reconcile procedure should wait for replicas to catch-up
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClickHouseOperatorConfigurationReconcileHostWaitReplicasAll {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "0")]
    r#_0,
    #[serde(rename = "1")]
    r#_1,
    False,
    #[serde(rename = "false")]
    FalseX,
    True,
    #[serde(rename = "true")]
    TrueX,
    No,
    #[serde(rename = "no")]
    NoX,
    Yes,
    #[serde(rename = "yes")]
    YesX,
    Off,
    #[serde(rename = "off")]
    OffX,
    On,
    #[serde(rename = "on")]
    OnX,
    Disable,
    #[serde(rename = "disable")]
    DisableX,
    Enable,
    #[serde(rename = "enable")]
    EnableX,
    Disabled,
    #[serde(rename = "disabled")]
    DisabledX,
    Enabled,
    #[serde(rename = "enabled")]
    EnabledX,
}

/// Whether the operator during reconcile procedure should wait for replicas to catch-up
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClickHouseOperatorConfigurationReconcileHostWaitReplicasNew {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "0")]
    r#_0,
    #[serde(rename = "1")]
    r#_1,
    False,
    #[serde(rename = "false")]
    FalseX,
    True,
    #[serde(rename = "true")]
    TrueX,
    No,
    #[serde(rename = "no")]
    NoX,
    Yes,
    #[serde(rename = "yes")]
    YesX,
    Off,
    #[serde(rename = "off")]
    OffX,
    On,
    #[serde(rename = "on")]
    OnX,
    Disable,
    #[serde(rename = "disable")]
    DisableX,
    Enable,
    #[serde(rename = "enable")]
    EnableX,
    Disabled,
    #[serde(rename = "disabled")]
    DisabledX,
    Enabled,
    #[serde(rename = "enabled")]
    EnabledX,
}

/// runtime parameters for clickhouse-operator process which are used during reconcile cycle
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationReconcileRuntime {
    /// How many goroutines will be used to reconcile CHIs in parallel, 10 by default
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reconcileCHIsThreadsNumber")]
    pub reconcile_ch_is_threads_number: Option<i64>,
    /// The maximum percentage of cluster shards that may be reconciled in parallel, 50 percent by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reconcileShardsMaxConcurrencyPercent")]
    pub reconcile_shards_max_concurrency_percent: Option<i64>,
    /// How many goroutines will be used to reconcile shards of a cluster in parallel, 1 by default
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reconcileShardsThreadsNumber")]
    pub reconcile_shards_threads_number: Option<i64>,
}

/// Allow change default behavior for reconciling StatefulSet which generated by clickhouse-operator
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationReconcileStatefulSet {
    /// Behavior during create StatefulSet
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub create: Option<ClickHouseOperatorConfigurationReconcileStatefulSetCreate>,
    /// Behavior during update StatefulSet
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub update: Option<ClickHouseOperatorConfigurationReconcileStatefulSetUpdate>,
}

/// Behavior during create StatefulSet
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationReconcileStatefulSetCreate {
    /// What to do in case created StatefulSet is not in Ready after `statefulSetUpdateTimeout` seconds
    /// Possible options:
    /// 1. abort - do nothing, just break the process and wait for admin.
    /// 2. delete - delete newly created problematic StatefulSet.
    /// 3. ignore (default) - ignore error, pretend nothing happened and move on to the next StatefulSet.
    /// 
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onFailure")]
    pub on_failure: Option<String>,
}

/// Behavior during update StatefulSet
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationReconcileStatefulSetUpdate {
    /// What to do in case updated StatefulSet is not in Ready after `statefulSetUpdateTimeout` seconds
    /// Possible options:
    /// 1. abort - do nothing, just break the process and wait for admin.
    /// 2. rollback (default) - delete Pod and rollback StatefulSet to previous Generation. Pod would be recreated by StatefulSet based on rollback-ed configuration.
    /// 3. ignore - ignore error, pretend nothing happened and move on to the next StatefulSet.
    /// 
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onFailure")]
    pub on_failure: Option<String>,
    /// How many seconds to wait between checks for created/updated StatefulSet status
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pollInterval")]
    pub poll_interval: Option<i64>,
    /// How many seconds to wait for created/updated StatefulSet to be Ready
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
}

/// define StatefulSet-specific parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationStatefulSet {
    /// revisionHistoryLimit is the maximum number of revisions that will be
    /// maintained in the StatefulSet's revision history.                         
    /// Look details in `statefulset.spec.revisionHistoryLimit`
    /// 
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
}

/// defines status options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationStatus {
    /// defines status fields options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<ClickHouseOperatorConfigurationStatusFields>,
}

/// defines status fields options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationStatusFields {
    /// Whether the operator should fill status field 'action'
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<ClickHouseOperatorConfigurationStatusFieldsAction>,
    /// Whether the operator should fill status field 'actions'
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<ClickHouseOperatorConfigurationStatusFieldsActions>,
    /// Whether the operator should fill status field 'error'
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<ClickHouseOperatorConfigurationStatusFieldsError>,
    /// Whether the operator should fill status field 'errors'
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub errors: Option<ClickHouseOperatorConfigurationStatusFieldsErrors>,
}

/// defines status fields options
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClickHouseOperatorConfigurationStatusFieldsAction {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "0")]
    r#_0,
    #[serde(rename = "1")]
    r#_1,
    False,
    #[serde(rename = "false")]
    FalseX,
    True,
    #[serde(rename = "true")]
    TrueX,
    No,
    #[serde(rename = "no")]
    NoX,
    Yes,
    #[serde(rename = "yes")]
    YesX,
    Off,
    #[serde(rename = "off")]
    OffX,
    On,
    #[serde(rename = "on")]
    OnX,
    Disable,
    #[serde(rename = "disable")]
    DisableX,
    Enable,
    #[serde(rename = "enable")]
    EnableX,
    Disabled,
    #[serde(rename = "disabled")]
    DisabledX,
    Enabled,
    #[serde(rename = "enabled")]
    EnabledX,
}

/// defines status fields options
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClickHouseOperatorConfigurationStatusFieldsActions {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "0")]
    r#_0,
    #[serde(rename = "1")]
    r#_1,
    False,
    #[serde(rename = "false")]
    FalseX,
    True,
    #[serde(rename = "true")]
    TrueX,
    No,
    #[serde(rename = "no")]
    NoX,
    Yes,
    #[serde(rename = "yes")]
    YesX,
    Off,
    #[serde(rename = "off")]
    OffX,
    On,
    #[serde(rename = "on")]
    OnX,
    Disable,
    #[serde(rename = "disable")]
    DisableX,
    Enable,
    #[serde(rename = "enable")]
    EnableX,
    Disabled,
    #[serde(rename = "disabled")]
    DisabledX,
    Enabled,
    #[serde(rename = "enabled")]
    EnabledX,
}

/// defines status fields options
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClickHouseOperatorConfigurationStatusFieldsError {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "0")]
    r#_0,
    #[serde(rename = "1")]
    r#_1,
    False,
    #[serde(rename = "false")]
    FalseX,
    True,
    #[serde(rename = "true")]
    TrueX,
    No,
    #[serde(rename = "no")]
    NoX,
    Yes,
    #[serde(rename = "yes")]
    YesX,
    Off,
    #[serde(rename = "off")]
    OffX,
    On,
    #[serde(rename = "on")]
    OnX,
    Disable,
    #[serde(rename = "disable")]
    DisableX,
    Enable,
    #[serde(rename = "enable")]
    EnableX,
    Disabled,
    #[serde(rename = "disabled")]
    DisabledX,
    Enabled,
    #[serde(rename = "enabled")]
    EnabledX,
}

/// defines status fields options
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClickHouseOperatorConfigurationStatusFieldsErrors {
    #[serde(rename = "")]
    KopiumEmpty,
    #[serde(rename = "0")]
    r#_0,
    #[serde(rename = "1")]
    r#_1,
    False,
    #[serde(rename = "false")]
    FalseX,
    True,
    #[serde(rename = "true")]
    TrueX,
    No,
    #[serde(rename = "no")]
    NoX,
    Yes,
    #[serde(rename = "yes")]
    YesX,
    Off,
    #[serde(rename = "off")]
    OffX,
    On,
    #[serde(rename = "on")]
    OnX,
    Disable,
    #[serde(rename = "disable")]
    DisableX,
    Enable,
    #[serde(rename = "enable")]
    EnableX,
    Disabled,
    #[serde(rename = "disabled")]
    DisabledX,
    Enabled,
    #[serde(rename = "enabled")]
    EnabledX,
}

/// Parameters which are used if you want to generate ClickHouseInstallationTemplate custom resources from files which are stored inside clickhouse-operator deployment
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chi: Option<ClickHouseOperatorConfigurationTemplateChi>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationTemplateChi {
    /// Path to folder where ClickHouseInstallationTemplate .yaml manifests are located.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// CHI template updates handling policy
    /// Possible policy values:
    ///   - ReadOnStart. Accept CHIT updates on the operators start only.
    ///   - ApplyOnNextReconcile. Accept CHIT updates at all time. Apply news CHITs on next regular reconcile of the CHI
    /// 
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ClickHouseOperatorConfigurationTemplateChiPolicy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClickHouseOperatorConfigurationTemplateChiPolicy {
    #[serde(rename = "")]
    KopiumEmpty,
    ReadOnStart,
    ApplyOnNextReconcile,
}

/// Parameters for watch kubernetes resources which used by clickhouse-operator deployment
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClickHouseOperatorConfigurationWatch {
    /// List of namespaces where clickhouse-operator watches for events.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
}

