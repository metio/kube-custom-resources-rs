// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/controlplaneio-fluxcd/flux-operator/fluxcd.controlplane.io/v1/resourcesetinputproviders.yaml
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ResourceSetInputProviderSpec defines the desired state of ResourceSetInputProvider
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "fluxcd.controlplane.io", version = "v1", kind = "ResourceSetInputProvider", plural = "resourcesetinputproviders")]
#[kube(namespaced)]
#[kube(status = "ResourceSetInputProviderStatus")]
#[kube(schema = "disabled")]
#[kube(derive="PartialEq")]
pub struct ResourceSetInputProviderSpec {
    /// CertSecretRef specifies the Kubernetes Secret containing either or both of
    /// 
    /// - a PEM-encoded CA certificate (`ca.crt`)
    /// - a PEM-encoded client certificate (`tls.crt`) and private key (`tls.key`)
    /// 
    /// When connecting to a Git provider that uses self-signed certificates, the CA certificate
    /// must be set in the Secret under the 'ca.crt' key to establish the trust relationship.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSecretRef")]
    pub cert_secret_ref: Option<ResourceSetInputProviderCertSecretRef>,
    /// DefaultValues contains the default values for the inputs.
    /// These values are used to populate the inputs when the provider
    /// response does not contain them.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValues")]
    pub default_values: Option<BTreeMap<String, serde_json::Value>>,
    /// Filter defines the filter to apply to the input provider response.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<ResourceSetInputProviderFilter>,
    /// SecretRef specifies the Kubernetes Secret containing the basic-auth credentials
    /// to access the input provider. The secret must contain the keys
    /// 'username' and 'password'.
    /// When connecting to a Git provider, the password should be a personal access token
    /// that grants read-only access to the repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ResourceSetInputProviderSecretRef>,
    /// Type specifies the type of the input provider.
    #[serde(rename = "type")]
    pub r#type: ResourceSetInputProviderType,
    /// URL specifies the HTTP/S address of the input provider API.
    /// When connecting to a Git provider, the URL should point to the repository address.
    pub url: String,
}

/// CertSecretRef specifies the Kubernetes Secret containing either or both of
/// 
/// - a PEM-encoded CA certificate (`ca.crt`)
/// - a PEM-encoded client certificate (`tls.crt`) and private key (`tls.key`)
/// 
/// When connecting to a Git provider that uses self-signed certificates, the CA certificate
/// must be set in the Secret under the 'ca.crt' key to establish the trust relationship.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ResourceSetInputProviderCertSecretRef {
    /// Name of the referent.
    pub name: String,
}

/// Filter defines the filter to apply to the input provider response.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ResourceSetInputProviderFilter {
    /// ExcludeBranch specifies the regular expression to filter the branches
    /// that the input provider should exclude.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludeBranch")]
    pub exclude_branch: Option<String>,
    /// IncludeBranch specifies the regular expression to filter the branches
    /// that the input provider should include.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeBranch")]
    pub include_branch: Option<String>,
    /// Labels specifies the list of labels to filter the input provider response.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<String>>,
    /// Limit specifies the maximum number of input sets to return.
    /// When not set, the default limit is 100.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

/// SecretRef specifies the Kubernetes Secret containing the basic-auth credentials
/// to access the input provider. The secret must contain the keys
/// 'username' and 'password'.
/// When connecting to a Git provider, the password should be a personal access token
/// that grants read-only access to the repository.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ResourceSetInputProviderSecretRef {
    /// Name of the referent.
    pub name: String,
}

/// ResourceSetInputProviderSpec defines the desired state of ResourceSetInputProvider
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ResourceSetInputProviderType {
    GitHubBranch,
    GitHubPullRequest,
    GitLabBranch,
    GitLabMergeRequest,
}

/// ResourceSetInputProviderStatus defines the observed state of ResourceSetInputProvider.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ResourceSetInputProviderStatus {
    /// Conditions contains the readiness conditions of the object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ExportedInputs contains the list of inputs exported by the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exportedInputs")]
    pub exported_inputs: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// LastExportedRevision is the digest of the
    /// inputs that were last reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastExportedRevision")]
    pub last_exported_revision: Option<String>,
    /// LastHandledReconcileAt holds the value of the most recent
    /// reconcile request value, so a change of the annotation value
    /// can be detected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastHandledReconcileAt")]
    pub last_handled_reconcile_at: Option<String>,
}

