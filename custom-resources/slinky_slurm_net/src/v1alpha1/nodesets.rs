// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/SlinkyProject/slurm-operator/slinky.slurm.net/v1alpha1/nodesets.yaml
// kopium version: 0.22.4

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// NodeSetSpec defines the desired state of NodeSet
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "slinky.slurm.net", version = "v1alpha1", kind = "NodeSet", plural = "nodesets")]
#[kube(namespaced)]
#[kube(status = "NodeSetStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct NodeSetSpec {
    /// controllerRef is a reference to the Controller CR to which this has membership.
    #[serde(rename = "controllerRef")]
    pub controller_ref: NodeSetControllerRef,
    /// ExtraConf is added to the slurmd args as `--conf <extraConf>`.
    /// Ref: <https://slurm.schedmd.com/slurmd.html#OPT_conf-%3Cnode-parameters%3E>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraConf")]
    pub extra_conf: Option<String>,
    /// The logfile sidecar configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logfile: Option<NodeSetLogfile>,
    /// minReadySeconds is the minimum number of seconds for which a newly
    /// created NodeSet Pod should be ready without any of its container crashing,
    /// for it to be considered available.
    /// Defaults to 0 (pod will be considered available as soon as it is ready).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minReadySeconds")]
    pub min_ready_seconds: Option<i32>,
    /// Partition defines the Slurm partition configuration for this NodeSet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition: Option<NodeSetPartition>,
    /// PersistentVolumeClaimRetentionPolicy describes the policy used for PVCs
    /// created from the NodeSet VolumeClaimTemplates. This requires the
    /// NodeSetAutoDeletePVC feature gate to be enabled, which is alpha.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeClaimRetentionPolicy")]
    pub persistent_volume_claim_retention_policy: Option<NodeSetPersistentVolumeClaimRetentionPolicy>,
    /// replicas is the desired number of replicas of the given Template.
    /// These are replicas in the sense that they are instantiations of the
    /// same Template, but individual replicas also have a consistent identity.
    /// If unspecified, defaults to 1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i32>,
    /// revisionHistoryLimit is the maximum number of revisions that will
    /// be maintained in the NodeSet's revision history. The revision history
    /// consists of all revisions not represented by a currently applied
    /// NodeSetSpec version. The default value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i32>,
    /// The slurmd container configuration.
    /// See corev1.Container spec.
    /// Ref: <https://github.com/kubernetes/api/blob/master/core/v1/types.go#L2885>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slurmd: Option<BTreeMap<String, serde_json::Value>>,
    /// Template is the object that describes the pod that will be created if
    /// insufficient replicas are detected.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<NodeSetTemplate>,
    /// updateStrategy indicates the NodeSetUpdateStrategy that will be
    /// employed to update Pods in the NodeSet when a revision is made to
    /// Template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateStrategy")]
    pub update_strategy: Option<NodeSetUpdateStrategy>,
    /// volumeClaimTemplates is a list of claims that pods are allowed to reference.
    /// The NodeSet controller is responsible for mapping network identities to
    /// claims in a way that maintains the identity of a pod. Every claim in
    /// this list must have at least one matching (by name) volumeMount in one
    /// container in the template. A claim in this list takes precedence over
    /// any volumes in the template, with the same name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeClaimTemplates")]
    pub volume_claim_templates: Option<serde_json::Value>,
}

/// controllerRef is a reference to the Controller CR to which this has membership.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSetControllerRef {
    /// Name of the referent.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// The logfile sidecar configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSetLogfile {
    /// Image URI.
    /// More info: <https://kubernetes.io/docs/concepts/containers/images>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// Image pull policy.
    /// One of Always, Never, IfNotPresent.
    /// Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
    /// More info: <https://kubernetes.io/docs/concepts/containers/images#updating-images>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    /// Compute Resources required by this container.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<NodeSetLogfileResources>,
}

/// Compute Resources required by this container.
/// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSetLogfileResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims,
    /// that are used by this container.
    /// 
    /// This field depends on the
    /// DynamicResourceAllocation feature gate.
    /// 
    /// This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<NodeSetLogfileResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSetLogfileResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of
    /// the Pod where this field is used. It makes that resource available
    /// inside a container.
    pub name: String,
    /// Request is the name chosen for a request in the referenced claim.
    /// If empty, everything from the claim is made available, otherwise
    /// only the result of this request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
}

/// Partition defines the Slurm partition configuration for this NodeSet.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSetPartition {
    /// Config is added to the NodeSet's partition line.
    /// Ref: <https://slurm.schedmd.com/slurmd.html#OPT_conf-%3Cnode-parameters%3E>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<String>,
    /// Enabled will create a partition for this NodeSet.
    pub enabled: bool,
}

/// PersistentVolumeClaimRetentionPolicy describes the policy used for PVCs
/// created from the NodeSet VolumeClaimTemplates. This requires the
/// NodeSetAutoDeletePVC feature gate to be enabled, which is alpha.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSetPersistentVolumeClaimRetentionPolicy {
    /// WhenDeleted specifies what happens to PVCs created from NodeSet
    /// VolumeClaimTemplates when the NodeSet is deleted. The default policy
    /// of `Retain` causes PVCs to not be affected by NodeSet deletion. The
    /// `Delete` policy causes those PVCs to be deleted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "whenDeleted")]
    pub when_deleted: Option<String>,
    /// WhenScaled specifies what happens to PVCs created from NodeSet
    /// VolumeClaimTemplates when the NodeSet is scaled down. The default
    /// policy of `Retain` causes PVCs to not be affected by a scaledown. The
    /// `Delete` policy causes the associated PVCs for any excess pods to be
    /// deleted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "whenScaled")]
    pub when_scaled: Option<String>,
}

/// Template is the object that describes the pod that will be created if
/// insufficient replicas are detected.
/// More info: <https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSetTemplate {
    /// Standard object's metadata.
    /// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<NodeSetTemplateMetadata>,
    /// PodSpec is a description of a pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<BTreeMap<String, serde_json::Value>>,
}

/// Standard object's metadata.
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSetTemplateMetadata {
    /// Annotations is an unstructured key value map stored with a resource that may be
    /// set by external tools to store and retrieve arbitrary metadata. They are not
    /// queryable and should be preserved when modifying objects.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects. May match selectors of replication controllers
    /// and services.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// updateStrategy indicates the NodeSetUpdateStrategy that will be
/// employed to update Pods in the NodeSet when a revision is made to
/// Template.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSetUpdateStrategy {
    /// RollingUpdate is used to communicate parameters when Type is
    /// RollingUpdateNodeSetStrategyType.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdate")]
    pub rolling_update: Option<NodeSetUpdateStrategyRollingUpdate>,
    /// Type indicates the type of the NodeSetUpdateStrategy.
    /// Default is RollingUpdate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// RollingUpdate is used to communicate parameters when Type is
/// RollingUpdateNodeSetStrategyType.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSetUpdateStrategyRollingUpdate {
    /// The maximum number of pods that can be unavailable during the update.
    /// Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
    /// Absolute number is calculated from percentage by rounding up. This can not be 0.
    /// Defaults to 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
}

/// NodeSetStatus defines the observed state of NodeSet
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSetStatus {
    /// Total number of available pods (ready for at least minReadySeconds) targeted by this NodeSet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availableReplicas")]
    pub available_replicas: Option<i32>,
    /// Count of hash collisions for the NodeSet. The NodeSet controller
    /// uses this field as a collision avoidance mechanism when it needs to
    /// create the name for the newest ControllerRevision.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collisionCount")]
    pub collision_count: Option<i32>,
    /// Represents the latest available observations of a NodeSet's current state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// NodeSetHash is the "controller-revision-hash", which represents the
    /// latest version of the NodeSet.
    #[serde(rename = "nodeSetHash")]
    pub node_set_hash: String,
    /// observedGeneration is the most recent generation observed for this NodeSet. It corresponds to the
    /// NodeSet's generation, which is updated on mutation by the API Server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// readyReplicas is the number of pods targeted by this NodeSet with a Ready Condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readyReplicas")]
    pub ready_replicas: Option<i32>,
    /// Total number of non-terminated pods targeted by this NodeSet (their labels match the Selector).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i32>,
    /// Add Selector to status for HPA support in the scale subresource.
    pub selector: String,
    /// The number of NodeSet pods that are running and are in the Slurm
    /// ALLOCATED or MIXED state. ALLOCATED/MIXED means the Slurm node is
    /// allocated one or more Slurm jobs and is doing work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slurmAllocated")]
    pub slurm_allocated: Option<i32>,
    /// The number of NodeSet pods that are running and are in the Slurm
    /// DOWN state. DOWN means the Slurm node is unavailable for use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slurmDown")]
    pub slurm_down: Option<i32>,
    /// The number of NodeSet pods that are running and are in the Slurm DRAIN
    /// state. DRAIN means the Slurm node becomes unschedulable but allocated
    /// Slurm jobs will not be evicted and can continue running until completion.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slurmDrain")]
    pub slurm_drain: Option<i32>,
    /// The number of NodeSet pods that are running and are in the Slurm IDLE
    /// state. IDLE means the Slurm nodes is not ALLOCATED or MIXED, hence is not
    /// allocated any Slurm jobs, nor doing work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slurmIdle")]
    pub slurm_idle: Option<i32>,
    /// Total number of unavailable pods targeted by this NodeSet. This is the total number of
    /// pods that are still required for the NodeSet to have 100% available capacity. They may
    /// either be pods that are running but not yet available or pods that still have not been created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unavailableReplicas")]
    pub unavailable_replicas: Option<i32>,
    /// Total number of non-terminated pods targeted by this NodeSet that have the desired template spec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updatedReplicas")]
    pub updated_replicas: Option<i32>,
}

