// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/elastic/cloud-on-k8s/stackconfigpolicy.k8s.elastic.co/v1alpha1/stackconfigpolicies.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "stackconfigpolicy.k8s.elastic.co", version = "v1alpha1", kind = "StackConfigPolicy", plural = "stackconfigpolicies")]
#[kube(namespaced)]
#[kube(status = "StackConfigPolicyStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct StackConfigPolicySpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub elasticsearch: Option<StackConfigPolicyElasticsearch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kibana: Option<StackConfigPolicyKibana>,
    /// A label selector is a label query over a set of resources. The result of matchLabels and
    /// matchExpressions are ANDed. An empty label selector matches all objects. A null
    /// label selector matches no objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceSelector")]
    pub resource_selector: Option<StackConfigPolicyResourceSelector>,
    /// Deprecated: SecureSettings only applies to Elasticsearch and is deprecated. It must be set per application instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secureSettings")]
    pub secure_settings: Option<Vec<StackConfigPolicySecureSettings>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackConfigPolicyElasticsearch {
    /// ClusterSettings holds the Elasticsearch cluster settings (/_cluster/settings)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterSettings")]
    pub cluster_settings: Option<BTreeMap<String, serde_json::Value>>,
    /// Config holds the settings that go into elasticsearch.yml.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, serde_json::Value>>,
    /// IndexLifecyclePolicies holds the Index Lifecycle policies settings (/_ilm/policy)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexLifecyclePolicies")]
    pub index_lifecycle_policies: Option<BTreeMap<String, serde_json::Value>>,
    /// IndexTemplates holds the Index and Component Templates settings
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexTemplates")]
    pub index_templates: Option<StackConfigPolicyElasticsearchIndexTemplates>,
    /// IngestPipelines holds the Ingest Pipelines settings (/_ingest/pipeline)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingestPipelines")]
    pub ingest_pipelines: Option<BTreeMap<String, serde_json::Value>>,
    /// SecretMounts are additional Secrets that need to be mounted into the Elasticsearch pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretMounts")]
    pub secret_mounts: Option<Vec<StackConfigPolicyElasticsearchSecretMounts>>,
    /// SecureSettings are additional Secrets that contain data to be configured to Elasticsearch's keystore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secureSettings")]
    pub secure_settings: Option<Vec<StackConfigPolicyElasticsearchSecureSettings>>,
    /// SecurityRoleMappings holds the Role Mappings settings (/_security/role_mapping)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityRoleMappings")]
    pub security_role_mappings: Option<BTreeMap<String, serde_json::Value>>,
    /// SnapshotLifecyclePolicies holds the Snapshot Lifecycle Policies settings (/_slm/policy)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotLifecyclePolicies")]
    pub snapshot_lifecycle_policies: Option<BTreeMap<String, serde_json::Value>>,
    /// SnapshotRepositories holds the Snapshot Repositories settings (/_snapshot)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotRepositories")]
    pub snapshot_repositories: Option<BTreeMap<String, serde_json::Value>>,
}

/// IndexTemplates holds the Index and Component Templates settings
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackConfigPolicyElasticsearchIndexTemplates {
    /// ComponentTemplates holds the Component Templates settings (/_component_template)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "componentTemplates")]
    pub component_templates: Option<BTreeMap<String, serde_json::Value>>,
    /// ComposableIndexTemplates holds the Index Templates settings (/_index_template)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "composableIndexTemplates")]
    pub composable_index_templates: Option<BTreeMap<String, serde_json::Value>>,
}

/// SecretMount contains information about additional secrets to be mounted to the elasticsearch pods
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackConfigPolicyElasticsearchSecretMounts {
    /// MountPath denotes the path to which the secret should be mounted to inside the elasticsearch pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    pub mount_path: Option<String>,
    /// SecretName denotes the name of the secret that needs to be mounted to the elasticsearch pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// SecretSource defines a data source based on a Kubernetes Secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackConfigPolicyElasticsearchSecureSettings {
    /// Entries define how to project each key-value pair in the secret to filesystem paths.
    /// If not defined, all keys will be projected to similarly named paths in the filesystem.
    /// If defined, only the specified keys will be projected to the corresponding paths.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub entries: Option<Vec<StackConfigPolicyElasticsearchSecureSettingsEntries>>,
    /// SecretName is the name of the secret.
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

/// KeyToPath defines how to map a key in a Secret object to a filesystem path.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackConfigPolicyElasticsearchSecureSettingsEntries {
    /// Key is the key contained in the secret.
    pub key: String,
    /// Path is the relative file path to map the key to.
    /// Path must not be an absolute file path and must not contain any ".." components.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackConfigPolicyKibana {
    /// Config holds the settings that go into kibana.yml.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, serde_json::Value>>,
    /// SecureSettings are additional Secrets that contain data to be configured to Kibana's keystore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secureSettings")]
    pub secure_settings: Option<Vec<StackConfigPolicyKibanaSecureSettings>>,
}

/// SecretSource defines a data source based on a Kubernetes Secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackConfigPolicyKibanaSecureSettings {
    /// Entries define how to project each key-value pair in the secret to filesystem paths.
    /// If not defined, all keys will be projected to similarly named paths in the filesystem.
    /// If defined, only the specified keys will be projected to the corresponding paths.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub entries: Option<Vec<StackConfigPolicyKibanaSecureSettingsEntries>>,
    /// SecretName is the name of the secret.
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

/// KeyToPath defines how to map a key in a Secret object to a filesystem path.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackConfigPolicyKibanaSecureSettingsEntries {
    /// Key is the key contained in the secret.
    pub key: String,
    /// Path is the relative file path to map the key to.
    /// Path must not be an absolute file path and must not contain any ".." components.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// A label selector is a label query over a set of resources. The result of matchLabels and
/// matchExpressions are ANDed. An empty label selector matches all objects. A null
/// label selector matches no objects.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackConfigPolicyResourceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<StackConfigPolicyResourceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackConfigPolicyResourceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// SecretSource defines a data source based on a Kubernetes Secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackConfigPolicySecureSettings {
    /// Entries define how to project each key-value pair in the secret to filesystem paths.
    /// If not defined, all keys will be projected to similarly named paths in the filesystem.
    /// If defined, only the specified keys will be projected to the corresponding paths.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub entries: Option<Vec<StackConfigPolicySecureSettingsEntries>>,
    /// SecretName is the name of the secret.
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

/// KeyToPath defines how to map a key in a Secret object to a filesystem path.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackConfigPolicySecureSettingsEntries {
    /// Key is the key contained in the secret.
    pub key: String,
    /// Path is the relative file path to map the key to.
    /// Path must not be an absolute file path and must not contain any ".." components.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackConfigPolicyStatus {
    /// Details holds the status details for each resource to be configured.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub details: Option<BTreeMap<String, BTreeMap<String, StackConfigPolicyStatusDetails>>>,
    /// Errors is the number of resources which have an incorrect configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub errors: Option<i64>,
    /// ObservedGeneration is the most recent generation observed for this StackConfigPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// Phase is the phase of the StackConfigPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
    /// Ready is the number of resources successfully configured.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ready: Option<i64>,
    /// ReadyCount is a human representation of the number of resources successfully configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readyCount")]
    pub ready_count: Option<String>,
    /// Resources is the number of resources to be configured.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<i64>,
    /// ResourcesStatuses holds the status for each resource to be configured.
    /// Deprecated: Details is used to store the status of resources from ECK 2.11
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourcesStatuses")]
    pub resources_statuses: Option<BTreeMap<String, StackConfigPolicyStatusResourcesStatuses>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackConfigPolicyStatusDetails {
    /// CurrentVersion denotes the current version of filesettings applied to the Elasticsearch cluster
    /// This field does not apply to Kibana resources
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "currentVersion")]
    pub current_version: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<StackConfigPolicyStatusDetailsError>,
    /// ExpectedVersion denotes the expected version of filesettings that should be applied to the Elasticsearch cluster
    /// This field does not apply to Kibana resources
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectedVersion")]
    pub expected_version: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackConfigPolicyStatusDetailsError {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<i64>,
}

/// ResourcesStatuses holds the status for each resource to be configured.
/// Deprecated: Details is used to store the status of resources from ECK 2.11
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackConfigPolicyStatusResourcesStatuses {
    /// CurrentVersion denotes the current version of filesettings applied to the Elasticsearch cluster
    /// This field does not apply to Kibana resources
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "currentVersion")]
    pub current_version: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<StackConfigPolicyStatusResourcesStatusesError>,
    /// ExpectedVersion denotes the expected version of filesettings that should be applied to the Elasticsearch cluster
    /// This field does not apply to Kibana resources
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectedVersion")]
    pub expected_version: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackConfigPolicyStatusResourcesStatusesError {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<i64>,
}

