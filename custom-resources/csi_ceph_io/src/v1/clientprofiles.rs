// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/ceph/ceph-csi-operator/csi.ceph.io/v1/clientprofiles.yaml
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// ClientProfileSpec defines the desired state of Ceph CSI
/// configuration for volumes and snapshots configured to use
/// this profile
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "csi.ceph.io", version = "v1", kind = "ClientProfile", plural = "clientprofiles")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ClientProfileSpec {
    /// LocalObjectReference contains enough information to let you locate the
    /// referenced object inside the same namespace.
    #[serde(rename = "cephConnectionRef")]
    pub ceph_connection_ref: ClientProfileCephConnectionRef,
    /// CephFsConfigSpec defines the desired CephFs configuration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cephFs")]
    pub ceph_fs: Option<ClientProfileCephFs>,
    /// NfsConfigSpec cdefines the desired NFS configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nfs: Option<ClientProfileNfs>,
    /// RbdConfigSpec defines the desired RBD configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rbd: Option<ClientProfileRbd>,
}

/// LocalObjectReference contains enough information to let you locate the
/// referenced object inside the same namespace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClientProfileCephConnectionRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// CephFsConfigSpec defines the desired CephFs configuration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClientProfileCephFs {
    /// CephCsiSecretsSpec defines the secrets used by the client profile
    /// to access the Ceph cluster and perform operations
    /// on volumes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cephCsiSecrets")]
    pub ceph_csi_secrets: Option<ClientProfileCephFsCephCsiSecrets>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fuseMountOptions")]
    pub fuse_mount_options: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kernelMountOptions")]
    pub kernel_mount_options: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "radosNamespace")]
    pub rados_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subVolumeGroup")]
    pub sub_volume_group: Option<String>,
}

/// CephCsiSecretsSpec defines the secrets used by the client profile
/// to access the Ceph cluster and perform operations
/// on volumes.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClientProfileCephFsCephCsiSecrets {
    /// SecretReference represents a Secret Reference. It has enough information to retrieve secret
    /// in any namespace
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controllerPublishSecret")]
    pub controller_publish_secret: Option<ClientProfileCephFsCephCsiSecretsControllerPublishSecret>,
}

/// SecretReference represents a Secret Reference. It has enough information to retrieve secret
/// in any namespace
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClientProfileCephFsCephCsiSecretsControllerPublishSecret {
    /// name is unique within a namespace to reference a secret resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// namespace defines the space within which the secret name must be unique.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// NfsConfigSpec cdefines the desired NFS configuration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClientProfileNfs {
}

/// RbdConfigSpec defines the desired RBD configuration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClientProfileRbd {
    /// CephCsiSecretsSpec defines the secrets used by the client profile
    /// to access the Ceph cluster and perform operations
    /// on volumes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cephCsiSecrets")]
    pub ceph_csi_secrets: Option<ClientProfileRbdCephCsiSecrets>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "radosNamespace")]
    pub rados_namespace: Option<String>,
}

/// CephCsiSecretsSpec defines the secrets used by the client profile
/// to access the Ceph cluster and perform operations
/// on volumes.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClientProfileRbdCephCsiSecrets {
    /// SecretReference represents a Secret Reference. It has enough information to retrieve secret
    /// in any namespace
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controllerPublishSecret")]
    pub controller_publish_secret: Option<ClientProfileRbdCephCsiSecretsControllerPublishSecret>,
}

/// SecretReference represents a Secret Reference. It has enough information to retrieve secret
/// in any namespace
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClientProfileRbdCephCsiSecretsControllerPublishSecret {
    /// name is unique within a namespace to reference a secret resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// namespace defines the space within which the secret name must be unique.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// ClientProfileStatus defines the observed state of Ceph CSI
/// configuration for volumes and snapshots configured to use
/// this profile
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClientProfileStatus {
}

