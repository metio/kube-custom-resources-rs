// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/devfile/api/workspace.devfile.io/v1alpha1/devworkspacetemplates.yaml
// kopium version: 0.22.4

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// Structure of the workspace. This is also the specification of a workspace template.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "workspace.devfile.io", version = "v1alpha1", kind = "DevWorkspaceTemplate", plural = "devworkspacetemplates")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct DevWorkspaceTemplateSpec {
    /// Predefined, ready-to-use, workspace-related commands
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commands: Option<Vec<DevWorkspaceTemplateCommands>>,
    /// List of the workspace components, such as editor and plugins, user-provided containers, or other types of components
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<DevWorkspaceTemplateComponents>>,
    /// Bindings of commands to events. Each command is referred-to by its name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events: Option<DevWorkspaceTemplateEvents>,
    /// Parent workspace template
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<DevWorkspaceTemplateParent>,
    /// Projects worked on in the workspace, containing names and sources locations
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub projects: Option<Vec<DevWorkspaceTemplateProjects>>,
    /// StarterProjects is a project that can be used as a starting point when bootstrapping new projects
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "starterProjects")]
    pub starter_projects: Option<Vec<DevWorkspaceTemplateStarterProjects>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateCommands {
    /// Command that consists in applying a given component definition, typically bound to a workspace event. 
    ///  For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the workspace POD, unless the component has its `dedicatedPod` field set to `true`. 
    ///  When no `apply` command exist for a given component, it is assumed the component will be applied at workspace start by default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apply: Option<DevWorkspaceTemplateCommandsApply>,
    /// Type of workspace command
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commandType")]
    pub command_type: Option<DevWorkspaceTemplateCommandsCommandType>,
    /// Composite command that allows executing several sub-commands either sequentially or concurrently
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub composite: Option<DevWorkspaceTemplateCommandsComposite>,
    /// Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<DevWorkspaceTemplateCommandsCustom>,
    /// CLI Command executed in an existing component container
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<DevWorkspaceTemplateCommandsExec>,
    /// Command providing the definition of a VsCode launch action 
    ///  Deprecated; removed in v1alpha2
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vscodeLaunch")]
    pub vscode_launch: Option<DevWorkspaceTemplateCommandsVscodeLaunch>,
    /// Command providing the definition of a VsCode Task 
    ///  Deprecated; removed in v1alpha2
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vscodeTask")]
    pub vscode_task: Option<DevWorkspaceTemplateCommandsVscodeTask>,
}

/// Command that consists in applying a given component definition, typically bound to a workspace event. 
///  For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the workspace POD, unless the component has its `dedicatedPod` field set to `true`. 
///  When no `apply` command exist for a given component, it is assumed the component will be applied at workspace start by default.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateCommandsApply {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Describes component that will be applied
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<String>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateCommandsApplyGroup>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateCommandsApplyGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateCommandsApplyGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateCommandsApplyGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateCommandsCommandType {
    Exec,
    Apply,
    VscodeTask,
    VscodeLaunch,
    Composite,
    Custom,
}

/// Composite command that allows executing several sub-commands either sequentially or concurrently
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateCommandsComposite {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// The commands that comprise this composite command
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commands: Option<Vec<String>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateCommandsCompositeGroup>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Indicates if the sub-commands should be executed concurrently
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parallel: Option<bool>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateCommandsCompositeGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateCommandsCompositeGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateCommandsCompositeGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

/// Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateCommandsCustom {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Class of command that the associated implementation component should use to process this command with the appropriate logic
    #[serde(rename = "commandClass")]
    pub command_class: String,
    /// Additional free-form configuration for this custom command that the implementation component will know how to use
    #[serde(rename = "embeddedResource")]
    pub embedded_resource: BTreeMap<String, serde_json::Value>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateCommandsCustomGroup>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateCommandsCustomGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateCommandsCustomGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateCommandsCustomGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

/// CLI Command executed in an existing component container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateCommandsExec {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// The actual command-line string 
    ///  Special variables that can be used: 
    ///   - `$PROJECTS_ROOT`: A path where projects sources are mounted 
    ///   - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commandLine")]
    pub command_line: Option<String>,
    /// Describes component to which given action relates
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<String>,
    /// Optional list of environment variables that have to be set before running the command
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<DevWorkspaceTemplateCommandsExecEnv>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateCommandsExecGroup>,
    /// Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hotReloadCapable")]
    pub hot_reload_capable: Option<bool>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Working directory where the command should be executed 
    ///  Special variables that can be used: 
    ///   - `${PROJECTS_ROOT}`: A path where projects sources are mounted 
    ///   - `${PROJECT_SOURCE}`: A path to a project source (${PROJECTS_ROOT}/<project-name>). If there are multiple projects, this will point to the directory of the first one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workingDir")]
    pub working_dir: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateCommandsExecEnv {
    pub name: String,
    pub value: String,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateCommandsExecGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateCommandsExecGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateCommandsExecGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

/// Command providing the definition of a VsCode launch action 
///  Deprecated; removed in v1alpha2
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateCommandsVscodeLaunch {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateCommandsVscodeLaunchGroup>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Inlined content of the VsCode configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Vscode configuration command location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateCommandsVscodeLaunchLocationType>,
    /// Location as an absolute of relative URI the VsCode configuration will be fetched from
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateCommandsVscodeLaunchGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateCommandsVscodeLaunchGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateCommandsVscodeLaunchGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

/// Command providing the definition of a VsCode launch action 
///  Deprecated; removed in v1alpha2
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateCommandsVscodeLaunchLocationType {
    Uri,
    Inlined,
}

/// Command providing the definition of a VsCode Task 
///  Deprecated; removed in v1alpha2
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateCommandsVscodeTask {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateCommandsVscodeTaskGroup>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Inlined content of the VsCode configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Vscode configuration command location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateCommandsVscodeTaskLocationType>,
    /// Location as an absolute of relative URI the VsCode configuration will be fetched from
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateCommandsVscodeTaskGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateCommandsVscodeTaskGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateCommandsVscodeTaskGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

/// Command providing the definition of a VsCode Task 
///  Deprecated; removed in v1alpha2
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateCommandsVscodeTaskLocationType {
    Uri,
    Inlined,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponents {
    /// Type of component
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "componentType")]
    pub component_type: Option<DevWorkspaceTemplateComponentsComponentType>,
    /// Allows adding and configuring workspace-related containers
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<DevWorkspaceTemplateComponentsContainer>,
    /// Custom component whose logic is implementation-dependant and should be provided by the user possibly through some dedicated controller
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<DevWorkspaceTemplateComponentsCustom>,
    /// Allows importing into the workspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<DevWorkspaceTemplateComponentsKubernetes>,
    /// Allows importing into the workspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openshift: Option<DevWorkspaceTemplateComponentsOpenshift>,
    /// Allows importing a plugin. 
    ///  Plugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<DevWorkspaceTemplateComponentsPlugin>,
    /// Allows specifying the definition of a volume shared by several other components
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volume: Option<DevWorkspaceTemplateComponentsVolume>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsComponentType {
    Container,
    Kubernetes,
    Openshift,
    Volume,
    Plugin,
    Custom,
}

/// Allows adding and configuring workspace-related containers
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsContainer {
    /// The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. 
    ///  Defaults to an empty array, meaning use whatever is defined in the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// The command to run in the dockerimage component instead of the default one provided in the image. 
    ///  Defaults to an empty array, meaning use whatever is defined in the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dedicatedPod")]
    pub dedicated_pod: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateComponentsContainerEndpoints>>,
    /// Environment variables used in this container
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<DevWorkspaceTemplateComponentsContainerEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryLimit")]
    pub memory_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountSources")]
    pub mount_sources: Option<bool>,
    pub name: String,
    /// Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the value of the `PROJECTS_ROOT` environment variable is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceMapping")]
    pub source_mapping: Option<String>,
    /// List of volumes mounts that should be mounted is this container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<DevWorkspaceTemplateComponentsContainerVolumeMounts>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsContainerEndpoints {
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateComponentsContainerEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Describes whether the endpoint should be secured and protected by some authentication process
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsContainerEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsContainerEnv {
    pub name: String,
    pub value: String,
}

/// Volume that should be mounted to a component container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsContainerVolumeMounts {
    /// The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.
    pub name: String,
    /// The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// Custom component whose logic is implementation-dependant and should be provided by the user possibly through some dedicated controller
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsCustom {
    /// Class of component that the associated implementation controller should use to process this command with the appropriate logic
    #[serde(rename = "componentClass")]
    pub component_class: String,
    /// Additional free-form configuration for this custom component that the implementation controller will know how to use
    #[serde(rename = "embeddedResource")]
    pub embedded_resource: BTreeMap<String, serde_json::Value>,
    /// Mandatory name that allows referencing the component in commands, or inside a parent
    pub name: String,
}

/// Allows importing into the workspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsKubernetes {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateComponentsKubernetesEndpoints>>,
    /// Inlined manifest
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Kubernetes-like location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateComponentsKubernetesLocationType>,
    /// Mandatory name that allows referencing the component in commands, or inside a parent
    pub name: String,
    /// Location in a file fetched from a uri.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsKubernetesEndpoints {
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateComponentsKubernetesEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Describes whether the endpoint should be secured and protected by some authentication process
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsKubernetesEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

/// Allows importing into the workspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsKubernetesLocationType {
    Uri,
    Inlined,
}

/// Allows importing into the workspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsOpenshift {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateComponentsOpenshiftEndpoints>>,
    /// Inlined manifest
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Kubernetes-like location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateComponentsOpenshiftLocationType>,
    /// Mandatory name that allows referencing the component in commands, or inside a parent
    pub name: String,
    /// Location in a file fetched from a uri.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsOpenshiftEndpoints {
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateComponentsOpenshiftEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Describes whether the endpoint should be secured and protected by some authentication process
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsOpenshiftEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

/// Allows importing into the workspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsOpenshiftLocationType {
    Uri,
    Inlined,
}

/// Allows importing a plugin. 
///  Plugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPlugin {
    /// Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done using a strategic merge patch
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commands: Option<Vec<DevWorkspaceTemplateComponentsPluginCommands>>,
    /// Overrides of components encapsulated in a plugin. Overriding is done using a strategic merge patch. A plugin cannot override embedded plugin components.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<DevWorkspaceTemplateComponentsPluginComponents>>,
    /// Id in a registry that contains a Devfile yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// type of location from where the referenced template structure should be retrieved
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "importReferenceType")]
    pub import_reference_type: Option<DevWorkspaceTemplateComponentsPluginImportReferenceType>,
    /// Reference to a Kubernetes CRD of type DevWorkspaceTemplate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<DevWorkspaceTemplateComponentsPluginKubernetes>,
    /// Optional name that allows referencing the component in commands, or inside a parent If omitted it will be infered from the location (uri or registryEntry)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registryUrl")]
    pub registry_url: Option<String>,
    /// Uri of a Devfile yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommands {
    /// Command that consists in applying a given component definition, typically bound to a workspace event. 
    ///  For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the workspace POD, unless the component has its `dedicatedPod` field set to `true`. 
    ///  When no `apply` command exist for a given component, it is assumed the component will be applied at workspace start by default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apply: Option<DevWorkspaceTemplateComponentsPluginCommandsApply>,
    /// Type of workspace command
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commandType")]
    pub command_type: Option<DevWorkspaceTemplateComponentsPluginCommandsCommandType>,
    /// Composite command that allows executing several sub-commands either sequentially or concurrently
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub composite: Option<DevWorkspaceTemplateComponentsPluginCommandsComposite>,
    /// Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<DevWorkspaceTemplateComponentsPluginCommandsCustom>,
    /// CLI Command executed in an existing component container
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<DevWorkspaceTemplateComponentsPluginCommandsExec>,
    /// Command providing the definition of a VsCode launch action 
    ///  Deprecated; removed in v1alpha2
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vscodeLaunch")]
    pub vscode_launch: Option<DevWorkspaceTemplateComponentsPluginCommandsVscodeLaunch>,
    /// Command providing the definition of a VsCode Task 
    ///  Deprecated; removed in v1alpha2
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vscodeTask")]
    pub vscode_task: Option<DevWorkspaceTemplateComponentsPluginCommandsVscodeTask>,
}

/// Command that consists in applying a given component definition, typically bound to a workspace event. 
///  For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the workspace POD, unless the component has its `dedicatedPod` field set to `true`. 
///  When no `apply` command exist for a given component, it is assumed the component will be applied at workspace start by default.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommandsApply {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Describes component that will be applied
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<String>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateComponentsPluginCommandsApplyGroup>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommandsApplyGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateComponentsPluginCommandsApplyGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginCommandsApplyGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginCommandsCommandType {
    Exec,
    Apply,
    VscodeTask,
    VscodeLaunch,
    Composite,
    Custom,
}

/// Composite command that allows executing several sub-commands either sequentially or concurrently
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommandsComposite {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// The commands that comprise this composite command
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commands: Option<Vec<String>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateComponentsPluginCommandsCompositeGroup>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Indicates if the sub-commands should be executed concurrently
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parallel: Option<bool>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommandsCompositeGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateComponentsPluginCommandsCompositeGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginCommandsCompositeGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

/// Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommandsCustom {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Class of command that the associated implementation component should use to process this command with the appropriate logic
    #[serde(rename = "commandClass")]
    pub command_class: String,
    /// Additional free-form configuration for this custom command that the implementation component will know how to use
    #[serde(rename = "embeddedResource")]
    pub embedded_resource: BTreeMap<String, serde_json::Value>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateComponentsPluginCommandsCustomGroup>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommandsCustomGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateComponentsPluginCommandsCustomGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginCommandsCustomGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

/// CLI Command executed in an existing component container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommandsExec {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// The actual command-line string 
    ///  Special variables that can be used: 
    ///   - `$PROJECTS_ROOT`: A path where projects sources are mounted 
    ///   - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commandLine")]
    pub command_line: Option<String>,
    /// Describes component to which given action relates
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<String>,
    /// Optional list of environment variables that have to be set before running the command
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<DevWorkspaceTemplateComponentsPluginCommandsExecEnv>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateComponentsPluginCommandsExecGroup>,
    /// Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hotReloadCapable")]
    pub hot_reload_capable: Option<bool>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Working directory where the command should be executed 
    ///  Special variables that can be used: 
    ///   - `${PROJECTS_ROOT}`: A path where projects sources are mounted 
    ///   - `${PROJECT_SOURCE}`: A path to a project source (${PROJECTS_ROOT}/<project-name>). If there are multiple projects, this will point to the directory of the first one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workingDir")]
    pub working_dir: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommandsExecEnv {
    pub name: String,
    pub value: String,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommandsExecGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateComponentsPluginCommandsExecGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginCommandsExecGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

/// Command providing the definition of a VsCode launch action 
///  Deprecated; removed in v1alpha2
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommandsVscodeLaunch {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateComponentsPluginCommandsVscodeLaunchGroup>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Inlined content of the VsCode configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Vscode configuration command location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateComponentsPluginCommandsVscodeLaunchLocationType>,
    /// Location as an absolute of relative URI the VsCode configuration will be fetched from
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommandsVscodeLaunchGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateComponentsPluginCommandsVscodeLaunchGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginCommandsVscodeLaunchGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

/// Command providing the definition of a VsCode launch action 
///  Deprecated; removed in v1alpha2
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginCommandsVscodeLaunchLocationType {
    Uri,
    Inlined,
}

/// Command providing the definition of a VsCode Task 
///  Deprecated; removed in v1alpha2
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommandsVscodeTask {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateComponentsPluginCommandsVscodeTaskGroup>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Inlined content of the VsCode configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Vscode configuration command location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateComponentsPluginCommandsVscodeTaskLocationType>,
    /// Location as an absolute of relative URI the VsCode configuration will be fetched from
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommandsVscodeTaskGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateComponentsPluginCommandsVscodeTaskGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginCommandsVscodeTaskGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

/// Command providing the definition of a VsCode Task 
///  Deprecated; removed in v1alpha2
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginCommandsVscodeTaskLocationType {
    Uri,
    Inlined,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponents {
    /// Type of component override for a plugin
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "componentType")]
    pub component_type: Option<DevWorkspaceTemplateComponentsPluginComponentsComponentType>,
    /// Configuration overriding for a Container component in a plugin
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<DevWorkspaceTemplateComponentsPluginComponentsContainer>,
    /// Configuration overriding for a Kubernetes component in a plugin
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<DevWorkspaceTemplateComponentsPluginComponentsKubernetes>,
    /// Configuration overriding for an OpenShift component in a plugin
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openshift: Option<DevWorkspaceTemplateComponentsPluginComponentsOpenshift>,
    /// Configuration overriding for a Volume component in a plugin
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volume: Option<DevWorkspaceTemplateComponentsPluginComponentsVolume>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginComponentsComponentType {
    Container,
    Kubernetes,
    Openshift,
    Volume,
}

/// Configuration overriding for a Container component in a plugin
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsContainer {
    /// The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. 
    ///  Defaults to an empty array, meaning use whatever is defined in the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// The command to run in the dockerimage component instead of the default one provided in the image. 
    ///  Defaults to an empty array, meaning use whatever is defined in the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dedicatedPod")]
    pub dedicated_pod: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateComponentsPluginComponentsContainerEndpoints>>,
    /// Environment variables used in this container
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<DevWorkspaceTemplateComponentsPluginComponentsContainerEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryLimit")]
    pub memory_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountSources")]
    pub mount_sources: Option<bool>,
    pub name: String,
    /// Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the value of the `PROJECTS_ROOT` environment variable is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceMapping")]
    pub source_mapping: Option<String>,
    /// List of volumes mounts that should be mounted is this container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<DevWorkspaceTemplateComponentsPluginComponentsContainerVolumeMounts>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsContainerEndpoints {
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateComponentsPluginComponentsContainerEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Describes whether the endpoint should be secured and protected by some authentication process
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginComponentsContainerEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsContainerEnv {
    pub name: String,
    pub value: String,
}

/// Volume that should be mounted to a component container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsContainerVolumeMounts {
    /// The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.
    pub name: String,
    /// The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// Configuration overriding for a Kubernetes component in a plugin
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsKubernetes {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateComponentsPluginComponentsKubernetesEndpoints>>,
    /// Inlined manifest
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Kubernetes-like location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateComponentsPluginComponentsKubernetesLocationType>,
    /// Mandatory name that allows referencing the component in commands, or inside a parent
    pub name: String,
    /// Location in a file fetched from a uri.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsKubernetesEndpoints {
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateComponentsPluginComponentsKubernetesEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Describes whether the endpoint should be secured and protected by some authentication process
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginComponentsKubernetesEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

/// Configuration overriding for a Kubernetes component in a plugin
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginComponentsKubernetesLocationType {
    Uri,
    Inlined,
}

/// Configuration overriding for an OpenShift component in a plugin
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsOpenshift {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateComponentsPluginComponentsOpenshiftEndpoints>>,
    /// Inlined manifest
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Kubernetes-like location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateComponentsPluginComponentsOpenshiftLocationType>,
    /// Mandatory name that allows referencing the component in commands, or inside a parent
    pub name: String,
    /// Location in a file fetched from a uri.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsOpenshiftEndpoints {
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateComponentsPluginComponentsOpenshiftEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Describes whether the endpoint should be secured and protected by some authentication process
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginComponentsOpenshiftEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

/// Configuration overriding for an OpenShift component in a plugin
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginComponentsOpenshiftLocationType {
    Uri,
    Inlined,
}

/// Configuration overriding for a Volume component in a plugin
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsVolume {
    /// Ephemeral volumes are not stored persistently across restarts. Defaults to false
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ephemeral: Option<bool>,
    /// Mandatory name that allows referencing the Volume component in Container volume mounts or inside a parent
    pub name: String,
    /// Size of the volume
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
}

/// Allows importing a plugin. 
///  Plugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginImportReferenceType {
    Uri,
    Id,
    Kubernetes,
}

/// Reference to a Kubernetes CRD of type DevWorkspaceTemplate
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginKubernetes {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Allows specifying the definition of a volume shared by several other components
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsVolume {
    /// Ephemeral volumes are not stored persistently across restarts. Defaults to false
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ephemeral: Option<bool>,
    /// Mandatory name that allows referencing the Volume component in Container volume mounts or inside a parent
    pub name: String,
    /// Size of the volume
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
}

/// Bindings of commands to events. Each command is referred-to by its name.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateEvents {
    /// Names of commands that should be executed after the workspace is completely started. In the case of Che-Theia, these commands should be executed after all plugins and extensions have started, including project cloning. This means that those commands are not triggered until the user opens the IDE in his browser.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postStart")]
    pub post_start: Option<Vec<String>>,
    /// Names of commands that should be executed after stopping the workspace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postStop")]
    pub post_stop: Option<Vec<String>>,
    /// Names of commands that should be executed before the workspace start. Kubernetes-wise, these commands would typically be executed in init containers of the workspace POD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preStart")]
    pub pre_start: Option<Vec<String>>,
    /// Names of commands that should be executed before stopping the workspace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preStop")]
    pub pre_stop: Option<Vec<String>>,
}

/// Parent workspace template
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParent {
    /// Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done using a strategic merge patch
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commands: Option<Vec<DevWorkspaceTemplateParentCommands>>,
    /// Overrides of components encapsulated in a parent devfile. Overriding is done using a strategic merge patch
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<DevWorkspaceTemplateParentComponents>>,
    /// Id in a registry that contains a Devfile yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// type of location from where the referenced template structure should be retrieved
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "importReferenceType")]
    pub import_reference_type: Option<DevWorkspaceTemplateParentImportReferenceType>,
    /// Reference to a Kubernetes CRD of type DevWorkspaceTemplate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<DevWorkspaceTemplateParentKubernetes>,
    /// Overrides of projects encapsulated in a parent devfile. Overriding is done using a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub projects: Option<Vec<DevWorkspaceTemplateParentProjects>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registryUrl")]
    pub registry_url: Option<String>,
    /// Overrides of starter projects encapsulated in a parent devfile Overriding is done using a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "starterProjects")]
    pub starter_projects: Option<Vec<DevWorkspaceTemplateParentStarterProjects>>,
    /// Uri of a Devfile yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentCommands {
    /// Command that consists in applying a given component definition, typically bound to a workspace event. 
    ///  For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the workspace POD, unless the component has its `dedicatedPod` field set to `true`. 
    ///  When no `apply` command exist for a given component, it is assumed the component will be applied at workspace start by default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apply: Option<DevWorkspaceTemplateParentCommandsApply>,
    /// Type of workspace command
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commandType")]
    pub command_type: Option<DevWorkspaceTemplateParentCommandsCommandType>,
    /// Composite command that allows executing several sub-commands either sequentially or concurrently
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub composite: Option<DevWorkspaceTemplateParentCommandsComposite>,
    /// Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<DevWorkspaceTemplateParentCommandsCustom>,
    /// CLI Command executed in an existing component container
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<DevWorkspaceTemplateParentCommandsExec>,
    /// Command providing the definition of a VsCode launch action 
    ///  Deprecated; removed in v1alpha2
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vscodeLaunch")]
    pub vscode_launch: Option<DevWorkspaceTemplateParentCommandsVscodeLaunch>,
    /// Command providing the definition of a VsCode Task 
    ///  Deprecated; removed in v1alpha2
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vscodeTask")]
    pub vscode_task: Option<DevWorkspaceTemplateParentCommandsVscodeTask>,
}

/// Command that consists in applying a given component definition, typically bound to a workspace event. 
///  For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the workspace POD, unless the component has its `dedicatedPod` field set to `true`. 
///  When no `apply` command exist for a given component, it is assumed the component will be applied at workspace start by default.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentCommandsApply {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Describes component that will be applied
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<String>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateParentCommandsApplyGroup>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateParentCommandsApplyGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateParentCommandsApplyGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentCommandsApplyGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentCommandsCommandType {
    Exec,
    Apply,
    VscodeTask,
    VscodeLaunch,
    Composite,
    Custom,
}

/// Composite command that allows executing several sub-commands either sequentially or concurrently
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentCommandsComposite {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// The commands that comprise this composite command
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commands: Option<Vec<String>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateParentCommandsCompositeGroup>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Indicates if the sub-commands should be executed concurrently
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parallel: Option<bool>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateParentCommandsCompositeGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateParentCommandsCompositeGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentCommandsCompositeGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

/// Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentCommandsCustom {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Class of command that the associated implementation component should use to process this command with the appropriate logic
    #[serde(rename = "commandClass")]
    pub command_class: String,
    /// Additional free-form configuration for this custom command that the implementation component will know how to use
    #[serde(rename = "embeddedResource")]
    pub embedded_resource: BTreeMap<String, serde_json::Value>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateParentCommandsCustomGroup>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateParentCommandsCustomGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateParentCommandsCustomGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentCommandsCustomGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

/// CLI Command executed in an existing component container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentCommandsExec {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// The actual command-line string 
    ///  Special variables that can be used: 
    ///   - `$PROJECTS_ROOT`: A path where projects sources are mounted 
    ///   - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commandLine")]
    pub command_line: Option<String>,
    /// Describes component to which given action relates
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<String>,
    /// Optional list of environment variables that have to be set before running the command
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<DevWorkspaceTemplateParentCommandsExecEnv>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateParentCommandsExecGroup>,
    /// Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hotReloadCapable")]
    pub hot_reload_capable: Option<bool>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Working directory where the command should be executed 
    ///  Special variables that can be used: 
    ///   - `${PROJECTS_ROOT}`: A path where projects sources are mounted 
    ///   - `${PROJECT_SOURCE}`: A path to a project source (${PROJECTS_ROOT}/<project-name>). If there are multiple projects, this will point to the directory of the first one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workingDir")]
    pub working_dir: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentCommandsExecEnv {
    pub name: String,
    pub value: String,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateParentCommandsExecGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateParentCommandsExecGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentCommandsExecGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

/// Command providing the definition of a VsCode launch action 
///  Deprecated; removed in v1alpha2
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentCommandsVscodeLaunch {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateParentCommandsVscodeLaunchGroup>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Inlined content of the VsCode configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Vscode configuration command location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateParentCommandsVscodeLaunchLocationType>,
    /// Location as an absolute of relative URI the VsCode configuration will be fetched from
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateParentCommandsVscodeLaunchGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateParentCommandsVscodeLaunchGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentCommandsVscodeLaunchGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

/// Command providing the definition of a VsCode launch action 
///  Deprecated; removed in v1alpha2
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentCommandsVscodeLaunchLocationType {
    Uri,
    Inlined,
}

/// Command providing the definition of a VsCode Task 
///  Deprecated; removed in v1alpha2
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentCommandsVscodeTask {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateParentCommandsVscodeTaskGroup>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Inlined content of the VsCode configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Vscode configuration command location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateParentCommandsVscodeTaskLocationType>,
    /// Location as an absolute of relative URI the VsCode configuration will be fetched from
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateParentCommandsVscodeTaskGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateParentCommandsVscodeTaskGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentCommandsVscodeTaskGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

/// Command providing the definition of a VsCode Task 
///  Deprecated; removed in v1alpha2
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentCommandsVscodeTaskLocationType {
    Uri,
    Inlined,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponents {
    /// Type of component
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "componentType")]
    pub component_type: Option<DevWorkspaceTemplateParentComponentsComponentType>,
    /// Allows adding and configuring workspace-related containers
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<DevWorkspaceTemplateParentComponentsContainer>,
    /// Custom component whose logic is implementation-dependant and should be provided by the user possibly through some dedicated controller
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<DevWorkspaceTemplateParentComponentsCustom>,
    /// Allows importing into the workspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<DevWorkspaceTemplateParentComponentsKubernetes>,
    /// Allows importing into the workspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openshift: Option<DevWorkspaceTemplateParentComponentsOpenshift>,
    /// Allows importing a plugin. 
    ///  Plugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<DevWorkspaceTemplateParentComponentsPlugin>,
    /// Allows specifying the definition of a volume shared by several other components
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volume: Option<DevWorkspaceTemplateParentComponentsVolume>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsComponentType {
    Container,
    Kubernetes,
    Openshift,
    Volume,
    Plugin,
    Custom,
}

/// Allows adding and configuring workspace-related containers
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsContainer {
    /// The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. 
    ///  Defaults to an empty array, meaning use whatever is defined in the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// The command to run in the dockerimage component instead of the default one provided in the image. 
    ///  Defaults to an empty array, meaning use whatever is defined in the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dedicatedPod")]
    pub dedicated_pod: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateParentComponentsContainerEndpoints>>,
    /// Environment variables used in this container
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<DevWorkspaceTemplateParentComponentsContainerEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryLimit")]
    pub memory_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountSources")]
    pub mount_sources: Option<bool>,
    pub name: String,
    /// Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the value of the `PROJECTS_ROOT` environment variable is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceMapping")]
    pub source_mapping: Option<String>,
    /// List of volumes mounts that should be mounted is this container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<DevWorkspaceTemplateParentComponentsContainerVolumeMounts>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsContainerEndpoints {
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateParentComponentsContainerEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Describes whether the endpoint should be secured and protected by some authentication process
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsContainerEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsContainerEnv {
    pub name: String,
    pub value: String,
}

/// Volume that should be mounted to a component container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsContainerVolumeMounts {
    /// The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.
    pub name: String,
    /// The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// Custom component whose logic is implementation-dependant and should be provided by the user possibly through some dedicated controller
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsCustom {
    /// Class of component that the associated implementation controller should use to process this command with the appropriate logic
    #[serde(rename = "componentClass")]
    pub component_class: String,
    /// Additional free-form configuration for this custom component that the implementation controller will know how to use
    #[serde(rename = "embeddedResource")]
    pub embedded_resource: BTreeMap<String, serde_json::Value>,
    /// Mandatory name that allows referencing the component in commands, or inside a parent
    pub name: String,
}

/// Allows importing into the workspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsKubernetes {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateParentComponentsKubernetesEndpoints>>,
    /// Inlined manifest
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Kubernetes-like location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateParentComponentsKubernetesLocationType>,
    /// Mandatory name that allows referencing the component in commands, or inside a parent
    pub name: String,
    /// Location in a file fetched from a uri.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsKubernetesEndpoints {
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateParentComponentsKubernetesEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Describes whether the endpoint should be secured and protected by some authentication process
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsKubernetesEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

/// Allows importing into the workspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsKubernetesLocationType {
    Uri,
    Inlined,
}

/// Allows importing into the workspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsOpenshift {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateParentComponentsOpenshiftEndpoints>>,
    /// Inlined manifest
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Kubernetes-like location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateParentComponentsOpenshiftLocationType>,
    /// Mandatory name that allows referencing the component in commands, or inside a parent
    pub name: String,
    /// Location in a file fetched from a uri.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsOpenshiftEndpoints {
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateParentComponentsOpenshiftEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Describes whether the endpoint should be secured and protected by some authentication process
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsOpenshiftEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

/// Allows importing into the workspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsOpenshiftLocationType {
    Uri,
    Inlined,
}

/// Allows importing a plugin. 
///  Plugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPlugin {
    /// Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done using a strategic merge patch
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commands: Option<Vec<DevWorkspaceTemplateParentComponentsPluginCommands>>,
    /// Overrides of components encapsulated in a plugin. Overriding is done using a strategic merge patch. A plugin cannot override embedded plugin components.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<DevWorkspaceTemplateParentComponentsPluginComponents>>,
    /// Id in a registry that contains a Devfile yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// type of location from where the referenced template structure should be retrieved
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "importReferenceType")]
    pub import_reference_type: Option<DevWorkspaceTemplateParentComponentsPluginImportReferenceType>,
    /// Reference to a Kubernetes CRD of type DevWorkspaceTemplate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<DevWorkspaceTemplateParentComponentsPluginKubernetes>,
    /// Optional name that allows referencing the component in commands, or inside a parent If omitted it will be infered from the location (uri or registryEntry)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registryUrl")]
    pub registry_url: Option<String>,
    /// Uri of a Devfile yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommands {
    /// Command that consists in applying a given component definition, typically bound to a workspace event. 
    ///  For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the workspace POD, unless the component has its `dedicatedPod` field set to `true`. 
    ///  When no `apply` command exist for a given component, it is assumed the component will be applied at workspace start by default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apply: Option<DevWorkspaceTemplateParentComponentsPluginCommandsApply>,
    /// Type of workspace command
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commandType")]
    pub command_type: Option<DevWorkspaceTemplateParentComponentsPluginCommandsCommandType>,
    /// Composite command that allows executing several sub-commands either sequentially or concurrently
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub composite: Option<DevWorkspaceTemplateParentComponentsPluginCommandsComposite>,
    /// Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<DevWorkspaceTemplateParentComponentsPluginCommandsCustom>,
    /// CLI Command executed in an existing component container
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<DevWorkspaceTemplateParentComponentsPluginCommandsExec>,
    /// Command providing the definition of a VsCode launch action 
    ///  Deprecated; removed in v1alpha2
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vscodeLaunch")]
    pub vscode_launch: Option<DevWorkspaceTemplateParentComponentsPluginCommandsVscodeLaunch>,
    /// Command providing the definition of a VsCode Task 
    ///  Deprecated; removed in v1alpha2
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vscodeTask")]
    pub vscode_task: Option<DevWorkspaceTemplateParentComponentsPluginCommandsVscodeTask>,
}

/// Command that consists in applying a given component definition, typically bound to a workspace event. 
///  For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the workspace POD, unless the component has its `dedicatedPod` field set to `true`. 
///  When no `apply` command exist for a given component, it is assumed the component will be applied at workspace start by default.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommandsApply {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Describes component that will be applied
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<String>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateParentComponentsPluginCommandsApplyGroup>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommandsApplyGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateParentComponentsPluginCommandsApplyGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginCommandsApplyGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginCommandsCommandType {
    Exec,
    Apply,
    VscodeTask,
    VscodeLaunch,
    Composite,
    Custom,
}

/// Composite command that allows executing several sub-commands either sequentially or concurrently
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommandsComposite {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// The commands that comprise this composite command
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commands: Option<Vec<String>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateParentComponentsPluginCommandsCompositeGroup>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Indicates if the sub-commands should be executed concurrently
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parallel: Option<bool>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommandsCompositeGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateParentComponentsPluginCommandsCompositeGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginCommandsCompositeGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

/// Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommandsCustom {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Class of command that the associated implementation component should use to process this command with the appropriate logic
    #[serde(rename = "commandClass")]
    pub command_class: String,
    /// Additional free-form configuration for this custom command that the implementation component will know how to use
    #[serde(rename = "embeddedResource")]
    pub embedded_resource: BTreeMap<String, serde_json::Value>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateParentComponentsPluginCommandsCustomGroup>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommandsCustomGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateParentComponentsPluginCommandsCustomGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginCommandsCustomGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

/// CLI Command executed in an existing component container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommandsExec {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// The actual command-line string 
    ///  Special variables that can be used: 
    ///   - `$PROJECTS_ROOT`: A path where projects sources are mounted 
    ///   - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commandLine")]
    pub command_line: Option<String>,
    /// Describes component to which given action relates
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<String>,
    /// Optional list of environment variables that have to be set before running the command
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<DevWorkspaceTemplateParentComponentsPluginCommandsExecEnv>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateParentComponentsPluginCommandsExecGroup>,
    /// Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hotReloadCapable")]
    pub hot_reload_capable: Option<bool>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Working directory where the command should be executed 
    ///  Special variables that can be used: 
    ///   - `${PROJECTS_ROOT}`: A path where projects sources are mounted 
    ///   - `${PROJECT_SOURCE}`: A path to a project source (${PROJECTS_ROOT}/<project-name>). If there are multiple projects, this will point to the directory of the first one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workingDir")]
    pub working_dir: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommandsExecEnv {
    pub name: String,
    pub value: String,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommandsExecGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateParentComponentsPluginCommandsExecGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginCommandsExecGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

/// Command providing the definition of a VsCode launch action 
///  Deprecated; removed in v1alpha2
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommandsVscodeLaunch {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateParentComponentsPluginCommandsVscodeLaunchGroup>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Inlined content of the VsCode configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Vscode configuration command location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateParentComponentsPluginCommandsVscodeLaunchLocationType>,
    /// Location as an absolute of relative URI the VsCode configuration will be fetched from
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommandsVscodeLaunchGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateParentComponentsPluginCommandsVscodeLaunchGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginCommandsVscodeLaunchGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

/// Command providing the definition of a VsCode launch action 
///  Deprecated; removed in v1alpha2
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginCommandsVscodeLaunchLocationType {
    Uri,
    Inlined,
}

/// Command providing the definition of a VsCode Task 
///  Deprecated; removed in v1alpha2
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommandsVscodeTask {
    /// Optional map of free-form additional command attributes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateParentComponentsPluginCommandsVscodeTaskGroup>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
    /// Inlined content of the VsCode configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Vscode configuration command location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateParentComponentsPluginCommandsVscodeTaskLocationType>,
    /// Location as an absolute of relative URI the VsCode configuration will be fetched from
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommandsVscodeTaskGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateParentComponentsPluginCommandsVscodeTaskGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginCommandsVscodeTaskGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
}

/// Command providing the definition of a VsCode Task 
///  Deprecated; removed in v1alpha2
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginCommandsVscodeTaskLocationType {
    Uri,
    Inlined,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponents {
    /// Type of component override for a plugin
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "componentType")]
    pub component_type: Option<DevWorkspaceTemplateParentComponentsPluginComponentsComponentType>,
    /// Configuration overriding for a Container component in a plugin
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<DevWorkspaceTemplateParentComponentsPluginComponentsContainer>,
    /// Configuration overriding for a Kubernetes component in a plugin
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<DevWorkspaceTemplateParentComponentsPluginComponentsKubernetes>,
    /// Configuration overriding for an OpenShift component in a plugin
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openshift: Option<DevWorkspaceTemplateParentComponentsPluginComponentsOpenshift>,
    /// Configuration overriding for a Volume component in a plugin
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volume: Option<DevWorkspaceTemplateParentComponentsPluginComponentsVolume>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginComponentsComponentType {
    Container,
    Kubernetes,
    Openshift,
    Volume,
}

/// Configuration overriding for a Container component in a plugin
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsContainer {
    /// The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. 
    ///  Defaults to an empty array, meaning use whatever is defined in the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// The command to run in the dockerimage component instead of the default one provided in the image. 
    ///  Defaults to an empty array, meaning use whatever is defined in the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dedicatedPod")]
    pub dedicated_pod: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateParentComponentsPluginComponentsContainerEndpoints>>,
    /// Environment variables used in this container
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<DevWorkspaceTemplateParentComponentsPluginComponentsContainerEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryLimit")]
    pub memory_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountSources")]
    pub mount_sources: Option<bool>,
    pub name: String,
    /// Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the value of the `PROJECTS_ROOT` environment variable is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceMapping")]
    pub source_mapping: Option<String>,
    /// List of volumes mounts that should be mounted is this container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<DevWorkspaceTemplateParentComponentsPluginComponentsContainerVolumeMounts>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsContainerEndpoints {
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateParentComponentsPluginComponentsContainerEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Describes whether the endpoint should be secured and protected by some authentication process
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginComponentsContainerEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsContainerEnv {
    pub name: String,
    pub value: String,
}

/// Volume that should be mounted to a component container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsContainerVolumeMounts {
    /// The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.
    pub name: String,
    /// The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// Configuration overriding for a Kubernetes component in a plugin
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsKubernetes {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateParentComponentsPluginComponentsKubernetesEndpoints>>,
    /// Inlined manifest
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Kubernetes-like location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateParentComponentsPluginComponentsKubernetesLocationType>,
    /// Mandatory name that allows referencing the component in commands, or inside a parent
    pub name: String,
    /// Location in a file fetched from a uri.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsKubernetesEndpoints {
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateParentComponentsPluginComponentsKubernetesEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Describes whether the endpoint should be secured and protected by some authentication process
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginComponentsKubernetesEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

/// Configuration overriding for a Kubernetes component in a plugin
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginComponentsKubernetesLocationType {
    Uri,
    Inlined,
}

/// Configuration overriding for an OpenShift component in a plugin
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsOpenshift {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateParentComponentsPluginComponentsOpenshiftEndpoints>>,
    /// Inlined manifest
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Kubernetes-like location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateParentComponentsPluginComponentsOpenshiftLocationType>,
    /// Mandatory name that allows referencing the component in commands, or inside a parent
    pub name: String,
    /// Location in a file fetched from a uri.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsOpenshiftEndpoints {
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, String>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateParentComponentsPluginComponentsOpenshiftEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Describes whether the endpoint should be secured and protected by some authentication process
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginComponentsOpenshiftEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

/// Configuration overriding for an OpenShift component in a plugin
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginComponentsOpenshiftLocationType {
    Uri,
    Inlined,
}

/// Configuration overriding for a Volume component in a plugin
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsVolume {
    /// Ephemeral volumes are not stored persistently across restarts. Defaults to false
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ephemeral: Option<bool>,
    /// Mandatory name that allows referencing the Volume component in Container volume mounts or inside a parent
    pub name: String,
    /// Size of the volume
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
}

/// Allows importing a plugin. 
///  Plugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginImportReferenceType {
    Uri,
    Id,
    Kubernetes,
}

/// Reference to a Kubernetes CRD of type DevWorkspaceTemplate
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginKubernetes {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Allows specifying the definition of a volume shared by several other components
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsVolume {
    /// Ephemeral volumes are not stored persistently across restarts. Defaults to false
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ephemeral: Option<bool>,
    /// Mandatory name that allows referencing the Volume component in Container volume mounts or inside a parent
    pub name: String,
    /// Size of the volume
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
}

/// Parent workspace template
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentImportReferenceType {
    Uri,
    Id,
    Kubernetes,
}

/// Reference to a Kubernetes CRD of type DevWorkspaceTemplate
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentKubernetes {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentProjects {
    /// Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clonePath")]
    pub clone_path: Option<String>,
    /// Project's Custom source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<DevWorkspaceTemplateParentProjectsCustom>,
    /// Project's Git source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git: Option<DevWorkspaceTemplateParentProjectsGit>,
    /// Project's GitHub source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub github: Option<DevWorkspaceTemplateParentProjectsGithub>,
    /// Project name
    pub name: String,
    /// Type of project source
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceType")]
    pub source_type: Option<DevWorkspaceTemplateParentProjectsSourceType>,
    /// Project's Zip source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zip: Option<DevWorkspaceTemplateParentProjectsZip>,
}

/// Project's Custom source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentProjectsCustom {
    #[serde(rename = "embeddedResource")]
    pub embedded_resource: BTreeMap<String, serde_json::Value>,
    #[serde(rename = "projectSourceClass")]
    pub project_source_class: String,
}

/// Project's Git source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentProjectsGit {
    /// Defines from what the project should be checked out. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkoutFrom")]
    pub checkout_from: Option<DevWorkspaceTemplateParentProjectsGitCheckoutFrom>,
    /// The remotes map which should be initialized in the git project. Must have at least one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remotes: Option<BTreeMap<String, String>>,
    /// Part of project to populate in the working directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sparseCheckoutDir")]
    pub sparse_checkout_dir: Option<String>,
}

/// Defines from what the project should be checked out. Required if there are more than one remote configured
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentProjectsGitCheckoutFrom {
    /// The remote name should be used as init. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<String>,
    /// The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

/// Project's GitHub source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentProjectsGithub {
    /// Defines from what the project should be checked out. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkoutFrom")]
    pub checkout_from: Option<DevWorkspaceTemplateParentProjectsGithubCheckoutFrom>,
    /// The remotes map which should be initialized in the git project. Must have at least one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remotes: Option<BTreeMap<String, String>>,
    /// Part of project to populate in the working directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sparseCheckoutDir")]
    pub sparse_checkout_dir: Option<String>,
}

/// Defines from what the project should be checked out. Required if there are more than one remote configured
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentProjectsGithubCheckoutFrom {
    /// The remote name should be used as init. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<String>,
    /// The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentProjectsSourceType {
    Git,
    Github,
    Zip,
    Custom,
}

/// Project's Zip source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentProjectsZip {
    /// Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Part of project to populate in the working directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sparseCheckoutDir")]
    pub sparse_checkout_dir: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentStarterProjects {
    /// Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clonePath")]
    pub clone_path: Option<String>,
    /// Project's Custom source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<DevWorkspaceTemplateParentStarterProjectsCustom>,
    /// Description of a starter project
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Project's Git source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git: Option<DevWorkspaceTemplateParentStarterProjectsGit>,
    /// Project's GitHub source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub github: Option<DevWorkspaceTemplateParentStarterProjectsGithub>,
    /// Project name
    pub name: String,
    /// Type of project source
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceType")]
    pub source_type: Option<DevWorkspaceTemplateParentStarterProjectsSourceType>,
    /// Project's Zip source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zip: Option<DevWorkspaceTemplateParentStarterProjectsZip>,
}

/// Project's Custom source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentStarterProjectsCustom {
    #[serde(rename = "embeddedResource")]
    pub embedded_resource: BTreeMap<String, serde_json::Value>,
    #[serde(rename = "projectSourceClass")]
    pub project_source_class: String,
}

/// Project's Git source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentStarterProjectsGit {
    /// Defines from what the project should be checked out. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkoutFrom")]
    pub checkout_from: Option<DevWorkspaceTemplateParentStarterProjectsGitCheckoutFrom>,
    /// The remotes map which should be initialized in the git project. Must have at least one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remotes: Option<BTreeMap<String, String>>,
    /// Part of project to populate in the working directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sparseCheckoutDir")]
    pub sparse_checkout_dir: Option<String>,
}

/// Defines from what the project should be checked out. Required if there are more than one remote configured
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentStarterProjectsGitCheckoutFrom {
    /// The remote name should be used as init. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<String>,
    /// The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

/// Project's GitHub source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentStarterProjectsGithub {
    /// Defines from what the project should be checked out. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkoutFrom")]
    pub checkout_from: Option<DevWorkspaceTemplateParentStarterProjectsGithubCheckoutFrom>,
    /// The remotes map which should be initialized in the git project. Must have at least one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remotes: Option<BTreeMap<String, String>>,
    /// Part of project to populate in the working directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sparseCheckoutDir")]
    pub sparse_checkout_dir: Option<String>,
}

/// Defines from what the project should be checked out. Required if there are more than one remote configured
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentStarterProjectsGithubCheckoutFrom {
    /// The remote name should be used as init. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<String>,
    /// The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentStarterProjectsSourceType {
    Git,
    Github,
    Zip,
    Custom,
}

/// Project's Zip source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentStarterProjectsZip {
    /// Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Part of project to populate in the working directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sparseCheckoutDir")]
    pub sparse_checkout_dir: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateProjects {
    /// Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clonePath")]
    pub clone_path: Option<String>,
    /// Project's Custom source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<DevWorkspaceTemplateProjectsCustom>,
    /// Project's Git source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git: Option<DevWorkspaceTemplateProjectsGit>,
    /// Project's GitHub source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub github: Option<DevWorkspaceTemplateProjectsGithub>,
    /// Project name
    pub name: String,
    /// Type of project source
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceType")]
    pub source_type: Option<DevWorkspaceTemplateProjectsSourceType>,
    /// Project's Zip source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zip: Option<DevWorkspaceTemplateProjectsZip>,
}

/// Project's Custom source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateProjectsCustom {
    #[serde(rename = "embeddedResource")]
    pub embedded_resource: BTreeMap<String, serde_json::Value>,
    #[serde(rename = "projectSourceClass")]
    pub project_source_class: String,
}

/// Project's Git source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateProjectsGit {
    /// Defines from what the project should be checked out. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkoutFrom")]
    pub checkout_from: Option<DevWorkspaceTemplateProjectsGitCheckoutFrom>,
    /// The remotes map which should be initialized in the git project. Must have at least one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remotes: Option<BTreeMap<String, String>>,
    /// Part of project to populate in the working directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sparseCheckoutDir")]
    pub sparse_checkout_dir: Option<String>,
}

/// Defines from what the project should be checked out. Required if there are more than one remote configured
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateProjectsGitCheckoutFrom {
    /// The remote name should be used as init. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<String>,
    /// The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

/// Project's GitHub source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateProjectsGithub {
    /// Defines from what the project should be checked out. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkoutFrom")]
    pub checkout_from: Option<DevWorkspaceTemplateProjectsGithubCheckoutFrom>,
    /// The remotes map which should be initialized in the git project. Must have at least one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remotes: Option<BTreeMap<String, String>>,
    /// Part of project to populate in the working directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sparseCheckoutDir")]
    pub sparse_checkout_dir: Option<String>,
}

/// Defines from what the project should be checked out. Required if there are more than one remote configured
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateProjectsGithubCheckoutFrom {
    /// The remote name should be used as init. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<String>,
    /// The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateProjectsSourceType {
    Git,
    Github,
    Zip,
    Custom,
}

/// Project's Zip source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateProjectsZip {
    /// Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Part of project to populate in the working directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sparseCheckoutDir")]
    pub sparse_checkout_dir: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateStarterProjects {
    /// Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clonePath")]
    pub clone_path: Option<String>,
    /// Project's Custom source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<DevWorkspaceTemplateStarterProjectsCustom>,
    /// Description of a starter project
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Project's Git source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git: Option<DevWorkspaceTemplateStarterProjectsGit>,
    /// Project's GitHub source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub github: Option<DevWorkspaceTemplateStarterProjectsGithub>,
    /// Project name
    pub name: String,
    /// Type of project source
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceType")]
    pub source_type: Option<DevWorkspaceTemplateStarterProjectsSourceType>,
    /// Project's Zip source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zip: Option<DevWorkspaceTemplateStarterProjectsZip>,
}

/// Project's Custom source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateStarterProjectsCustom {
    #[serde(rename = "embeddedResource")]
    pub embedded_resource: BTreeMap<String, serde_json::Value>,
    #[serde(rename = "projectSourceClass")]
    pub project_source_class: String,
}

/// Project's Git source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateStarterProjectsGit {
    /// Defines from what the project should be checked out. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkoutFrom")]
    pub checkout_from: Option<DevWorkspaceTemplateStarterProjectsGitCheckoutFrom>,
    /// The remotes map which should be initialized in the git project. Must have at least one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remotes: Option<BTreeMap<String, String>>,
    /// Part of project to populate in the working directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sparseCheckoutDir")]
    pub sparse_checkout_dir: Option<String>,
}

/// Defines from what the project should be checked out. Required if there are more than one remote configured
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateStarterProjectsGitCheckoutFrom {
    /// The remote name should be used as init. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<String>,
    /// The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

/// Project's GitHub source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateStarterProjectsGithub {
    /// Defines from what the project should be checked out. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkoutFrom")]
    pub checkout_from: Option<DevWorkspaceTemplateStarterProjectsGithubCheckoutFrom>,
    /// The remotes map which should be initialized in the git project. Must have at least one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remotes: Option<BTreeMap<String, String>>,
    /// Part of project to populate in the working directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sparseCheckoutDir")]
    pub sparse_checkout_dir: Option<String>,
}

/// Defines from what the project should be checked out. Required if there are more than one remote configured
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateStarterProjectsGithubCheckoutFrom {
    /// The remote name should be used as init. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<String>,
    /// The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateStarterProjectsSourceType {
    Git,
    Github,
    Zip,
    Custom,
}

/// Project's Zip source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateStarterProjectsZip {
    /// Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Part of project to populate in the working directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sparseCheckoutDir")]
    pub sparse_checkout_dir: Option<String>,
}

