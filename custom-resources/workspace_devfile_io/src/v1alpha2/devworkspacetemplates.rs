// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/devfile/api/workspace.devfile.io/v1alpha2/devworkspacetemplates.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// Structure of the devworkspace. This is also the specification of a devworkspace template.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "workspace.devfile.io", version = "v1alpha2", kind = "DevWorkspaceTemplate", plural = "devworkspacetemplates")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct DevWorkspaceTemplateSpec {
    /// Map of implementation-dependant free-form YAML attributes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Predefined, ready-to-use, devworkspace-related commands
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commands: Option<Vec<DevWorkspaceTemplateCommands>>,
    /// List of the devworkspace components, such as editor and plugins, user-provided containers, or other types of components
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<DevWorkspaceTemplateComponents>>,
    /// Additional projects related to the main project in the devfile, contianing names and sources locations
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dependentProjects")]
    pub dependent_projects: Option<Vec<DevWorkspaceTemplateDependentProjects>>,
    /// Bindings of commands to events. Each command is referred-to by its name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events: Option<DevWorkspaceTemplateEvents>,
    /// Parent devworkspace template
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<DevWorkspaceTemplateParent>,
    /// Projects worked on in the devworkspace, containing names and sources locations
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub projects: Option<Vec<DevWorkspaceTemplateProjects>>,
    /// StarterProjects is a project that can be used as a starting point when bootstrapping new projects
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "starterProjects")]
    pub starter_projects: Option<Vec<DevWorkspaceTemplateStarterProjects>>,
    /// Map of key-value variables used for string replacement in the devfile. Values can be referenced via {{variable-key}} to replace the corresponding value in string fields in the devfile. Replacement cannot be used for 
    ///   - schemaVersion, metadata, parent source 
    ///   - element identifiers, e.g. command id, component name, endpoint name, project name 
    ///   - references to identifiers, e.g. in events, a command's component, container's volume mount name 
    ///   - string enums, e.g. command group kind, endpoint exposure
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateCommands {
    /// Command that consists in applying a given component definition, typically bound to a devworkspace event. 
    ///  For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`. 
    ///  When no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apply: Option<DevWorkspaceTemplateCommandsApply>,
    /// Map of implementation-dependant free-form YAML attributes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Type of devworkspace command
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commandType")]
    pub command_type: Option<DevWorkspaceTemplateCommandsCommandType>,
    /// Composite command that allows executing several sub-commands either sequentially or concurrently
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub composite: Option<DevWorkspaceTemplateCommandsComposite>,
    /// Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<DevWorkspaceTemplateCommandsCustom>,
    /// CLI Command executed in an existing component container
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<DevWorkspaceTemplateCommandsExec>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
}

/// Command that consists in applying a given component definition, typically bound to a devworkspace event. 
///  For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`. 
///  When no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateCommandsApply {
    /// Describes component that will be applied
    pub component: String,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateCommandsApplyGroup>,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateCommandsApplyGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateCommandsApplyGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateCommandsApplyGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateCommandsCommandType {
    Exec,
    Apply,
    Composite,
    Custom,
}

/// Composite command that allows executing several sub-commands either sequentially or concurrently
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateCommandsComposite {
    /// The commands that comprise this composite command
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commands: Option<Vec<String>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateCommandsCompositeGroup>,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Indicates if the sub-commands should be executed concurrently
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parallel: Option<bool>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateCommandsCompositeGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateCommandsCompositeGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateCommandsCompositeGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}

/// Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateCommandsCustom {
    /// Class of command that the associated implementation component should use to process this command with the appropriate logic
    #[serde(rename = "commandClass")]
    pub command_class: String,
    /// Additional free-form configuration for this custom command that the implementation component will know how to use
    #[serde(rename = "embeddedResource")]
    pub embedded_resource: BTreeMap<String, serde_json::Value>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateCommandsCustomGroup>,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateCommandsCustomGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateCommandsCustomGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateCommandsCustomGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}

/// CLI Command executed in an existing component container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateCommandsExec {
    /// The actual command-line string 
    ///  Special variables that can be used: 
    ///   - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping. 
    ///   - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.
    #[serde(rename = "commandLine")]
    pub command_line: String,
    /// Describes component to which given action relates
    pub component: String,
    /// Optional list of environment variables that have to be set before running the command
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<DevWorkspaceTemplateCommandsExecEnv>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateCommandsExecGroup>,
    /// Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hotReloadCapable")]
    pub hot_reload_capable: Option<bool>,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Working directory where the command should be executed 
    ///  Special variables that can be used: 
    ///   - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping. 
    ///   - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workingDir")]
    pub working_dir: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateCommandsExecEnv {
    pub name: String,
    pub value: String,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DevWorkspaceTemplateCommandsExecGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    pub kind: DevWorkspaceTemplateCommandsExecGroupKind,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateCommandsExecGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponents {
    /// Map of implementation-dependant free-form YAML attributes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Type of component
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "componentType")]
    pub component_type: Option<DevWorkspaceTemplateComponentsComponentType>,
    /// Allows adding and configuring devworkspace-related containers
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<DevWorkspaceTemplateComponentsContainer>,
    /// Custom component whose logic is implementation-dependant and should be provided by the user possibly through some dedicated controller
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<DevWorkspaceTemplateComponentsCustom>,
    /// Allows specifying the definition of an image for outer loop builds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<DevWorkspaceTemplateComponentsImage>,
    /// Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<DevWorkspaceTemplateComponentsKubernetes>,
    /// Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.
    pub name: String,
    /// Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openshift: Option<DevWorkspaceTemplateComponentsOpenshift>,
    /// Allows importing a plugin. 
    ///  Plugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<DevWorkspaceTemplateComponentsPlugin>,
    /// Allows specifying the definition of a volume shared by several other components
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volume: Option<DevWorkspaceTemplateComponentsVolume>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsComponentType {
    Container,
    Kubernetes,
    Openshift,
    Volume,
    Image,
    Plugin,
    Custom,
}

/// Allows adding and configuring devworkspace-related containers
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsContainer {
    /// Annotations that should be added to specific resources for this container
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotation: Option<DevWorkspaceTemplateComponentsContainerAnnotation>,
    /// The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. 
    ///  Defaults to an empty array, meaning use whatever is defined in the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// The command to run in the dockerimage component instead of the default one provided in the image. 
    ///  Defaults to an empty array, meaning use whatever is defined in the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuLimit")]
    pub cpu_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuRequest")]
    pub cpu_request: Option<String>,
    /// Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dedicatedPod")]
    pub dedicated_pod: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateComponentsContainerEndpoints>>,
    /// Environment variables used in this container. 
    ///  The following variables are reserved and cannot be overridden via env: 
    ///   - `$PROJECTS_ROOT` 
    ///   - `$PROJECT_SOURCE`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<DevWorkspaceTemplateComponentsContainerEnv>>,
    pub image: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryLimit")]
    pub memory_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryRequest")]
    pub memory_request: Option<String>,
    /// Toggles whether or not the project source code should be mounted in the component. 
    ///  Defaults to true for all component types except plugins and components that set `dedicatedPod` to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountSources")]
    pub mount_sources: Option<bool>,
    /// Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceMapping")]
    pub source_mapping: Option<String>,
    /// List of volumes mounts that should be mounted is this container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<DevWorkspaceTemplateComponentsContainerVolumeMounts>>,
}

/// Annotations that should be added to specific resources for this container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsContainerAnnotation {
    /// Annotations to be added to deployment
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<BTreeMap<String, String>>,
    /// Annotations to be added to service
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsContainerEndpoints {
    /// Annotations to be added to Kubernetes Ingress or Openshift Route
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotation: Option<BTreeMap<String, String>>,
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateComponentsContainerEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<DevWorkspaceTemplateComponentsContainerEndpointsProtocol>,
    /// Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    /// Port number to be used within the container component. The same port cannot be used by two different container components.
    #[serde(rename = "targetPort")]
    pub target_port: i64,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsContainerEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsContainerEndpointsProtocol {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsContainerEnv {
    pub name: String,
    pub value: String,
}

/// Volume that should be mounted to a component container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsContainerVolumeMounts {
    /// The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.
    pub name: String,
    /// The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// Custom component whose logic is implementation-dependant and should be provided by the user possibly through some dedicated controller
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsCustom {
    /// Class of component that the associated implementation controller should use to process this command with the appropriate logic
    #[serde(rename = "componentClass")]
    pub component_class: String,
    /// Additional free-form configuration for this custom component that the implementation controller will know how to use
    #[serde(rename = "embeddedResource")]
    pub embedded_resource: BTreeMap<String, serde_json::Value>,
}

/// Allows specifying the definition of an image for outer loop builds
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsImage {
    /// Defines if the image should be built during startup. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBuild")]
    pub auto_build: Option<bool>,
    /// Allows specifying dockerfile type build
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dockerfile: Option<DevWorkspaceTemplateComponentsImageDockerfile>,
    /// Name of the image for the resulting outerloop build
    #[serde(rename = "imageName")]
    pub image_name: String,
    /// Type of image
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageType")]
    pub image_type: Option<DevWorkspaceTemplateComponentsImageImageType>,
}

/// Allows specifying dockerfile type build
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsImageDockerfile {
    /// The arguments to supply to the dockerfile build.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildContext")]
    pub build_context: Option<String>,
    /// Dockerfile's Devfile Registry source
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "devfileRegistry")]
    pub devfile_registry: Option<DevWorkspaceTemplateComponentsImageDockerfileDevfileRegistry>,
    /// Dockerfile's Git source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git: Option<DevWorkspaceTemplateComponentsImageDockerfileGit>,
    /// Specify if a privileged builder pod is required. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootRequired")]
    pub root_required: Option<bool>,
    /// Type of Dockerfile src
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "srcType")]
    pub src_type: Option<DevWorkspaceTemplateComponentsImageDockerfileSrcType>,
    /// URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Dockerfile's Devfile Registry source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsImageDockerfileDevfileRegistry {
    /// Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.
    pub id: String,
    /// Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registryUrl")]
    pub registry_url: Option<String>,
}

/// Dockerfile's Git source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsImageDockerfileGit {
    /// Defines from what the project should be checked out. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkoutFrom")]
    pub checkout_from: Option<DevWorkspaceTemplateComponentsImageDockerfileGitCheckoutFrom>,
    /// Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileLocation")]
    pub file_location: Option<String>,
    /// The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.
    pub remotes: BTreeMap<String, String>,
}

/// Defines from what the project should be checked out. Required if there are more than one remote configured
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsImageDockerfileGitCheckoutFrom {
    /// The remote name should be used as init. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<String>,
    /// The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

/// Allows specifying dockerfile type build
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsImageDockerfileSrcType {
    Uri,
    DevfileRegistry,
    Git,
}

/// Allows specifying the definition of an image for outer loop builds
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsImageImageType {
    Dockerfile,
}

/// Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsKubernetes {
    /// Defines if the component should be deployed during startup. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deployByDefault")]
    pub deploy_by_default: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateComponentsKubernetesEndpoints>>,
    /// Inlined manifest
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Kubernetes-like location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateComponentsKubernetesLocationType>,
    /// Location in a file fetched from a uri.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsKubernetesEndpoints {
    /// Annotations to be added to Kubernetes Ingress or Openshift Route
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotation: Option<BTreeMap<String, String>>,
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateComponentsKubernetesEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<DevWorkspaceTemplateComponentsKubernetesEndpointsProtocol>,
    /// Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    /// Port number to be used within the container component. The same port cannot be used by two different container components.
    #[serde(rename = "targetPort")]
    pub target_port: i64,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsKubernetesEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsKubernetesEndpointsProtocol {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}

/// Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsKubernetesLocationType {
    Uri,
    Inlined,
}

/// Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsOpenshift {
    /// Defines if the component should be deployed during startup. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deployByDefault")]
    pub deploy_by_default: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateComponentsOpenshiftEndpoints>>,
    /// Inlined manifest
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Kubernetes-like location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateComponentsOpenshiftLocationType>,
    /// Location in a file fetched from a uri.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsOpenshiftEndpoints {
    /// Annotations to be added to Kubernetes Ingress or Openshift Route
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotation: Option<BTreeMap<String, String>>,
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateComponentsOpenshiftEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<DevWorkspaceTemplateComponentsOpenshiftEndpointsProtocol>,
    /// Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    /// Port number to be used within the container component. The same port cannot be used by two different container components.
    #[serde(rename = "targetPort")]
    pub target_port: i64,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsOpenshiftEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsOpenshiftEndpointsProtocol {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}

/// Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsOpenshiftLocationType {
    Uri,
    Inlined,
}

/// Allows importing a plugin. 
///  Plugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPlugin {
    /// Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commands: Option<Vec<DevWorkspaceTemplateComponentsPluginCommands>>,
    /// Overrides of components encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<DevWorkspaceTemplateComponentsPluginComponents>>,
    /// Id in a registry that contains a Devfile yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// type of location from where the referenced template structure should be retrieved
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "importReferenceType")]
    pub import_reference_type: Option<DevWorkspaceTemplateComponentsPluginImportReferenceType>,
    /// Reference to a Kubernetes CRD of type DevWorkspaceTemplate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<DevWorkspaceTemplateComponentsPluginKubernetes>,
    /// Registry URL to pull the parent devfile from when using id in the parent reference. To ensure the parent devfile gets resolved consistently in different environments, it is recommended to always specify the `registryUrl` when `id` is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registryUrl")]
    pub registry_url: Option<String>,
    /// URI Reference of a parent devfile YAML file. It can be a full URL or a relative URI with the current devfile as the base URI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    /// Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommands {
    /// Command that consists in applying a given component definition, typically bound to a devworkspace event. 
    ///  For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`. 
    ///  When no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apply: Option<DevWorkspaceTemplateComponentsPluginCommandsApply>,
    /// Map of implementation-dependant free-form YAML attributes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Type of devworkspace command
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commandType")]
    pub command_type: Option<DevWorkspaceTemplateComponentsPluginCommandsCommandType>,
    /// Composite command that allows executing several sub-commands either sequentially or concurrently
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub composite: Option<DevWorkspaceTemplateComponentsPluginCommandsComposite>,
    /// CLI Command executed in an existing component container
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<DevWorkspaceTemplateComponentsPluginCommandsExec>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
}

/// Command that consists in applying a given component definition, typically bound to a devworkspace event. 
///  For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`. 
///  When no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommandsApply {
    /// Describes component that will be applied
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<String>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateComponentsPluginCommandsApplyGroup>,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommandsApplyGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<DevWorkspaceTemplateComponentsPluginCommandsApplyGroupKind>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginCommandsApplyGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginCommandsCommandType {
    Exec,
    Apply,
    Composite,
}

/// Composite command that allows executing several sub-commands either sequentially or concurrently
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommandsComposite {
    /// The commands that comprise this composite command
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commands: Option<Vec<String>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateComponentsPluginCommandsCompositeGroup>,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Indicates if the sub-commands should be executed concurrently
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parallel: Option<bool>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommandsCompositeGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<DevWorkspaceTemplateComponentsPluginCommandsCompositeGroupKind>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginCommandsCompositeGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}

/// CLI Command executed in an existing component container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommandsExec {
    /// The actual command-line string 
    ///  Special variables that can be used: 
    ///   - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping. 
    ///   - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commandLine")]
    pub command_line: Option<String>,
    /// Describes component to which given action relates
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<String>,
    /// Optional list of environment variables that have to be set before running the command
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<DevWorkspaceTemplateComponentsPluginCommandsExecEnv>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateComponentsPluginCommandsExecGroup>,
    /// Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hotReloadCapable")]
    pub hot_reload_capable: Option<bool>,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Working directory where the command should be executed 
    ///  Special variables that can be used: 
    ///   - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping. 
    ///   - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workingDir")]
    pub working_dir: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommandsExecEnv {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginCommandsExecGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<DevWorkspaceTemplateComponentsPluginCommandsExecGroupKind>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginCommandsExecGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponents {
    /// Map of implementation-dependant free-form YAML attributes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Type of component
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "componentType")]
    pub component_type: Option<DevWorkspaceTemplateComponentsPluginComponentsComponentType>,
    /// Allows adding and configuring devworkspace-related containers
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<DevWorkspaceTemplateComponentsPluginComponentsContainer>,
    /// Allows specifying the definition of an image for outer loop builds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<DevWorkspaceTemplateComponentsPluginComponentsImage>,
    /// Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<DevWorkspaceTemplateComponentsPluginComponentsKubernetes>,
    /// Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.
    pub name: String,
    /// Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openshift: Option<DevWorkspaceTemplateComponentsPluginComponentsOpenshift>,
    /// Allows specifying the definition of a volume shared by several other components
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volume: Option<DevWorkspaceTemplateComponentsPluginComponentsVolume>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginComponentsComponentType {
    Container,
    Kubernetes,
    Openshift,
    Volume,
    Image,
}

/// Allows adding and configuring devworkspace-related containers
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsContainer {
    /// Annotations that should be added to specific resources for this container
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotation: Option<DevWorkspaceTemplateComponentsPluginComponentsContainerAnnotation>,
    /// The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. 
    ///  Defaults to an empty array, meaning use whatever is defined in the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// The command to run in the dockerimage component instead of the default one provided in the image. 
    ///  Defaults to an empty array, meaning use whatever is defined in the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuLimit")]
    pub cpu_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuRequest")]
    pub cpu_request: Option<String>,
    /// Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dedicatedPod")]
    pub dedicated_pod: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateComponentsPluginComponentsContainerEndpoints>>,
    /// Environment variables used in this container. 
    ///  The following variables are reserved and cannot be overridden via env: 
    ///   - `$PROJECTS_ROOT` 
    ///   - `$PROJECT_SOURCE`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<DevWorkspaceTemplateComponentsPluginComponentsContainerEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryLimit")]
    pub memory_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryRequest")]
    pub memory_request: Option<String>,
    /// Toggles whether or not the project source code should be mounted in the component. 
    ///  Defaults to true for all component types except plugins and components that set `dedicatedPod` to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountSources")]
    pub mount_sources: Option<bool>,
    /// Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceMapping")]
    pub source_mapping: Option<String>,
    /// List of volumes mounts that should be mounted is this container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<DevWorkspaceTemplateComponentsPluginComponentsContainerVolumeMounts>>,
}

/// Annotations that should be added to specific resources for this container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsContainerAnnotation {
    /// Annotations to be added to deployment
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<BTreeMap<String, String>>,
    /// Annotations to be added to service
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsContainerEndpoints {
    /// Annotations to be added to Kubernetes Ingress or Openshift Route
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotation: Option<BTreeMap<String, String>>,
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateComponentsPluginComponentsContainerEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<DevWorkspaceTemplateComponentsPluginComponentsContainerEndpointsProtocol>,
    /// Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    /// Port number to be used within the container component. The same port cannot be used by two different container components.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginComponentsContainerEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginComponentsContainerEndpointsProtocol {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsContainerEnv {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Volume that should be mounted to a component container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsContainerVolumeMounts {
    /// The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.
    pub name: String,
    /// The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// Allows specifying the definition of an image for outer loop builds
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsImage {
    /// Defines if the image should be built during startup. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBuild")]
    pub auto_build: Option<bool>,
    /// Allows specifying dockerfile type build
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dockerfile: Option<DevWorkspaceTemplateComponentsPluginComponentsImageDockerfile>,
    /// Name of the image for the resulting outerloop build
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    pub image_name: Option<String>,
    /// Type of image
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageType")]
    pub image_type: Option<DevWorkspaceTemplateComponentsPluginComponentsImageImageType>,
}

/// Allows specifying dockerfile type build
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsImageDockerfile {
    /// The arguments to supply to the dockerfile build.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildContext")]
    pub build_context: Option<String>,
    /// Dockerfile's Devfile Registry source
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "devfileRegistry")]
    pub devfile_registry: Option<DevWorkspaceTemplateComponentsPluginComponentsImageDockerfileDevfileRegistry>,
    /// Dockerfile's Git source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git: Option<DevWorkspaceTemplateComponentsPluginComponentsImageDockerfileGit>,
    /// Specify if a privileged builder pod is required. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootRequired")]
    pub root_required: Option<bool>,
    /// Type of Dockerfile src
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "srcType")]
    pub src_type: Option<DevWorkspaceTemplateComponentsPluginComponentsImageDockerfileSrcType>,
    /// URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Dockerfile's Devfile Registry source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsImageDockerfileDevfileRegistry {
    /// Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registryUrl")]
    pub registry_url: Option<String>,
}

/// Dockerfile's Git source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsImageDockerfileGit {
    /// Defines from what the project should be checked out. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkoutFrom")]
    pub checkout_from: Option<DevWorkspaceTemplateComponentsPluginComponentsImageDockerfileGitCheckoutFrom>,
    /// Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileLocation")]
    pub file_location: Option<String>,
    /// The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remotes: Option<BTreeMap<String, String>>,
}

/// Defines from what the project should be checked out. Required if there are more than one remote configured
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsImageDockerfileGitCheckoutFrom {
    /// The remote name should be used as init. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<String>,
    /// The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

/// Allows specifying dockerfile type build
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginComponentsImageDockerfileSrcType {
    Uri,
    DevfileRegistry,
    Git,
}

/// Allows specifying the definition of an image for outer loop builds
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginComponentsImageImageType {
    Dockerfile,
    AutoBuild,
}

/// Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsKubernetes {
    /// Defines if the component should be deployed during startup. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deployByDefault")]
    pub deploy_by_default: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateComponentsPluginComponentsKubernetesEndpoints>>,
    /// Inlined manifest
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Kubernetes-like location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateComponentsPluginComponentsKubernetesLocationType>,
    /// Location in a file fetched from a uri.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsKubernetesEndpoints {
    /// Annotations to be added to Kubernetes Ingress or Openshift Route
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotation: Option<BTreeMap<String, String>>,
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateComponentsPluginComponentsKubernetesEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<DevWorkspaceTemplateComponentsPluginComponentsKubernetesEndpointsProtocol>,
    /// Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    /// Port number to be used within the container component. The same port cannot be used by two different container components.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginComponentsKubernetesEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginComponentsKubernetesEndpointsProtocol {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}

/// Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginComponentsKubernetesLocationType {
    Uri,
    Inlined,
}

/// Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsOpenshift {
    /// Defines if the component should be deployed during startup. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deployByDefault")]
    pub deploy_by_default: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateComponentsPluginComponentsOpenshiftEndpoints>>,
    /// Inlined manifest
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Kubernetes-like location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateComponentsPluginComponentsOpenshiftLocationType>,
    /// Location in a file fetched from a uri.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsOpenshiftEndpoints {
    /// Annotations to be added to Kubernetes Ingress or Openshift Route
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotation: Option<BTreeMap<String, String>>,
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateComponentsPluginComponentsOpenshiftEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<DevWorkspaceTemplateComponentsPluginComponentsOpenshiftEndpointsProtocol>,
    /// Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    /// Port number to be used within the container component. The same port cannot be used by two different container components.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginComponentsOpenshiftEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginComponentsOpenshiftEndpointsProtocol {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}

/// Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginComponentsOpenshiftLocationType {
    Uri,
    Inlined,
}

/// Allows specifying the definition of a volume shared by several other components
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginComponentsVolume {
    /// Ephemeral volumes are not stored persistently across restarts. Defaults to false
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ephemeral: Option<bool>,
    /// Size of the volume
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
}

/// Allows importing a plugin. 
///  Plugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateComponentsPluginImportReferenceType {
    Uri,
    Id,
    Kubernetes,
}

/// Reference to a Kubernetes CRD of type DevWorkspaceTemplate
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsPluginKubernetes {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Allows specifying the definition of a volume shared by several other components
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateComponentsVolume {
    /// Ephemeral volumes are not stored persistently across restarts. Defaults to false
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ephemeral: Option<bool>,
    /// Size of the volume
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateDependentProjects {
    /// Map of implementation-dependant free-form YAML attributes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clonePath")]
    pub clone_path: Option<String>,
    /// Project's Custom source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<DevWorkspaceTemplateDependentProjectsCustom>,
    /// Project's Git source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git: Option<DevWorkspaceTemplateDependentProjectsGit>,
    /// Project name
    pub name: String,
    /// Type of project source
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceType")]
    pub source_type: Option<DevWorkspaceTemplateDependentProjectsSourceType>,
    /// Project's Zip source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zip: Option<DevWorkspaceTemplateDependentProjectsZip>,
}

/// Project's Custom source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateDependentProjectsCustom {
    #[serde(rename = "embeddedResource")]
    pub embedded_resource: BTreeMap<String, serde_json::Value>,
    #[serde(rename = "projectSourceClass")]
    pub project_source_class: String,
}

/// Project's Git source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateDependentProjectsGit {
    /// Defines from what the project should be checked out. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkoutFrom")]
    pub checkout_from: Option<DevWorkspaceTemplateDependentProjectsGitCheckoutFrom>,
    /// The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.
    pub remotes: BTreeMap<String, String>,
}

/// Defines from what the project should be checked out. Required if there are more than one remote configured
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateDependentProjectsGitCheckoutFrom {
    /// The remote name should be used as init. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<String>,
    /// The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateDependentProjectsSourceType {
    Git,
    Zip,
    Custom,
}

/// Project's Zip source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateDependentProjectsZip {
    /// Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
}

/// Bindings of commands to events. Each command is referred-to by its name.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateEvents {
    /// IDs of commands that should be executed after the devworkspace is completely started. In the case of Che-Theia, these commands should be executed after all plugins and extensions have started, including project cloning. This means that those commands are not triggered until the user opens the IDE in his browser.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postStart")]
    pub post_start: Option<Vec<String>>,
    /// IDs of commands that should be executed after stopping the devworkspace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postStop")]
    pub post_stop: Option<Vec<String>>,
    /// IDs of commands that should be executed before the devworkspace start. Kubernetes-wise, these commands would typically be executed in init containers of the devworkspace POD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preStart")]
    pub pre_start: Option<Vec<String>>,
    /// IDs of commands that should be executed before stopping the devworkspace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preStop")]
    pub pre_stop: Option<Vec<String>>,
}

/// Parent devworkspace template
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParent {
    /// Overrides of attributes encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commands: Option<Vec<DevWorkspaceTemplateParentCommands>>,
    /// Overrides of components encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<DevWorkspaceTemplateParentComponents>>,
    /// Overrides of dependentProjects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dependentProjects")]
    pub dependent_projects: Option<Vec<DevWorkspaceTemplateParentDependentProjects>>,
    /// Id in a registry that contains a Devfile yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// type of location from where the referenced template structure should be retrieved
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "importReferenceType")]
    pub import_reference_type: Option<DevWorkspaceTemplateParentImportReferenceType>,
    /// Reference to a Kubernetes CRD of type DevWorkspaceTemplate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<DevWorkspaceTemplateParentKubernetes>,
    /// Overrides of projects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub projects: Option<Vec<DevWorkspaceTemplateParentProjects>>,
    /// Registry URL to pull the parent devfile from when using id in the parent reference. To ensure the parent devfile gets resolved consistently in different environments, it is recommended to always specify the `registryUrl` when `id` is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registryUrl")]
    pub registry_url: Option<String>,
    /// Overrides of starterProjects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "starterProjects")]
    pub starter_projects: Option<Vec<DevWorkspaceTemplateParentStarterProjects>>,
    /// URI Reference of a parent devfile YAML file. It can be a full URL or a relative URI with the current devfile as the base URI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    /// Overrides of variables encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<BTreeMap<String, String>>,
    /// Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentCommands {
    /// Command that consists in applying a given component definition, typically bound to a devworkspace event. 
    ///  For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`. 
    ///  When no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apply: Option<DevWorkspaceTemplateParentCommandsApply>,
    /// Map of implementation-dependant free-form YAML attributes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Type of devworkspace command
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commandType")]
    pub command_type: Option<DevWorkspaceTemplateParentCommandsCommandType>,
    /// Composite command that allows executing several sub-commands either sequentially or concurrently
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub composite: Option<DevWorkspaceTemplateParentCommandsComposite>,
    /// CLI Command executed in an existing component container
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<DevWorkspaceTemplateParentCommandsExec>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
}

/// Command that consists in applying a given component definition, typically bound to a devworkspace event. 
///  For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`. 
///  When no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentCommandsApply {
    /// Describes component that will be applied
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<String>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateParentCommandsApplyGroup>,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentCommandsApplyGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<DevWorkspaceTemplateParentCommandsApplyGroupKind>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentCommandsApplyGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentCommandsCommandType {
    Exec,
    Apply,
    Composite,
}

/// Composite command that allows executing several sub-commands either sequentially or concurrently
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentCommandsComposite {
    /// The commands that comprise this composite command
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commands: Option<Vec<String>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateParentCommandsCompositeGroup>,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Indicates if the sub-commands should be executed concurrently
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parallel: Option<bool>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentCommandsCompositeGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<DevWorkspaceTemplateParentCommandsCompositeGroupKind>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentCommandsCompositeGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}

/// CLI Command executed in an existing component container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentCommandsExec {
    /// The actual command-line string 
    ///  Special variables that can be used: 
    ///   - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping. 
    ///   - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commandLine")]
    pub command_line: Option<String>,
    /// Describes component to which given action relates
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<String>,
    /// Optional list of environment variables that have to be set before running the command
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<DevWorkspaceTemplateParentCommandsExecEnv>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateParentCommandsExecGroup>,
    /// Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hotReloadCapable")]
    pub hot_reload_capable: Option<bool>,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Working directory where the command should be executed 
    ///  Special variables that can be used: 
    ///   - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping. 
    ///   - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workingDir")]
    pub working_dir: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentCommandsExecEnv {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentCommandsExecGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<DevWorkspaceTemplateParentCommandsExecGroupKind>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentCommandsExecGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponents {
    /// Map of implementation-dependant free-form YAML attributes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Type of component
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "componentType")]
    pub component_type: Option<DevWorkspaceTemplateParentComponentsComponentType>,
    /// Allows adding and configuring devworkspace-related containers
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<DevWorkspaceTemplateParentComponentsContainer>,
    /// Allows specifying the definition of an image for outer loop builds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<DevWorkspaceTemplateParentComponentsImage>,
    /// Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<DevWorkspaceTemplateParentComponentsKubernetes>,
    /// Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.
    pub name: String,
    /// Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openshift: Option<DevWorkspaceTemplateParentComponentsOpenshift>,
    /// Allows importing a plugin. 
    ///  Plugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<DevWorkspaceTemplateParentComponentsPlugin>,
    /// Allows specifying the definition of a volume shared by several other components
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volume: Option<DevWorkspaceTemplateParentComponentsVolume>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsComponentType {
    Container,
    Kubernetes,
    Openshift,
    Volume,
    Image,
    Plugin,
}

/// Allows adding and configuring devworkspace-related containers
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsContainer {
    /// Annotations that should be added to specific resources for this container
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotation: Option<DevWorkspaceTemplateParentComponentsContainerAnnotation>,
    /// The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. 
    ///  Defaults to an empty array, meaning use whatever is defined in the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// The command to run in the dockerimage component instead of the default one provided in the image. 
    ///  Defaults to an empty array, meaning use whatever is defined in the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuLimit")]
    pub cpu_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuRequest")]
    pub cpu_request: Option<String>,
    /// Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dedicatedPod")]
    pub dedicated_pod: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateParentComponentsContainerEndpoints>>,
    /// Environment variables used in this container. 
    ///  The following variables are reserved and cannot be overridden via env: 
    ///   - `$PROJECTS_ROOT` 
    ///   - `$PROJECT_SOURCE`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<DevWorkspaceTemplateParentComponentsContainerEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryLimit")]
    pub memory_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryRequest")]
    pub memory_request: Option<String>,
    /// Toggles whether or not the project source code should be mounted in the component. 
    ///  Defaults to true for all component types except plugins and components that set `dedicatedPod` to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountSources")]
    pub mount_sources: Option<bool>,
    /// Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceMapping")]
    pub source_mapping: Option<String>,
    /// List of volumes mounts that should be mounted is this container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<DevWorkspaceTemplateParentComponentsContainerVolumeMounts>>,
}

/// Annotations that should be added to specific resources for this container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsContainerAnnotation {
    /// Annotations to be added to deployment
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<BTreeMap<String, String>>,
    /// Annotations to be added to service
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsContainerEndpoints {
    /// Annotations to be added to Kubernetes Ingress or Openshift Route
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotation: Option<BTreeMap<String, String>>,
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateParentComponentsContainerEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<DevWorkspaceTemplateParentComponentsContainerEndpointsProtocol>,
    /// Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    /// Port number to be used within the container component. The same port cannot be used by two different container components.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsContainerEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsContainerEndpointsProtocol {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsContainerEnv {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Volume that should be mounted to a component container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsContainerVolumeMounts {
    /// The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.
    pub name: String,
    /// The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// Allows specifying the definition of an image for outer loop builds
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsImage {
    /// Defines if the image should be built during startup. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBuild")]
    pub auto_build: Option<bool>,
    /// Allows specifying dockerfile type build
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dockerfile: Option<DevWorkspaceTemplateParentComponentsImageDockerfile>,
    /// Name of the image for the resulting outerloop build
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    pub image_name: Option<String>,
    /// Type of image
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageType")]
    pub image_type: Option<DevWorkspaceTemplateParentComponentsImageImageType>,
}

/// Allows specifying dockerfile type build
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsImageDockerfile {
    /// The arguments to supply to the dockerfile build.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildContext")]
    pub build_context: Option<String>,
    /// Dockerfile's Devfile Registry source
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "devfileRegistry")]
    pub devfile_registry: Option<DevWorkspaceTemplateParentComponentsImageDockerfileDevfileRegistry>,
    /// Dockerfile's Git source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git: Option<DevWorkspaceTemplateParentComponentsImageDockerfileGit>,
    /// Specify if a privileged builder pod is required. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootRequired")]
    pub root_required: Option<bool>,
    /// Type of Dockerfile src
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "srcType")]
    pub src_type: Option<DevWorkspaceTemplateParentComponentsImageDockerfileSrcType>,
    /// URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Dockerfile's Devfile Registry source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsImageDockerfileDevfileRegistry {
    /// Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registryUrl")]
    pub registry_url: Option<String>,
}

/// Dockerfile's Git source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsImageDockerfileGit {
    /// Defines from what the project should be checked out. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkoutFrom")]
    pub checkout_from: Option<DevWorkspaceTemplateParentComponentsImageDockerfileGitCheckoutFrom>,
    /// Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileLocation")]
    pub file_location: Option<String>,
    /// The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remotes: Option<BTreeMap<String, String>>,
}

/// Defines from what the project should be checked out. Required if there are more than one remote configured
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsImageDockerfileGitCheckoutFrom {
    /// The remote name should be used as init. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<String>,
    /// The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

/// Allows specifying dockerfile type build
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsImageDockerfileSrcType {
    Uri,
    DevfileRegistry,
    Git,
}

/// Allows specifying the definition of an image for outer loop builds
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsImageImageType {
    Dockerfile,
    AutoBuild,
}

/// Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsKubernetes {
    /// Defines if the component should be deployed during startup. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deployByDefault")]
    pub deploy_by_default: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateParentComponentsKubernetesEndpoints>>,
    /// Inlined manifest
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Kubernetes-like location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateParentComponentsKubernetesLocationType>,
    /// Location in a file fetched from a uri.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsKubernetesEndpoints {
    /// Annotations to be added to Kubernetes Ingress or Openshift Route
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotation: Option<BTreeMap<String, String>>,
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateParentComponentsKubernetesEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<DevWorkspaceTemplateParentComponentsKubernetesEndpointsProtocol>,
    /// Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    /// Port number to be used within the container component. The same port cannot be used by two different container components.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsKubernetesEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsKubernetesEndpointsProtocol {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}

/// Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsKubernetesLocationType {
    Uri,
    Inlined,
}

/// Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsOpenshift {
    /// Defines if the component should be deployed during startup. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deployByDefault")]
    pub deploy_by_default: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateParentComponentsOpenshiftEndpoints>>,
    /// Inlined manifest
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Kubernetes-like location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateParentComponentsOpenshiftLocationType>,
    /// Location in a file fetched from a uri.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsOpenshiftEndpoints {
    /// Annotations to be added to Kubernetes Ingress or Openshift Route
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotation: Option<BTreeMap<String, String>>,
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateParentComponentsOpenshiftEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<DevWorkspaceTemplateParentComponentsOpenshiftEndpointsProtocol>,
    /// Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    /// Port number to be used within the container component. The same port cannot be used by two different container components.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsOpenshiftEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsOpenshiftEndpointsProtocol {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}

/// Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsOpenshiftLocationType {
    Uri,
    Inlined,
}

/// Allows importing a plugin. 
///  Plugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPlugin {
    /// Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commands: Option<Vec<DevWorkspaceTemplateParentComponentsPluginCommands>>,
    /// Overrides of components encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<DevWorkspaceTemplateParentComponentsPluginComponents>>,
    /// Id in a registry that contains a Devfile yaml file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// type of location from where the referenced template structure should be retrieved
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "importReferenceType")]
    pub import_reference_type: Option<DevWorkspaceTemplateParentComponentsPluginImportReferenceType>,
    /// Reference to a Kubernetes CRD of type DevWorkspaceTemplate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<DevWorkspaceTemplateParentComponentsPluginKubernetes>,
    /// Registry URL to pull the parent devfile from when using id in the parent reference. To ensure the parent devfile gets resolved consistently in different environments, it is recommended to always specify the `registryUrl` when `id` is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registryUrl")]
    pub registry_url: Option<String>,
    /// URI Reference of a parent devfile YAML file. It can be a full URL or a relative URI with the current devfile as the base URI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    /// Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommands {
    /// Command that consists in applying a given component definition, typically bound to a devworkspace event. 
    ///  For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`. 
    ///  When no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apply: Option<DevWorkspaceTemplateParentComponentsPluginCommandsApply>,
    /// Map of implementation-dependant free-form YAML attributes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Type of devworkspace command
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commandType")]
    pub command_type: Option<DevWorkspaceTemplateParentComponentsPluginCommandsCommandType>,
    /// Composite command that allows executing several sub-commands either sequentially or concurrently
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub composite: Option<DevWorkspaceTemplateParentComponentsPluginCommandsComposite>,
    /// CLI Command executed in an existing component container
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<DevWorkspaceTemplateParentComponentsPluginCommandsExec>,
    /// Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.
    pub id: String,
}

/// Command that consists in applying a given component definition, typically bound to a devworkspace event. 
///  For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`. 
///  When no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommandsApply {
    /// Describes component that will be applied
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<String>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateParentComponentsPluginCommandsApplyGroup>,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommandsApplyGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<DevWorkspaceTemplateParentComponentsPluginCommandsApplyGroupKind>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginCommandsApplyGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginCommandsCommandType {
    Exec,
    Apply,
    Composite,
}

/// Composite command that allows executing several sub-commands either sequentially or concurrently
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommandsComposite {
    /// The commands that comprise this composite command
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commands: Option<Vec<String>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateParentComponentsPluginCommandsCompositeGroup>,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Indicates if the sub-commands should be executed concurrently
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parallel: Option<bool>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommandsCompositeGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<DevWorkspaceTemplateParentComponentsPluginCommandsCompositeGroupKind>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginCommandsCompositeGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}

/// CLI Command executed in an existing component container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommandsExec {
    /// The actual command-line string 
    ///  Special variables that can be used: 
    ///   - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping. 
    ///   - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commandLine")]
    pub command_line: Option<String>,
    /// Describes component to which given action relates
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<String>,
    /// Optional list of environment variables that have to be set before running the command
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<DevWorkspaceTemplateParentComponentsPluginCommandsExecEnv>>,
    /// Defines the group this command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<DevWorkspaceTemplateParentComponentsPluginCommandsExecGroup>,
    /// Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hotReloadCapable")]
    pub hot_reload_capable: Option<bool>,
    /// Optional label that provides a label for this command to be used in Editor UI menus for example
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Working directory where the command should be executed 
    ///  Special variables that can be used: 
    ///   - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping. 
    ///   - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workingDir")]
    pub working_dir: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommandsExecEnv {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginCommandsExecGroup {
    /// Identifies the default command for a given group kind
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isDefault")]
    pub is_default: Option<bool>,
    /// Kind of group the command is part of
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<DevWorkspaceTemplateParentComponentsPluginCommandsExecGroupKind>,
}

/// Defines the group this command is part of
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginCommandsExecGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponents {
    /// Map of implementation-dependant free-form YAML attributes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Type of component
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "componentType")]
    pub component_type: Option<DevWorkspaceTemplateParentComponentsPluginComponentsComponentType>,
    /// Allows adding and configuring devworkspace-related containers
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<DevWorkspaceTemplateParentComponentsPluginComponentsContainer>,
    /// Allows specifying the definition of an image for outer loop builds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<DevWorkspaceTemplateParentComponentsPluginComponentsImage>,
    /// Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<DevWorkspaceTemplateParentComponentsPluginComponentsKubernetes>,
    /// Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.
    pub name: String,
    /// Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openshift: Option<DevWorkspaceTemplateParentComponentsPluginComponentsOpenshift>,
    /// Allows specifying the definition of a volume shared by several other components
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volume: Option<DevWorkspaceTemplateParentComponentsPluginComponentsVolume>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginComponentsComponentType {
    Container,
    Kubernetes,
    Openshift,
    Volume,
    Image,
}

/// Allows adding and configuring devworkspace-related containers
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsContainer {
    /// Annotations that should be added to specific resources for this container
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotation: Option<DevWorkspaceTemplateParentComponentsPluginComponentsContainerAnnotation>,
    /// The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. 
    ///  Defaults to an empty array, meaning use whatever is defined in the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// The command to run in the dockerimage component instead of the default one provided in the image. 
    ///  Defaults to an empty array, meaning use whatever is defined in the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuLimit")]
    pub cpu_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuRequest")]
    pub cpu_request: Option<String>,
    /// Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dedicatedPod")]
    pub dedicated_pod: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateParentComponentsPluginComponentsContainerEndpoints>>,
    /// Environment variables used in this container. 
    ///  The following variables are reserved and cannot be overridden via env: 
    ///   - `$PROJECTS_ROOT` 
    ///   - `$PROJECT_SOURCE`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<DevWorkspaceTemplateParentComponentsPluginComponentsContainerEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryLimit")]
    pub memory_limit: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryRequest")]
    pub memory_request: Option<String>,
    /// Toggles whether or not the project source code should be mounted in the component. 
    ///  Defaults to true for all component types except plugins and components that set `dedicatedPod` to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountSources")]
    pub mount_sources: Option<bool>,
    /// Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceMapping")]
    pub source_mapping: Option<String>,
    /// List of volumes mounts that should be mounted is this container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<DevWorkspaceTemplateParentComponentsPluginComponentsContainerVolumeMounts>>,
}

/// Annotations that should be added to specific resources for this container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsContainerAnnotation {
    /// Annotations to be added to deployment
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<BTreeMap<String, String>>,
    /// Annotations to be added to service
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsContainerEndpoints {
    /// Annotations to be added to Kubernetes Ingress or Openshift Route
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotation: Option<BTreeMap<String, String>>,
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateParentComponentsPluginComponentsContainerEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<DevWorkspaceTemplateParentComponentsPluginComponentsContainerEndpointsProtocol>,
    /// Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    /// Port number to be used within the container component. The same port cannot be used by two different container components.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginComponentsContainerEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginComponentsContainerEndpointsProtocol {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsContainerEnv {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Volume that should be mounted to a component container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsContainerVolumeMounts {
    /// The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.
    pub name: String,
    /// The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// Allows specifying the definition of an image for outer loop builds
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsImage {
    /// Defines if the image should be built during startup. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBuild")]
    pub auto_build: Option<bool>,
    /// Allows specifying dockerfile type build
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dockerfile: Option<DevWorkspaceTemplateParentComponentsPluginComponentsImageDockerfile>,
    /// Name of the image for the resulting outerloop build
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    pub image_name: Option<String>,
    /// Type of image
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageType")]
    pub image_type: Option<DevWorkspaceTemplateParentComponentsPluginComponentsImageImageType>,
}

/// Allows specifying dockerfile type build
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsImageDockerfile {
    /// The arguments to supply to the dockerfile build.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildContext")]
    pub build_context: Option<String>,
    /// Dockerfile's Devfile Registry source
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "devfileRegistry")]
    pub devfile_registry: Option<DevWorkspaceTemplateParentComponentsPluginComponentsImageDockerfileDevfileRegistry>,
    /// Dockerfile's Git source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git: Option<DevWorkspaceTemplateParentComponentsPluginComponentsImageDockerfileGit>,
    /// Specify if a privileged builder pod is required. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootRequired")]
    pub root_required: Option<bool>,
    /// Type of Dockerfile src
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "srcType")]
    pub src_type: Option<DevWorkspaceTemplateParentComponentsPluginComponentsImageDockerfileSrcType>,
    /// URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Dockerfile's Devfile Registry source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsImageDockerfileDevfileRegistry {
    /// Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registryUrl")]
    pub registry_url: Option<String>,
}

/// Dockerfile's Git source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsImageDockerfileGit {
    /// Defines from what the project should be checked out. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkoutFrom")]
    pub checkout_from: Option<DevWorkspaceTemplateParentComponentsPluginComponentsImageDockerfileGitCheckoutFrom>,
    /// Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileLocation")]
    pub file_location: Option<String>,
    /// The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remotes: Option<BTreeMap<String, String>>,
}

/// Defines from what the project should be checked out. Required if there are more than one remote configured
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsImageDockerfileGitCheckoutFrom {
    /// The remote name should be used as init. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<String>,
    /// The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

/// Allows specifying dockerfile type build
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginComponentsImageDockerfileSrcType {
    Uri,
    DevfileRegistry,
    Git,
}

/// Allows specifying the definition of an image for outer loop builds
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginComponentsImageImageType {
    Dockerfile,
    AutoBuild,
}

/// Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsKubernetes {
    /// Defines if the component should be deployed during startup. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deployByDefault")]
    pub deploy_by_default: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateParentComponentsPluginComponentsKubernetesEndpoints>>,
    /// Inlined manifest
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Kubernetes-like location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateParentComponentsPluginComponentsKubernetesLocationType>,
    /// Location in a file fetched from a uri.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsKubernetesEndpoints {
    /// Annotations to be added to Kubernetes Ingress or Openshift Route
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotation: Option<BTreeMap<String, String>>,
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateParentComponentsPluginComponentsKubernetesEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<DevWorkspaceTemplateParentComponentsPluginComponentsKubernetesEndpointsProtocol>,
    /// Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    /// Port number to be used within the container component. The same port cannot be used by two different container components.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginComponentsKubernetesEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginComponentsKubernetesEndpointsProtocol {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}

/// Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginComponentsKubernetesLocationType {
    Uri,
    Inlined,
}

/// Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsOpenshift {
    /// Defines if the component should be deployed during startup. 
    ///  Default value is `false`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deployByDefault")]
    pub deploy_by_default: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<DevWorkspaceTemplateParentComponentsPluginComponentsOpenshiftEndpoints>>,
    /// Inlined manifest
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inlined: Option<String>,
    /// Type of Kubernetes-like location
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<DevWorkspaceTemplateParentComponentsPluginComponentsOpenshiftLocationType>,
    /// Location in a file fetched from a uri.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsOpenshiftEndpoints {
    /// Annotations to be added to Kubernetes Ingress or Openshift Route
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotation: Option<BTreeMap<String, String>>,
    /// Map of implementation-dependant string-based free-form attributes. 
    ///  Examples of Che-specific attributes: 
    ///  - cookiesAuthEnabled: "true" / "false", 
    ///  - type: "terminal" / "ide" / "ide-dev",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Describes how the endpoint should be exposed on the network. 
    ///  - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. 
    ///  - `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. 
    ///  - `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address. 
    ///  Default value is `public`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exposure: Option<DevWorkspaceTemplateParentComponentsPluginComponentsOpenshiftEndpointsExposure>,
    pub name: String,
    /// Path of the endpoint URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Describes the application and transport protocols of the traffic that will go through this endpoint. 
    ///  - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. 
    ///  - `https`: Endpoint will have `https` traffic, typically on a TCP connection. 
    ///  - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. 
    ///  - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. 
    ///  - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. 
    ///  - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. 
    ///  Default value is `http`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<DevWorkspaceTemplateParentComponentsPluginComponentsOpenshiftEndpointsProtocol>,
    /// Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    /// Port number to be used within the container component. The same port cannot be used by two different container components.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPort")]
    pub target_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginComponentsOpenshiftEndpointsExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginComponentsOpenshiftEndpointsProtocol {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}

/// Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginComponentsOpenshiftLocationType {
    Uri,
    Inlined,
}

/// Allows specifying the definition of a volume shared by several other components
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginComponentsVolume {
    /// Ephemeral volumes are not stored persistently across restarts. Defaults to false
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ephemeral: Option<bool>,
    /// Size of the volume
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
}

/// Allows importing a plugin. 
///  Plugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentComponentsPluginImportReferenceType {
    Uri,
    Id,
    Kubernetes,
}

/// Reference to a Kubernetes CRD of type DevWorkspaceTemplate
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsPluginKubernetes {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Allows specifying the definition of a volume shared by several other components
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentComponentsVolume {
    /// Ephemeral volumes are not stored persistently across restarts. Defaults to false
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ephemeral: Option<bool>,
    /// Size of the volume
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentDependentProjects {
    /// Map of implementation-dependant free-form YAML attributes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clonePath")]
    pub clone_path: Option<String>,
    /// Project's Git source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git: Option<DevWorkspaceTemplateParentDependentProjectsGit>,
    /// Project name
    pub name: String,
    /// Type of project source
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceType")]
    pub source_type: Option<DevWorkspaceTemplateParentDependentProjectsSourceType>,
    /// Project's Zip source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zip: Option<DevWorkspaceTemplateParentDependentProjectsZip>,
}

/// Project's Git source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentDependentProjectsGit {
    /// Defines from what the project should be checked out. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkoutFrom")]
    pub checkout_from: Option<DevWorkspaceTemplateParentDependentProjectsGitCheckoutFrom>,
    /// The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remotes: Option<BTreeMap<String, String>>,
}

/// Defines from what the project should be checked out. Required if there are more than one remote configured
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentDependentProjectsGitCheckoutFrom {
    /// The remote name should be used as init. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<String>,
    /// The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentDependentProjectsSourceType {
    Git,
    Zip,
}

/// Project's Zip source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentDependentProjectsZip {
    /// Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
}

/// Parent devworkspace template
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentImportReferenceType {
    Uri,
    Id,
    Kubernetes,
}

/// Reference to a Kubernetes CRD of type DevWorkspaceTemplate
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentKubernetes {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentProjects {
    /// Map of implementation-dependant free-form YAML attributes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clonePath")]
    pub clone_path: Option<String>,
    /// Project's Git source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git: Option<DevWorkspaceTemplateParentProjectsGit>,
    /// Project name
    pub name: String,
    /// Type of project source
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceType")]
    pub source_type: Option<DevWorkspaceTemplateParentProjectsSourceType>,
    /// Project's Zip source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zip: Option<DevWorkspaceTemplateParentProjectsZip>,
}

/// Project's Git source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentProjectsGit {
    /// Defines from what the project should be checked out. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkoutFrom")]
    pub checkout_from: Option<DevWorkspaceTemplateParentProjectsGitCheckoutFrom>,
    /// The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remotes: Option<BTreeMap<String, String>>,
}

/// Defines from what the project should be checked out. Required if there are more than one remote configured
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentProjectsGitCheckoutFrom {
    /// The remote name should be used as init. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<String>,
    /// The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentProjectsSourceType {
    Git,
    Zip,
}

/// Project's Zip source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentProjectsZip {
    /// Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentStarterProjects {
    /// Map of implementation-dependant free-form YAML attributes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Description of a starter project
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Project's Git source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git: Option<DevWorkspaceTemplateParentStarterProjectsGit>,
    /// Project name
    pub name: String,
    /// Type of project source
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceType")]
    pub source_type: Option<DevWorkspaceTemplateParentStarterProjectsSourceType>,
    /// Sub-directory from a starter project to be used as root for starter project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subDir")]
    pub sub_dir: Option<String>,
    /// Project's Zip source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zip: Option<DevWorkspaceTemplateParentStarterProjectsZip>,
}

/// Project's Git source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentStarterProjectsGit {
    /// Defines from what the project should be checked out. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkoutFrom")]
    pub checkout_from: Option<DevWorkspaceTemplateParentStarterProjectsGitCheckoutFrom>,
    /// The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remotes: Option<BTreeMap<String, String>>,
}

/// Defines from what the project should be checked out. Required if there are more than one remote configured
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentStarterProjectsGitCheckoutFrom {
    /// The remote name should be used as init. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<String>,
    /// The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateParentStarterProjectsSourceType {
    Git,
    Zip,
}

/// Project's Zip source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateParentStarterProjectsZip {
    /// Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateProjects {
    /// Map of implementation-dependant free-form YAML attributes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clonePath")]
    pub clone_path: Option<String>,
    /// Project's Custom source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<DevWorkspaceTemplateProjectsCustom>,
    /// Project's Git source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git: Option<DevWorkspaceTemplateProjectsGit>,
    /// Project name
    pub name: String,
    /// Type of project source
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceType")]
    pub source_type: Option<DevWorkspaceTemplateProjectsSourceType>,
    /// Project's Zip source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zip: Option<DevWorkspaceTemplateProjectsZip>,
}

/// Project's Custom source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateProjectsCustom {
    #[serde(rename = "embeddedResource")]
    pub embedded_resource: BTreeMap<String, serde_json::Value>,
    #[serde(rename = "projectSourceClass")]
    pub project_source_class: String,
}

/// Project's Git source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateProjectsGit {
    /// Defines from what the project should be checked out. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkoutFrom")]
    pub checkout_from: Option<DevWorkspaceTemplateProjectsGitCheckoutFrom>,
    /// The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.
    pub remotes: BTreeMap<String, String>,
}

/// Defines from what the project should be checked out. Required if there are more than one remote configured
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateProjectsGitCheckoutFrom {
    /// The remote name should be used as init. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<String>,
    /// The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateProjectsSourceType {
    Git,
    Zip,
    Custom,
}

/// Project's Zip source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateProjectsZip {
    /// Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateStarterProjects {
    /// Map of implementation-dependant free-form YAML attributes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<BTreeMap<String, serde_json::Value>>,
    /// Project's Custom source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<DevWorkspaceTemplateStarterProjectsCustom>,
    /// Description of a starter project
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Project's Git source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git: Option<DevWorkspaceTemplateStarterProjectsGit>,
    /// Project name
    pub name: String,
    /// Type of project source
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceType")]
    pub source_type: Option<DevWorkspaceTemplateStarterProjectsSourceType>,
    /// Sub-directory from a starter project to be used as root for starter project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subDir")]
    pub sub_dir: Option<String>,
    /// Project's Zip source
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zip: Option<DevWorkspaceTemplateStarterProjectsZip>,
}

/// Project's Custom source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateStarterProjectsCustom {
    #[serde(rename = "embeddedResource")]
    pub embedded_resource: BTreeMap<String, serde_json::Value>,
    #[serde(rename = "projectSourceClass")]
    pub project_source_class: String,
}

/// Project's Git source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateStarterProjectsGit {
    /// Defines from what the project should be checked out. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkoutFrom")]
    pub checkout_from: Option<DevWorkspaceTemplateStarterProjectsGitCheckoutFrom>,
    /// The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.
    pub remotes: BTreeMap<String, String>,
}

/// Defines from what the project should be checked out. Required if there are more than one remote configured
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateStarterProjectsGitCheckoutFrom {
    /// The remote name should be used as init. Required if there are more than one remote configured
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<String>,
    /// The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DevWorkspaceTemplateStarterProjectsSourceType {
    Git,
    Zip,
    Custom,
}

/// Project's Zip source
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DevWorkspaceTemplateStarterProjectsZip {
    /// Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
}

