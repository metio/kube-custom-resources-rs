// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/slok/sloth/sloth.slok.dev/v1/prometheusservicelevels.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// ServiceLevelSpec is the spec for a PrometheusServiceLevel.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "sloth.slok.dev", version = "v1", kind = "PrometheusServiceLevel", plural = "prometheusservicelevels")]
#[kube(namespaced)]
#[kube(status = "PrometheusServiceLevelStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct PrometheusServiceLevelSpec {
    /// Labels are the Prometheus labels that will have all the recording
    /// and alerting rules generated for the service SLOs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Service is the application of the SLOs.
    pub service: String,
    /// SLOPlugins will be added to the SLO generation plugin chain of all SLOs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sloPlugins")]
    pub slo_plugins: Option<PrometheusServiceLevelSloPlugins>,
    /// SLOs are the SLOs of the service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slos: Option<Vec<PrometheusServiceLevelSlos>>,
}

/// SLOPlugins will be added to the SLO generation plugin chain of all SLOs.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PrometheusServiceLevelSloPlugins {
    /// chain ths the list of plugin chain to add to the SLO generation.
    pub chain: Vec<PrometheusServiceLevelSloPluginsChain>,
    /// OverridePrevious will override the previous SLO plugins declared.
    /// Depending on where is this SLO plugins block declared will override:
    /// - If declared at SLO group level: Overrides the default plugins.
    /// - If declared at SLO level: Overrides the default + SLO group plugins.
    /// The declaration order is default plugins -> SLO Group plugins -> SLO plugins.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overridePrevious")]
    pub override_previous: Option<bool>,
}

/// SLOPlugin is a plugin that will be used on the chain of plugins for the SLO generation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PrometheusServiceLevelSloPluginsChain {
    /// Config is the configuration used on the plugin instance creation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, serde_json::Value>>,
    /// ID is the ID of the plugin to load .
    pub id: String,
    /// Priority is the priority of the plugin in the chain. The lower the number
    /// the higher the priority. The first plugin will be the one with the lowest
    /// priority.
    /// The default plugins loaded by Sloth use `0` priority. If you want to
    /// execute plugins before the default ones, you can use negative priority.
    /// It is recommended to use round gaps of numbers like 10, 100, 1000, -200, -1000...
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
}

/// SLO is the configuration/declaration of the service level objective of
/// a service.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PrometheusServiceLevelSlos {
    /// Alerting is the configuration with all the things related with the SLO
    /// alerts.
    pub alerting: PrometheusServiceLevelSlosAlerting,
    /// Description is the description of the SLO.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Labels are the Prometheus labels that will have all the recording and
    /// alerting rules for this specific SLO. These labels are merged with the
    /// previous level labels.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Name is the name of the SLO.
    pub name: String,
    /// Objective is target of the SLO the percentage (0, 100] (e.g 99.9).
    pub objective: f64,
    /// Plugins will be added along the group SLO plugins declared in the spec root level
    /// and Sloth default plugins.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugins: Option<PrometheusServiceLevelSlosPlugins>,
    /// SLI is the indicator (service level indicator) for this specific SLO.
    pub sli: PrometheusServiceLevelSlosSli,
}

/// Alerting is the configuration with all the things related with the SLO
/// alerts.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PrometheusServiceLevelSlosAlerting {
    /// Annotations are the Prometheus annotations that will have all the alerts generated by
    /// this SLO.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the Prometheus labels that will have all the alerts generated by this SLO.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Name is the name used by the alerts generated for this SLO.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Page alert refers to the critical alert (check multiwindow-multiburn alerts).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pageAlert")]
    pub page_alert: Option<PrometheusServiceLevelSlosAlertingPageAlert>,
    /// TicketAlert alert refers to the warning alert (check multiwindow-multiburn alerts).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ticketAlert")]
    pub ticket_alert: Option<PrometheusServiceLevelSlosAlertingTicketAlert>,
}

/// Page alert refers to the critical alert (check multiwindow-multiburn alerts).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PrometheusServiceLevelSlosAlertingPageAlert {
    /// Annotations are the Prometheus annotations for the specific alert.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Disable disables the alert and makes Sloth not generating this alert. This
    /// can be helpful for example to disable ticket(warning) alerts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
    /// Labels are the Prometheus labels for the specific alert. For example can be
    /// useful to route the Page alert to specific Slack channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// TicketAlert alert refers to the warning alert (check multiwindow-multiburn alerts).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PrometheusServiceLevelSlosAlertingTicketAlert {
    /// Annotations are the Prometheus annotations for the specific alert.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Disable disables the alert and makes Sloth not generating this alert. This
    /// can be helpful for example to disable ticket(warning) alerts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
    /// Labels are the Prometheus labels for the specific alert. For example can be
    /// useful to route the Page alert to specific Slack channel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// Plugins will be added along the group SLO plugins declared in the spec root level
/// and Sloth default plugins.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PrometheusServiceLevelSlosPlugins {
    /// chain ths the list of plugin chain to add to the SLO generation.
    pub chain: Vec<PrometheusServiceLevelSlosPluginsChain>,
    /// OverridePrevious will override the previous SLO plugins declared.
    /// Depending on where is this SLO plugins block declared will override:
    /// - If declared at SLO group level: Overrides the default plugins.
    /// - If declared at SLO level: Overrides the default + SLO group plugins.
    /// The declaration order is default plugins -> SLO Group plugins -> SLO plugins.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overridePrevious")]
    pub override_previous: Option<bool>,
}

/// SLOPlugin is a plugin that will be used on the chain of plugins for the SLO generation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PrometheusServiceLevelSlosPluginsChain {
    /// Config is the configuration used on the plugin instance creation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, serde_json::Value>>,
    /// ID is the ID of the plugin to load .
    pub id: String,
    /// Priority is the priority of the plugin in the chain. The lower the number
    /// the higher the priority. The first plugin will be the one with the lowest
    /// priority.
    /// The default plugins loaded by Sloth use `0` priority. If you want to
    /// execute plugins before the default ones, you can use negative priority.
    /// It is recommended to use round gaps of numbers like 10, 100, 1000, -200, -1000...
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
}

/// SLI is the indicator (service level indicator) for this specific SLO.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PrometheusServiceLevelSlosSli {
    /// Events is the events SLI type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events: Option<PrometheusServiceLevelSlosSliEvents>,
    /// Plugin is the pluggable SLI type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<PrometheusServiceLevelSlosSliPlugin>,
    /// Raw is the raw SLI type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub raw: Option<PrometheusServiceLevelSlosSliRaw>,
}

/// Events is the events SLI type.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PrometheusServiceLevelSlosSliEvents {
    /// ErrorQuery is a Prometheus query that will get the number/count of events
    /// that we consider that are bad for the SLO (e.g "http 5xx", "latency > 250ms"...).
    /// Requires the usage of `{{.window}}` template variable.
    #[serde(rename = "errorQuery")]
    pub error_query: String,
    /// TotalQuery is a Prometheus query that will get the total number/count of events
    /// for the SLO (e.g "all http requests"...).
    /// Requires the usage of `{{.window}}` template variable.
    #[serde(rename = "totalQuery")]
    pub total_query: String,
}

/// Plugin is the pluggable SLI type.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PrometheusServiceLevelSlosSliPlugin {
    /// Name is the name of the plugin that needs to load.
    pub id: String,
    /// Options are the options used for the plugin.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, String>>,
}

/// Raw is the raw SLI type.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PrometheusServiceLevelSlosSliRaw {
    /// ErrorRatioQuery is a Prometheus query that will get the raw error ratio (0-1) for the SLO.
    #[serde(rename = "errorRatioQuery")]
    pub error_ratio_query: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PrometheusServiceLevelStatus {
    /// LastPromOpRulesGeneration tells the last atemp made for a successful SLO rules generate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastPromOpRulesSuccessfulGenerated")]
    pub last_prom_op_rules_successful_generated: Option<String>,
    /// ObservedGeneration tells the generation was acted on, normally this is required to stop an
    /// infinite loop when the status is updated because it sends a watch updated event to the watchers
    /// of the K8s object.
    #[serde(rename = "observedGeneration")]
    pub observed_generation: i64,
    /// ProcessedSLOs tells how many SLOs haven been processed for Prometheus operator.
    #[serde(rename = "processedSLOs")]
    pub processed_sl_os: i64,
    /// PromOpRulesGenerated tells if the rules for prometheus operator CRD have been generated.
    #[serde(rename = "promOpRulesGenerated")]
    pub prom_op_rules_generated: bool,
    /// PromOpRulesGeneratedSLOs tells how many SLOs have been processed and generated for Prometheus operator successfully.
    #[serde(rename = "promOpRulesGeneratedSLOs")]
    pub prom_op_rules_generated_sl_os: i64,
}

