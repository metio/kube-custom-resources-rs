// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/open-cluster-management-io/ocm/operator.open-cluster-management.io/v1/clustermanagers.yaml
// kopium version: 0.22.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// Spec represents a desired deployment configuration of controllers that govern registration and work distribution for attached Klusterlets.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "operator.open-cluster-management.io", version = "v1", kind = "ClusterManager", plural = "clustermanagers")]
#[kube(status = "ClusterManagerStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ClusterManagerSpec {
    /// addOnManagerConfiguration contains the configuration of addon manager
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addOnManagerConfiguration")]
    pub add_on_manager_configuration: Option<ClusterManagerAddOnManagerConfiguration>,
    /// addOnManagerImagePullSpec represents the desired image configuration of addon manager controller/webhook installed on hub.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addOnManagerImagePullSpec")]
    pub add_on_manager_image_pull_spec: Option<String>,
    /// deployOption contains the options of deploying a cluster-manager
    /// Default mode is used if DeployOption is not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deployOption")]
    pub deploy_option: Option<ClusterManagerDeployOption>,
    /// nodePlacement enables explicit control over the scheduling of the deployed pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePlacement")]
    pub node_placement: Option<ClusterManagerNodePlacement>,
    /// placementImagePullSpec represents the desired image configuration of placement controller/webhook installed on hub.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "placementImagePullSpec")]
    pub placement_image_pull_spec: Option<String>,
    /// registrationConfiguration contains the configuration of registration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registrationConfiguration")]
    pub registration_configuration: Option<ClusterManagerRegistrationConfiguration>,
    /// registrationImagePullSpec represents the desired image of registration controller/webhook installed on hub.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registrationImagePullSpec")]
    pub registration_image_pull_spec: Option<String>,
    /// ResourceRequirement specify QoS classes of deployments managed by clustermanager.
    /// It applies to all the containers in the deployments.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceRequirement")]
    pub resource_requirement: Option<ClusterManagerResourceRequirement>,
    /// serverConfiguration contains the configuration for http/grpc server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverConfiguration")]
    pub server_configuration: Option<ClusterManagerServerConfiguration>,
    /// workConfiguration contains the configuration of work
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workConfiguration")]
    pub work_configuration: Option<ClusterManagerWorkConfiguration>,
    /// workImagePullSpec represents the desired image configuration of work controller/webhook installed on hub.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workImagePullSpec")]
    pub work_image_pull_spec: Option<String>,
}

/// addOnManagerConfiguration contains the configuration of addon manager
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerAddOnManagerConfiguration {
    /// FeatureGates represents the list of feature gates for addon manager
    /// If it is set empty, default feature gates will be used.
    /// If it is set, featuregate/Foo is an example of one item in FeatureGates:
    ///   1. If featuregate/Foo does not exist, registration-operator will discard it
    ///   2. If featuregate/Foo exists and is false by default. It is now possible to set featuregate/Foo=[false|true]
    ///   3. If featuregate/Foo exists and is true by default. If a cluster-admin upgrading from 1 to 2 wants to continue having featuregate/Foo=false,
    ///  	he can set featuregate/Foo=false before upgrading. Let's say the cluster-admin wants featuregate/Foo=false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featureGates")]
    pub feature_gates: Option<Vec<ClusterManagerAddOnManagerConfigurationFeatureGates>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerAddOnManagerConfigurationFeatureGates {
    /// Feature is the key of feature gate. e.g. featuregate/Foo.
    pub feature: String,
    /// Mode is either Enable, Disable, "" where "" is Disable by default.
    /// In Enable mode, a valid feature gate `featuregate/Foo` will be set to "--featuregate/Foo=true".
    /// In Disable mode, a valid feature gate `featuregate/Foo` will be set to "--featuregate/Foo=false".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<ClusterManagerAddOnManagerConfigurationFeatureGatesMode>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterManagerAddOnManagerConfigurationFeatureGatesMode {
    Enable,
    Disable,
}

/// deployOption contains the options of deploying a cluster-manager
/// Default mode is used if DeployOption is not set.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterManagerDeployOption {
    /// Default includes optional configurations for clustermanager in the Default mode.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default: Option<ClusterManagerDeployOptionDefault>,
    /// Hosted includes configurations we need for clustermanager in the Hosted mode.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosted: Option<ClusterManagerDeployOptionHosted>,
    /// Mode can be Default or Hosted.
    /// In Default mode, the Hub is installed as a whole and all parts of Hub are deployed in the same cluster.
    /// In Hosted mode, only crd and configurations are installed on one cluster(defined as hub-cluster). Controllers run in another
    /// cluster (defined as management-cluster) and connect to the hub with the kubeconfig in secret of "external-hub-kubeconfig"(a kubeconfig
    /// of hub-cluster with cluster-admin permission).
    /// Note: Do not modify the Mode field once it's applied.
    pub mode: ClusterManagerDeployOptionMode,
}

/// Default includes optional configurations for clustermanager in the Default mode.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerDeployOptionDefault {
    /// RegistrationWebhookConfiguration represents the customized webhook-server configuration of registration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registrationWebhookConfiguration")]
    pub registration_webhook_configuration: Option<ClusterManagerDeployOptionDefaultRegistrationWebhookConfiguration>,
    /// WorkWebhookConfiguration represents the customized webhook-server configuration of work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workWebhookConfiguration")]
    pub work_webhook_configuration: Option<ClusterManagerDeployOptionDefaultWorkWebhookConfiguration>,
}

/// RegistrationWebhookConfiguration represents the customized webhook-server configuration of registration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerDeployOptionDefaultRegistrationWebhookConfiguration {
    /// BindConfiguration represents server bind configuration for the webhook server
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bindConfiguration")]
    pub bind_configuration: Option<ClusterManagerDeployOptionDefaultRegistrationWebhookConfigurationBindConfiguration>,
}

/// BindConfiguration represents server bind configuration for the webhook server
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerDeployOptionDefaultRegistrationWebhookConfigurationBindConfiguration {
    /// HealthProbePort represents the bind port of a webhook-server's healthcheck endpoint. The default value is 8000.
    /// Healthchecks may be disabled by setting a value less than or equal to 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthProbePort")]
    pub health_probe_port: Option<i32>,
    /// HostNetwork enables running webhook pods in host networking mode.
    /// This may be required in some installations, such as EKS with Calico CNI,
    /// to allow the API Server to communicate with the webhook pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostNetwork")]
    pub host_network: Option<bool>,
    /// MetricsPort represents the bind port for a webhook-server's metric endpoint. The default value is 8080.
    /// Metrics may be disabled by setting a value less than or equal to 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricsPort")]
    pub metrics_port: Option<i32>,
    /// Port represents the primary bind port of a server. The default value is 9443.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
}

/// WorkWebhookConfiguration represents the customized webhook-server configuration of work.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerDeployOptionDefaultWorkWebhookConfiguration {
    /// BindConfiguration represents server bind configuration for the webhook server
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bindConfiguration")]
    pub bind_configuration: Option<ClusterManagerDeployOptionDefaultWorkWebhookConfigurationBindConfiguration>,
}

/// BindConfiguration represents server bind configuration for the webhook server
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerDeployOptionDefaultWorkWebhookConfigurationBindConfiguration {
    /// HealthProbePort represents the bind port of a webhook-server's healthcheck endpoint. The default value is 8000.
    /// Healthchecks may be disabled by setting a value less than or equal to 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthProbePort")]
    pub health_probe_port: Option<i32>,
    /// HostNetwork enables running webhook pods in host networking mode.
    /// This may be required in some installations, such as EKS with Calico CNI,
    /// to allow the API Server to communicate with the webhook pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostNetwork")]
    pub host_network: Option<bool>,
    /// MetricsPort represents the bind port for a webhook-server's metric endpoint. The default value is 8080.
    /// Metrics may be disabled by setting a value less than or equal to 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricsPort")]
    pub metrics_port: Option<i32>,
    /// Port represents the primary bind port of a server. The default value is 9443.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
}

/// Hosted includes configurations we need for clustermanager in the Hosted mode.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerDeployOptionHosted {
    /// RegistrationWebhookConfiguration represents the customized webhook-server configuration of registration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registrationWebhookConfiguration")]
    pub registration_webhook_configuration: Option<ClusterManagerDeployOptionHostedRegistrationWebhookConfiguration>,
    /// WorkWebhookConfiguration represents the customized webhook-server configuration of work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workWebhookConfiguration")]
    pub work_webhook_configuration: Option<ClusterManagerDeployOptionHostedWorkWebhookConfiguration>,
}

/// RegistrationWebhookConfiguration represents the customized webhook-server configuration of registration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerDeployOptionHostedRegistrationWebhookConfiguration {
    /// Address represents the address of a webhook-server.
    /// It could be in IP format or fqdn format.
    /// The Address must be reachable by apiserver of the hub cluster.
    pub address: String,
    /// BindConfiguration represents server bind configuration for the webhook server
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bindConfiguration")]
    pub bind_configuration: Option<ClusterManagerDeployOptionHostedRegistrationWebhookConfigurationBindConfiguration>,
    /// Port represents the external port of a webhook-server. The default value of Port is 443.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
}

/// BindConfiguration represents server bind configuration for the webhook server
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerDeployOptionHostedRegistrationWebhookConfigurationBindConfiguration {
    /// HealthProbePort represents the bind port of a webhook-server's healthcheck endpoint. The default value is 8000.
    /// Healthchecks may be disabled by setting a value less than or equal to 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthProbePort")]
    pub health_probe_port: Option<i32>,
    /// HostNetwork enables running webhook pods in host networking mode.
    /// This may be required in some installations, such as EKS with Calico CNI,
    /// to allow the API Server to communicate with the webhook pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostNetwork")]
    pub host_network: Option<bool>,
    /// MetricsPort represents the bind port for a webhook-server's metric endpoint. The default value is 8080.
    /// Metrics may be disabled by setting a value less than or equal to 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricsPort")]
    pub metrics_port: Option<i32>,
    /// Port represents the primary bind port of a server. The default value is 9443.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
}

/// WorkWebhookConfiguration represents the customized webhook-server configuration of work.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerDeployOptionHostedWorkWebhookConfiguration {
    /// Address represents the address of a webhook-server.
    /// It could be in IP format or fqdn format.
    /// The Address must be reachable by apiserver of the hub cluster.
    pub address: String,
    /// BindConfiguration represents server bind configuration for the webhook server
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bindConfiguration")]
    pub bind_configuration: Option<ClusterManagerDeployOptionHostedWorkWebhookConfigurationBindConfiguration>,
    /// Port represents the external port of a webhook-server. The default value of Port is 443.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
}

/// BindConfiguration represents server bind configuration for the webhook server
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerDeployOptionHostedWorkWebhookConfigurationBindConfiguration {
    /// HealthProbePort represents the bind port of a webhook-server's healthcheck endpoint. The default value is 8000.
    /// Healthchecks may be disabled by setting a value less than or equal to 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthProbePort")]
    pub health_probe_port: Option<i32>,
    /// HostNetwork enables running webhook pods in host networking mode.
    /// This may be required in some installations, such as EKS with Calico CNI,
    /// to allow the API Server to communicate with the webhook pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostNetwork")]
    pub host_network: Option<bool>,
    /// MetricsPort represents the bind port for a webhook-server's metric endpoint. The default value is 8080.
    /// Metrics may be disabled by setting a value less than or equal to 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricsPort")]
    pub metrics_port: Option<i32>,
    /// Port represents the primary bind port of a server. The default value is 9443.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
}

/// deployOption contains the options of deploying a cluster-manager
/// Default mode is used if DeployOption is not set.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterManagerDeployOptionMode {
    Default,
    Hosted,
}

/// nodePlacement enables explicit control over the scheduling of the deployed pods.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerNodePlacement {
    /// NodeSelector defines which Nodes the Pods are scheduled on. The default is an empty list.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// Tolerations are attached by pods to tolerate any taint that matches
    /// the triple <key,value,effect> using the matching operator <operator>.
    /// The default is an empty list.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<ClusterManagerNodePlacementTolerations>>,
}

/// The pod this Toleration is attached to tolerates any taint that matches
/// the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerNodePlacementTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects.
    /// When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys.
    /// If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value.
    /// Valid operators are Exists and Equal. Defaults to Equal.
    /// Exists is equivalent to wildcard for value, so that a pod can
    /// tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be
    /// of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
    /// it is not set, which means tolerate the taint forever (do not evict). Zero and
    /// negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to.
    /// If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// registrationConfiguration contains the configuration of registration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerRegistrationConfiguration {
    /// AutoApproveUser represents a list of users that can auto approve CSR and accept client. If the credential of the
    /// bootstrap-hub-kubeconfig matches to the users, the cluster created by the bootstrap-hub-kubeconfig will
    /// be auto-registered into the hub cluster. This takes effect only when ManagedClusterAutoApproval feature gate
    /// is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoApproveUsers")]
    pub auto_approve_users: Option<Vec<String>>,
    /// FeatureGates represents the list of feature gates for registration
    /// If it is set empty, default feature gates will be used.
    /// If it is set, featuregate/Foo is an example of one item in FeatureGates:
    ///   1. If featuregate/Foo does not exist, registration-operator will discard it
    ///   2. If featuregate/Foo exists and is false by default. It is now possible to set featuregate/Foo=[false|true]
    ///   3. If featuregate/Foo exists and is true by default. If a cluster-admin upgrading from 1 to 2 wants to continue having featuregate/Foo=false,
    ///  	he can set featuregate/Foo=false before upgrading. Let's say the cluster-admin wants featuregate/Foo=false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featureGates")]
    pub feature_gates: Option<Vec<ClusterManagerRegistrationConfigurationFeatureGates>>,
    /// RegistrationDrivers represent the list of hub registration drivers that contain information used by hub to initialize the hub cluster
    /// A RegistrationDriverHub contains details of authentication type and the hub cluster ARN
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registrationDrivers")]
    pub registration_drivers: Option<Vec<ClusterManagerRegistrationConfigurationRegistrationDrivers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerRegistrationConfigurationFeatureGates {
    /// Feature is the key of feature gate. e.g. featuregate/Foo.
    pub feature: String,
    /// Mode is either Enable, Disable, "" where "" is Disable by default.
    /// In Enable mode, a valid feature gate `featuregate/Foo` will be set to "--featuregate/Foo=true".
    /// In Disable mode, a valid feature gate `featuregate/Foo` will be set to "--featuregate/Foo=false".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<ClusterManagerRegistrationConfigurationFeatureGatesMode>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterManagerRegistrationConfigurationFeatureGatesMode {
    Enable,
    Disable,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterManagerRegistrationConfigurationRegistrationDrivers {
    /// authType is the type of the authentication used by hub to initialize the Hub cluster.
    /// Possible values are csr, awsirsa and grpc.
    #[serde(rename = "authType")]
    pub auth_type: ClusterManagerRegistrationConfigurationRegistrationDriversAuthType,
    /// awsirsa represents the configuration for awsirsa driver.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub awsirsa: Option<ClusterManagerRegistrationConfigurationRegistrationDriversAwsirsa>,
    /// csr represents the configuration for csr driver.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csr: Option<ClusterManagerRegistrationConfigurationRegistrationDriversCsr>,
    /// grpc represents the configuration for gRPC driver.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<ClusterManagerRegistrationConfigurationRegistrationDriversGrpc>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterManagerRegistrationConfigurationRegistrationDriversAuthType {
    #[serde(rename = "csr")]
    Csr,
    #[serde(rename = "awsirsa")]
    Awsirsa,
    #[serde(rename = "grpc")]
    Grpc,
}

/// awsirsa represents the configuration for awsirsa driver.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerRegistrationConfigurationRegistrationDriversAwsirsa {
    /// AutoApprovedIdentities represent a list of approved arn patterns
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoApprovedIdentities")]
    pub auto_approved_identities: Option<Vec<String>>,
    /// This represents the hub cluster ARN
    /// Example - arn:eks:us-west-2:12345678910:cluster/hub-cluster1
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hubClusterArn")]
    pub hub_cluster_arn: Option<String>,
    /// List of tags to be added to AWS resources created by hub while processing awsirsa registration request
    /// Example - "product:v1:tenant:app-name=My-App"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

/// csr represents the configuration for csr driver.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerRegistrationConfigurationRegistrationDriversCsr {
    /// AutoApprovedIdentities represent a list of approved users
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoApprovedIdentities")]
    pub auto_approved_identities: Option<Vec<String>>,
}

/// grpc represents the configuration for gRPC driver.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerRegistrationConfigurationRegistrationDriversGrpc {
    /// AutoApprovedIdentities represent a list of approved users
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoApprovedIdentities")]
    pub auto_approved_identities: Option<Vec<String>>,
}

/// ResourceRequirement specify QoS classes of deployments managed by clustermanager.
/// It applies to all the containers in the deployments.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerResourceRequirement {
    /// ResourceRequirements defines resource requests and limits when Type is ResourceQosClassResourceRequirement
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceRequirements")]
    pub resource_requirements: Option<ClusterManagerResourceRequirementResourceRequirements>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ClusterManagerResourceRequirementType>,
}

/// ResourceRequirements defines resource requests and limits when Type is ResourceQosClassResourceRequirement
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerResourceRequirementResourceRequirements {
    /// Claims lists the names of resources, defined in spec.resourceClaims,
    /// that are used by this container.
    /// 
    /// This is an alpha field and requires enabling the
    /// DynamicResourceAllocation feature gate.
    /// 
    /// This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<ClusterManagerResourceRequirementResourceRequirementsClaims>>,
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerResourceRequirementResourceRequirementsClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of
    /// the Pod where this field is used. It makes that resource available
    /// inside a container.
    pub name: String,
    /// Request is the name chosen for a request in the referenced claim.
    /// If empty, everything from the claim is made available, otherwise
    /// only the result of this request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
}

/// ResourceRequirement specify QoS classes of deployments managed by clustermanager.
/// It applies to all the containers in the deployments.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterManagerResourceRequirementType {
    Default,
    BestEffort,
    ResourceRequirement,
}

/// serverConfiguration contains the configuration for http/grpc server.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerServerConfiguration {
    /// endpointsExposure represents the configuration for endpoints exposure of the server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointsExposure")]
    pub endpoints_exposure: Option<Vec<ClusterManagerServerConfigurationEndpointsExposure>>,
    /// featureGates represents the features enabled for the server
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featureGates")]
    pub feature_gates: Option<Vec<ClusterManagerServerConfigurationFeatureGates>>,
    /// imagePullSpec is the image for the server
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSpec")]
    pub image_pull_spec: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterManagerServerConfigurationEndpointsExposure {
    /// grpc represents the configuration for grpc endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<ClusterManagerServerConfigurationEndpointsExposureGrpc>,
    /// https represents the configuration for https endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub https: Option<ClusterManagerServerConfigurationEndpointsExposureHttps>,
    /// protocol is the protocol used for the endpoint, could be https or grpc.
    pub protocol: ClusterManagerServerConfigurationEndpointsExposureProtocol,
    /// usage defines the usage of the endpoint. It could be "agentToHub" indicating the endpoint is used
    /// for communication between agent and hub, or "consumer" indicating the endpoint is used for external consumer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub usage: Option<String>,
}

/// grpc represents the configuration for grpc endpoint.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterManagerServerConfigurationEndpointsExposureGrpc {
    /// hostname points to a fixed hostname for serving agents' handshakes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<ClusterManagerServerConfigurationEndpointsExposureGrpcHostname>,
    /// type specifies how the endpoint is exposed.
    /// You may need to apply an object to expose the endpoint, for example: a route.
    #[serde(rename = "type")]
    pub r#type: ClusterManagerServerConfigurationEndpointsExposureGrpcType,
}

/// hostname points to a fixed hostname for serving agents' handshakes.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerServerConfigurationEndpointsExposureGrpcHostname {
    /// caBundle of the endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caBundle")]
    pub ca_bundle: Option<String>,
    /// host is the host name of the endpoint.
    pub host: String,
}

/// grpc represents the configuration for grpc endpoint.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterManagerServerConfigurationEndpointsExposureGrpcType {
    #[serde(rename = "hostname")]
    Hostname,
}

/// https represents the configuration for https endpoint.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterManagerServerConfigurationEndpointsExposureHttps {
    /// hostname points to a fixed hostname for serving agents' handshakes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<ClusterManagerServerConfigurationEndpointsExposureHttpsHostname>,
    /// type specifies how the endpoint is exposed.
    /// You may need to apply an object to expose the endpoint, for example: a route.
    #[serde(rename = "type")]
    pub r#type: ClusterManagerServerConfigurationEndpointsExposureHttpsType,
}

/// hostname points to a fixed hostname for serving agents' handshakes.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerServerConfigurationEndpointsExposureHttpsHostname {
    /// caBundle of the endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caBundle")]
    pub ca_bundle: Option<String>,
    /// host is the host name of the endpoint.
    pub host: String,
}

/// https represents the configuration for https endpoint.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterManagerServerConfigurationEndpointsExposureHttpsType {
    #[serde(rename = "hostname")]
    Hostname,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterManagerServerConfigurationEndpointsExposureProtocol {
    #[serde(rename = "grpc")]
    Grpc,
    #[serde(rename = "https")]
    Https,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerServerConfigurationFeatureGates {
    /// Feature is the key of feature gate. e.g. featuregate/Foo.
    pub feature: String,
    /// Mode is either Enable, Disable, "" where "" is Disable by default.
    /// In Enable mode, a valid feature gate `featuregate/Foo` will be set to "--featuregate/Foo=true".
    /// In Disable mode, a valid feature gate `featuregate/Foo` will be set to "--featuregate/Foo=false".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<ClusterManagerServerConfigurationFeatureGatesMode>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterManagerServerConfigurationFeatureGatesMode {
    Enable,
    Disable,
}

/// workConfiguration contains the configuration of work
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerWorkConfiguration {
    /// FeatureGates represents the list of feature gates for work
    /// If it is set empty, default feature gates will be used.
    /// If it is set, featuregate/Foo is an example of one item in FeatureGates:
    ///   1. If featuregate/Foo does not exist, registration-operator will discard it
    ///   2. If featuregate/Foo exists and is false by default. It is now possible to set featuregate/Foo=[false|true]
    ///   3. If featuregate/Foo exists and is true by default. If a cluster-admin upgrading from 1 to 2 wants to continue having featuregate/Foo=false,
    ///  	he can set featuregate/Foo=false before upgrading. Let's say the cluster-admin wants featuregate/Foo=false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featureGates")]
    pub feature_gates: Option<Vec<ClusterManagerWorkConfigurationFeatureGates>>,
    /// WorkDriver represents the type of work driver. Possible values are "kube", "mqtt", or "grpc".
    /// If not provided, the default value is "kube".
    /// If set to non-"kube" drivers, the klusterlet need to use the same driver.
    /// and the driver configuration must be provided in a secret named "work-driver-config"
    /// in the namespace where the cluster manager is running, adhering to the following structure:
    /// config.yaml: |
    ///   <driver-config-in-yaml>
    /// 
    /// For detailed driver configuration, please refer to the sdk-go documentation: <https://github.com/open-cluster-management-io/sdk-go/blob/main/pkg/cloudevents/README.md#supported-protocols-and-drivers>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workDriver")]
    pub work_driver: Option<ClusterManagerWorkConfigurationWorkDriver>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerWorkConfigurationFeatureGates {
    /// Feature is the key of feature gate. e.g. featuregate/Foo.
    pub feature: String,
    /// Mode is either Enable, Disable, "" where "" is Disable by default.
    /// In Enable mode, a valid feature gate `featuregate/Foo` will be set to "--featuregate/Foo=true".
    /// In Disable mode, a valid feature gate `featuregate/Foo` will be set to "--featuregate/Foo=false".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<ClusterManagerWorkConfigurationFeatureGatesMode>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterManagerWorkConfigurationFeatureGatesMode {
    Enable,
    Disable,
}

/// workConfiguration contains the configuration of work
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterManagerWorkConfigurationWorkDriver {
    #[serde(rename = "kube")]
    Kube,
    #[serde(rename = "mqtt")]
    Mqtt,
    #[serde(rename = "grpc")]
    Grpc,
}

/// Status represents the current status of controllers that govern the lifecycle of managed clusters.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerStatus {
    /// Conditions contain the different condition statuses for this ClusterManager.
    /// Valid condition types are:
    /// Applied: Components in hub are applied.
    /// Available: Components in hub are available and ready to serve.
    /// Progressing: Components in hub are in a transitioning state.
    /// Degraded: Components in hub do not match the desired configuration and only provide
    /// degraded service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// Generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generations: Option<Vec<ClusterManagerStatusGenerations>>,
    /// ObservedGeneration is the last generation change you've dealt with
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// RelatedResources are used to track the resources that are related to this ClusterManager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "relatedResources")]
    pub related_resources: Option<Vec<ClusterManagerStatusRelatedResources>>,
}

/// GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.
/// The definition matches the GenerationStatus defined in github.com/openshift/api/v1
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerStatusGenerations {
    /// group is the group of the resource that you're tracking
    pub group: String,
    /// lastGeneration is the last generation of the resource that controller applies
    #[serde(rename = "lastGeneration")]
    pub last_generation: i64,
    /// name is the name of the resource that you're tracking
    pub name: String,
    /// namespace is where the resource that you're tracking is
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// resource is the resource type of the resource that you're tracking
    pub resource: String,
    /// version is the version of the resource that you're tracking
    pub version: String,
}

/// RelatedResourceMeta represents the resource that is managed by an operator
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterManagerStatusRelatedResources {
    /// group is the group of the resource that you're tracking
    pub group: String,
    /// name is the name of the resource that you're tracking
    pub name: String,
    /// namespace is where the thing you're tracking is
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// resource is the resource type of the resource that you're tracking
    pub resource: String,
    /// version is the version of the thing you're tracking
    pub version: String,
}

