// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/solo-io/gloo/gloo.solo.io/v1/upstreams.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "gloo.solo.io", version = "v1", kind = "Upstream", plural = "upstreams")]
#[kube(namespaced)]
#[kube(status = "UpstreamStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct UpstreamSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ai: Option<UpstreamAi>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<UpstreamAws>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsEc2")]
    pub aws_ec2: Option<UpstreamAwsEc2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<UpstreamAzure>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "circuitBreakers")]
    pub circuit_breakers: Option<UpstreamCircuitBreakers>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionConfig")]
    pub connection_config: Option<UpstreamConnectionConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub consul: Option<UpstreamConsul>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableIstioAutoMtls")]
    pub disable_istio_auto_mtls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoveryMetadata")]
    pub discovery_metadata: Option<UpstreamDiscoveryMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsRefreshRate")]
    pub dns_refresh_rate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub failover: Option<UpstreamFailover>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcp: Option<UpstreamGcp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthChecks")]
    pub health_checks: Option<Vec<UpstreamHealthChecks>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConnectHeaders")]
    pub http_connect_headers: Option<Vec<UpstreamHttpConnectHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConnectSslConfig")]
    pub http_connect_ssl_config: Option<UpstreamHttpConnectSslConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpProxyHostname")]
    pub http_proxy_hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreHealthOnHostRemoval")]
    pub ignore_health_on_host_removal: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialConnectionWindowSize")]
    pub initial_connection_window_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialStreamWindowSize")]
    pub initial_stream_window_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kube: Option<UpstreamKube>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerConfig")]
    pub load_balancer_config: Option<UpstreamLoadBalancerConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentStreams")]
    pub max_concurrent_streams: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespacedStatuses")]
    pub namespaced_statuses: Option<UpstreamNamespacedStatuses>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlierDetection")]
    pub outlier_detection: Option<UpstreamOutlierDetection>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideStreamErrorOnInvalidHttpMessage")]
    pub override_stream_error_on_invalid_http_message: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pipe: Option<UpstreamPipe>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preconnectPolicy")]
    pub preconnect_policy: Option<UpstreamPreconnectPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protocolSelection")]
    pub protocol_selection: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyProtocolVersion")]
    pub proxy_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "respectDnsTtl")]
    pub respect_dns_ttl: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslConfig")]
    pub ssl_config: Option<UpstreamSslConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "static")]
    pub r#static: Option<UpstreamStatic>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useHttp2")]
    pub use_http2: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub anthropic: Option<UpstreamAiAnthropic>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureOpenai")]
    pub azure_openai: Option<UpstreamAiAzureOpenai>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bedrock: Option<UpstreamAiBedrock>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gemini: Option<UpstreamAiGemini>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mistral: Option<UpstreamAiMistral>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multi: Option<UpstreamAiMulti>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openai: Option<UpstreamAiOpenai>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vertexAi")]
    pub vertex_ai: Option<UpstreamAiVertexAi>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiAnthropic {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<UpstreamAiAnthropicAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customHost")]
    pub custom_host: Option<UpstreamAiAnthropicCustomHost>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiAnthropicAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamAiAnthropicAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamAiAnthropicAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiAnthropicAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiAnthropicAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiAnthropicCustomHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathOverride")]
    pub path_override: Option<UpstreamAiAnthropicCustomHostPathOverride>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiAnthropicCustomHostPathOverride {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basePath")]
    pub base_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullPath")]
    pub full_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiAzureOpenai {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<UpstreamAiAzureOpenaiAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customHost")]
    pub custom_host: Option<UpstreamAiAzureOpenaiCustomHost>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentName")]
    pub deployment_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiAzureOpenaiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamAiAzureOpenaiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamAiAzureOpenaiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiAzureOpenaiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiAzureOpenaiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiAzureOpenaiCustomHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathOverride")]
    pub path_override: Option<UpstreamAiAzureOpenaiCustomHostPathOverride>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiAzureOpenaiCustomHostPathOverride {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basePath")]
    pub base_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullPath")]
    pub full_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiBedrock {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialProvider")]
    pub credential_provider: Option<UpstreamAiBedrockCredentialProvider>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customHost")]
    pub custom_host: Option<UpstreamAiBedrockCustomHost>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiBedrockCredentialProvider {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<UpstreamAiBedrockCredentialProviderInline>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamAiBedrockCredentialProviderSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiBedrockCredentialProviderInline {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionToken")]
    pub session_token: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiBedrockCredentialProviderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiBedrockCustomHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathOverride")]
    pub path_override: Option<UpstreamAiBedrockCustomHostPathOverride>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiBedrockCustomHostPathOverride {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basePath")]
    pub base_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullPath")]
    pub full_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiGemini {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<UpstreamAiGeminiAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customHost")]
    pub custom_host: Option<UpstreamAiGeminiCustomHost>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiGeminiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamAiGeminiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamAiGeminiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiGeminiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiGeminiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiGeminiCustomHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathOverride")]
    pub path_override: Option<UpstreamAiGeminiCustomHostPathOverride>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiGeminiCustomHostPathOverride {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basePath")]
    pub base_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullPath")]
    pub full_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMistral {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<UpstreamAiMistralAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customHost")]
    pub custom_host: Option<UpstreamAiMistralCustomHost>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMistralAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamAiMistralAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamAiMistralAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMistralAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMistralAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMistralCustomHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathOverride")]
    pub path_override: Option<UpstreamAiMistralCustomHostPathOverride>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMistralCustomHostPathOverride {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basePath")]
    pub base_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullPath")]
    pub full_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMulti {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priorities: Option<Vec<UpstreamAiMultiPriorities>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPriorities {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pool: Option<Vec<UpstreamAiMultiPrioritiesPool>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPool {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub anthropic: Option<UpstreamAiMultiPrioritiesPoolAnthropic>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureOpenai")]
    pub azure_openai: Option<UpstreamAiMultiPrioritiesPoolAzureOpenai>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bedrock: Option<UpstreamAiMultiPrioritiesPoolBedrock>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gemini: Option<UpstreamAiMultiPrioritiesPoolGemini>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mistral: Option<UpstreamAiMultiPrioritiesPoolMistral>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openai: Option<UpstreamAiMultiPrioritiesPoolOpenai>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vertexAi")]
    pub vertex_ai: Option<UpstreamAiMultiPrioritiesPoolVertexAi>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolAnthropic {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<UpstreamAiMultiPrioritiesPoolAnthropicAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customHost")]
    pub custom_host: Option<UpstreamAiMultiPrioritiesPoolAnthropicCustomHost>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolAnthropicAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamAiMultiPrioritiesPoolAnthropicAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamAiMultiPrioritiesPoolAnthropicAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolAnthropicAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolAnthropicAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolAnthropicCustomHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathOverride")]
    pub path_override: Option<UpstreamAiMultiPrioritiesPoolAnthropicCustomHostPathOverride>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolAnthropicCustomHostPathOverride {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basePath")]
    pub base_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullPath")]
    pub full_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolAzureOpenai {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<UpstreamAiMultiPrioritiesPoolAzureOpenaiAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customHost")]
    pub custom_host: Option<UpstreamAiMultiPrioritiesPoolAzureOpenaiCustomHost>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentName")]
    pub deployment_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolAzureOpenaiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamAiMultiPrioritiesPoolAzureOpenaiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamAiMultiPrioritiesPoolAzureOpenaiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolAzureOpenaiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolAzureOpenaiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolAzureOpenaiCustomHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathOverride")]
    pub path_override: Option<UpstreamAiMultiPrioritiesPoolAzureOpenaiCustomHostPathOverride>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolAzureOpenaiCustomHostPathOverride {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basePath")]
    pub base_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullPath")]
    pub full_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolBedrock {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialProvider")]
    pub credential_provider: Option<UpstreamAiMultiPrioritiesPoolBedrockCredentialProvider>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customHost")]
    pub custom_host: Option<UpstreamAiMultiPrioritiesPoolBedrockCustomHost>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolBedrockCredentialProvider {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<UpstreamAiMultiPrioritiesPoolBedrockCredentialProviderInline>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamAiMultiPrioritiesPoolBedrockCredentialProviderSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolBedrockCredentialProviderInline {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionToken")]
    pub session_token: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolBedrockCredentialProviderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolBedrockCustomHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathOverride")]
    pub path_override: Option<UpstreamAiMultiPrioritiesPoolBedrockCustomHostPathOverride>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolBedrockCustomHostPathOverride {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basePath")]
    pub base_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullPath")]
    pub full_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolGemini {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<UpstreamAiMultiPrioritiesPoolGeminiAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customHost")]
    pub custom_host: Option<UpstreamAiMultiPrioritiesPoolGeminiCustomHost>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolGeminiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamAiMultiPrioritiesPoolGeminiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamAiMultiPrioritiesPoolGeminiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolGeminiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolGeminiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolGeminiCustomHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathOverride")]
    pub path_override: Option<UpstreamAiMultiPrioritiesPoolGeminiCustomHostPathOverride>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolGeminiCustomHostPathOverride {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basePath")]
    pub base_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullPath")]
    pub full_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolMistral {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<UpstreamAiMultiPrioritiesPoolMistralAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customHost")]
    pub custom_host: Option<UpstreamAiMultiPrioritiesPoolMistralCustomHost>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolMistralAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamAiMultiPrioritiesPoolMistralAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamAiMultiPrioritiesPoolMistralAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolMistralAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolMistralAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolMistralCustomHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathOverride")]
    pub path_override: Option<UpstreamAiMultiPrioritiesPoolMistralCustomHostPathOverride>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolMistralCustomHostPathOverride {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basePath")]
    pub base_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullPath")]
    pub full_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolOpenai {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<UpstreamAiMultiPrioritiesPoolOpenaiAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customHost")]
    pub custom_host: Option<UpstreamAiMultiPrioritiesPoolOpenaiCustomHost>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolOpenaiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamAiMultiPrioritiesPoolOpenaiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamAiMultiPrioritiesPoolOpenaiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolOpenaiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolOpenaiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolOpenaiCustomHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathOverride")]
    pub path_override: Option<UpstreamAiMultiPrioritiesPoolOpenaiCustomHostPathOverride>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolOpenaiCustomHostPathOverride {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basePath")]
    pub base_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullPath")]
    pub full_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolVertexAi {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<UpstreamAiMultiPrioritiesPoolVertexAiAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customHost")]
    pub custom_host: Option<UpstreamAiMultiPrioritiesPoolVertexAiCustomHost>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonSchema")]
    pub json_schema: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelPath")]
    pub model_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolVertexAiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamAiMultiPrioritiesPoolVertexAiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamAiMultiPrioritiesPoolVertexAiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolVertexAiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolVertexAiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolVertexAiCustomHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathOverride")]
    pub path_override: Option<UpstreamAiMultiPrioritiesPoolVertexAiCustomHostPathOverride>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiMultiPrioritiesPoolVertexAiCustomHostPathOverride {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basePath")]
    pub base_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullPath")]
    pub full_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiOpenai {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<UpstreamAiOpenaiAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customHost")]
    pub custom_host: Option<UpstreamAiOpenaiCustomHost>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiOpenaiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamAiOpenaiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamAiOpenaiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiOpenaiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiOpenaiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiOpenaiCustomHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathOverride")]
    pub path_override: Option<UpstreamAiOpenaiCustomHostPathOverride>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiOpenaiCustomHostPathOverride {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basePath")]
    pub base_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullPath")]
    pub full_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiVertexAi {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<UpstreamAiVertexAiAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customHost")]
    pub custom_host: Option<UpstreamAiVertexAiCustomHost>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonSchema")]
    pub json_schema: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelPath")]
    pub model_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiVertexAiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamAiVertexAiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamAiVertexAiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiVertexAiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiVertexAiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiVertexAiCustomHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathOverride")]
    pub path_override: Option<UpstreamAiVertexAiCustomHostPathOverride>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAiVertexAiCustomHostPathOverride {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basePath")]
    pub base_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullPath")]
    pub full_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAws {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsAccountId")]
    pub aws_account_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationOverrides")]
    pub destination_overrides: Option<UpstreamAwsDestinationOverrides>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableRoleChaining")]
    pub disable_role_chaining: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lambdaFunctions")]
    pub lambda_functions: Option<Vec<UpstreamAwsLambdaFunctions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamAwsSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAwsDestinationOverrides {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invocationStyle")]
    pub invocation_style: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logicalName")]
    pub logical_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsAlb")]
    pub unwrap_as_alb: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsApiGateway")]
    pub unwrap_as_api_gateway: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wrapAsApiGateway")]
    pub wrap_as_api_gateway: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAwsLambdaFunctions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lambdaFunctionName")]
    pub lambda_function_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logicalName")]
    pub logical_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qualifier: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAwsSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAwsEc2 {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<UpstreamAwsEc2Filters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicIp")]
    pub public_ip: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamAwsEc2SecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAwsEc2Filters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kvPair")]
    pub kv_pair: Option<UpstreamAwsEc2FiltersKvPair>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAwsEc2FiltersKvPair {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAwsEc2SecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAzure {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionAppName")]
    pub function_app_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub functions: Option<Vec<UpstreamAzureFunctions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamAzureSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAzureFunctions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authLevel")]
    pub auth_level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionName")]
    pub function_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamAzureSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamCircuitBreakers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    pub max_connections: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingRequests")]
    pub max_pending_requests: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequests")]
    pub max_requests: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    pub max_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trackRemaining")]
    pub track_remaining: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConnectionConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonHttpProtocolOptions")]
    pub common_http_protocol_options: Option<UpstreamConnectionConfigCommonHttpProtocolOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectTimeout")]
    pub connect_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http1ProtocolOptions")]
    pub http1_protocol_options: Option<UpstreamConnectionConfigHttp1ProtocolOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestsPerConnection")]
    pub max_requests_per_connection: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "perConnectionBufferLimitBytes")]
    pub per_connection_buffer_limit_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpKeepalive")]
    pub tcp_keepalive: Option<UpstreamConnectionConfigTcpKeepalive>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConnectionConfigCommonHttpProtocolOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersWithUnderscoresAction")]
    pub headers_with_underscores_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeout")]
    pub idle_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxHeadersCount")]
    pub max_headers_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxStreamDuration")]
    pub max_stream_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConnectionConfigHttp1ProtocolOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableTrailers")]
    pub enable_trailers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideStreamErrorOnInvalidHttpMessage")]
    pub override_stream_error_on_invalid_http_message: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveCaseHeaderKeyFormat")]
    pub preserve_case_header_key_format: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "properCaseHeaderKeyFormat")]
    pub proper_case_header_key_format: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConnectionConfigTcpKeepalive {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepaliveInterval")]
    pub keepalive_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepaliveProbes")]
    pub keepalive_probes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepaliveTime")]
    pub keepalive_time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsul {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectEnabled")]
    pub connect_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consistencyMode")]
    pub consistency_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCenters")]
    pub data_centers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceBlacklistTags")]
    pub instance_blacklist_tags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceTags")]
    pub instance_tags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryOptions")]
    pub query_options: Option<UpstreamConsulQueryOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSpec")]
    pub service_spec: Option<UpstreamConsulServiceSpec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceTags")]
    pub service_tags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subsetTags")]
    pub subset_tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulQueryOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useCache")]
    pub use_cache: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<UpstreamConsulServiceSpecGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcJsonTranscoder")]
    pub grpc_json_transcoder: Option<UpstreamConsulServiceSpecGrpcJsonTranscoder>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rest: Option<UpstreamConsulServiceSpecRest>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptors: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcServices")]
    pub grpc_services: Option<Vec<UpstreamConsulServiceSpecGrpcGrpcServices>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecGrpcGrpcServices {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionNames")]
    pub function_names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packageName")]
    pub package_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecGrpcJsonTranscoder {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMapping")]
    pub auto_mapping: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "convertGrpcStatus")]
    pub convert_grpc_status: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreUnknownQueryParameters")]
    pub ignore_unknown_query_parameters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoredQueryParameters")]
    pub ignored_query_parameters: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchIncomingRequestRoute")]
    pub match_incoming_request_route: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "printOptions")]
    pub print_options: Option<UpstreamConsulServiceSpecGrpcJsonTranscoderPrintOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptor")]
    pub proto_descriptor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorBin")]
    pub proto_descriptor_bin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorConfigMap")]
    pub proto_descriptor_config_map: Option<UpstreamConsulServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecGrpcJsonTranscoderPrintOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addWhitespace")]
    pub add_whitespace: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintEnumsAsInts")]
    pub always_print_enums_as_ints: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintPrimitiveFields")]
    pub always_print_primitive_fields: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveProtoFieldNames")]
    pub preserve_proto_field_names: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<UpstreamConsulServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecRest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "swaggerInfo")]
    pub swagger_info: Option<UpstreamConsulServiceSpecRestSwaggerInfo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transformations: Option<BTreeMap<String, UpstreamConsulServiceSpecRestTransformations>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecRestSwaggerInfo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecRestTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamConsulServiceSpecRestTransformationsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<UpstreamConsulServiceSpecRestTransformationsDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, UpstreamConsulServiceSpecRestTransformationsExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, UpstreamConsulServiceSpecRestTransformationsHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<UpstreamConsulServiceSpecRestTransformationsHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<UpstreamConsulServiceSpecRestTransformationsMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<UpstreamConsulServiceSpecRestTransformationsMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamConsulServiceSpecRestTransformationsPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<UpstreamConsulServiceSpecRestTransformationsSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecRestTransformationsBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecRestTransformationsDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamConsulServiceSpecRestTransformationsDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecRestTransformationsDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecRestTransformationsExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamConsulServiceSpecRestTransformationsExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecRestTransformationsExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecRestTransformationsHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecRestTransformationsHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamConsulServiceSpecRestTransformationsHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecRestTransformationsHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecRestTransformationsMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecRestTransformationsMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, UpstreamConsulServiceSpecRestTransformationsMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecRestTransformationsMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<UpstreamConsulServiceSpecRestTransformationsMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecRestTransformationsMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecRestTransformationsPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecRestTransformationsSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<UpstreamConsulServiceSpecRestTransformationsSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamConsulServiceSpecRestTransformationsSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamDiscoveryMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamFailover {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<UpstreamFailoverPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prioritizedLocalities")]
    pub prioritized_localities: Option<Vec<UpstreamFailoverPrioritizedLocalities>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamFailoverPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overprovisioningFactor")]
    pub overprovisioning_factor: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamFailoverPrioritizedLocalities {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localityEndpoints")]
    pub locality_endpoints: Option<Vec<UpstreamFailoverPrioritizedLocalitiesLocalityEndpoints>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpoints {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lbEndpoints")]
    pub lb_endpoints: Option<Vec<UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpoints>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancingWeight")]
    pub load_balancing_weight: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub locality: Option<UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLocality>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpoints {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckConfig")]
    pub health_check_config: Option<UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsHealthCheckConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancingWeight")]
    pub load_balancing_weight: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamSslConfig")]
    pub upstream_ssl_config: Option<UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsHealthCheckConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portValue")]
    pub port_value: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRenegotiation")]
    pub allow_renegotiation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnProtocols")]
    pub alpn_protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oneWayTls")]
    pub one_way_tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslFiles")]
    pub ssl_files: Option<UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigSslFiles>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifySubjectAltName")]
    pub verify_subject_alt_name: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherSuites")]
    pub cipher_suites: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecdhCurves")]
    pub ecdh_curves: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigSds {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callCredentials")]
    pub call_credentials: Option<UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigSdsCallCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatesSecretName")]
    pub certificates_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationContextName")]
    pub validation_context_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigSdsCallCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileCredentialSource")]
    pub file_credential_source: Option<UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigSdsCallCredentialsFileCredentialSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigSdsCallCredentialsFileCredentialSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenFileName")]
    pub token_file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLbEndpointsUpstreamSslConfigSslFiles {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaple")]
    pub ocsp_staple: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCa")]
    pub root_ca: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCert")]
    pub tls_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamFailoverPrioritizedLocalitiesLocalityEndpointsLocality {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subZone")]
    pub sub_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamGcp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audience: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHealthChecks {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysLogHealthCheckFailures")]
    pub always_log_health_check_failures: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customHealthCheck")]
    pub custom_health_check: Option<UpstreamHealthChecksCustomHealthCheck>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventLogPath")]
    pub event_log_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcHealthCheck")]
    pub grpc_health_check: Option<UpstreamHealthChecksGrpcHealthCheck>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthyEdgeInterval")]
    pub healthy_edge_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthyThreshold")]
    pub healthy_threshold: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHealthCheck")]
    pub http_health_check: Option<UpstreamHealthChecksHttpHealthCheck>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialJitter")]
    pub initial_jitter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalJitter")]
    pub interval_jitter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalJitterPercent")]
    pub interval_jitter_percent: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noTrafficInterval")]
    pub no_traffic_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reuseConnection")]
    pub reuse_connection: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpHealthCheck")]
    pub tcp_health_check: Option<UpstreamHealthChecksTcpHealthCheck>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unhealthyEdgeInterval")]
    pub unhealthy_edge_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unhealthyInterval")]
    pub unhealthy_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unhealthyThreshold")]
    pub unhealthy_threshold: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHealthChecksCustomHealthCheck {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "typedConfig")]
    pub typed_config: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHealthChecksGrpcHealthCheck {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialMetadata")]
    pub initial_metadata: Option<Vec<UpstreamHealthChecksGrpcHealthCheckInitialMetadata>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHealthChecksGrpcHealthCheckInitialMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<UpstreamHealthChecksGrpcHealthCheckInitialMetadataHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerSecretRef")]
    pub header_secret_ref: Option<UpstreamHealthChecksGrpcHealthCheckInitialMetadataHeaderSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHealthChecksGrpcHealthCheckInitialMetadataHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHealthChecksGrpcHealthCheckInitialMetadataHeaderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHealthChecksHttpHealthCheck {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectedStatuses")]
    pub expected_statuses: Option<Vec<UpstreamHealthChecksHttpHealthCheckExpectedStatuses>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToAdd")]
    pub request_headers_to_add: Option<Vec<UpstreamHealthChecksHttpHealthCheckRequestHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToRemove")]
    pub request_headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseAssertions")]
    pub response_assertions: Option<UpstreamHealthChecksHttpHealthCheckResponseAssertions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useHttp2")]
    pub use_http2: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHealthChecksHttpHealthCheckExpectedStatuses {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHealthChecksHttpHealthCheckRequestHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<UpstreamHealthChecksHttpHealthCheckRequestHeadersToAddHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerSecretRef")]
    pub header_secret_ref: Option<UpstreamHealthChecksHttpHealthCheckRequestHeadersToAddHeaderSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHealthChecksHttpHealthCheckRequestHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHealthChecksHttpHealthCheckRequestHeadersToAddHeaderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHealthChecksHttpHealthCheckResponseAssertions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noMatchHealth")]
    pub no_match_health: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseMatchers")]
    pub response_matchers: Option<Vec<UpstreamHealthChecksHttpHealthCheckResponseAssertionsResponseMatchers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHealthChecksHttpHealthCheckResponseAssertionsResponseMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchHealth")]
    pub match_health: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseMatch")]
    pub response_match: Option<UpstreamHealthChecksHttpHealthCheckResponseAssertionsResponseMatchersResponseMatch>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHealthChecksHttpHealthCheckResponseAssertionsResponseMatchersResponseMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamHealthChecksHttpHealthCheckResponseAssertionsResponseMatchersResponseMatchBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKey")]
    pub json_key: Option<UpstreamHealthChecksHttpHealthCheckResponseAssertionsResponseMatchersResponseMatchJsonKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHealthChecksHttpHealthCheckResponseAssertionsResponseMatchersResponseMatchBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHealthChecksHttpHealthCheckResponseAssertionsResponseMatchersResponseMatchJsonKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<UpstreamHealthChecksHttpHealthCheckResponseAssertionsResponseMatchersResponseMatchJsonKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHealthChecksHttpHealthCheckResponseAssertionsResponseMatchersResponseMatchJsonKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHealthChecksTcpHealthCheck {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub receive: Option<Vec<UpstreamHealthChecksTcpHealthCheckReceive>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub send: Option<UpstreamHealthChecksTcpHealthCheckSend>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHealthChecksTcpHealthCheckReceive {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHealthChecksTcpHealthCheckSend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHttpConnectHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHttpConnectSslConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRenegotiation")]
    pub allow_renegotiation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnProtocols")]
    pub alpn_protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oneWayTls")]
    pub one_way_tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<UpstreamHttpConnectSslConfigParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<UpstreamHttpConnectSslConfigSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamHttpConnectSslConfigSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslFiles")]
    pub ssl_files: Option<UpstreamHttpConnectSslConfigSslFiles>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifySubjectAltName")]
    pub verify_subject_alt_name: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHttpConnectSslConfigParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherSuites")]
    pub cipher_suites: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecdhCurves")]
    pub ecdh_curves: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHttpConnectSslConfigSds {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callCredentials")]
    pub call_credentials: Option<UpstreamHttpConnectSslConfigSdsCallCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatesSecretName")]
    pub certificates_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationContextName")]
    pub validation_context_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHttpConnectSslConfigSdsCallCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileCredentialSource")]
    pub file_credential_source: Option<UpstreamHttpConnectSslConfigSdsCallCredentialsFileCredentialSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHttpConnectSslConfigSdsCallCredentialsFileCredentialSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenFileName")]
    pub token_file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHttpConnectSslConfigSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamHttpConnectSslConfigSslFiles {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaple")]
    pub ocsp_staple: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCa")]
    pub root_ca: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCert")]
    pub tls_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKube {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceNamespace")]
    pub service_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servicePort")]
    pub service_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSpec")]
    pub service_spec: Option<UpstreamKubeServiceSpec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subsetSpec")]
    pub subset_spec: Option<UpstreamKubeSubsetSpec>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<UpstreamKubeServiceSpecGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcJsonTranscoder")]
    pub grpc_json_transcoder: Option<UpstreamKubeServiceSpecGrpcJsonTranscoder>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rest: Option<UpstreamKubeServiceSpecRest>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptors: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcServices")]
    pub grpc_services: Option<Vec<UpstreamKubeServiceSpecGrpcGrpcServices>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecGrpcGrpcServices {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionNames")]
    pub function_names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packageName")]
    pub package_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecGrpcJsonTranscoder {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMapping")]
    pub auto_mapping: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "convertGrpcStatus")]
    pub convert_grpc_status: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreUnknownQueryParameters")]
    pub ignore_unknown_query_parameters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoredQueryParameters")]
    pub ignored_query_parameters: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchIncomingRequestRoute")]
    pub match_incoming_request_route: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "printOptions")]
    pub print_options: Option<UpstreamKubeServiceSpecGrpcJsonTranscoderPrintOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptor")]
    pub proto_descriptor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorBin")]
    pub proto_descriptor_bin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorConfigMap")]
    pub proto_descriptor_config_map: Option<UpstreamKubeServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecGrpcJsonTranscoderPrintOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addWhitespace")]
    pub add_whitespace: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintEnumsAsInts")]
    pub always_print_enums_as_ints: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintPrimitiveFields")]
    pub always_print_primitive_fields: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveProtoFieldNames")]
    pub preserve_proto_field_names: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<UpstreamKubeServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecRest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "swaggerInfo")]
    pub swagger_info: Option<UpstreamKubeServiceSpecRestSwaggerInfo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transformations: Option<BTreeMap<String, UpstreamKubeServiceSpecRestTransformations>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecRestSwaggerInfo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecRestTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamKubeServiceSpecRestTransformationsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<UpstreamKubeServiceSpecRestTransformationsDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, UpstreamKubeServiceSpecRestTransformationsExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, UpstreamKubeServiceSpecRestTransformationsHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<UpstreamKubeServiceSpecRestTransformationsHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<UpstreamKubeServiceSpecRestTransformationsMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<UpstreamKubeServiceSpecRestTransformationsMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamKubeServiceSpecRestTransformationsPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<UpstreamKubeServiceSpecRestTransformationsSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecRestTransformationsBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecRestTransformationsDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamKubeServiceSpecRestTransformationsDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecRestTransformationsDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecRestTransformationsExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamKubeServiceSpecRestTransformationsExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecRestTransformationsExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecRestTransformationsHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecRestTransformationsHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamKubeServiceSpecRestTransformationsHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecRestTransformationsHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecRestTransformationsMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecRestTransformationsMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, UpstreamKubeServiceSpecRestTransformationsMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecRestTransformationsMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<UpstreamKubeServiceSpecRestTransformationsMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecRestTransformationsMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecRestTransformationsPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecRestTransformationsSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<UpstreamKubeServiceSpecRestTransformationsSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeServiceSpecRestTransformationsSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeSubsetSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultSubset")]
    pub default_subset: Option<UpstreamKubeSubsetSpecDefaultSubset>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fallbackPolicy")]
    pub fallback_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selectors: Option<Vec<UpstreamKubeSubsetSpecSelectors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeSubsetSpecDefaultSubset {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamKubeSubsetSpecSelectors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keys: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "singleHostPerSubset")]
    pub single_host_per_subset: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamLoadBalancerConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "closeConnectionsOnHostSetChange")]
    pub close_connections_on_host_set_change: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthyPanicThreshold")]
    pub healthy_panic_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "leastRequest")]
    pub least_request: Option<UpstreamLoadBalancerConfigLeastRequest>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localityWeightedLbConfig")]
    pub locality_weighted_lb_config: Option<UpstreamLoadBalancerConfigLocalityWeightedLbConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maglev: Option<UpstreamLoadBalancerConfigMaglev>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub random: Option<UpstreamLoadBalancerConfigRandom>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ringHash")]
    pub ring_hash: Option<UpstreamLoadBalancerConfigRingHash>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roundRobin")]
    pub round_robin: Option<UpstreamLoadBalancerConfigRoundRobin>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateMergeWindow")]
    pub update_merge_window: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useHostnameForHashing")]
    pub use_hostname_for_hashing: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamLoadBalancerConfigLeastRequest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "choiceCount")]
    pub choice_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slowStartConfig")]
    pub slow_start_config: Option<UpstreamLoadBalancerConfigLeastRequestSlowStartConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamLoadBalancerConfigLeastRequestSlowStartConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aggression: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minWeightPercent")]
    pub min_weight_percent: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slowStartWindow")]
    pub slow_start_window: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamLoadBalancerConfigLocalityWeightedLbConfig {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamLoadBalancerConfigMaglev {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamLoadBalancerConfigRandom {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamLoadBalancerConfigRingHash {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ringHashConfig")]
    pub ring_hash_config: Option<UpstreamLoadBalancerConfigRingHashRingHashConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamLoadBalancerConfigRingHashRingHashConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumRingSize")]
    pub maximum_ring_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumRingSize")]
    pub minimum_ring_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamLoadBalancerConfigRoundRobin {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slowStartConfig")]
    pub slow_start_config: Option<UpstreamLoadBalancerConfigRoundRobinSlowStartConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamLoadBalancerConfigRoundRobinSlowStartConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aggression: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minWeightPercent")]
    pub min_weight_percent: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slowStartWindow")]
    pub slow_start_window: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamNamespacedStatuses {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamOutlierDetection {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseEjectionTime")]
    pub base_ejection_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub consecutive5xx: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consecutiveGatewayFailure")]
    pub consecutive_gateway_failure: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consecutiveLocalOriginFailure")]
    pub consecutive_local_origin_failure: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingConsecutive5xx")]
    pub enforcing_consecutive5xx: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingConsecutiveGatewayFailure")]
    pub enforcing_consecutive_gateway_failure: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingConsecutiveLocalOriginFailure")]
    pub enforcing_consecutive_local_origin_failure: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingLocalOriginSuccessRate")]
    pub enforcing_local_origin_success_rate: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingSuccessRate")]
    pub enforcing_success_rate: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxEjectionPercent")]
    pub max_ejection_percent: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "splitExternalLocalOriginErrors")]
    pub split_external_local_origin_errors: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateMinimumHosts")]
    pub success_rate_minimum_hosts: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateRequestVolume")]
    pub success_rate_request_volume: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateStdevFactor")]
    pub success_rate_stdev_factor: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSpec")]
    pub service_spec: Option<UpstreamPipeServiceSpec>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<UpstreamPipeServiceSpecGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcJsonTranscoder")]
    pub grpc_json_transcoder: Option<UpstreamPipeServiceSpecGrpcJsonTranscoder>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rest: Option<UpstreamPipeServiceSpecRest>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptors: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcServices")]
    pub grpc_services: Option<Vec<UpstreamPipeServiceSpecGrpcGrpcServices>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecGrpcGrpcServices {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionNames")]
    pub function_names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packageName")]
    pub package_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecGrpcJsonTranscoder {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMapping")]
    pub auto_mapping: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "convertGrpcStatus")]
    pub convert_grpc_status: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreUnknownQueryParameters")]
    pub ignore_unknown_query_parameters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoredQueryParameters")]
    pub ignored_query_parameters: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchIncomingRequestRoute")]
    pub match_incoming_request_route: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "printOptions")]
    pub print_options: Option<UpstreamPipeServiceSpecGrpcJsonTranscoderPrintOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptor")]
    pub proto_descriptor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorBin")]
    pub proto_descriptor_bin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorConfigMap")]
    pub proto_descriptor_config_map: Option<UpstreamPipeServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecGrpcJsonTranscoderPrintOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addWhitespace")]
    pub add_whitespace: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintEnumsAsInts")]
    pub always_print_enums_as_ints: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintPrimitiveFields")]
    pub always_print_primitive_fields: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveProtoFieldNames")]
    pub preserve_proto_field_names: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<UpstreamPipeServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecRest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "swaggerInfo")]
    pub swagger_info: Option<UpstreamPipeServiceSpecRestSwaggerInfo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transformations: Option<BTreeMap<String, UpstreamPipeServiceSpecRestTransformations>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecRestSwaggerInfo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecRestTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamPipeServiceSpecRestTransformationsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<UpstreamPipeServiceSpecRestTransformationsDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, UpstreamPipeServiceSpecRestTransformationsExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, UpstreamPipeServiceSpecRestTransformationsHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<UpstreamPipeServiceSpecRestTransformationsHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<UpstreamPipeServiceSpecRestTransformationsMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<UpstreamPipeServiceSpecRestTransformationsMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamPipeServiceSpecRestTransformationsPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<UpstreamPipeServiceSpecRestTransformationsSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecRestTransformationsBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecRestTransformationsDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamPipeServiceSpecRestTransformationsDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecRestTransformationsDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecRestTransformationsExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamPipeServiceSpecRestTransformationsExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecRestTransformationsExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecRestTransformationsHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecRestTransformationsHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamPipeServiceSpecRestTransformationsHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecRestTransformationsHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecRestTransformationsMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecRestTransformationsMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, UpstreamPipeServiceSpecRestTransformationsMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecRestTransformationsMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<UpstreamPipeServiceSpecRestTransformationsMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecRestTransformationsMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecRestTransformationsPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecRestTransformationsSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<UpstreamPipeServiceSpecRestTransformationsSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPipeServiceSpecRestTransformationsSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamPreconnectPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "perUpstreamPreconnectRatio")]
    pub per_upstream_preconnect_ratio: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predictivePreconnectRatio")]
    pub predictive_preconnect_ratio: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamSslConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRenegotiation")]
    pub allow_renegotiation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnProtocols")]
    pub alpn_protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oneWayTls")]
    pub one_way_tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<UpstreamSslConfigParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<UpstreamSslConfigSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<UpstreamSslConfigSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslFiles")]
    pub ssl_files: Option<UpstreamSslConfigSslFiles>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifySubjectAltName")]
    pub verify_subject_alt_name: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamSslConfigParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherSuites")]
    pub cipher_suites: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecdhCurves")]
    pub ecdh_curves: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamSslConfigSds {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callCredentials")]
    pub call_credentials: Option<UpstreamSslConfigSdsCallCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatesSecretName")]
    pub certificates_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationContextName")]
    pub validation_context_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamSslConfigSdsCallCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileCredentialSource")]
    pub file_credential_source: Option<UpstreamSslConfigSdsCallCredentialsFileCredentialSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamSslConfigSdsCallCredentialsFileCredentialSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenFileName")]
    pub token_file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamSslConfigSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamSslConfigSslFiles {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaple")]
    pub ocsp_staple: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCa")]
    pub root_ca: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCert")]
    pub tls_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStatic {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoSniRewrite")]
    pub auto_sni_rewrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosts: Option<Vec<UpstreamStaticHosts>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSpec")]
    pub service_spec: Option<UpstreamStaticServiceSpec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTls")]
    pub use_tls: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticHosts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckConfig")]
    pub health_check_config: Option<UpstreamStaticHostsHealthCheckConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancingWeight")]
    pub load_balancing_weight: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sniAddr")]
    pub sni_addr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticHostsHealthCheckConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<UpstreamStaticServiceSpecGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcJsonTranscoder")]
    pub grpc_json_transcoder: Option<UpstreamStaticServiceSpecGrpcJsonTranscoder>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rest: Option<UpstreamStaticServiceSpecRest>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptors: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcServices")]
    pub grpc_services: Option<Vec<UpstreamStaticServiceSpecGrpcGrpcServices>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecGrpcGrpcServices {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionNames")]
    pub function_names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packageName")]
    pub package_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecGrpcJsonTranscoder {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMapping")]
    pub auto_mapping: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "convertGrpcStatus")]
    pub convert_grpc_status: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreUnknownQueryParameters")]
    pub ignore_unknown_query_parameters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoredQueryParameters")]
    pub ignored_query_parameters: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchIncomingRequestRoute")]
    pub match_incoming_request_route: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "printOptions")]
    pub print_options: Option<UpstreamStaticServiceSpecGrpcJsonTranscoderPrintOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptor")]
    pub proto_descriptor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorBin")]
    pub proto_descriptor_bin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorConfigMap")]
    pub proto_descriptor_config_map: Option<UpstreamStaticServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecGrpcJsonTranscoderPrintOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addWhitespace")]
    pub add_whitespace: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintEnumsAsInts")]
    pub always_print_enums_as_ints: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintPrimitiveFields")]
    pub always_print_primitive_fields: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveProtoFieldNames")]
    pub preserve_proto_field_names: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<UpstreamStaticServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecRest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "swaggerInfo")]
    pub swagger_info: Option<UpstreamStaticServiceSpecRestSwaggerInfo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transformations: Option<BTreeMap<String, UpstreamStaticServiceSpecRestTransformations>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecRestSwaggerInfo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecRestTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamStaticServiceSpecRestTransformationsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<UpstreamStaticServiceSpecRestTransformationsDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, UpstreamStaticServiceSpecRestTransformationsExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, UpstreamStaticServiceSpecRestTransformationsHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<UpstreamStaticServiceSpecRestTransformationsHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<UpstreamStaticServiceSpecRestTransformationsMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<UpstreamStaticServiceSpecRestTransformationsMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<UpstreamStaticServiceSpecRestTransformationsPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<UpstreamStaticServiceSpecRestTransformationsSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecRestTransformationsBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecRestTransformationsDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamStaticServiceSpecRestTransformationsDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecRestTransformationsDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecRestTransformationsExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<UpstreamStaticServiceSpecRestTransformationsExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecRestTransformationsExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecRestTransformationsHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecRestTransformationsHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<UpstreamStaticServiceSpecRestTransformationsHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecRestTransformationsHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecRestTransformationsMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecRestTransformationsMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, UpstreamStaticServiceSpecRestTransformationsMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecRestTransformationsMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<UpstreamStaticServiceSpecRestTransformationsMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecRestTransformationsMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecRestTransformationsPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecRestTransformationsSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<UpstreamStaticServiceSpecRestTransformationsSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStaticServiceSpecRestTransformationsSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct UpstreamStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, serde_json::Value>>,
}

