// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/solo-io/gloo/gloo.solo.io/v1/settings.yaml
// kopium version: 0.22.4

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "gloo.solo.io", version = "v1", kind = "Settings", plural = "settings")]
#[kube(namespaced)]
#[kube(status = "SettingsStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct SettingsSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cachingServer")]
    pub caching_server: Option<SettingsCachingServer>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consoleOptions")]
    pub console_options: Option<SettingsConsoleOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub consul: Option<SettingsConsul>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consulDiscovery")]
    pub consul_discovery: Option<SettingsConsulDiscovery>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consulKvArtifactSource")]
    pub consul_kv_artifact_source: Option<SettingsConsulKvArtifactSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consulKvSource")]
    pub consul_kv_source: Option<SettingsConsulKvSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "devMode")]
    pub dev_mode: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directoryArtifactSource")]
    pub directory_artifact_source: Option<SettingsDirectoryArtifactSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directoryConfigSource")]
    pub directory_config_source: Option<SettingsDirectoryConfigSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directorySecretSource")]
    pub directory_secret_source: Option<SettingsDirectorySecretSource>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub discovery: Option<SettingsDiscovery>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoveryNamespace")]
    pub discovery_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extProc")]
    pub ext_proc: Option<SettingsExtProc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extauth: Option<SettingsExtauth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extensions: Option<SettingsExtensions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gateway: Option<SettingsGateway>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gloo: Option<SettingsGloo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub knative: Option<SettingsKnative>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<SettingsKubernetes>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesArtifactSource")]
    pub kubernetes_artifact_source: Option<SettingsKubernetesArtifactSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesConfigSource")]
    pub kubernetes_config_source: Option<SettingsKubernetesConfigSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesSecretSource")]
    pub kubernetes_secret_source: Option<SettingsKubernetesSecretSource>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub linkerd: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namedExtauth")]
    pub named_extauth: Option<BTreeMap<String, SettingsNamedExtauth>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespacedStatuses")]
    pub namespaced_statuses: Option<SettingsNamespacedStatuses>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observabilityOptions")]
    pub observability_options: Option<SettingsObservabilityOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ratelimit: Option<SettingsRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ratelimitServer")]
    pub ratelimit_server: Option<SettingsRatelimitServer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rbac: Option<SettingsRbac>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "refreshRate")]
    pub refresh_rate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretOptions")]
    pub secret_options: Option<SettingsSecretOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamOptions")]
    pub upstream_options: Option<SettingsUpstreamOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vaultSecretSource")]
    pub vault_secret_source: Option<SettingsVaultSecretSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "watchNamespaceSelectors")]
    pub watch_namespace_selectors: Option<Vec<SettingsWatchNamespaceSelectors>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "watchNamespaces")]
    pub watch_namespaces: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsCachingServer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedVaryHeaders")]
    pub allowed_vary_headers: Option<Vec<SettingsCachingServerAllowedVaryHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cachingServiceRef")]
    pub caching_service_ref: Option<SettingsCachingServerCachingServiceRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPayloadSize")]
    pub max_payload_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsCachingServerAllowedVaryHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<SettingsCachingServerAllowedVaryHeadersSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsCachingServerAllowedVaryHeadersSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<SettingsCachingServerAllowedVaryHeadersSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsCachingServerAllowedVaryHeadersSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsCachingServerCachingServiceRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsConsoleOptions {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsConsul {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caFile")]
    pub ca_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caPath")]
    pub ca_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certFile")]
    pub cert_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub datacenter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsAddress")]
    pub dns_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsPollingInterval")]
    pub dns_polling_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpAddress")]
    pub http_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyFile")]
    pub key_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceDiscovery")]
    pub service_discovery: Option<SettingsConsulServiceDiscovery>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "waitTime")]
    pub wait_time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsConsulServiceDiscovery {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCenters")]
    pub data_centers: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsConsulDiscovery {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consistencyMode")]
    pub consistency_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "edsBlockingQueries")]
    pub eds_blocking_queries: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryOptions")]
    pub query_options: Option<SettingsConsulDiscoveryQueryOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCa")]
    pub root_ca: Option<SettingsConsulDiscoveryRootCa>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceTagsAllowlist")]
    pub service_tags_allowlist: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "splitTlsServices")]
    pub split_tls_services: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsTagName")]
    pub tls_tag_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTlsTagging")]
    pub use_tls_tagging: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsConsulDiscoveryQueryOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useCache")]
    pub use_cache: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsConsulDiscoveryRootCa {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsConsulKvArtifactSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootKey")]
    pub root_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsConsulKvSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootKey")]
    pub root_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsDirectoryArtifactSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsDirectoryConfigSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsDirectorySecretSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsDiscovery {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fdsMode")]
    pub fds_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fdsOptions")]
    pub fds_options: Option<SettingsDiscoveryFdsOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "udsOptions")]
    pub uds_options: Option<SettingsDiscoveryUdsOptions>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsDiscoveryFdsOptions {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsDiscoveryUdsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "watchLabels")]
    pub watch_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProc {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowModeOverride")]
    pub allow_mode_override: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncMode")]
    pub async_mode: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableClearRouteCache")]
    pub disable_clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureModeAllow")]
    pub failure_mode_allow: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterMetadata")]
    pub filter_metadata: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterStage")]
    pub filter_stage: Option<SettingsExtProcFilterStage>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardRules")]
    pub forward_rules: Option<SettingsExtProcForwardRules>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<SettingsExtProcGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxMessageTimeout")]
    pub max_message_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageTimeout")]
    pub message_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataContextNamespaces")]
    pub metadata_context_namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mutationRules")]
    pub mutation_rules: Option<SettingsExtProcMutationRules>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingMode")]
    pub processing_mode: Option<SettingsExtProcProcessingMode>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestAttributes")]
    pub request_attributes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseAttributes")]
    pub response_attributes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statPrefix")]
    pub stat_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "typedMetadataContextNamespaces")]
    pub typed_metadata_context_namespaces: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcFilterStage {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub predicate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stage: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcForwardRules {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedHeaders")]
    pub allowed_headers: Option<SettingsExtProcForwardRulesAllowedHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowedHeaders")]
    pub disallowed_headers: Option<SettingsExtProcForwardRulesDisallowedHeaders>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcForwardRulesAllowedHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patterns: Option<Vec<SettingsExtProcForwardRulesAllowedHeadersPatterns>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcForwardRulesAllowedHeadersPatterns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<SettingsExtProcForwardRulesAllowedHeadersPatternsSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcForwardRulesAllowedHeadersPatternsSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<SettingsExtProcForwardRulesAllowedHeadersPatternsSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcForwardRulesAllowedHeadersPatternsSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcForwardRulesDisallowedHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patterns: Option<Vec<SettingsExtProcForwardRulesDisallowedHeadersPatterns>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcForwardRulesDisallowedHeadersPatterns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<SettingsExtProcForwardRulesDisallowedHeadersPatternsSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcForwardRulesDisallowedHeadersPatternsSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<SettingsExtProcForwardRulesDisallowedHeadersPatternsSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcForwardRulesDisallowedHeadersPatternsSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extProcServerRef")]
    pub ext_proc_server_ref: Option<SettingsExtProcGrpcServiceExtProcServerRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialMetadata")]
    pub initial_metadata: Option<Vec<SettingsExtProcGrpcServiceInitialMetadata>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryPolicy")]
    pub retry_policy: Option<SettingsExtProcGrpcServiceRetryPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcGrpcServiceExtProcServerRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcGrpcServiceInitialMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcGrpcServiceRetryPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numRetries")]
    pub num_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryBackOff")]
    pub retry_back_off: Option<SettingsExtProcGrpcServiceRetryPolicyRetryBackOff>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcGrpcServiceRetryPolicyRetryBackOff {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseInterval")]
    pub base_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInterval")]
    pub max_interval: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcMutationRules {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowAllRouting")]
    pub allow_all_routing: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEnvoy")]
    pub allow_envoy: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowExpression")]
    pub allow_expression: Option<SettingsExtProcMutationRulesAllowExpression>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowAll")]
    pub disallow_all: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowExpression")]
    pub disallow_expression: Option<SettingsExtProcMutationRulesDisallowExpression>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowIsError")]
    pub disallow_is_error: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowSystem")]
    pub disallow_system: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcMutationRulesAllowExpression {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<SettingsExtProcMutationRulesAllowExpressionGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcMutationRulesAllowExpressionGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcMutationRulesDisallowExpression {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<SettingsExtProcMutationRulesDisallowExpressionGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcMutationRulesDisallowExpressionGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtProcProcessingMode {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestBodyMode")]
    pub request_body_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaderMode")]
    pub request_header_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTrailerMode")]
    pub request_trailer_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseBodyMode")]
    pub response_body_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeaderMode")]
    pub response_header_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTrailerMode")]
    pub response_trailer_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtauth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extauthzServerRef")]
    pub extauthz_server_ref: Option<SettingsExtauthExtauthzServerRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureModeAllow")]
    pub failure_mode_allow: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<SettingsExtauthGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpService")]
    pub http_service: Option<SettingsExtauthHttpService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestBody")]
    pub request_body: Option<SettingsExtauthRequestBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTimeout")]
    pub request_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statPrefix")]
    pub stat_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusOnError")]
    pub status_on_error: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportApiVersion")]
    pub transport_api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userIdHeader")]
    pub user_id_header: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtauthExtauthzServerRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtauthGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtauthHttpService {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathPrefix")]
    pub path_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<SettingsExtauthHttpServiceRequest>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<SettingsExtauthHttpServiceResponse>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtauthHttpServiceRequest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedHeaders")]
    pub allowed_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedHeadersRegex")]
    pub allowed_headers_regex: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAdd")]
    pub headers_to_add: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtauthHttpServiceResponse {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedClientHeaders")]
    pub allowed_client_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedUpstreamHeaders")]
    pub allowed_upstream_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedUpstreamHeadersToAppend")]
    pub allowed_upstream_headers_to_append: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtauthRequestBody {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPartialMessage")]
    pub allow_partial_message: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packAsBytes")]
    pub pack_as_bytes: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsExtensions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsGateway {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysSortRouteTableRoutes")]
    pub always_sort_route_table_routes: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressedProxySpec")]
    pub compressed_proxy_spec: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableGatewayController")]
    pub enable_gateway_controller: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isolateVirtualHostsBySslConfig")]
    pub isolate_virtual_hosts_by_ssl_config: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistProxySpec")]
    pub persist_proxy_spec: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readGatewaysFromAllNamespaces")]
    pub read_gateways_from_all_namespaces: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "translateEmptyGateways")]
    pub translate_empty_gateways: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation: Option<SettingsGatewayValidation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationServerAddr")]
    pub validation_server_addr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceOptions")]
    pub virtual_service_options: Option<SettingsGatewayVirtualServiceOptions>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsGatewayValidation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowWarnings")]
    pub allow_warnings: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysAccept")]
    pub always_accept: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableTransformationValidation")]
    pub disable_transformation_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullEnvoyValidation")]
    pub full_envoy_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreGlooValidationFailure")]
    pub ignore_gloo_validation_failure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyValidationServerAddr")]
    pub proxy_validation_server_addr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverEnabled")]
    pub server_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationServerGrpcMaxSizeBytes")]
    pub validation_server_grpc_max_size_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationWebhookTlsCert")]
    pub validation_webhook_tls_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationWebhookTlsKey")]
    pub validation_webhook_tls_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "warnMissingTlsSecret")]
    pub warn_missing_tls_secret: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "warnRouteShortCircuiting")]
    pub warn_route_short_circuiting: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsGatewayVirtualServiceOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oneWayTls")]
    pub one_way_tls: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsGloo {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsOptions")]
    pub aws_options: Option<SettingsGlooAwsOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "circuitBreakers")]
    pub circuit_breakers: Option<SettingsGlooCircuitBreakers>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableGrpcWeb")]
    pub disable_grpc_web: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableKubernetesDestinations")]
    pub disable_kubernetes_destinations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableProxyGarbageCollection")]
    pub disable_proxy_garbage_collection: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableAutoWebsocketTransformationPassthrough")]
    pub enable_auto_websocket_transformation_passthrough: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableRestEds")]
    pub enable_rest_eds: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointsWarmingTimeout")]
    pub endpoints_warming_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failoverUpstreamDnsPollingInterval")]
    pub failover_upstream_dns_polling_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invalidConfigPolicy")]
    pub invalid_config_policy: Option<SettingsGlooInvalidConfigPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "istioOptions")]
    pub istio_options: Option<SettingsGlooIstioOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logTransformationRequestResponseInfo")]
    pub log_transformation_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyDebugBindAddr")]
    pub proxy_debug_bind_addr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMaxProgramSize")]
    pub regex_max_program_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "removeUnusedFilters")]
    pub remove_unused_filters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restXdsBindAddr")]
    pub rest_xds_bind_addr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationEscapeCharacters")]
    pub transformation_escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationBindAddr")]
    pub validation_bind_addr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xdsBindAddr")]
    pub xds_bind_addr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsGlooAwsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialRefreshDelay")]
    pub credential_refresh_delay: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCredentialsDiscovey")]
    pub enable_credentials_discovey: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fallbackToFirstFunction")]
    pub fallback_to_first_function: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "propagateOriginalRouting")]
    pub propagate_original_routing: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountCredentials")]
    pub service_account_credentials: Option<SettingsGlooAwsOptionsServiceAccountCredentials>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsGlooAwsOptionsServiceAccountCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsGlooCircuitBreakers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    pub max_connections: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingRequests")]
    pub max_pending_requests: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequests")]
    pub max_requests: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    pub max_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trackRemaining")]
    pub track_remaining: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsGlooInvalidConfigPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invalidRouteResponseBody")]
    pub invalid_route_response_body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invalidRouteResponseCode")]
    pub invalid_route_response_code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replaceInvalidRoutes")]
    pub replace_invalid_routes: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsGlooIstioOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appendXForwardedHost")]
    pub append_x_forwarded_host: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableAutoMtls")]
    pub enable_auto_mtls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableIntegration")]
    pub enable_integration: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsKnative {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterIngressProxyAddress")]
    pub cluster_ingress_proxy_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "knativeExternalProxyAddress")]
    pub knative_external_proxy_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "knativeInternalProxyAddress")]
    pub knative_internal_proxy_address: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsKubernetes {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimits")]
    pub rate_limits: Option<SettingsKubernetesRateLimits>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsKubernetesRateLimits {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "QPS")]
    pub qps: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub burst: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsKubernetesArtifactSource {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsKubernetesConfigSource {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsKubernetesSecretSource {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsNamedExtauth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extauthzServerRef")]
    pub extauthz_server_ref: Option<SettingsNamedExtauthExtauthzServerRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureModeAllow")]
    pub failure_mode_allow: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<SettingsNamedExtauthGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpService")]
    pub http_service: Option<SettingsNamedExtauthHttpService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestBody")]
    pub request_body: Option<SettingsNamedExtauthRequestBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTimeout")]
    pub request_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statPrefix")]
    pub stat_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusOnError")]
    pub status_on_error: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportApiVersion")]
    pub transport_api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userIdHeader")]
    pub user_id_header: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsNamedExtauthExtauthzServerRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsNamedExtauthGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsNamedExtauthHttpService {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathPrefix")]
    pub path_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<SettingsNamedExtauthHttpServiceRequest>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<SettingsNamedExtauthHttpServiceResponse>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsNamedExtauthHttpServiceRequest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedHeaders")]
    pub allowed_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedHeadersRegex")]
    pub allowed_headers_regex: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAdd")]
    pub headers_to_add: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsNamedExtauthHttpServiceResponse {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedClientHeaders")]
    pub allowed_client_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedUpstreamHeaders")]
    pub allowed_upstream_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedUpstreamHeadersToAppend")]
    pub allowed_upstream_headers_to_append: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsNamedExtauthRequestBody {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPartialMessage")]
    pub allow_partial_message: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packAsBytes")]
    pub pack_as_bytes: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsNamespacedStatuses {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsObservabilityOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configStatusMetricLabels")]
    pub config_status_metric_labels: Option<BTreeMap<String, SettingsObservabilityOptionsConfigStatusMetricLabels>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grafanaIntegration")]
    pub grafana_integration: Option<SettingsObservabilityOptionsGrafanaIntegration>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsObservabilityOptionsConfigStatusMetricLabels {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelToPath")]
    pub label_to_path: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsObservabilityOptionsGrafanaIntegration {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dashboardPrefix")]
    pub dashboard_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultDashboardFolderId")]
    pub default_dashboard_folder_id: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraMetricQueryParameters")]
    pub extra_metric_query_parameters: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptors: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setDescriptors")]
    pub set_descriptors: Option<Vec<SettingsRatelimitSetDescriptors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsRatelimitSetDescriptors {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysApply")]
    pub always_apply: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimit")]
    pub rate_limit: Option<SettingsRatelimitSetDescriptorsRateLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "simpleDescriptors")]
    pub simple_descriptors: Option<Vec<SettingsRatelimitSetDescriptorsSimpleDescriptors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsRatelimitSetDescriptorsRateLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestsPerUnit")]
    pub requests_per_unit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsRatelimitSetDescriptorsSimpleDescriptors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsRatelimitServer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "denyOnFail")]
    pub deny_on_fail: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableXRatelimitHeaders")]
    pub enable_x_ratelimit_headers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<SettingsRatelimitServerGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitBeforeAuth")]
    pub rate_limit_before_auth: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ratelimitServerRef")]
    pub ratelimit_server_ref: Option<SettingsRatelimitServerRatelimitServerRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTimeout")]
    pub request_timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsRatelimitServerGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsRatelimitServerRatelimitServerRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsRbac {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireRbac")]
    pub require_rbac: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsSecretOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<SettingsSecretOptionsSources>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsSecretOptionsSources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<SettingsSecretOptionsSourcesDirectory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<SettingsSecretOptionsSourcesKubernetes>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<SettingsSecretOptionsSourcesVault>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsSecretOptionsSourcesDirectory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsSecretOptionsSourcesKubernetes {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsSecretOptionsSourcesVault {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessToken")]
    pub access_token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<SettingsSecretOptionsSourcesVaultAws>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCert")]
    pub ca_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caPath")]
    pub ca_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCert")]
    pub client_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientKey")]
    pub client_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathPrefix")]
    pub path_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootKey")]
    pub root_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<SettingsSecretOptionsSourcesVaultTlsConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsServerName")]
    pub tls_server_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsSecretOptionsSourcesVaultAws {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamServerIdHeader")]
    pub iam_server_id_header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "leaseIncrement")]
    pub lease_increment: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    pub mount_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionToken")]
    pub session_token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vaultRole")]
    pub vault_role: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsSecretOptionsSourcesVaultTlsConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCert")]
    pub ca_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caPath")]
    pub ca_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCert")]
    pub client_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientKey")]
    pub client_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsServerName")]
    pub tls_server_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsUpstreamOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalAnnotations")]
    pub global_annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslParameters")]
    pub ssl_parameters: Option<SettingsUpstreamOptionsSslParameters>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsUpstreamOptionsSslParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherSuites")]
    pub cipher_suites: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecdhCurves")]
    pub ecdh_curves: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsVaultSecretSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessToken")]
    pub access_token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<SettingsVaultSecretSourceAws>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCert")]
    pub ca_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caPath")]
    pub ca_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCert")]
    pub client_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientKey")]
    pub client_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathPrefix")]
    pub path_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootKey")]
    pub root_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<SettingsVaultSecretSourceTlsConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsServerName")]
    pub tls_server_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsVaultSecretSourceAws {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamServerIdHeader")]
    pub iam_server_id_header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "leaseIncrement")]
    pub lease_increment: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    pub mount_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKey")]
    pub secret_access_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionToken")]
    pub session_token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vaultRole")]
    pub vault_role: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsVaultSecretSourceTlsConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCert")]
    pub ca_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caPath")]
    pub ca_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCert")]
    pub client_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientKey")]
    pub client_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsServerName")]
    pub tls_server_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsWatchNamespaceSelectors {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<SettingsWatchNamespaceSelectorsMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsWatchNamespaceSelectorsMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SettingsStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, serde_json::Value>>,
}

