// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/perses/perses-operator/perses.dev/v1alpha1/perses.yaml
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// PersesSpec defines the desired state of Perses
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "perses.dev", version = "v1alpha1", kind = "Perses", plural = "perses")]
#[kube(namespaced)]
#[kube(status = "PersesStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct PersesSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<PersesConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerPort")]
    pub container_port: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfig {
    /// Use it in case you want to prefix the API path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api_prefix: Option<String>,
    /// Database contains the different configuration depending on the database you want to use
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub database: Option<PersesConfigDatabase>,
    /// EphemeralDashboard contains the config about the ephemeral dashboard feature
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ephemeral_dashboard: Option<PersesConfigEphemeralDashboard>,
    /// EphemeralDashboardsCleanupInterval is the interval at which the ephemeral dashboards are cleaned up
    /// DEPRECATED.
    /// Please use the config EphemeralDashboard instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ephemeral_dashboards_cleanup_interval: Option<String>,
    /// Frontend contains any config that will be used by the frontend itself.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub frontend: Option<PersesConfigFrontend>,
    /// GlobalDatasourceDiscovery is the configuration that helps to generate a list of global datasource based on the discovery chosen.
    /// Be careful: the data coming from the discovery will totally override what exists in the database.
    /// Note that this is an experimental feature. Behavior and config may change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub global_datasource_discovery: Option<Vec<PersesConfigGlobalDatasourceDiscovery>>,
    /// Provisioning contains the provisioning config that can be used if you want to provide default resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provisioning: Option<PersesConfigProvisioning>,
    /// Schemas contain the configuration to get access to the CUE schemas
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schemas: Option<PersesConfigSchemas>,
    /// Security contains any configuration that changes the API behavior like the endpoints exposed or if the permissions are activated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub security: Option<PersesConfigSecurity>,
}

/// Database contains the different configuration depending on the database you want to use
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigDatabase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<PersesConfigDatabaseFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sql: Option<PersesConfigDatabaseSql>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigDatabaseFile {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extension: Option<String>,
    pub folder: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigDatabaseSql {
    /// Network address (requires Net)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addr: Option<String>,
    /// Allow all files to be used with LOAD DATA LOCAL INFILE
    pub allow_all_files: bool,
    /// Allows the cleartext client side plugin
    pub allow_cleartext_passwords: bool,
    /// Allows fallback to unencrypted connection if server does not support TLS
    pub allow_fallback_to_plaintext: bool,
    /// Allows the native password authentication method
    pub allow_native_passwords: bool,
    /// Allows the old insecure password method
    pub allow_old_passwords: bool,
    pub case_sensitive: bool,
    /// Check connections for liveness before using them
    pub check_conn_liveness: bool,
    /// Return number of matching rows instead of rows changed
    pub client_found_rows: bool,
    /// Connection collation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collation: Option<String>,
    /// Prepend table alias to column names
    pub columns_with_alias: bool,
    /// Database name
    pub db_name: String,
    /// Interpolate placeholders into query string
    pub interpolate_params: bool,
    /// Location for time.Time values
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub loc: Option<PersesConfigDatabaseSqlLoc>,
    /// Max packet size allowed
    pub max_allowed_packet: i64,
    /// Allow multiple statements in one query
    pub multi_statements: bool,
    /// Network type
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub net: Option<String>,
    /// Parse time values to time.Time
    pub parse_time: bool,
    /// Password (requires User)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// PasswordFile is a path to a file that contains a password
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password_file: Option<String>,
    /// I/O read timeout
    pub read_timeout: String,
    /// Reject read-only connections
    pub reject_read_only: bool,
    /// Server public key name
    pub server_pub_key: String,
    /// Dial timeout
    pub timeout: String,
    /// TLS configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_config: Option<PersesConfigDatabaseSqlTlsConfig>,
    /// Username
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    /// I/O write timeout
    pub write_timeout: String,
}

/// Location for time.Time values
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigDatabaseSqlLoc {
}

/// TLS configuration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigDatabaseSqlTlsConfig {
    /// Text of the CA cert to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<String>,
    /// The CA cert to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<String>,
    /// CARef is the name of the secret within the secret manager to use as the CA cert for the
    /// targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_ref: Option<String>,
    /// Text of the client cert file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<String>,
    /// The client cert file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<String>,
    /// CertRef is the name of the secret within the secret manager to use as the client cert for
    /// the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_ref: Option<String>,
    /// Disable target certificate validation.
    pub insecure_skip_verify: bool,
    /// Text of the client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<String>,
    /// KeyRef is the name of the secret within the secret manager to use as the client key for
    /// the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_ref: Option<String>,
    /// Maximum TLS version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_version: Option<i64>,
    /// Minimum TLS version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min_version: Option<i64>,
    /// Used to verify the hostname for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server_name: Option<String>,
}

/// EphemeralDashboard contains the config about the ephemeral dashboard feature
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigEphemeralDashboard {
    /// The interval at which to trigger the cleanup of ephemeral dashboards, based on their TTLs.
    pub cleanup_interval: String,
    /// When true user will be able to use the ephemeral dashboard at project level.
    pub enable: bool,
}

/// Frontend contains any config that will be used by the frontend itself.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigFrontend {
    /// When it is true, Perses won't serve the frontend anymore, and any other config set here will be ignored
    pub disable: bool,
    /// Explorer is activating the different kind of explorer supported.
    /// Be sure you have installed an associated plugin for each explorer type.
    pub explorer: PersesConfigFrontendExplorer,
    /// ImportantDashboards contains important dashboard selectors
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub important_dashboards: Option<Vec<PersesConfigFrontendImportantDashboards>>,
    /// Information contains markdown content to be display on the home page
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub information: Option<String>,
    /// TimeRange contains the time range configuration for the dropdown
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_range: Option<PersesConfigFrontendTimeRange>,
}

/// Explorer is activating the different kind of explorer supported.
/// Be sure you have installed an associated plugin for each explorer type.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigFrontendExplorer {
    pub enable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigFrontendImportantDashboards {
    /// Dashboard is the name of the dashboard (dashboard.metadata.name)
    pub dashboard: String,
    /// Project is the name of the project (dashboard.metadata.project)
    pub project: String,
}

/// TimeRange contains the time range configuration for the dropdown
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigFrontendTimeRange {
    pub disable_custom: bool,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigGlobalDatasourceDiscovery {
    /// The name of the discovery config. It is used for logging purposes only
    pub discovery_name: String,
    /// HTTP-based service discovery provides a more generic way to generate a set of global datasource and serves as an interface to plug in custom service discovery mechanisms.
    /// It fetches an HTTP endpoint containing a list of zero or more global datasources.
    /// The target must reply with an HTTP 200 response.
    /// The HTTP header Content-Type must be application/json, and the body must be valid array of JSON.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http_sd: Option<PersesConfigGlobalDatasourceDiscoveryHttpSd>,
    /// Kubernetes SD configurations allow retrieving global datasource from Kubernetes' REST API
    /// and always staying synchronized with the cluster state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes_sd: Option<PersesConfigGlobalDatasourceDiscoveryKubernetesSd>,
    /// Refresh interval to re-query the endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub refresh_interval: Option<String>,
}

/// HTTP-based service discovery provides a more generic way to generate a set of global datasource and serves as an interface to plug in custom service discovery mechanisms.
/// It fetches an HTTP endpoint containing a list of zero or more global datasources.
/// The target must reply with an HTTP 200 response.
/// The HTTP header Content-Type must be application/json, and the body must be valid array of JSON.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigGlobalDatasourceDiscoveryHttpSd {
    /// The HTTP authorization credentials for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorization: Option<PersesConfigGlobalDatasourceDiscoveryHttpSdAuthorization>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub basic_auth: Option<PersesConfigGlobalDatasourceDiscoveryHttpSdBasicAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub native_auth: Option<PersesConfigGlobalDatasourceDiscoveryHttpSdNativeAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth: Option<PersesConfigGlobalDatasourceDiscoveryHttpSdOauth>,
    /// TLSConfig to use to connect to the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_config: Option<PersesConfigGlobalDatasourceDiscoveryHttpSdTlsConfig>,
    pub url: PersesConfigGlobalDatasourceDiscoveryHttpSdUrl,
}

/// The HTTP authorization credentials for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigGlobalDatasourceDiscoveryHttpSdAuthorization {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialsFile")]
    pub credentials_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigGlobalDatasourceDiscoveryHttpSdBasicAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// PasswordFile is a path to a file that contains a password
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordFile")]
    pub password_file: Option<String>,
    pub username: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigGlobalDatasourceDiscoveryHttpSdNativeAuth {
    pub login: String,
    pub password: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigGlobalDatasourceDiscoveryHttpSdOauth {
    /// AuthStyle optionally specifies how the endpoint wants the
    /// client ID & client secret sent. The zero value means to
    /// auto-detect.
    pub auth_style: i64,
    /// ClientID is the application's ID.
    pub client_id: String,
    /// ClientSecret is the application's secret.
    pub client_secret: String,
    /// EndpointParams specifies additional parameters for requests to the token endpoint.
    pub endpoint_params: BTreeMap<String, String>,
    /// Scope specifies optional requested permissions.
    pub scopes: Vec<String>,
    /// TokenURL is the resource server's token endpoint
    /// URL. This is a constant specific to each server.
    pub token_url: String,
}

/// TLSConfig to use to connect to the targets.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigGlobalDatasourceDiscoveryHttpSdTlsConfig {
    /// Text of the CA cert to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<String>,
    /// The CA cert to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caFile")]
    pub ca_file: Option<String>,
    /// Text of the client cert file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<String>,
    /// The client cert file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certFile")]
    pub cert_file: Option<String>,
    /// Disable target certificate validation.
    #[serde(rename = "insecureSkipVerify")]
    pub insecure_skip_verify: bool,
    /// Text of the client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyFile")]
    pub key_file: Option<String>,
    /// Used to verify the hostname for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigGlobalDatasourceDiscoveryHttpSdUrl {
}

/// Kubernetes SD configurations allow retrieving global datasource from Kubernetes' REST API
/// and always staying synchronized with the cluster state.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigGlobalDatasourceDiscoveryKubernetesSd {
    /// DatasourcePluginKind is the name of the datasource plugin that should be filled when creating datasources found.
    pub datasource_plugin_kind: String,
    /// The labels used to filter the list of resource when contacting the Kubernetes API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Kubernetes namespace to constraint the query to only one namespace.
    /// Leave empty if you are looking for datasource cross-namespace.
    pub namespace: String,
    /// Configuration when you want to discover the pods in Kubernetes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod_configuration: Option<PersesConfigGlobalDatasourceDiscoveryKubernetesSdPodConfiguration>,
    /// Configuration when you want to discover the services in Kubernetes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service_configuration: Option<PersesConfigGlobalDatasourceDiscoveryKubernetesSdServiceConfiguration>,
}

/// Configuration when you want to discover the pods in Kubernetes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigGlobalDatasourceDiscoveryKubernetesSdPodConfiguration {
    /// Name of the container the target address points to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container_name: Option<String>,
    /// Name of the container port.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container_port_name: Option<String>,
    /// Number of the container port.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container_port_number: Option<i32>,
    /// If set to true, Perses server will discovery the pod
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
}

/// Configuration when you want to discover the services in Kubernetes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigGlobalDatasourceDiscoveryKubernetesSdServiceConfiguration {
    /// If set to true, Perses server will discovery the service
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// Name of the service port for the target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port_name: Option<String>,
    /// Number of the service port for the target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port_number: Option<i32>,
    /// The type of the service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service_type: Option<String>,
}

/// Provisioning contains the provisioning config that can be used if you want to provide default resources.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigProvisioning {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub folders: Option<Vec<String>>,
    /// Interval is the refresh frequency
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
}

/// Schemas contain the configuration to get access to the CUE schemas
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSchemas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub datasources_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub panels_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queries_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables_path: Option<String>,
}

/// Security contains any configuration that changes the API behavior like the endpoints exposed or if the permissions are activated.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurity {
    /// Authentication contains configuration regarding management of access/refresh token
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<PersesConfigSecurityAuthentication>,
    /// Authorization contains all configs around rbac (permissions and roles)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorization: Option<PersesConfigSecurityAuthorization>,
    /// Cookie configuration
    pub cookie: PersesConfigSecurityCookie,
    /// When it is true, the authentication and authorization config are considered.
    /// And you will need a valid JWT token to contact most of the endpoints exposed by the API
    pub enable_auth: bool,
    /// EncryptionKey is the secret key used to encrypt and decrypt sensitive data
    /// stored in the database such as the password of the basic auth for a datasource.
    /// Note that if it is not provided, it will use a default value.
    /// On a production instance, you should set this key.
    /// Also note the key size must be exactly 32 bytes long as we are using AES-256 to encrypt the data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encryption_key: Option<String>,
    /// EncryptionKeyFile is the path to file containing the secret key
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encryption_key_file: Option<String>,
    /// Readonly will deactivate any HTTP POST, PUT, DELETE endpoint
    pub readonly: bool,
}

/// Authentication contains configuration regarding management of access/refresh token
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthentication {
    /// AccessTokenTTL is the time to live of the access token. By default, it is 15 minutes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub access_token_ttl: Option<String>,
    /// DisableSignUp deactivates the Sign-up page in the UI.
    /// It also disables the endpoint that gives the possibility to create a user.
    pub disable_sign_up: bool,
    /// Providers configure the different authentication providers
    pub providers: PersesConfigSecurityAuthenticationProviders,
    /// RefreshTokenTTL is the time to live of the refresh token.
    /// The refresh token is used to get a new access token when it is expired.
    /// By default, it is 24 hours.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub refresh_token_ttl: Option<String>,
}

/// Providers configure the different authentication providers
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthenticationProviders {
    pub enable_native: bool,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth: Option<Vec<PersesConfigSecurityAuthenticationProvidersOauth>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oidc: Option<Vec<PersesConfigSecurityAuthenticationProvidersOidc>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthenticationProvidersOauth {
    pub auth_url: PersesConfigSecurityAuthenticationProvidersOauthAuthUrl,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_credentials: Option<PersesConfigSecurityAuthenticationProvidersOauthClientCredentials>,
    /// Hidden special type for storing secrets.
    pub client_id: String,
    /// Hidden special type for storing secrets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_secret: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_login_property: Option<String>,
    pub device_auth_url: PersesConfigSecurityAuthenticationProvidersOauthDeviceAuthUrl,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device_code: Option<PersesConfigSecurityAuthenticationProvidersOauthDeviceCode>,
    pub http: PersesConfigSecurityAuthenticationProvidersOauthHttp,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redirect_uri: Option<PersesConfigSecurityAuthenticationProvidersOauthRedirectUri>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    pub slug_id: String,
    pub token_url: PersesConfigSecurityAuthenticationProvidersOauthTokenUrl,
    pub user_infos_url: PersesConfigSecurityAuthenticationProvidersOauthUserInfosUrl,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthenticationProvidersOauthAuthUrl {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthenticationProvidersOauthClientCredentials {
    /// Hidden special type for storing secrets.
    pub client_id: String,
    /// Hidden special type for storing secrets.
    pub client_secret: String,
    pub scopes: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthenticationProvidersOauthDeviceAuthUrl {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthenticationProvidersOauthDeviceCode {
    /// Hidden special type for storing secrets.
    pub client_id: String,
    /// Hidden special type for storing secrets.
    pub client_secret: String,
    pub scopes: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthenticationProvidersOauthHttp {
    pub timeout: String,
    pub tls_config: PersesConfigSecurityAuthenticationProvidersOauthHttpTlsConfig,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthenticationProvidersOauthHttpTlsConfig {
    /// Text of the CA cert to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<String>,
    /// The CA cert to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caFile")]
    pub ca_file: Option<String>,
    /// Text of the client cert file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<String>,
    /// The client cert file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certFile")]
    pub cert_file: Option<String>,
    /// Disable target certificate validation.
    #[serde(rename = "insecureSkipVerify")]
    pub insecure_skip_verify: bool,
    /// Text of the client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyFile")]
    pub key_file: Option<String>,
    /// Used to verify the hostname for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthenticationProvidersOauthRedirectUri {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthenticationProvidersOauthTokenUrl {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthenticationProvidersOauthUserInfosUrl {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthenticationProvidersOidc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_credentials: Option<PersesConfigSecurityAuthenticationProvidersOidcClientCredentials>,
    /// Hidden special type for storing secrets.
    pub client_id: String,
    /// Hidden special type for storing secrets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_secret: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device_code: Option<PersesConfigSecurityAuthenticationProvidersOidcDeviceCode>,
    pub disable_pkce: bool,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub discovery_url: Option<PersesConfigSecurityAuthenticationProvidersOidcDiscoveryUrl>,
    pub http: PersesConfigSecurityAuthenticationProvidersOidcHttp,
    pub issuer: PersesConfigSecurityAuthenticationProvidersOidcIssuer,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redirect_uri: Option<PersesConfigSecurityAuthenticationProvidersOidcRedirectUri>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    pub slug_id: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url_params: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthenticationProvidersOidcClientCredentials {
    /// Hidden special type for storing secrets.
    pub client_id: String,
    /// Hidden special type for storing secrets.
    pub client_secret: String,
    pub scopes: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthenticationProvidersOidcDeviceCode {
    /// Hidden special type for storing secrets.
    pub client_id: String,
    /// Hidden special type for storing secrets.
    pub client_secret: String,
    pub scopes: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthenticationProvidersOidcDiscoveryUrl {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthenticationProvidersOidcHttp {
    pub timeout: String,
    pub tls_config: PersesConfigSecurityAuthenticationProvidersOidcHttpTlsConfig,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthenticationProvidersOidcHttpTlsConfig {
    /// Text of the CA cert to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<String>,
    /// The CA cert to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caFile")]
    pub ca_file: Option<String>,
    /// Text of the client cert file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<String>,
    /// The client cert file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certFile")]
    pub cert_file: Option<String>,
    /// Disable target certificate validation.
    #[serde(rename = "insecureSkipVerify")]
    pub insecure_skip_verify: bool,
    /// Text of the client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyFile")]
    pub key_file: Option<String>,
    /// Used to verify the hostname for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthenticationProvidersOidcIssuer {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthenticationProvidersOidcRedirectUri {
}

/// Authorization contains all configs around rbac (permissions and roles)
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthorization {
    /// CheckLatestUpdateInterval that checks if the RBAC cache needs to be refreshed with db content. Only for SQL database setup.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check_latest_update_interval: Option<String>,
    /// Default permissions for guest users (logged-in users)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub guest_permissions: Option<Vec<PersesConfigSecurityAuthorizationGuestPermissions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityAuthorizationGuestPermissions {
    /// Actions of the permission (read, create, update, delete, ...)
    pub actions: Vec<String>,
    /// The list of kind targeted by the permission. For example: `Datasource`, `Dashboard`, ...
    /// With Role, you can't target global kinds
    pub scopes: Vec<String>,
}

/// Cookie configuration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesConfigSecurityCookie {
    /// Set the SameSite cookie attribute and prevents the browser from sending the cookie along with cross-site requests.
    /// The main goal is to mitigate the risk of cross-origin information leakage.
    /// This setting also provides some protection against cross-site request forgery attacks (CSRF)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub same_site: Option<i64>,
    /// Set to true if you host Perses behind HTTPS. Default is false
    pub secure: bool,
}

/// PersesStatus defines the observed state of Perses
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PersesStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
}

