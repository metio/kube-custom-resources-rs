// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/gravitational/teleport/resources.teleport.dev/v3/teleportoidcconnectors.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// OIDCConnector resource definition v3 from Teleport
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "resources.teleport.dev", version = "v3", kind = "TeleportOIDCConnector", plural = "teleportoidcconnectors")]
#[kube(namespaced)]
#[kube(status = "TeleportOidcConnectorStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct TeleportOidcConnectorSpec {
    /// ACR is an Authentication Context Class Reference value. The meaning of the ACR value is context-specific and varies for identity providers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub acr_values: Option<String>,
    /// AllowUnverifiedEmail tells the connector to accept OIDC users with unverified emails.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_unverified_email: Option<bool>,
    /// ClaimsToRoles specifies a dynamic mapping from claims to roles.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims_to_roles: Option<Vec<TeleportOidcConnectorClaimsToRoles>>,
    /// ClientID is the id of the authentication client (Teleport Auth Service).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    /// ClientRedirectSettings defines which client redirect URLs are allowed for non-browser SSO logins other than the standard localhost ones.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_redirect_settings: Option<TeleportOidcConnectorClientRedirectSettings>,
    /// ClientSecret is used to authenticate the client. This field supports secret lookup. See the operator documentation for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_secret: Option<String>,
    /// Display is the friendly name for this provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    /// EntraIDGroupsProvider configures out-of-band user groups provider. It works by following through the groups claim source, which is sent for the "groups" claim when the user's group membership exceeds 200 max item limit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub entra_id_groups_provider: Option<TeleportOidcConnectorEntraIdGroupsProvider>,
    /// GoogleAdminEmail is the email of a google admin to impersonate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub google_admin_email: Option<String>,
    /// GoogleServiceAccount is a string containing google service account credentials.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub google_service_account: Option<String>,
    /// GoogleServiceAccountURI is a path to a google service account uri.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub google_service_account_uri: Option<String>,
    /// IssuerURL is the endpoint of the provider, e.g. <https://accounts.google.com.>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer_url: Option<String>,
    /// MaxAge is the amount of time that user logins are valid for. If a user logs in, but then does not login again within this time period, they will be forced to re-authenticate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_age: Option<String>,
    /// MFASettings contains settings to enable SSO MFA checks through this auth connector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mfa: Option<TeleportOidcConnectorMfa>,
    /// PKCEMode represents the configuration state for PKCE (Proof Key for Code Exchange). It can be "enabled" or "disabled"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pkce_mode: Option<String>,
    /// Prompt is an optional OIDC prompt. An empty string omits prompt. If not specified, it defaults to select_account for backwards compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prompt: Option<String>,
    /// Provider is the external identity provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    /// RedirectURLs is a list of callback URLs which the identity provider can use to redirect the client back to the Teleport Proxy to complete authentication. This list should match the URLs on the provider's side. The URL used for a given auth request will be chosen to match the requesting Proxy's public address. If there is no match, the first url in the list will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redirect_url: Option<Vec<String>>,
    /// RequestObjectMode determines how JWT-Secured Authorization Requests will be used for authorization requests. JARs, or request objects, can provide integrity protection, source authentication, and confidentiality for authorization request parameters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request_object_mode: Option<String>,
    /// Scope specifies additional scopes set by provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<Vec<String>>,
    /// UserMatchers is a set of glob patterns to narrow down which username(s) this auth connector should match for identifier-first login.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user_matchers: Option<Vec<String>>,
    /// UsernameClaim specifies the name of the claim from the OIDC connector to be used as the user's username.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username_claim: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportOidcConnectorClaimsToRoles {
    /// Claim is a claim name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claim: Option<String>,
    /// Roles is a list of static teleport roles to match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    /// Value is a claim value to match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ClientRedirectSettings defines which client redirect URLs are allowed for non-browser SSO logins other than the standard localhost ones.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportOidcConnectorClientRedirectSettings {
    /// a list of hostnames allowed for https client redirect URLs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allowed_https_hostnames: Option<Vec<String>>,
    /// a list of CIDRs allowed for HTTP or HTTPS client redirect URLs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure_allowed_cidr_ranges: Option<Vec<String>>,
}

/// EntraIDGroupsProvider configures out-of-band user groups provider. It works by following through the groups claim source, which is sent for the "groups" claim when the user's group membership exceeds 200 max item limit.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportOidcConnectorEntraIdGroupsProvider {
    /// Disabled specifies that the groups provider should be disabled even when Entra ID responds with a groups claim source. User may choose to disable it if they are using integrations such as SCIM or similar groups importer as connector based role mapping may be not needed in such a scenario.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// GraphEndpoint is a Microsoft Graph API endpoint. The groups claim source endpoint provided by Entra ID points to the now-retired Azure AD Graph endpoint ("<https://graph.windows.net").> To convert it to the newer Microsoft Graph API endpoint, Teleport defaults to the Microsoft Graph global service endpoint ("<https://graph.microsoft.com").> Update GraphEndpoint to point to a different Microsoft Graph national cloud deployment endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub graph_endpoint: Option<String>,
    /// GroupType is a user group type filter. Defaults to "security-groups". Value can be "security-groups", "directory-roles", "all-groups".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_type: Option<String>,
}

/// MFASettings contains settings to enable SSO MFA checks through this auth connector.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportOidcConnectorMfa {
    /// AcrValues are Authentication Context Class Reference values. The meaning of the ACR value is context-specific and varies for identity providers. Some identity providers support MFA specific contexts, such Okta with its "phr" (phishing-resistant) ACR.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub acr_values: Option<String>,
    /// ClientID is the OIDC OAuth app client ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    /// ClientSecret is the OIDC OAuth app client secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_secret: Option<String>,
    /// Enabled specified whether this OIDC connector supports MFA checks. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// MaxAge is the amount of time in nanoseconds that an IdP session is valid for. Defaults to 0 to always force re-authentication for MFA checks. This should only be set to a non-zero value if the IdP is setup to perform MFA checks on top of active user sessions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_age: Option<String>,
    /// Prompt is an optional OIDC prompt. An empty string omits prompt. If not specified, it defaults to select_account for backwards compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prompt: Option<String>,
    /// RequestObjectMode determines how JWT-Secured Authorization Requests will be used for authorization requests. JARs, or request objects, can provide integrity protection, source authentication, and confidentiality for authorization request parameters. If omitted, MFA flows will default to the `RequestObjectMode` behavior specified in the base OIDC connector. Set this property to 'none' to explicitly disable request objects for the MFA client.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request_object_mode: Option<String>,
}

/// Status defines the observed state of the Teleport resource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportOidcConnectorStatus {
    /// Conditions represent the latest available observations of an object's state
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "teleportResourceID")]
    pub teleport_resource_id: Option<i64>,
}

