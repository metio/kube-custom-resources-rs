// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/gravitational/teleport/resources.teleport.dev/v5/teleportroles.yaml
// kopium version: 0.22.4

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// Role resource definition v5 from Teleport
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "resources.teleport.dev", version = "v5", kind = "TeleportRole", plural = "teleportroles")]
#[kube(namespaced)]
#[kube(status = "TeleportRoleStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct TeleportRoleSpec {
    /// Allow is the set of conditions evaluated to grant access.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<TeleportRoleAllow>,
    /// Deny is the set of conditions evaluated to deny access. Deny takes priority over allow.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deny: Option<TeleportRoleDeny>,
    /// Options is for OpenSSH options like agent forwarding.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<TeleportRoleOptions>,
}

/// Allow is the set of conditions evaluated to grant access.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleAllow {
    /// AccountAssignments holds the list of account assignments affected by this condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub account_assignments: Option<Vec<TeleportRoleAllowAccountAssignments>>,
    /// AppLabels is a map of labels used as part of the RBAC system.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub app_labels: Option<BTreeMap<String, serde_json::Value>>,
    /// AppLabelsExpression is a predicate expression used to allow/deny access to Apps.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub app_labels_expression: Option<String>,
    /// AWSRoleARNs is a list of AWS role ARNs this role is allowed to assume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_role_arns: Option<Vec<String>>,
    /// AzureIdentities is a list of Azure identities this role is allowed to assume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure_identities: Option<Vec<String>>,
    /// ClusterLabels is a map of node labels (used to dynamically grant access to clusters).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster_labels: Option<BTreeMap<String, serde_json::Value>>,
    /// ClusterLabelsExpression is a predicate expression used to allow/deny access to remote Teleport clusters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster_labels_expression: Option<String>,
    /// DatabaseLabels are used in RBAC system to allow/deny access to databases.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db_labels: Option<BTreeMap<String, serde_json::Value>>,
    /// DatabaseLabelsExpression is a predicate expression used to allow/deny access to Databases.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db_labels_expression: Option<String>,
    /// DatabaseNames is a list of database names this role is allowed to connect to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db_names: Option<Vec<String>>,
    /// DatabasePermissions specifies a set of permissions that will be granted to the database user when using automatic database user provisioning.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db_permissions: Option<Vec<TeleportRoleAllowDbPermissions>>,
    /// DatabaseRoles is a list of databases roles for automatic user creation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db_roles: Option<Vec<String>>,
    /// DatabaseServiceLabels are used in RBAC system to allow/deny access to Database Services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db_service_labels: Option<BTreeMap<String, serde_json::Value>>,
    /// DatabaseServiceLabelsExpression is a predicate expression used to allow/deny access to Database Services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db_service_labels_expression: Option<String>,
    /// DatabaseUsers is a list of databases users this role is allowed to connect as.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db_users: Option<Vec<String>>,
    /// DesktopGroups is a list of groups for created desktop users to be added to
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub desktop_groups: Option<Vec<String>>,
    /// GCPServiceAccounts is a list of GCP service accounts this role is allowed to assume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcp_service_accounts: Option<Vec<String>>,
    /// GitHubPermissions defines GitHub integration related permissions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub github_permissions: Option<Vec<TeleportRoleAllowGithubPermissions>>,
    /// GroupLabels is a map of labels used as part of the RBAC system.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_labels: Option<BTreeMap<String, serde_json::Value>>,
    /// GroupLabelsExpression is a predicate expression used to allow/deny access to user groups.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_labels_expression: Option<String>,
    /// HostGroups is a list of groups for created users to be added to
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host_groups: Option<Vec<String>>,
    /// HostSudoers is a list of entries to include in a users sudoer file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host_sudoers: Option<Vec<String>>,
    /// Impersonate specifies what users and roles this role is allowed to impersonate by issuing certificates or other possible means.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub impersonate: Option<TeleportRoleAllowImpersonate>,
    /// JoinSessions specifies policies to allow users to join other sessions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub join_sessions: Option<Vec<TeleportRoleAllowJoinSessions>>,
    /// KubeGroups is a list of kubernetes groups
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes_groups: Option<Vec<String>>,
    /// KubernetesLabels is a map of kubernetes cluster labels used for RBAC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes_labels: Option<BTreeMap<String, serde_json::Value>>,
    /// KubernetesLabelsExpression is a predicate expression used to allow/deny access to kubernetes clusters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes_labels_expression: Option<String>,
    /// KubernetesResources is the Kubernetes Resources this Role grants access to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes_resources: Option<Vec<TeleportRoleAllowKubernetesResources>>,
    /// KubeUsers is an optional kubernetes users to impersonate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes_users: Option<Vec<String>>,
    /// Logins is a list of *nix system logins.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logins: Option<Vec<String>>,
    /// MCPPermissions defines MCP servers related permissions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mcp: Option<TeleportRoleAllowMcp>,
    /// NodeLabels is a map of node labels (used to dynamically grant access to nodes).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_labels: Option<BTreeMap<String, serde_json::Value>>,
    /// NodeLabelsExpression is a predicate expression used to allow/deny access to SSH nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_labels_expression: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<TeleportRoleAllowRequest>,
    /// RequireSessionJoin specifies policies for required users to start a session.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub require_session_join: Option<Vec<TeleportRoleAllowRequireSessionJoin>>,
    /// ReviewRequests defines conditions for submitting access reviews.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub review_requests: Option<TeleportRoleAllowReviewRequests>,
    /// Rules is a list of rules and their access levels. Rules are a high level construct used for access control.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rules: Option<Vec<TeleportRoleAllowRules>>,
    /// SPIFFE is used to allow or deny access to a role holder to generating a SPIFFE SVID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spiffe: Option<Vec<TeleportRoleAllowSpiffe>>,
    /// WindowsDesktopLabels are used in the RBAC system to allow/deny access to Windows desktops.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub windows_desktop_labels: Option<BTreeMap<String, serde_json::Value>>,
    /// WindowsDesktopLabelsExpression is a predicate expression used to allow/deny access to Windows desktops.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub windows_desktop_labels_expression: Option<String>,
    /// WindowsDesktopLogins is a list of desktop login names allowed/denied for Windows desktops.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub windows_desktop_logins: Option<Vec<String>>,
    /// WorkloadIdentityLabels controls whether or not specific WorkloadIdentity resources can be invoked. Further authorization controls exist on the WorkloadIdentity resource itself.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workload_identity_labels: Option<BTreeMap<String, serde_json::Value>>,
    /// WorkloadIdentityLabelsExpression is a predicate expression used to allow/deny access to issuing a WorkloadIdentity.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workload_identity_labels_expression: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleAllowAccountAssignments {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permission_set: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleAllowDbPermissions {
    /// Match is a list of object labels that must be matched for the permission to be granted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
    /// Permission is the list of string representations of the permission to be given, e.g. SELECT, INSERT, UPDATE, ...
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleAllowGithubPermissions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub orgs: Option<Vec<String>>,
}

/// Impersonate specifies what users and roles this role is allowed to impersonate by issuing certificates or other possible means.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleAllowImpersonate {
    /// Roles is a list of resources this role is allowed to impersonate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    /// Users is a list of resources this role is allowed to impersonate, could be an empty list or a Wildcard pattern
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<String>>,
    /// Where specifies optional advanced matcher
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "where")]
    pub r#where: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleAllowJoinSessions {
    /// Kinds are the session kinds this policy applies to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kinds: Option<Vec<String>>,
    /// Modes is a list of permitted participant modes for this policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub modes: Option<Vec<String>>,
    /// Name is the name of the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Roles is a list of roles that you can join the session of.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleAllowKubernetesResources {
    /// APIGroup specifies the Kubernetes API group of the Kubernetes resource. It supports wildcards.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api_group: Option<String>,
    /// Kind specifies the Kubernetes Resource type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name is the resource name. It supports wildcards.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace is the resource namespace. It supports wildcards.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Verbs are the allowed Kubernetes verbs for the following resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verbs: Option<Vec<String>>,
}

/// MCPPermissions defines MCP servers related permissions.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleAllowMcp {
    /// Tools defines the list of tools allowed or denied for this role. Each entry can be a literal string, a glob pattern (e.g. "prefix_*"), or a regular expression (must start with '^' and end with '$'). If the list is empty, no tools are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tools: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleAllowRequest {
    /// Annotations is a collection of annotations to be programmatically appended to pending Access Requests at the time of their creation. These annotations serve as a mechanism to propagate extra information to plugins.  Since these annotations support variable interpolation syntax, they also offer a mechanism for forwarding claims from an external identity provider, to a plugin via `{{external.trait_name}}` style substitutions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, Vec<String>>>,
    /// ClaimsToRoles specifies a mapping from claims (traits) to teleport roles.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims_to_roles: Option<Vec<TeleportRoleAllowRequestClaimsToRoles>>,
    /// kubernetes_resources can optionally enforce a requester to request only certain kinds of kube resources. Eg: Users can make request to either a resource kind "kube_cluster" or any of its subresources like "namespaces". This field can be defined such that it prevents a user from requesting "kube_cluster" and enforce requesting any of its subresources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes_resources: Option<Vec<TeleportRoleAllowRequestKubernetesResources>>,
    /// MaxDuration is the amount of time the access will be granted for. If this is zero, the default duration is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_duration: Option<String>,
    /// Reason defines settings for the reason for the access provided by the user.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<TeleportRoleAllowRequestReason>,
    /// Roles is the name of roles which will match the request rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    /// SearchAsRoles is a list of extra roles which should apply to a user while they are searching for resources as part of a Resource Access Request, and defines the underlying roles which will be requested as part of any Resource Access Request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search_as_roles: Option<Vec<String>>,
    /// SuggestedReviewers is a list of reviewer suggestions.  These can be teleport usernames, but that is not a requirement.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suggested_reviewers: Option<Vec<String>>,
    /// Thresholds is a list of thresholds, one of which must be met in order for reviews to trigger a state-transition.  If no thresholds are provided, a default threshold of 1 for approval and denial is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub thresholds: Option<Vec<TeleportRoleAllowRequestThresholds>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleAllowRequestClaimsToRoles {
    /// Claim is a claim name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claim: Option<String>,
    /// Roles is a list of static teleport roles to match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    /// Value is a claim value to match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleAllowRequestKubernetesResources {
    /// APIGroup specifies the Kubernetes Resource API group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api_group: Option<String>,
    /// kind specifies the Kubernetes Resource type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
}

/// Reason defines settings for the reason for the access provided by the user.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleAllowRequestReason {
    /// Mode can be either "required" or "optional". Empty string is treated as "optional". If a role has the request reason mode set to "required", then reason is required for all Access Requests requesting roles or resources allowed by this role. It applies only to users who have this role assigned.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleAllowRequestThresholds {
    /// Approve is the number of matching approvals needed for state-transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub approve: Option<i32>,
    /// Deny is the number of denials needed for state-transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deny: Option<i32>,
    /// Filter is an optional predicate used to determine which reviews count toward this threshold.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    /// Name is the optional human-readable name of the threshold.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleAllowRequireSessionJoin {
    /// Count is the amount of people that need to be matched for this policy to be fulfilled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    /// Filter is a predicate that determines what users count towards this policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    /// Kinds are the session kinds this policy applies to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kinds: Option<Vec<String>>,
    /// Modes is the list of modes that may be used to fulfill this policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub modes: Option<Vec<String>>,
    /// Name is the name of the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// OnLeave is the behaviour that's used when the policy is no longer fulfilled for a live session.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub on_leave: Option<String>,
}

/// ReviewRequests defines conditions for submitting access reviews.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleAllowReviewRequests {
    /// ClaimsToRoles specifies a mapping from claims (traits) to teleport roles.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims_to_roles: Option<Vec<TeleportRoleAllowReviewRequestsClaimsToRoles>>,
    /// PreviewAsRoles is a list of extra roles which should apply to a reviewer while they are viewing a Resource Access Request for the purposes of viewing details such as the hostname and labels of requested resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub preview_as_roles: Option<Vec<String>>,
    /// Roles is the name of roles which may be reviewed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    /// Where is an optional predicate which further limits which requests are reviewable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "where")]
    pub r#where: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleAllowReviewRequestsClaimsToRoles {
    /// Claim is a claim name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claim: Option<String>,
    /// Roles is a list of static teleport roles to match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    /// Value is a claim value to match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleAllowRules {
    /// Actions specifies optional actions taken when this rule matches
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<String>>,
    /// Resources is a list of resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<String>>,
    /// Verbs is a list of verbs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verbs: Option<Vec<String>>,
    /// Where specifies optional advanced matcher
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "where")]
    pub r#where: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleAllowSpiffe {
    /// DNSSANs specifies matchers for the SPIFFE ID DNS SANs.  Each requested DNS SAN is compared against all matchers configured and if any match, the condition is considered to be met.  The matcher by default allows '*' to be used to indicate zero or more of any character. Prepend '^' and append '$' to instead switch to matching using the Go regex syntax.  Example: *.example.com would match foo.example.com
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dns_sans: Option<Vec<String>>,
    /// IPSANs specifies matchers for the SPIFFE ID IP SANs.  Each requested IP SAN is compared against all matchers configured and if any match, the condition is considered to be met.  The matchers should be specified using CIDR notation, it supports IPv4 and IPv6.  Examples: - 10.0.0.0/24 would match 10.0.0.0 to 10.255.255.255 - 10.0.0.42/32 would match only 10.0.0.42
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ip_sans: Option<Vec<String>>,
    /// Path specifies a matcher for the SPIFFE ID path. It should not include the trust domain and should start with a leading slash.  The matcher by default allows '*' to be used to indicate zero or more of any character. Prepend '^' and append '$' to instead switch to matching using the Go regex syntax.  Example: - /svc/foo/*/bar would match /svc/foo/baz/bar - ^\/svc\/foo\/.*\/bar$ would match /svc/foo/baz/bar
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// Deny is the set of conditions evaluated to deny access. Deny takes priority over allow.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleDeny {
    /// AccountAssignments holds the list of account assignments affected by this condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub account_assignments: Option<Vec<TeleportRoleDenyAccountAssignments>>,
    /// AppLabels is a map of labels used as part of the RBAC system.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub app_labels: Option<BTreeMap<String, serde_json::Value>>,
    /// AppLabelsExpression is a predicate expression used to allow/deny access to Apps.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub app_labels_expression: Option<String>,
    /// AWSRoleARNs is a list of AWS role ARNs this role is allowed to assume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_role_arns: Option<Vec<String>>,
    /// AzureIdentities is a list of Azure identities this role is allowed to assume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure_identities: Option<Vec<String>>,
    /// ClusterLabels is a map of node labels (used to dynamically grant access to clusters).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster_labels: Option<BTreeMap<String, serde_json::Value>>,
    /// ClusterLabelsExpression is a predicate expression used to allow/deny access to remote Teleport clusters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster_labels_expression: Option<String>,
    /// DatabaseLabels are used in RBAC system to allow/deny access to databases.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db_labels: Option<BTreeMap<String, serde_json::Value>>,
    /// DatabaseLabelsExpression is a predicate expression used to allow/deny access to Databases.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db_labels_expression: Option<String>,
    /// DatabaseNames is a list of database names this role is allowed to connect to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db_names: Option<Vec<String>>,
    /// DatabasePermissions specifies a set of permissions that will be granted to the database user when using automatic database user provisioning.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db_permissions: Option<Vec<TeleportRoleDenyDbPermissions>>,
    /// DatabaseRoles is a list of databases roles for automatic user creation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db_roles: Option<Vec<String>>,
    /// DatabaseServiceLabels are used in RBAC system to allow/deny access to Database Services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db_service_labels: Option<BTreeMap<String, serde_json::Value>>,
    /// DatabaseServiceLabelsExpression is a predicate expression used to allow/deny access to Database Services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db_service_labels_expression: Option<String>,
    /// DatabaseUsers is a list of databases users this role is allowed to connect as.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db_users: Option<Vec<String>>,
    /// DesktopGroups is a list of groups for created desktop users to be added to
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub desktop_groups: Option<Vec<String>>,
    /// GCPServiceAccounts is a list of GCP service accounts this role is allowed to assume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcp_service_accounts: Option<Vec<String>>,
    /// GitHubPermissions defines GitHub integration related permissions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub github_permissions: Option<Vec<TeleportRoleDenyGithubPermissions>>,
    /// GroupLabels is a map of labels used as part of the RBAC system.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_labels: Option<BTreeMap<String, serde_json::Value>>,
    /// GroupLabelsExpression is a predicate expression used to allow/deny access to user groups.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_labels_expression: Option<String>,
    /// HostGroups is a list of groups for created users to be added to
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host_groups: Option<Vec<String>>,
    /// HostSudoers is a list of entries to include in a users sudoer file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host_sudoers: Option<Vec<String>>,
    /// Impersonate specifies what users and roles this role is allowed to impersonate by issuing certificates or other possible means.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub impersonate: Option<TeleportRoleDenyImpersonate>,
    /// JoinSessions specifies policies to allow users to join other sessions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub join_sessions: Option<Vec<TeleportRoleDenyJoinSessions>>,
    /// KubeGroups is a list of kubernetes groups
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes_groups: Option<Vec<String>>,
    /// KubernetesLabels is a map of kubernetes cluster labels used for RBAC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes_labels: Option<BTreeMap<String, serde_json::Value>>,
    /// KubernetesLabelsExpression is a predicate expression used to allow/deny access to kubernetes clusters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes_labels_expression: Option<String>,
    /// KubernetesResources is the Kubernetes Resources this Role grants access to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes_resources: Option<Vec<TeleportRoleDenyKubernetesResources>>,
    /// KubeUsers is an optional kubernetes users to impersonate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes_users: Option<Vec<String>>,
    /// Logins is a list of *nix system logins.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logins: Option<Vec<String>>,
    /// MCPPermissions defines MCP servers related permissions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mcp: Option<TeleportRoleDenyMcp>,
    /// NodeLabels is a map of node labels (used to dynamically grant access to nodes).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_labels: Option<BTreeMap<String, serde_json::Value>>,
    /// NodeLabelsExpression is a predicate expression used to allow/deny access to SSH nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_labels_expression: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<TeleportRoleDenyRequest>,
    /// RequireSessionJoin specifies policies for required users to start a session.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub require_session_join: Option<Vec<TeleportRoleDenyRequireSessionJoin>>,
    /// ReviewRequests defines conditions for submitting access reviews.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub review_requests: Option<TeleportRoleDenyReviewRequests>,
    /// Rules is a list of rules and their access levels. Rules are a high level construct used for access control.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rules: Option<Vec<TeleportRoleDenyRules>>,
    /// SPIFFE is used to allow or deny access to a role holder to generating a SPIFFE SVID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spiffe: Option<Vec<TeleportRoleDenySpiffe>>,
    /// WindowsDesktopLabels are used in the RBAC system to allow/deny access to Windows desktops.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub windows_desktop_labels: Option<BTreeMap<String, serde_json::Value>>,
    /// WindowsDesktopLabelsExpression is a predicate expression used to allow/deny access to Windows desktops.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub windows_desktop_labels_expression: Option<String>,
    /// WindowsDesktopLogins is a list of desktop login names allowed/denied for Windows desktops.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub windows_desktop_logins: Option<Vec<String>>,
    /// WorkloadIdentityLabels controls whether or not specific WorkloadIdentity resources can be invoked. Further authorization controls exist on the WorkloadIdentity resource itself.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workload_identity_labels: Option<BTreeMap<String, serde_json::Value>>,
    /// WorkloadIdentityLabelsExpression is a predicate expression used to allow/deny access to issuing a WorkloadIdentity.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workload_identity_labels_expression: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleDenyAccountAssignments {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permission_set: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleDenyDbPermissions {
    /// Match is a list of object labels that must be matched for the permission to be granted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<BTreeMap<String, serde_json::Value>>,
    /// Permission is the list of string representations of the permission to be given, e.g. SELECT, INSERT, UPDATE, ...
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleDenyGithubPermissions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub orgs: Option<Vec<String>>,
}

/// Impersonate specifies what users and roles this role is allowed to impersonate by issuing certificates or other possible means.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleDenyImpersonate {
    /// Roles is a list of resources this role is allowed to impersonate
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    /// Users is a list of resources this role is allowed to impersonate, could be an empty list or a Wildcard pattern
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<String>>,
    /// Where specifies optional advanced matcher
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "where")]
    pub r#where: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleDenyJoinSessions {
    /// Kinds are the session kinds this policy applies to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kinds: Option<Vec<String>>,
    /// Modes is a list of permitted participant modes for this policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub modes: Option<Vec<String>>,
    /// Name is the name of the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Roles is a list of roles that you can join the session of.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleDenyKubernetesResources {
    /// APIGroup specifies the Kubernetes API group of the Kubernetes resource. It supports wildcards.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api_group: Option<String>,
    /// Kind specifies the Kubernetes Resource type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name is the resource name. It supports wildcards.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace is the resource namespace. It supports wildcards.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Verbs are the allowed Kubernetes verbs for the following resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verbs: Option<Vec<String>>,
}

/// MCPPermissions defines MCP servers related permissions.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleDenyMcp {
    /// Tools defines the list of tools allowed or denied for this role. Each entry can be a literal string, a glob pattern (e.g. "prefix_*"), or a regular expression (must start with '^' and end with '$'). If the list is empty, no tools are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tools: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleDenyRequest {
    /// Annotations is a collection of annotations to be programmatically appended to pending Access Requests at the time of their creation. These annotations serve as a mechanism to propagate extra information to plugins.  Since these annotations support variable interpolation syntax, they also offer a mechanism for forwarding claims from an external identity provider, to a plugin via `{{external.trait_name}}` style substitutions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, Vec<String>>>,
    /// ClaimsToRoles specifies a mapping from claims (traits) to teleport roles.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims_to_roles: Option<Vec<TeleportRoleDenyRequestClaimsToRoles>>,
    /// kubernetes_resources can optionally enforce a requester to request only certain kinds of kube resources. Eg: Users can make request to either a resource kind "kube_cluster" or any of its subresources like "namespaces". This field can be defined such that it prevents a user from requesting "kube_cluster" and enforce requesting any of its subresources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes_resources: Option<Vec<TeleportRoleDenyRequestKubernetesResources>>,
    /// MaxDuration is the amount of time the access will be granted for. If this is zero, the default duration is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_duration: Option<String>,
    /// Reason defines settings for the reason for the access provided by the user.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<TeleportRoleDenyRequestReason>,
    /// Roles is the name of roles which will match the request rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    /// SearchAsRoles is a list of extra roles which should apply to a user while they are searching for resources as part of a Resource Access Request, and defines the underlying roles which will be requested as part of any Resource Access Request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search_as_roles: Option<Vec<String>>,
    /// SuggestedReviewers is a list of reviewer suggestions.  These can be teleport usernames, but that is not a requirement.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suggested_reviewers: Option<Vec<String>>,
    /// Thresholds is a list of thresholds, one of which must be met in order for reviews to trigger a state-transition.  If no thresholds are provided, a default threshold of 1 for approval and denial is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub thresholds: Option<Vec<TeleportRoleDenyRequestThresholds>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleDenyRequestClaimsToRoles {
    /// Claim is a claim name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claim: Option<String>,
    /// Roles is a list of static teleport roles to match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    /// Value is a claim value to match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleDenyRequestKubernetesResources {
    /// APIGroup specifies the Kubernetes Resource API group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api_group: Option<String>,
    /// kind specifies the Kubernetes Resource type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
}

/// Reason defines settings for the reason for the access provided by the user.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleDenyRequestReason {
    /// Mode can be either "required" or "optional". Empty string is treated as "optional". If a role has the request reason mode set to "required", then reason is required for all Access Requests requesting roles or resources allowed by this role. It applies only to users who have this role assigned.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleDenyRequestThresholds {
    /// Approve is the number of matching approvals needed for state-transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub approve: Option<i32>,
    /// Deny is the number of denials needed for state-transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deny: Option<i32>,
    /// Filter is an optional predicate used to determine which reviews count toward this threshold.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    /// Name is the optional human-readable name of the threshold.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleDenyRequireSessionJoin {
    /// Count is the amount of people that need to be matched for this policy to be fulfilled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    /// Filter is a predicate that determines what users count towards this policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    /// Kinds are the session kinds this policy applies to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kinds: Option<Vec<String>>,
    /// Modes is the list of modes that may be used to fulfill this policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub modes: Option<Vec<String>>,
    /// Name is the name of the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// OnLeave is the behaviour that's used when the policy is no longer fulfilled for a live session.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub on_leave: Option<String>,
}

/// ReviewRequests defines conditions for submitting access reviews.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleDenyReviewRequests {
    /// ClaimsToRoles specifies a mapping from claims (traits) to teleport roles.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims_to_roles: Option<Vec<TeleportRoleDenyReviewRequestsClaimsToRoles>>,
    /// PreviewAsRoles is a list of extra roles which should apply to a reviewer while they are viewing a Resource Access Request for the purposes of viewing details such as the hostname and labels of requested resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub preview_as_roles: Option<Vec<String>>,
    /// Roles is the name of roles which may be reviewed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    /// Where is an optional predicate which further limits which requests are reviewable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "where")]
    pub r#where: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleDenyReviewRequestsClaimsToRoles {
    /// Claim is a claim name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claim: Option<String>,
    /// Roles is a list of static teleport roles to match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    /// Value is a claim value to match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleDenyRules {
    /// Actions specifies optional actions taken when this rule matches
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<String>>,
    /// Resources is a list of resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<String>>,
    /// Verbs is a list of verbs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verbs: Option<Vec<String>>,
    /// Where specifies optional advanced matcher
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "where")]
    pub r#where: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleDenySpiffe {
    /// DNSSANs specifies matchers for the SPIFFE ID DNS SANs.  Each requested DNS SAN is compared against all matchers configured and if any match, the condition is considered to be met.  The matcher by default allows '*' to be used to indicate zero or more of any character. Prepend '^' and append '$' to instead switch to matching using the Go regex syntax.  Example: *.example.com would match foo.example.com
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dns_sans: Option<Vec<String>>,
    /// IPSANs specifies matchers for the SPIFFE ID IP SANs.  Each requested IP SAN is compared against all matchers configured and if any match, the condition is considered to be met.  The matchers should be specified using CIDR notation, it supports IPv4 and IPv6.  Examples: - 10.0.0.0/24 would match 10.0.0.0 to 10.255.255.255 - 10.0.0.42/32 would match only 10.0.0.42
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ip_sans: Option<Vec<String>>,
    /// Path specifies a matcher for the SPIFFE ID path. It should not include the trust domain and should start with a leading slash.  The matcher by default allows '*' to be used to indicate zero or more of any character. Prepend '^' and append '$' to instead switch to matching using the Go regex syntax.  Example: - /svc/foo/*/bar would match /svc/foo/baz/bar - ^\/svc\/foo\/.*\/bar$ would match /svc/foo/baz/bar
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// Options is for OpenSSH options like agent forwarding.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleOptions {
    /// CertExtensions specifies the key/values
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_extensions: Option<Vec<TeleportRoleOptionsCertExtensions>>,
    /// CertificateFormat defines the format of the user certificate to allow compatibility with older versions of OpenSSH.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_format: Option<String>,
    /// ClientIdleTimeout sets disconnect clients on idle timeout behavior, if set to 0 means do not disconnect, otherwise is set to the idle duration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_idle_timeout: Option<String>,
    /// CreateDatabaseUser enabled automatic database user creation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub create_db_user: Option<bool>,
    /// CreateDatabaseUserMode allows users to be automatically created on a database when not set to off. 0 is "unspecified", 1 is "off", 2 is "keep", 3 is "best_effort_drop".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub create_db_user_mode: Option<IntOrString>,
    /// CreateDesktopUser allows users to be automatically created on a Windows desktop
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub create_desktop_user: Option<bool>,
    /// Deprecated: use CreateHostUserMode instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub create_host_user: Option<bool>,
    /// CreateHostUserDefaultShell is used to configure the default shell for newly provisioned host users.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub create_host_user_default_shell: Option<String>,
    /// CreateHostUserMode allows users to be automatically created on a host when not set to off. 0 is "unspecified"; 1 is "off"; 2 is "drop" (removed for v15 and above), 3 is "keep"; 4 is "insecure-drop".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub create_host_user_mode: Option<IntOrString>,
    /// DesktopClipboard indicates whether clipboard sharing is allowed between the user's workstation and the remote desktop. It defaults to true unless explicitly set to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub desktop_clipboard: Option<bool>,
    /// DesktopDirectorySharing indicates whether directory sharing is allowed between the user's workstation and the remote desktop. It defaults to false unless explicitly set to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub desktop_directory_sharing: Option<bool>,
    /// DeviceTrustMode is the device authorization mode used for the resources associated with the role. See DeviceTrust.Mode.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device_trust_mode: Option<String>,
    /// DisconnectExpiredCert sets disconnect clients on expired certificates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disconnect_expired_cert: Option<bool>,
    /// BPF defines what events to record for the BPF-based session recorder.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enhanced_recording: Option<Vec<String>>,
    /// ForwardAgent is SSH agent forwarding.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub forward_agent: Option<bool>,
    /// IDP is a set of options related to accessing IdPs within Teleport. Requires Teleport Enterprise.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub idp: Option<TeleportRoleOptionsIdp>,
    /// Lock specifies the locking mode (strict|best_effort) to be applied with the role.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lock: Option<String>,
    /// MaxConnections defines the maximum number of concurrent connections a user may hold.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_connections: Option<i64>,
    /// MaxKubernetesConnections defines the maximum number of concurrent Kubernetes sessions a user may hold.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_kubernetes_connections: Option<i64>,
    /// MaxSessionTTL defines how long a SSH session can last for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_session_ttl: Option<String>,
    /// MaxSessions defines the maximum number of concurrent sessions per connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_sessions: Option<i64>,
    /// MFAVerificationInterval optionally defines the maximum duration that can elapse between successive MFA verifications. This variable is used to ensure that users are periodically prompted to verify their identity, enhancing security by preventing prolonged sessions without re-authentication when using tsh proxy * derivatives. It's only effective if the session requires MFA. If not set, defaults to `max_session_ttl`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mfa_verification_interval: Option<String>,
    /// PermitX11Forwarding authorizes use of X11 forwarding.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permit_x11_forwarding: Option<bool>,
    /// PinSourceIP forces the same client IP for certificate generation and usage
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pin_source_ip: Option<bool>,
    /// Deprecated: Use SSHPortForwarding instead
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port_forwarding: Option<bool>,
    /// RecordDesktopSession indicates whether desktop access sessions should be recorded. It defaults to true unless explicitly set to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub record_session: Option<TeleportRoleOptionsRecordSession>,
    /// RequestAccess defines the request strategy (optional|reason|always) where optional is the default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request_access: Option<String>,
    /// RequestPrompt is an optional message which tells users what they aught to request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request_prompt: Option<String>,
    /// RequireMFAType is the type of MFA requirement enforced for this user. 0 is "OFF", 1 is "SESSION", 2 is "SESSION_AND_HARDWARE_KEY", 3 is "HARDWARE_KEY_TOUCH", 4 is "HARDWARE_KEY_PIN", 5 is "HARDWARE_KEY_TOUCH_AND_PIN".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub require_session_mfa: Option<IntOrString>,
    /// SSHFileCopy indicates whether remote file operations via SCP or SFTP are allowed over an SSH session. It defaults to true unless explicitly set to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssh_file_copy: Option<bool>,
    /// SSHPortForwarding configures what types of SSH port forwarding are allowed by a role.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssh_port_forwarding: Option<TeleportRoleOptionsSshPortForwarding>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleOptionsCertExtensions {
    /// Mode is the type of extension to be used -- currently critical-option is not supported. 0 is "extension".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<IntOrString>,
    /// Name specifies the key to be used in the cert extension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Type represents the certificate type being extended, only ssh is supported at this time. 0 is "ssh".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<IntOrString>,
    /// Value specifies the value to be used in the cert extension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// IDP is a set of options related to accessing IdPs within Teleport. Requires Teleport Enterprise.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleOptionsIdp {
    /// SAML are options related to the Teleport SAML IdP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub saml: Option<TeleportRoleOptionsIdpSaml>,
}

/// SAML are options related to the Teleport SAML IdP.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleOptionsIdpSaml {
    /// Enabled is set to true if this option allows access to the Teleport SAML IdP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// RecordDesktopSession indicates whether desktop access sessions should be recorded. It defaults to true unless explicitly set to false.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleOptionsRecordSession {
    /// Default indicates the default value for the services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default: Option<String>,
    /// Desktop indicates whether desktop sessions should be recorded. It defaults to true unless explicitly set to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub desktop: Option<bool>,
    /// SSH indicates the session mode used on SSH sessions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssh: Option<String>,
}

/// SSHPortForwarding configures what types of SSH port forwarding are allowed by a role.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleOptionsSshPortForwarding {
    /// Allow local port forwarding.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub local: Option<TeleportRoleOptionsSshPortForwardingLocal>,
    /// Allow remote port forwarding.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<TeleportRoleOptionsSshPortForwardingRemote>,
}

/// Allow local port forwarding.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleOptionsSshPortForwardingLocal {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Allow remote port forwarding.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleOptionsSshPortForwardingRemote {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Status defines the observed state of the Teleport resource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportRoleStatus {
    /// Conditions represent the latest available observations of an object's state
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "teleportResourceID")]
    pub teleport_resource_id: Option<i64>,
}

