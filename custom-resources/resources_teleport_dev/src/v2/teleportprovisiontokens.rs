// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/gravitational/teleport/resources.teleport.dev/v2/teleportprovisiontokens.yaml
// kopium version: 0.22.4

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ProvisionToken resource definition v2 from Teleport
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "resources.teleport.dev", version = "v2", kind = "TeleportProvisionToken", plural = "teleportprovisiontokens")]
#[kube(namespaced)]
#[kube(status = "TeleportProvisionTokenStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct TeleportProvisionTokenSpec {
    /// Allow is a list of TokenRules, nodes using this token must match one allow rule to use this token.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<Vec<TeleportProvisionTokenAllow>>,
    /// AWSIIDTTL is the TTL to use for AWS EC2 Instance Identity Documents used to join the cluster with this token.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_iid_ttl: Option<String>,
    /// Azure allows the configuration of options specific to the "azure" join method.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<TeleportProvisionTokenAzure>,
    /// AzureDevops allows the configuration of options specific to the "azure_devops" join method.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure_devops: Option<TeleportProvisionTokenAzureDevops>,
    /// Bitbucket allows the configuration of options specific to the "bitbucket" join method.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bitbucket: Option<TeleportProvisionTokenBitbucket>,
    /// BotName is the name of the bot this token grants access to, if any
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bot_name: Option<String>,
    /// BoundKeypair allows the configuration of options specific to the "bound_keypair" join method.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bound_keypair: Option<TeleportProvisionTokenBoundKeypair>,
    /// CircleCI allows the configuration of options specific to the "circleci" join method.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub circleci: Option<TeleportProvisionTokenCircleci>,
    /// GCP allows the configuration of options specific to the "gcp" join method.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcp: Option<TeleportProvisionTokenGcp>,
    /// GitHub allows the configuration of options specific to the "github" join method.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub github: Option<TeleportProvisionTokenGithub>,
    /// GitLab allows the configuration of options specific to the "gitlab" join method.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gitlab: Option<TeleportProvisionTokenGitlab>,
    /// JoinMethod is the joining method required in order to use this token. Supported joining methods include: azure, circleci, ec2, gcp, github, gitlab, iam, kubernetes, spacelift, token, tpm
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub join_method: Option<String>,
    /// Kubernetes allows the configuration of options specific to the "kubernetes" join method.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<TeleportProvisionTokenKubernetes>,
    /// Oracle allows the configuration of options specific to the "oracle" join method.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oracle: Option<TeleportProvisionTokenOracle>,
    /// Roles is a list of roles associated with the token, that will be converted to metadata in the SSH and X509 certificates issued to the user of the token
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    /// Spacelift allows the configuration of options specific to the "spacelift" join method.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spacelift: Option<TeleportProvisionTokenSpacelift>,
    /// SuggestedAgentMatcherLabels is a set of labels to be used by agents to match on resources. When an agent uses this token, the agent should monitor resources that match those labels. For databases, this means adding the labels to `db_service.resources.labels`. Currently, only node-join scripts create a configuration according to the suggestion.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suggested_agent_matcher_labels: Option<BTreeMap<String, serde_json::Value>>,
    /// SuggestedLabels is a set of labels that resources should set when using this token to enroll themselves in the cluster. Currently, only node-join scripts create a configuration according to the suggestion.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suggested_labels: Option<BTreeMap<String, serde_json::Value>>,
    /// TerraformCloud allows the configuration of options specific to the "terraform_cloud" join method.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub terraform_cloud: Option<TeleportProvisionTokenTerraformCloud>,
    /// TPM allows the configuration of options specific to the "tpm" join method.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tpm: Option<TeleportProvisionTokenTpm>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenAllow {
    /// AWSAccount is the AWS account ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_account: Option<String>,
    /// AWSARN is used for the IAM join method, the AWS identity of joining nodes must match this ARN. Supports wildcards "*" and "?".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_arn: Option<String>,
    /// AWSRegions is used for the EC2 join method and is a list of AWS regions a node is allowed to join from.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_regions: Option<Vec<String>>,
    /// AWSRole is used for the EC2 join method and is the ARN of the AWS role that the Auth Service will assume in order to call the ec2 API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_role: Option<String>,
}

/// Azure allows the configuration of options specific to the "azure" join method.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenAzure {
    /// Allow is a list of Rules, nodes using this token must match one allow rule to use this token.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<Vec<TeleportProvisionTokenAzureAllow>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenAzureAllow {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource_groups: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscription: Option<String>,
}

/// AzureDevops allows the configuration of options specific to the "azure_devops" join method.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenAzureDevops {
    /// Allow is a list of TokenRules, nodes using this token must match one allow rule to use this token. At least one allow rule must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<Vec<TeleportProvisionTokenAzureDevopsAllow>>,
    /// OrganizationID specifies the UUID of the Azure DevOps organization that this join token will grant access to. This is used to identify the correct issuer verification of the ID token. This is a required field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenAzureDevopsAllow {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub definition_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pipeline_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository_ref: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sub: Option<String>,
}

/// Bitbucket allows the configuration of options specific to the "bitbucket" join method.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenBitbucket {
    /// Allow is a list of Rules, nodes using this token must match one allow rule to use this token.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<Vec<TeleportProvisionTokenBitbucketAllow>>,
    /// Audience is a Bitbucket-specified audience value for this token. It is unique to each Bitbucket repository, and must be set to the value as written in the Pipelines -> OpenID Connect section of the repository settings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audience: Option<String>,
    /// IdentityProviderURL is a Bitbucket-specified issuer URL for incoming OIDC tokens. It is unique to each Bitbucket repository, and must be set to the value as written in the Pipelines -> OpenID Connect section of the repository settings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identity_provider_url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenBitbucketAllow {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub branch_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment_environment_uuid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository_uuid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workspace_uuid: Option<String>,
}

/// BoundKeypair allows the configuration of options specific to the "bound_keypair" join method.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenBoundKeypair {
    /// Onboarding contains parameters related to initial onboarding and keypair registration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub onboarding: Option<TeleportProvisionTokenBoundKeypairOnboarding>,
    /// Recovery contains parameters related to recovery after identity expiration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recovery: Option<TeleportProvisionTokenBoundKeypairRecovery>,
    /// RotateAfter is an optional timestamp that forces clients to perform a keypair rotation on the next join or recovery attempt after the given date. If `LastRotatedAt` is unset or before this timestamp, a rotation will be requested. It is recommended to set this value to the current timestamp if a rotation should be triggered on the next join attempt.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rotate_after: Option<String>,
}

/// Onboarding contains parameters related to initial onboarding and keypair registration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenBoundKeypairOnboarding {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub initial_public_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub must_register_before: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registration_secret: Option<String>,
}

/// Recovery contains parameters related to recovery after identity expiration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenBoundKeypairRecovery {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
}

/// CircleCI allows the configuration of options specific to the "circleci" join method.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenCircleci {
    /// Allow is a list of TokenRules, nodes using this token must match one allow rule to use this token.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<Vec<TeleportProvisionTokenCircleciAllow>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenCircleciAllow {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
}

/// GCP allows the configuration of options specific to the "gcp" join method.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenGcp {
    /// Allow is a list of Rules, nodes using this token must match one allow rule to use this token.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<Vec<TeleportProvisionTokenGcpAllow>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenGcpAllow {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub locations: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project_ids: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service_accounts: Option<Vec<String>>,
}

/// GitHub allows the configuration of options specific to the "github" join method.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenGithub {
    /// Allow is a list of TokenRules, nodes using this token must match one allow rule to use this token.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<Vec<TeleportProvisionTokenGithubAllow>>,
    /// EnterpriseServerHost allows joining from runners associated with a GitHub Enterprise Server instance. When unconfigured, tokens will be validated against github.com, but when configured to the host of a GHES instance, then the tokens will be validated against host.  This value should be the hostname of the GHES instance, and should not include the scheme or a path. The instance must be accessible over HTTPS at this hostname and the certificate must be trusted by the Auth Service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enterprise_server_host: Option<String>,
    /// EnterpriseSlug allows the slug of a GitHub Enterprise organisation to be included in the expected issuer of the OIDC tokens. This is for compatibility with the `include_enterprise_slug` option in GHE.  This field should be set to the slug of your enterprise if this is enabled. If this is not enabled, then this field must be left empty. This field cannot be specified if `enterprise_server_host` is specified.  See <https://docs.github.com/en/enterprise-cloud@latest/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#customizing-the-issuer-value-for-an-enterprise> for more information about customized issuer values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enterprise_slug: Option<String>,
    /// StaticJWKS disables fetching of the GHES signing keys via the JWKS/OIDC endpoints, and allows them to be directly specified. This allows joining from GitHub Actions in GHES instances that are not reachable by the Teleport Auth Service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub static_jwks: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenGithubAllow {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ref_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository_owner: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sub: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workflow: Option<String>,
}

/// GitLab allows the configuration of options specific to the "gitlab" join method.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenGitlab {
    /// Allow is a list of TokenRules, nodes using this token must match one allow rule to use this token.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<Vec<TeleportProvisionTokenGitlabAllow>>,
    /// Domain is the domain of your GitLab instance. This will default to `gitlab.com` - but can be set to the domain of your self-hosted GitLab e.g `gitlab.example.com`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    /// StaticJWKS disables fetching of the GitLab signing keys via the JWKS/OIDC endpoints, and allows them to be directly specified. This allows joining from GitLab CI instances that are not reachable by the Teleport Auth Service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub static_jwks: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenGitlabAllow {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ci_config_ref_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ci_config_sha: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment_tier: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment_protected: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pipeline_source: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project_visibility: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ref_protected: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ref_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sub: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user_email: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user_login: Option<String>,
}

/// Kubernetes allows the configuration of options specific to the "kubernetes" join method.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenKubernetes {
    /// Allow is a list of Rules, nodes using this token must match one allow rule to use this token.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<Vec<TeleportProvisionTokenKubernetesAllow>>,
    /// OIDCConfig configures the `oidc` type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oidc: Option<TeleportProvisionTokenKubernetesOidc>,
    /// StaticJWKS is the configuration specific to the `static_jwks` type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub static_jwks: Option<TeleportProvisionTokenKubernetesStaticJwks>,
    /// Type controls which behavior should be used for validating the Kubernetes Service Account token. Support values: - `in_cluster` - `static_jwks` - `oidc` If unset, this defaults to `in_cluster`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenKubernetesAllow {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service_account: Option<String>,
}

/// OIDCConfig configures the `oidc` type.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenKubernetesOidc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure_allow_http_issuer: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
}

/// StaticJWKS is the configuration specific to the `static_jwks` type.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenKubernetesStaticJwks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jwks: Option<String>,
}

/// Oracle allows the configuration of options specific to the "oracle" join method.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenOracle {
    /// Allow is a list of Rules, nodes using this token must match one allow rule to use this token.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<Vec<TeleportProvisionTokenOracleAllow>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenOracleAllow {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent_compartments: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tenancy: Option<String>,
}

/// Spacelift allows the configuration of options specific to the "spacelift" join method.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenSpacelift {
    /// Allow is a list of Rules, nodes using this token must match one allow rule to use this token.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<Vec<TeleportProvisionTokenSpaceliftAllow>>,
    /// EnableGlobMatching enables glob-style matching for the space_id and caller_id fields in the rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_glob_matching: Option<bool>,
    /// Hostname is the hostname of the Spacelift tenant that tokens will originate from. E.g `example.app.spacelift.io`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenSpaceliftAllow {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub caller_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub caller_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub space_id: Option<String>,
}

/// TerraformCloud allows the configuration of options specific to the "terraform_cloud" join method.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenTerraformCloud {
    /// Allow is a list of Rules, nodes using this token must match one allow rule to use this token.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<Vec<TeleportProvisionTokenTerraformCloudAllow>>,
    /// Audience is the JWT audience as configured in the TFC_WORKLOAD_IDENTITY_AUDIENCE(_$TAG) variable in Terraform Cloud. If unset, defaults to the Teleport cluster name. For example, if `TFC_WORKLOAD_IDENTITY_AUDIENCE_TELEPORT=foo` is set in Terraform Cloud, this value should be `foo`. If the variable is set to match the cluster name, it does not need to be set here.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audience: Option<String>,
    /// Hostname is the hostname of the Terraform Enterprise instance expected to issue JWTs allowed by this token. This may be unset for regular Terraform Cloud use, in which case it will be assumed to be `app.terraform.io`. Otherwise, it must both match the `iss` (issuer) field included in JWTs, and provide standard JWKS endpoints.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenTerraformCloudAllow {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub run_phase: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workspace_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workspace_name: Option<String>,
}

/// TPM allows the configuration of options specific to the "tpm" join method.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenTpm {
    /// Allow is a list of Rules, the presented delegated identity must match one allow rule to permit joining.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<Vec<TeleportProvisionTokenTpmAllow>>,
    /// EKCertAllowedCAs is a list of CA certificates that will be used to validate TPM EKCerts. When specified, joining TPMs must present an EKCert signed by one of the specified CAs. TPMs that do not present an EKCert will be not permitted to join. When unspecified, TPMs will be allowed to join with either an EKCert or an EKPubHash.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ekcert_allowed_cas: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenTpmAllow {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ek_certificate_serial: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ek_public_hash: Option<String>,
}

/// Status defines the observed state of the Teleport resource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TeleportProvisionTokenStatus {
    /// Conditions represent the latest available observations of an object's state
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "teleportResourceID")]
    pub teleport_resource_id: Option<i64>,
}

