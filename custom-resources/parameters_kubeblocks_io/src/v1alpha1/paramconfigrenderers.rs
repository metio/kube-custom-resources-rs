// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/apecloud/kubeblocks/parameters.kubeblocks.io/v1alpha1/paramconfigrenderers.yaml
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// ParamConfigRendererSpec defines the desired state of ParamConfigRenderer
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "parameters.kubeblocks.io", version = "v1alpha1", kind = "ParamConfigRenderer", plural = "paramconfigrenderers")]
#[kube(status = "ParamConfigRendererStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ParamConfigRendererSpec {
    /// Specifies the ComponentDefinition custom resource (CR) that defines the Component's characteristics and behavior.
    #[serde(rename = "componentDef")]
    pub component_def: String,
    /// Specifies the configuration files.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<Vec<ParamConfigRendererConfigs>>,
    /// Specifies the ParametersDefinition custom resource (CR) that defines the Component parameter's schema and behavior.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parametersDefs")]
    pub parameters_defs: Option<Vec<String>>,
    /// ServiceVersion specifies the version of the Service expected to be provisioned by this Component.
    /// The version should follow the syntax and semantics of the "Semantic Versioning" specification (http://semver.org/).
    /// If no version is specified, the latest available version will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceVersion")]
    pub service_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ParamConfigRendererConfigs {
    /// Specifies the format of the configuration file and any associated parameters that are specific to the chosen format.
    /// Supported formats include `ini`, `xml`, `yaml`, `json`, `hcl`, `dotenv`, `properties`, and `toml`.
    /// 
    /// 
    /// Each format may have its own set of parameters that can be configured.
    /// For instance, when using the `ini` format, you can specify the section name.
    /// 
    /// 
    /// Example:
    /// ```text
    /// fileFormatConfig:
    ///  format: ini
    ///  iniConfig:
    ///    sectionName: mysqld
    /// ```
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileFormatConfig")]
    pub file_format_config: Option<ParamConfigRendererConfigsFileFormatConfig>,
    /// Specifies the config file name in the config template.
    pub name: String,
    /// Specifies whether the configuration needs to be re-rendered after v-scale or h-scale operations to reflect changes.
    /// 
    /// 
    /// In some scenarios, the configuration may need to be updated to reflect the changes in resource allocation
    /// or cluster topology. Examples:
    /// 
    /// 
    /// - Redis: adjust maxmemory after v-scale operation.
    /// - MySQL: increase max connections after v-scale operation.
    /// - Zookeeper: update zoo.cfg with new node addresses after h-scale operation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reRenderResourceTypes")]
    pub re_render_resource_types: Option<Vec<String>>,
    /// Specifies the name of the referenced componentTemplateSpec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "templateName")]
    pub template_name: Option<String>,
}

/// Specifies the format of the configuration file and any associated parameters that are specific to the chosen format.
/// Supported formats include `ini`, `xml`, `yaml`, `json`, `hcl`, `dotenv`, `properties`, and `toml`.
/// 
/// 
/// Each format may have its own set of parameters that can be configured.
/// For instance, when using the `ini` format, you can specify the section name.
/// 
/// 
/// Example:
/// ```text
/// fileFormatConfig:
///  format: ini
///  iniConfig:
///    sectionName: mysqld
/// ```
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ParamConfigRendererConfigsFileFormatConfig {
    /// The config file format. Valid values are `ini`, `xml`, `yaml`, `json`,
    /// `hcl`, `dotenv`, `properties` and `toml`. Each format has its own characteristics and use cases.
    /// 
    /// 
    /// - ini: is a text-based content with a structure and syntax comprising key–value pairs for properties, reference wiki: https://en.wikipedia.org/wiki/INI_file
    /// - xml: refers to wiki: https://en.wikipedia.org/wiki/XML
    /// - yaml: supports for complex data types and structures.
    /// - json: refers to wiki: https://en.wikipedia.org/wiki/JSON
    /// - hcl: The HashiCorp Configuration Language (HCL) is a configuration language authored by HashiCorp, reference url: https://www.linode.com/docs/guides/introduction-to-hcl/
    /// - dotenv: is a plain text file with simple key–value pairs, reference wiki: https://en.wikipedia.org/wiki/Configuration_file#MS-DOS
    /// - properties: a file extension mainly used in Java, reference wiki: https://en.wikipedia.org/wiki/.properties
    /// - toml: refers to wiki: https://en.wikipedia.org/wiki/TOML
    /// - props-plus: a file extension mainly used in Java, supports CamelCase(e.g: brokerMaxConnectionsPerIp)
    pub format: ParamConfigRendererConfigsFileFormatConfigFormat,
    /// Holds options specific to the 'ini' file format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iniConfig")]
    pub ini_config: Option<ParamConfigRendererConfigsFileFormatConfigIniConfig>,
}

/// Specifies the format of the configuration file and any associated parameters that are specific to the chosen format.
/// Supported formats include `ini`, `xml`, `yaml`, `json`, `hcl`, `dotenv`, `properties`, and `toml`.
/// 
/// 
/// Each format may have its own set of parameters that can be configured.
/// For instance, when using the `ini` format, you can specify the section name.
/// 
/// 
/// Example:
/// ```text
/// fileFormatConfig:
///  format: ini
///  iniConfig:
///    sectionName: mysqld
/// ```
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ParamConfigRendererConfigsFileFormatConfigFormat {
    #[serde(rename = "xml")]
    Xml,
    #[serde(rename = "ini")]
    Ini,
    #[serde(rename = "yaml")]
    Yaml,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "hcl")]
    Hcl,
    #[serde(rename = "dotenv")]
    Dotenv,
    #[serde(rename = "toml")]
    Toml,
    #[serde(rename = "properties")]
    Properties,
    #[serde(rename = "redis")]
    Redis,
    #[serde(rename = "props-plus")]
    PropsPlus,
}

/// Holds options specific to the 'ini' file format.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ParamConfigRendererConfigsFileFormatConfigIniConfig {
    /// A string that describes the name of the ini section.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sectionName")]
    pub section_name: Option<String>,
}

/// ParamConfigRendererStatus defines the observed state of ParamConfigRenderer
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ParamConfigRendererStatus {
    /// Provides additional information about the current phase.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// The most recent generation number of the ParamsDesc object that has been observed by the controller.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// Specifies the status of the configuration template.
    /// When set to PDAvailablePhase, the ParamsDesc can be referenced by ComponentDefinition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<ParamConfigRendererStatusPhase>,
}

/// ParamConfigRendererStatus defines the observed state of ParamConfigRenderer
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ParamConfigRendererStatusPhase {
    Available,
    Unavailable,
    Deleting,
}

