// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/crossplane/crossplane/pkg.crossplane.io/v1/configurationrevisions.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// PackageRevisionSpec specifies the desired state of a PackageRevision.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "pkg.crossplane.io", version = "v1", kind = "ConfigurationRevision", plural = "configurationrevisions")]
#[kube(status = "ConfigurationRevisionStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ConfigurationRevisionSpec {
    /// Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects. May match selectors of replication controllers
    /// and services.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    /// DesiredState of the PackageRevision. Can be either Active or Inactive.
    #[serde(rename = "desiredState")]
    pub desired_state: String,
    /// IgnoreCrossplaneConstraints indicates to the package manager whether to
    /// honor Crossplane version constrains specified by the package.
    /// Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCrossplaneConstraints")]
    pub ignore_crossplane_constraints: Option<bool>,
    /// Package image used by install Pod to extract package contents.
    pub image: String,
    /// PackagePullPolicy defines the pull policy for the package. It is also
    /// applied to any images pulled for the package, such as a provider's
    /// controller image.
    /// Default is IfNotPresent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packagePullPolicy")]
    pub package_pull_policy: Option<String>,
    /// PackagePullSecrets are named secrets in the same namespace that can be
    /// used to fetch packages from private registries. They are also applied to
    /// any images pulled for the package, such as a provider's controller image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packagePullSecrets")]
    pub package_pull_secrets: Option<Vec<ConfigurationRevisionPackagePullSecrets>>,
    /// Revision number. Indicates when the revision will be garbage collected
    /// based on the parent's RevisionHistoryLimit.
    pub revision: i64,
    /// SkipDependencyResolution indicates to the package manager whether to skip
    /// resolving dependencies for a package. Setting this value to true may have
    /// unintended consequences.
    /// Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipDependencyResolution")]
    pub skip_dependency_resolution: Option<bool>,
}

/// LocalObjectReference contains enough information to let you locate the
/// referenced object inside the same namespace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ConfigurationRevisionPackagePullSecrets {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PackageRevisionStatus represents the observed state of a PackageRevision.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ConfigurationRevisionStatus {
    /// AppliedImageConfigRefs records any image configs that were applied in
    /// reconciling this revision, and what they were used for.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appliedImageConfigRefs")]
    pub applied_image_config_refs: Option<Vec<ConfigurationRevisionStatusAppliedImageConfigRefs>>,
    /// Capabilities of this package. Capabilities are opaque strings that
    /// may be meaningful to package consumers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<Vec<String>>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// Dependency information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "foundDependencies")]
    pub found_dependencies: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installedDependencies")]
    pub installed_dependencies: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invalidDependencies")]
    pub invalid_dependencies: Option<i64>,
    /// References to objects owned by PackageRevision.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectRefs")]
    pub object_refs: Option<Vec<ConfigurationRevisionStatusObjectRefs>>,
    /// ResolvedPackage is the name of the package that was installed. It may be
    /// different from spec.image if the package path was rewritten using an
    /// image config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resolvedImage")]
    pub resolved_image: Option<String>,
}

/// ImageConfigRef is a reference to an image config that indicates how the
/// referenced image config was used by the package manager.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ConfigurationRevisionStatusAppliedImageConfigRefs {
    /// Name is the name of the image config.
    pub name: String,
    /// Reason indicates what the image config was used for.
    pub reason: String,
}

/// A TypedReference refers to an object by Name, Kind, and APIVersion. It is
/// commonly used to reference cluster-scoped objects or objects where the
/// namespace is already known.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ConfigurationRevisionStatusObjectRefs {
    /// APIVersion of the referenced object.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Kind of the referenced object.
    pub kind: String,
    /// Name of the referenced object.
    pub name: String,
    /// UID of the referenced object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

