// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/opensearch-project/opensearch-k8s-operator/opensearch.opster.io/v1/opensearchcomponenttemplates.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "opensearch.opster.io", version = "v1", kind = "OpensearchComponentTemplate", plural = "opensearchcomponenttemplates")]
#[kube(namespaced)]
#[kube(status = "OpensearchComponentTemplateStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct OpensearchComponentTemplateSpec {
    /// Optional user metadata about the component template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "_meta")]
    pub meta: Option<serde_json::Value>,
    /// If true, then indices can be automatically created using this template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowAutoCreate")]
    pub allow_auto_create: Option<bool>,
    /// The name of the component template. Defaults to metadata.name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// LocalObjectReference contains enough information to let you locate the
    /// referenced object inside the same namespace.
    #[serde(rename = "opensearchCluster")]
    pub opensearch_cluster: OpensearchComponentTemplateOpensearchCluster,
    /// The template that should be applied
    pub template: OpensearchComponentTemplateTemplate,
    /// Version number used to manage the component template externally
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<i64>,
}

/// LocalObjectReference contains enough information to let you locate the
/// referenced object inside the same namespace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OpensearchComponentTemplateOpensearchCluster {
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// The template that should be applied
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OpensearchComponentTemplateTemplate {
    /// Aliases to add
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aliases: Option<BTreeMap<String, OpensearchComponentTemplateTemplateAliases>>,
    /// Mapping for fields in the index
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mappings: Option<serde_json::Value>,
    /// Configuration options for the index
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<serde_json::Value>,
}

/// Aliases to add
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OpensearchComponentTemplateTemplateAliases {
    /// The name of the alias.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
    /// Query used to limit documents the alias can access.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<serde_json::Value>,
    /// The name of the index that the alias points to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index: Option<String>,
    /// If true, the index is the write index for the alias
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isWriteIndex")]
    pub is_write_index: Option<bool>,
    /// Value used to route indexing and search operations to a specific shard.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub routing: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OpensearchComponentTemplateStatus {
    /// Name of the currently managed component template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "componentTemplateName")]
    pub component_template_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "existingComponentTemplate")]
    pub existing_component_template: Option<bool>,
    /// UID is a type that holds unique ID values, including UUIDs.  Because we
    /// don't ONLY use UUIDs, this is an alias to string.  Being a type captures
    /// intent and helps make sure that UIDs and names do not get conflated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedCluster")]
    pub managed_cluster: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

