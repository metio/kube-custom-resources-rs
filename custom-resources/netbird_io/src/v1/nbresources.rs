// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/netbirdio/kubernetes-operator/netbird.io/v1/nbresources.yaml
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// NBResourceSpec defines the desired state of NBResource.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "netbird.io", version = "v1", kind = "NBResource", plural = "nbresources")]
#[kube(namespaced)]
#[kube(status = "NBResourceStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct NBResourceSpec {
    pub address: String,
    pub groups: Vec<String>,
    pub name: String,
    #[serde(rename = "networkID")]
    pub network_id: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyFriendlyName")]
    pub policy_friendly_name: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyName")]
    pub policy_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policySourceGroups")]
    pub policy_source_groups: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpPorts")]
    pub tcp_ports: Option<Vec<i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "udpPorts")]
    pub udp_ports: Option<Vec<i64>>,
}

/// NBResourceStatus defines the observed state of NBResource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NBResourceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkResourceID")]
    pub network_resource_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyFriendlyName")]
    pub policy_friendly_name: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyName")]
    pub policy_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyNameMapping")]
    pub policy_name_mapping: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policySourceGroups")]
    pub policy_source_groups: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpPorts")]
    pub tcp_ports: Option<Vec<i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "udpPorts")]
    pub udp_ports: Option<Vec<i64>>,
}

