// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/netbirdio/kubernetes-operator/netbird.io/v1/nbsetupkeys.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// NBSetupKeySpec defines the desired state of NBSetupKey.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "netbird.io", version = "v1", kind = "NBSetupKey", plural = "nbsetupkeys")]
#[kube(namespaced)]
#[kube(status = "NbSetupKeyStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct NbSetupKeySpec {
    /// ManagementURL optional, override operator management URL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementURL")]
    pub management_url: Option<String>,
    /// SecretKeyRef is a reference to the secret containing the setup key
    #[serde(rename = "secretKeyRef")]
    pub secret_key_ref: NbSetupKeySecretKeyRef,
}

/// SecretKeyRef is a reference to the secret containing the setup key
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NbSetupKeySecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// NBSetupKeyStatus defines the observed state of NBSetupKey.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NbSetupKeyStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
}

