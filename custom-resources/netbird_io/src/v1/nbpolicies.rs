// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/netbirdio/kubernetes-operator/netbird.io/v1/nbpolicies.yaml
// kopium version: 0.22.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// NBPolicySpec defines the desired state of NBPolicy.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "netbird.io", version = "v1", kind = "NBPolicy", plural = "nbpolicies")]
#[kube(status = "NBPolicyStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct NBPolicySpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bidirectional: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationGroups")]
    pub destination_groups: Option<Vec<String>>,
    /// Name Policy name
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceGroups")]
    pub source_groups: Option<Vec<String>>,
}

/// NBPolicyStatus defines the observed state of NBPolicy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NBPolicyStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastUpdatedAt")]
    pub last_updated_at: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedServiceList")]
    pub managed_service_list: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpPolicyID")]
    pub tcp_policy_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "udpPolicyID")]
    pub udp_policy_id: Option<String>,
}

