// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/external-secrets/external-secrets/generators.external-secrets.io/v1alpha1/acraccesstokens.yaml
// kopium version: 0.22.4

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// ACRAccessTokenSpec defines how to generate the access token
/// e.g. how to authenticate and which registry to use.
/// see: <https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md#overview>
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "generators.external-secrets.io", version = "v1alpha1", kind = "ACRAccessToken", plural = "acraccesstokens")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct AcrAccessTokenSpec {
    pub auth: AcrAccessTokenAuth,
    /// EnvironmentType specifies the Azure cloud environment endpoints to use for
    /// connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint.
    /// The following endpoints are available, also see here: <https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152>
    /// PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentType")]
    pub environment_type: Option<AcrAccessTokenEnvironmentType>,
    /// the domain name of the ACR registry
    /// e.g. foobarexample.azurecr.io
    pub registry: String,
    /// Define the scope for the access token, e.g. pull/push access for a repository.
    /// if not provided it will return a refresh token that has full scope.
    /// Note: you need to pin it down to the repository level, there is no wildcard available.
    /// 
    /// examples:
    /// repository:my-repository:pull,push
    /// repository:my-repository:pull
    /// 
    /// see docs for details: <https://docs.docker.com/registry/spec/auth/scope/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tenantId")]
    pub tenant_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AcrAccessTokenAuth {
    /// ManagedIdentity uses Azure Managed Identity to authenticate with Azure.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedIdentity")]
    pub managed_identity: Option<AcrAccessTokenAuthManagedIdentity>,
    /// ServicePrincipal uses Azure Service Principal credentials to authenticate with Azure.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servicePrincipal")]
    pub service_principal: Option<AcrAccessTokenAuthServicePrincipal>,
    /// WorkloadIdentity uses Azure Workload Identity to authenticate with Azure.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workloadIdentity")]
    pub workload_identity: Option<AcrAccessTokenAuthWorkloadIdentity>,
}

/// ManagedIdentity uses Azure Managed Identity to authenticate with Azure.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AcrAccessTokenAuthManagedIdentity {
    /// If multiple Managed Identity is assigned to the pod, you can select the one to be used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityId")]
    pub identity_id: Option<String>,
}

/// ServicePrincipal uses Azure Service Principal credentials to authenticate with Azure.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AcrAccessTokenAuthServicePrincipal {
    /// Configuration used to authenticate with Azure using static
    /// credentials stored in a Kind=Secret.
    #[serde(rename = "secretRef")]
    pub secret_ref: AcrAccessTokenAuthServicePrincipalSecretRef,
}

/// Configuration used to authenticate with Azure using static
/// credentials stored in a Kind=Secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AcrAccessTokenAuthServicePrincipalSecretRef {
    /// The Azure clientId of the service principle used for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<AcrAccessTokenAuthServicePrincipalSecretRefClientId>,
    /// The Azure ClientSecret of the service principle used for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSecret")]
    pub client_secret: Option<AcrAccessTokenAuthServicePrincipalSecretRefClientSecret>,
}

/// The Azure clientId of the service principle used for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AcrAccessTokenAuthServicePrincipalSecretRefClientId {
    /// A key in the referenced Secret.
    /// Some instances of this field may be defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The namespace of the Secret resource being referred to.
    /// Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// The Azure ClientSecret of the service principle used for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AcrAccessTokenAuthServicePrincipalSecretRefClientSecret {
    /// A key in the referenced Secret.
    /// Some instances of this field may be defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The namespace of the Secret resource being referred to.
    /// Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// WorkloadIdentity uses Azure Workload Identity to authenticate with Azure.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AcrAccessTokenAuthWorkloadIdentity {
    /// ServiceAccountRef specified the service account
    /// that should be used when authenticating with WorkloadIdentity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountRef")]
    pub service_account_ref: Option<AcrAccessTokenAuthWorkloadIdentityServiceAccountRef>,
}

/// ServiceAccountRef specified the service account
/// that should be used when authenticating with WorkloadIdentity.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AcrAccessTokenAuthWorkloadIdentityServiceAccountRef {
    /// Audience specifies the `aud` claim for the service account token
    /// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
    /// then this audiences will be appended to the list
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    /// The name of the ServiceAccount resource being referred to.
    pub name: String,
    /// Namespace of the resource being referred to.
    /// Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// ACRAccessTokenSpec defines how to generate the access token
/// e.g. how to authenticate and which registry to use.
/// see: <https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md#overview>
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum AcrAccessTokenEnvironmentType {
    PublicCloud,
    #[serde(rename = "USGovernmentCloud")]
    UsGovernmentCloud,
    ChinaCloud,
    GermanCloud,
    AzureStackCloud,
}

