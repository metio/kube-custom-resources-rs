// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/external-secrets/external-secrets/generators.external-secrets.io/v1alpha1/githubaccesstokens.yaml
// kopium version: 0.22.4

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "generators.external-secrets.io", version = "v1alpha1", kind = "GithubAccessToken", plural = "githubaccesstokens")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct GithubAccessTokenSpec {
    #[serde(rename = "appID")]
    pub app_id: String,
    /// Auth configures how ESO authenticates with a Github instance.
    pub auth: GithubAccessTokenAuth,
    #[serde(rename = "installID")]
    pub install_id: String,
    /// Map of permissions the token will have. If omitted, defaults to all permissions the GitHub App has.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<BTreeMap<String, String>>,
    /// List of repositories the token will have access to. If omitted, defaults to all repositories the GitHub App
    /// is installed to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repositories: Option<Vec<String>>,
    /// URL configures the Github instance URL. Defaults to <https://github.com/.>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// Auth configures how ESO authenticates with a Github instance.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GithubAccessTokenAuth {
    #[serde(rename = "privateKey")]
    pub private_key: GithubAccessTokenAuthPrivateKey,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GithubAccessTokenAuthPrivateKey {
    /// A reference to a specific 'key' within a Secret resource.
    /// In some instances, `key` is a required field.
    #[serde(rename = "secretRef")]
    pub secret_ref: GithubAccessTokenAuthPrivateKeySecretRef,
}

/// A reference to a specific 'key' within a Secret resource.
/// In some instances, `key` is a required field.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GithubAccessTokenAuthPrivateKeySecretRef {
    /// A key in the referenced Secret.
    /// Some instances of this field may be defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The namespace of the Secret resource being referred to.
    /// Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

