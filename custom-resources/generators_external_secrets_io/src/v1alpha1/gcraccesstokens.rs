// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/external-secrets/external-secrets/generators.external-secrets.io/v1alpha1/gcraccesstokens.yaml
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "generators.external-secrets.io", version = "v1alpha1", kind = "GCRAccessToken", plural = "gcraccesstokens")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct GCRAccessTokenSpec {
    /// Auth defines the means for authenticating with GCP
    pub auth: GCRAccessTokenAuth,
    /// ProjectID defines which project to use to authenticate with
    #[serde(rename = "projectID")]
    pub project_id: String,
}

/// Auth defines the means for authenticating with GCP
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GCRAccessTokenAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<GCRAccessTokenAuthSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workloadIdentity")]
    pub workload_identity: Option<GCRAccessTokenAuthWorkloadIdentity>,
    /// GCPWorkloadIdentityFederation holds the configurations required for generating federated access tokens.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workloadIdentityFederation")]
    pub workload_identity_federation: Option<GCRAccessTokenAuthWorkloadIdentityFederation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GCRAccessTokenAuthSecretRef {
    /// The SecretAccessKey is used for authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKeySecretRef")]
    pub secret_access_key_secret_ref: Option<GCRAccessTokenAuthSecretRefSecretAccessKeySecretRef>,
}

/// The SecretAccessKey is used for authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GCRAccessTokenAuthSecretRefSecretAccessKeySecretRef {
    /// A key in the referenced Secret.
    /// Some instances of this field may be defaulted, in others it may be required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The name of the Secret resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The namespace of the Secret resource being referred to.
    /// Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GCRAccessTokenAuthWorkloadIdentity {
    #[serde(rename = "clusterLocation")]
    pub cluster_location: String,
    #[serde(rename = "clusterName")]
    pub cluster_name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterProjectID")]
    pub cluster_project_id: Option<String>,
    /// A reference to a ServiceAccount resource.
    #[serde(rename = "serviceAccountRef")]
    pub service_account_ref: GCRAccessTokenAuthWorkloadIdentityServiceAccountRef,
}

/// A reference to a ServiceAccount resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GCRAccessTokenAuthWorkloadIdentityServiceAccountRef {
    /// Audience specifies the `aud` claim for the service account token
    /// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
    /// then this audiences will be appended to the list
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    /// The name of the ServiceAccount resource being referred to.
    pub name: String,
    /// Namespace of the resource being referred to.
    /// Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// GCPWorkloadIdentityFederation holds the configurations required for generating federated access tokens.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GCRAccessTokenAuthWorkloadIdentityFederation {
    /// audience is the Secure Token Service (STS) audience which contains the resource name for the workload identity pool and the provider identifier in that pool.
    /// If specified, Audience found in the external account credential config will be overridden with the configured value.
    /// audience must be provided when serviceAccountRef or awsSecurityCredentials is configured.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audience: Option<String>,
    /// awsSecurityCredentials is for configuring AWS region and credentials to use for obtaining the access token,
    /// when using the AWS metadata server is not an option.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsSecurityCredentials")]
    pub aws_security_credentials: Option<GCRAccessTokenAuthWorkloadIdentityFederationAwsSecurityCredentials>,
    /// credConfig holds the configmap reference containing the GCP external account credential configuration in JSON format and the key name containing the json data.
    /// For using Kubernetes cluster as the identity provider, use serviceAccountRef instead. Operators mounted serviceaccount token cannot be used as the token source, instead
    /// serviceAccountRef must be used by providing operators service account details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credConfig")]
    pub cred_config: Option<GCRAccessTokenAuthWorkloadIdentityFederationCredConfig>,
    /// externalTokenEndpoint is the endpoint explicitly set up to provide tokens, which will be matched against the
    /// credential_source.url in the provided credConfig. This field is merely to double-check the external token source
    /// URL is having the expected value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalTokenEndpoint")]
    pub external_token_endpoint: Option<String>,
    /// serviceAccountRef is the reference to the kubernetes ServiceAccount to be used for obtaining the tokens,
    /// when Kubernetes is configured as provider in workload identity pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountRef")]
    pub service_account_ref: Option<GCRAccessTokenAuthWorkloadIdentityFederationServiceAccountRef>,
}

/// awsSecurityCredentials is for configuring AWS region and credentials to use for obtaining the access token,
/// when using the AWS metadata server is not an option.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GCRAccessTokenAuthWorkloadIdentityFederationAwsSecurityCredentials {
    /// awsCredentialsSecretRef is the reference to the secret which holds the AWS credentials.
    /// Secret should be created with below names for keys
    /// - aws_access_key_id: Access Key ID, which is the unique identifier for the AWS account or the IAM user.
    /// - aws_secret_access_key: Secret Access Key, which is used to authenticate requests made to AWS services.
    /// - aws_session_token: Session Token, is the short-lived token to authenticate requests made to AWS services.
    #[serde(rename = "awsCredentialsSecretRef")]
    pub aws_credentials_secret_ref: GCRAccessTokenAuthWorkloadIdentityFederationAwsSecurityCredentialsAwsCredentialsSecretRef,
    /// region is for configuring the AWS region to be used.
    pub region: String,
}

/// awsCredentialsSecretRef is the reference to the secret which holds the AWS credentials.
/// Secret should be created with below names for keys
/// - aws_access_key_id: Access Key ID, which is the unique identifier for the AWS account or the IAM user.
/// - aws_secret_access_key: Secret Access Key, which is used to authenticate requests made to AWS services.
/// - aws_session_token: Session Token, is the short-lived token to authenticate requests made to AWS services.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GCRAccessTokenAuthWorkloadIdentityFederationAwsSecurityCredentialsAwsCredentialsSecretRef {
    /// name of the secret.
    pub name: String,
    /// namespace in which the secret exists. If empty, secret will looked up in local namespace.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// credConfig holds the configmap reference containing the GCP external account credential configuration in JSON format and the key name containing the json data.
/// For using Kubernetes cluster as the identity provider, use serviceAccountRef instead. Operators mounted serviceaccount token cannot be used as the token source, instead
/// serviceAccountRef must be used by providing operators service account details.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GCRAccessTokenAuthWorkloadIdentityFederationCredConfig {
    /// key name holding the external account credential config.
    pub key: String,
    /// name of the configmap.
    pub name: String,
    /// namespace in which the configmap exists. If empty, configmap will looked up in local namespace.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// serviceAccountRef is the reference to the kubernetes ServiceAccount to be used for obtaining the tokens,
/// when Kubernetes is configured as provider in workload identity pool.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GCRAccessTokenAuthWorkloadIdentityFederationServiceAccountRef {
    /// Audience specifies the `aud` claim for the service account token
    /// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
    /// then this audiences will be appended to the list
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    /// The name of the ServiceAccount resource being referred to.
    pub name: String,
    /// Namespace of the resource being referred to.
    /// Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

