// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/fluid-cloudnative/fluid/data.fluid.io/v1alpha1/datasets.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "data.fluid.io", version = "v1alpha1", kind = "Dataset", plural = "datasets")]
#[kube(namespaced)]
#[kube(status = "DatasetStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct DatasetSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataRestoreLocation")]
    pub data_restore_location: Option<DatasetDataRestoreLocation>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mounts: Option<Vec<DatasetMounts>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinity")]
    pub node_affinity: Option<DatasetNodeAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<DatasetOwner>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub placement: Option<DatasetPlacement>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub runtimes: Option<Vec<DatasetRuntimes>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sharedEncryptOptions")]
    pub shared_encrypt_options: Option<Vec<DatasetSharedEncryptOptions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sharedOptions")]
    pub shared_options: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<DatasetTolerations>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetDataRestoreLocation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeName")]
    pub node_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetMounts {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptOptions")]
    pub encrypt_options: Option<Vec<DatasetMountsEncryptOptions>>,
    #[serde(rename = "mountPoint")]
    pub mount_point: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shared: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetMountsEncryptOptions {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatasetMountsEncryptOptionsValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetMountsEncryptOptionsValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatasetMountsEncryptOptionsValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetMountsEncryptOptionsValueFromSecretKeyRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetNodeAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required: Option<DatasetNodeAffinityRequired>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetNodeAffinityRequired {
    #[serde(rename = "nodeSelectorTerms")]
    pub node_selector_terms: Vec<DatasetNodeAffinityRequiredNodeSelectorTerms>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetNodeAffinityRequiredNodeSelectorTerms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<DatasetNodeAffinityRequiredNodeSelectorTermsMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<DatasetNodeAffinityRequiredNodeSelectorTermsMatchFields>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetNodeAffinityRequiredNodeSelectorTermsMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetNodeAffinityRequiredNodeSelectorTermsMatchFields {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetOwner {
    pub gid: i64,
    pub group: String,
    pub uid: i64,
    pub user: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DatasetPlacement {
    Exclusive,
    #[serde(rename = "")]
    KopiumEmpty,
    Shared,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetRuntimes {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterReplicas")]
    pub master_replicas: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetSharedEncryptOptions {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatasetSharedEncryptOptionsValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetSharedEncryptOptionsValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatasetSharedEncryptOptionsValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetSharedEncryptOptionsValueFromSecretKeyRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetTolerations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheStates")]
    pub cache_states: Option<BTreeMap<String, String>>,
    pub conditions: Vec<Condition>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataBackupRef")]
    pub data_backup_ref: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataLoadRef")]
    pub data_load_ref: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetRef")]
    pub dataset_ref: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileNum")]
    pub file_num: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hcfs: Option<DatasetStatusHcfs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mounts: Option<Vec<DatasetStatusMounts>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operationRef")]
    pub operation_ref: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub runtimes: Option<Vec<DatasetStatusRuntimes>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ufsTotal")]
    pub ufs_total: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetStatusHcfs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "underlayerFileSystemVersion")]
    pub underlayer_file_system_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetStatusMounts {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptOptions")]
    pub encrypt_options: Option<Vec<DatasetStatusMountsEncryptOptions>>,
    #[serde(rename = "mountPoint")]
    pub mount_point: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shared: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetStatusMountsEncryptOptions {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<DatasetStatusMountsEncryptOptionsValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetStatusMountsEncryptOptionsValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<DatasetStatusMountsEncryptOptionsValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetStatusMountsEncryptOptionsValueFromSecretKeyRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatasetStatusRuntimes {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterReplicas")]
    pub master_replicas: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

