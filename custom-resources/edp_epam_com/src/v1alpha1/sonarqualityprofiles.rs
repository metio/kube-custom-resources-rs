// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/epam/edp-sonar-operator/edp.epam.com/v1alpha1/sonarqualityprofiles.yaml
// kopium version: 0.22.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// SonarQualityProfileSpec defines the desired state of SonarQualityProfile
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "edp.epam.com", version = "v1alpha1", kind = "SonarQualityProfile", plural = "sonarqualityprofiles")]
#[kube(namespaced)]
#[kube(status = "SonarQualityProfileStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct SonarQualityProfileSpec {
    /// Default is a flag to set quality profile as default.
    /// Only one quality profile can be default.
    /// If several quality profiles have default flag, the random one will be chosen.
    /// Default quality profile can't be deleted. You need to set another quality profile as default before.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default: Option<bool>,
    /// Language is a language of quality profile.
    pub language: String,
    /// Name is a name of quality profile.
    /// Name should be unique across all quality profiles.
    /// Don't change this field after creation otherwise quality profile will be recreated.
    pub name: String,
    /// Rules is a list of rules for quality profile.
    /// Key is a rule key, value is a rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rules: Option<BTreeMap<String, SonarQualityProfileRules>>,
    /// SonarRef is a reference to Sonar custom resource.
    #[serde(rename = "sonarRef")]
    pub sonar_ref: SonarQualityProfileSonarRef,
}

/// Rules is a list of rules for quality profile.
/// Key is a rule key, value is a rule.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SonarQualityProfileRules {
    /// Params is as semicolon list of key=value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub params: Option<String>,
    /// Severity is a severity of rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub severity: Option<SonarQualityProfileRulesSeverity>,
}

/// Rules is a list of rules for quality profile.
/// Key is a rule key, value is a rule.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SonarQualityProfileRulesSeverity {
    #[serde(rename = "INFO")]
    Info,
    #[serde(rename = "MINOR")]
    Minor,
    #[serde(rename = "MAJOR")]
    Major,
    #[serde(rename = "CRITICAL")]
    Critical,
    #[serde(rename = "BLOCKER")]
    Blocker,
}

/// SonarRef is a reference to Sonar custom resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SonarQualityProfileSonarRef {
    /// Kind specifies the kind of the Sonar resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name specifies the name of the Sonar resource.
    pub name: String,
}

/// SonarQualityProfileStatus defines the observed state of SonarQualityProfile
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SonarQualityProfileStatus {
    /// Error is an error message if something went wrong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// Value is a status of the quality profile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

