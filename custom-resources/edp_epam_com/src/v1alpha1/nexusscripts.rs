// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/epam/edp-nexus-operator/edp.epam.com/v1alpha1/nexusscripts.yaml
// kopium version: 0.22.4

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// NexusScriptSpec defines the desired state of NexusScript.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "edp.epam.com", version = "v1alpha1", kind = "NexusScript", plural = "nexusscripts")]
#[kube(namespaced)]
#[kube(status = "NexusScriptStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct NexusScriptSpec {
    /// Content is the content of the script.
    pub content: String,
    /// Execute defines if script should be executed after creation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub execute: Option<bool>,
    /// Name is the id of the script.
    /// Name should be unique across all scripts.
    pub name: String,
    /// NexusRef is a reference to Nexus custom resource.
    #[serde(rename = "nexusRef")]
    pub nexus_ref: NexusScriptNexusRef,
    /// Payload is the payload of the script.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
}

/// NexusRef is a reference to Nexus custom resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusScriptNexusRef {
    /// Kind specifies the kind of the Nexus resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name specifies the name of the Nexus resource.
    pub name: String,
}

/// NexusScriptStatus defines the observed state of NexusScript.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusScriptStatus {
    /// Error is an error message if something went wrong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// Executed defines if script was executed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub executed: Option<bool>,
    /// Value is a status of the script.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

