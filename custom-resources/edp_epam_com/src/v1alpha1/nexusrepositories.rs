// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/epam/edp-nexus-operator/edp.epam.com/v1alpha1/nexusrepositories.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// NexusRepositorySpec defines the desired state of NexusRepository.
/// It should contain only one format of repository - go, maven, npm, etc. and only one type - proxy, hosted or group.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "edp.epam.com", version = "v1alpha1", kind = "NexusRepository", plural = "nexusrepositories")]
#[kube(namespaced)]
#[kube(status = "NexusRepositoryStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct NexusRepositorySpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apt: Option<NexusRepositoryApt>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bower: Option<NexusRepositoryBower>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cocoapods: Option<NexusRepositoryCocoapods>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conan: Option<NexusRepositoryConan>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conda: Option<NexusRepositoryConda>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub docker: Option<NexusRepositoryDocker>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gitLfs")]
    pub git_lfs: Option<NexusRepositoryGitLfs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub go: Option<NexusRepositoryGo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<NexusRepositoryHelm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maven: Option<NexusRepositoryMaven>,
    /// NexusRef is a reference to Nexus custom resource.
    #[serde(rename = "nexusRef")]
    pub nexus_ref: NexusRepositoryNexusRef,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub npm: Option<NexusRepositoryNpm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nuget: Option<NexusRepositoryNuget>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub p2: Option<NexusRepositoryP2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pypi: Option<NexusRepositoryPypi>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub r: Option<NexusRepositoryR>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub raw: Option<NexusRepositoryRaw>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rubyGems")]
    pub ruby_gems: Option<NexusRepositoryRubyGems>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub yum: Option<NexusRepositoryYum>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryApt {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosted: Option<NexusRepositoryAptHosted>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<NexusRepositoryAptProxy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryAptHosted {
    /// Apt contains data of hosted repositories of format Apt.
    pub apt: NexusRepositoryAptHostedApt,
    /// AptSigning contains signing data of hosted repositores of format Apt.
    #[serde(rename = "aptSigning")]
    pub apt_signing: NexusRepositoryAptHostedAptSigning,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryAptHostedCleanup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<NexusRepositoryAptHostedComponent>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryAptHostedStorage>,
}

/// Apt contains data of hosted repositories of format Apt.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryAptHostedApt {
    /// Distribution to fetch
    pub distribution: String,
}

/// AptSigning contains signing data of hosted repositores of format Apt.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryAptHostedAptSigning {
    /// PGP signing key pair (armored private key e.g. gpg --export-secret-key --armor)
    pub keypair: String,
    /// Passphrase to access PGP signing key
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passphrase: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryAptHostedCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryAptHostedComponent {
    /// Components in this repository count as proprietary for namespace conflict attacks (requires Sonatype Nexus Firewall)
    #[serde(rename = "proprietaryComponents")]
    pub proprietary_components: bool,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryAptHostedStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
    /// WritePolicy controls if deployments of and updates to assets are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writePolicy")]
    pub write_policy: Option<NexusRepositoryAptHostedStorageWritePolicy>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryAptHostedStorageWritePolicy {
    #[serde(rename = "ALLOW")]
    Allow,
    #[serde(rename = "ALLOW_ONCE")]
    AllowOnce,
    #[serde(rename = "DENY")]
    Deny,
    #[serde(rename = "REPLICATION_ONLY")]
    ReplicationOnly,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryAptProxy {
    /// Apt configuration.
    pub apt: NexusRepositoryAptProxyApt,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryAptProxyCleanup>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpClient")]
    pub http_client: Option<NexusRepositoryAptProxyHttpClient>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Negative cache configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCache")]
    pub negative_cache: Option<NexusRepositoryAptProxyNegativeCache>,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Proxy configuration.
    pub proxy: NexusRepositoryAptProxyProxy,
    /// The name of the routing rule assigned to this repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingRule")]
    pub routing_rule: Option<String>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryAptProxyStorage>,
}

/// Apt configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryAptProxyApt {
    /// Distribution to fetch.
    pub distribution: String,
    /// Whether this repository is flat.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flat: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryAptProxyCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryAptProxyHttpClient {
    /// HTTPClientAuthentication contains HTTP client authentication configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<NexusRepositoryAptProxyHttpClientAuthentication>,
    /// Auto-block outbound connections on the repository if remote peer is detected as unreachable/unresponsive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBlock")]
    pub auto_block: Option<bool>,
    /// Block outbound connections on the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocked: Option<bool>,
    /// HTTPClientConnection contains HTTP client connection configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<NexusRepositoryAptProxyHttpClientConnection>,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryAptProxyHttpClientAuthentication {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmDomain")]
    pub ntlm_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmHost")]
    pub ntlm_host: Option<String>,
    /// Password for authentication.
    pub password: String,
    /// Type of authentication to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<NexusRepositoryAptProxyHttpClientAuthenticationType>,
    /// Username for authentication.
    pub username: String,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryAptProxyHttpClientAuthenticationType {
    #[serde(rename = "username")]
    Username,
    #[serde(rename = "ntlm")]
    Ntlm,
}

/// HTTPClientConnection contains HTTP client connection configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryAptProxyHttpClientConnection {
    /// Whether to enable redirects to the same location (required by some servers)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCircularRedirects")]
    pub enable_circular_redirects: Option<bool>,
    /// Whether to allow cookies to be stored and used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCookies")]
    pub enable_cookies: Option<bool>,
    /// Total retries if the initial connection attempt suffers a timeout
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    /// Seconds to wait for activity before stopping and retrying the connection",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    /// Use certificates stored in the Nexus Repository Manager truststore to connect to external systems
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTrustStore")]
    pub use_trust_store: Option<bool>,
    /// Custom fragment to append to User-Agent header in HTTP requests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userAgentSuffix")]
    pub user_agent_suffix: Option<String>,
}

/// Negative cache configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryAptProxyNegativeCache {
    /// Whether to cache responses for content not present in the proxied repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// How long to cache the fact that a file was not found in the repository (in minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeToLive")]
    pub time_to_live: Option<i64>,
}

/// Proxy configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryAptProxyProxy {
    /// How long to cache artifacts before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentMaxAge")]
    pub content_max_age: Option<i64>,
    /// How long to cache metadata before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataMaxAge")]
    pub metadata_max_age: Option<i64>,
    /// Location of the remote repository being proxied.
    #[serde(rename = "remoteUrl")]
    pub remote_url: String,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryAptProxyStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryBower {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<NexusRepositoryBowerGroup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosted: Option<NexusRepositoryBowerHosted>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<NexusRepositoryBowerProxy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryBowerGroup {
    /// Group configuration.
    pub group: NexusRepositoryBowerGroupGroup,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryBowerGroupStorage>,
}

/// Group configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryBowerGroupGroup {
    /// Member repositories' names.
    #[serde(rename = "memberNames")]
    pub member_names: Vec<String>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryBowerGroupStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryBowerHosted {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryBowerHostedCleanup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<NexusRepositoryBowerHostedComponent>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryBowerHostedStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryBowerHostedCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryBowerHostedComponent {
    /// Components in this repository count as proprietary for namespace conflict attacks (requires Sonatype Nexus Firewall)
    #[serde(rename = "proprietaryComponents")]
    pub proprietary_components: bool,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryBowerHostedStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
    /// WritePolicy controls if deployments of and updates to assets are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writePolicy")]
    pub write_policy: Option<NexusRepositoryBowerHostedStorageWritePolicy>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryBowerHostedStorageWritePolicy {
    #[serde(rename = "ALLOW")]
    Allow,
    #[serde(rename = "ALLOW_ONCE")]
    AllowOnce,
    #[serde(rename = "DENY")]
    Deny,
    #[serde(rename = "REPLICATION_ONLY")]
    ReplicationOnly,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryBowerProxy {
    pub bower: NexusRepositoryBowerProxyBower,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryBowerProxyCleanup>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpClient")]
    pub http_client: Option<NexusRepositoryBowerProxyHttpClient>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Negative cache configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCache")]
    pub negative_cache: Option<NexusRepositoryBowerProxyNegativeCache>,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Proxy configuration.
    pub proxy: NexusRepositoryBowerProxyProxy,
    /// The name of the routing rule assigned to this repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingRule")]
    pub routing_rule: Option<String>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryBowerProxyStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryBowerProxyBower {
    /// Whether to force Bower to retrieve packages through this proxy repository
    #[serde(rename = "rewritePackageUrls")]
    pub rewrite_package_urls: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryBowerProxyCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryBowerProxyHttpClient {
    /// HTTPClientAuthentication contains HTTP client authentication configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<NexusRepositoryBowerProxyHttpClientAuthentication>,
    /// Auto-block outbound connections on the repository if remote peer is detected as unreachable/unresponsive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBlock")]
    pub auto_block: Option<bool>,
    /// Block outbound connections on the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocked: Option<bool>,
    /// HTTPClientConnection contains HTTP client connection configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<NexusRepositoryBowerProxyHttpClientConnection>,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryBowerProxyHttpClientAuthentication {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmDomain")]
    pub ntlm_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmHost")]
    pub ntlm_host: Option<String>,
    /// Password for authentication.
    pub password: String,
    /// Type of authentication to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<NexusRepositoryBowerProxyHttpClientAuthenticationType>,
    /// Username for authentication.
    pub username: String,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryBowerProxyHttpClientAuthenticationType {
    #[serde(rename = "username")]
    Username,
    #[serde(rename = "ntlm")]
    Ntlm,
}

/// HTTPClientConnection contains HTTP client connection configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryBowerProxyHttpClientConnection {
    /// Whether to enable redirects to the same location (required by some servers)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCircularRedirects")]
    pub enable_circular_redirects: Option<bool>,
    /// Whether to allow cookies to be stored and used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCookies")]
    pub enable_cookies: Option<bool>,
    /// Total retries if the initial connection attempt suffers a timeout
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    /// Seconds to wait for activity before stopping and retrying the connection",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    /// Use certificates stored in the Nexus Repository Manager truststore to connect to external systems
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTrustStore")]
    pub use_trust_store: Option<bool>,
    /// Custom fragment to append to User-Agent header in HTTP requests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userAgentSuffix")]
    pub user_agent_suffix: Option<String>,
}

/// Negative cache configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryBowerProxyNegativeCache {
    /// Whether to cache responses for content not present in the proxied repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// How long to cache the fact that a file was not found in the repository (in minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeToLive")]
    pub time_to_live: Option<i64>,
}

/// Proxy configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryBowerProxyProxy {
    /// How long to cache artifacts before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentMaxAge")]
    pub content_max_age: Option<i64>,
    /// How long to cache metadata before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataMaxAge")]
    pub metadata_max_age: Option<i64>,
    /// Location of the remote repository being proxied.
    #[serde(rename = "remoteUrl")]
    pub remote_url: String,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryBowerProxyStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryCocoapods {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<NexusRepositoryCocoapodsProxy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryCocoapodsProxy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryCocoapodsProxyCleanup>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpClient")]
    pub http_client: Option<NexusRepositoryCocoapodsProxyHttpClient>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Negative cache configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCache")]
    pub negative_cache: Option<NexusRepositoryCocoapodsProxyNegativeCache>,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Proxy configuration.
    pub proxy: NexusRepositoryCocoapodsProxyProxy,
    /// The name of the routing rule assigned to this repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingRule")]
    pub routing_rule: Option<String>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryCocoapodsProxyStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryCocoapodsProxyCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryCocoapodsProxyHttpClient {
    /// HTTPClientAuthentication contains HTTP client authentication configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<NexusRepositoryCocoapodsProxyHttpClientAuthentication>,
    /// Auto-block outbound connections on the repository if remote peer is detected as unreachable/unresponsive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBlock")]
    pub auto_block: Option<bool>,
    /// Block outbound connections on the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocked: Option<bool>,
    /// HTTPClientConnection contains HTTP client connection configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<NexusRepositoryCocoapodsProxyHttpClientConnection>,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryCocoapodsProxyHttpClientAuthentication {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmDomain")]
    pub ntlm_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmHost")]
    pub ntlm_host: Option<String>,
    /// Password for authentication.
    pub password: String,
    /// Type of authentication to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<NexusRepositoryCocoapodsProxyHttpClientAuthenticationType>,
    /// Username for authentication.
    pub username: String,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryCocoapodsProxyHttpClientAuthenticationType {
    #[serde(rename = "username")]
    Username,
    #[serde(rename = "ntlm")]
    Ntlm,
}

/// HTTPClientConnection contains HTTP client connection configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryCocoapodsProxyHttpClientConnection {
    /// Whether to enable redirects to the same location (required by some servers)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCircularRedirects")]
    pub enable_circular_redirects: Option<bool>,
    /// Whether to allow cookies to be stored and used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCookies")]
    pub enable_cookies: Option<bool>,
    /// Total retries if the initial connection attempt suffers a timeout
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    /// Seconds to wait for activity before stopping and retrying the connection",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    /// Use certificates stored in the Nexus Repository Manager truststore to connect to external systems
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTrustStore")]
    pub use_trust_store: Option<bool>,
    /// Custom fragment to append to User-Agent header in HTTP requests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userAgentSuffix")]
    pub user_agent_suffix: Option<String>,
}

/// Negative cache configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryCocoapodsProxyNegativeCache {
    /// Whether to cache responses for content not present in the proxied repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// How long to cache the fact that a file was not found in the repository (in minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeToLive")]
    pub time_to_live: Option<i64>,
}

/// Proxy configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryCocoapodsProxyProxy {
    /// How long to cache artifacts before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentMaxAge")]
    pub content_max_age: Option<i64>,
    /// How long to cache metadata before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataMaxAge")]
    pub metadata_max_age: Option<i64>,
    /// Location of the remote repository being proxied.
    #[serde(rename = "remoteUrl")]
    pub remote_url: String,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryCocoapodsProxyStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryConan {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<NexusRepositoryConanProxy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryConanProxy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryConanProxyCleanup>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpClient")]
    pub http_client: Option<NexusRepositoryConanProxyHttpClient>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Negative cache configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCache")]
    pub negative_cache: Option<NexusRepositoryConanProxyNegativeCache>,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Proxy configuration.
    pub proxy: NexusRepositoryConanProxyProxy,
    /// The name of the routing rule assigned to this repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingRule")]
    pub routing_rule: Option<String>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryConanProxyStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryConanProxyCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryConanProxyHttpClient {
    /// HTTPClientAuthentication contains HTTP client authentication configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<NexusRepositoryConanProxyHttpClientAuthentication>,
    /// Auto-block outbound connections on the repository if remote peer is detected as unreachable/unresponsive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBlock")]
    pub auto_block: Option<bool>,
    /// Block outbound connections on the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocked: Option<bool>,
    /// HTTPClientConnection contains HTTP client connection configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<NexusRepositoryConanProxyHttpClientConnection>,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryConanProxyHttpClientAuthentication {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmDomain")]
    pub ntlm_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmHost")]
    pub ntlm_host: Option<String>,
    /// Password for authentication.
    pub password: String,
    /// Type of authentication to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<NexusRepositoryConanProxyHttpClientAuthenticationType>,
    /// Username for authentication.
    pub username: String,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryConanProxyHttpClientAuthenticationType {
    #[serde(rename = "username")]
    Username,
    #[serde(rename = "ntlm")]
    Ntlm,
}

/// HTTPClientConnection contains HTTP client connection configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryConanProxyHttpClientConnection {
    /// Whether to enable redirects to the same location (required by some servers)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCircularRedirects")]
    pub enable_circular_redirects: Option<bool>,
    /// Whether to allow cookies to be stored and used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCookies")]
    pub enable_cookies: Option<bool>,
    /// Total retries if the initial connection attempt suffers a timeout
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    /// Seconds to wait for activity before stopping and retrying the connection",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    /// Use certificates stored in the Nexus Repository Manager truststore to connect to external systems
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTrustStore")]
    pub use_trust_store: Option<bool>,
    /// Custom fragment to append to User-Agent header in HTTP requests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userAgentSuffix")]
    pub user_agent_suffix: Option<String>,
}

/// Negative cache configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryConanProxyNegativeCache {
    /// Whether to cache responses for content not present in the proxied repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// How long to cache the fact that a file was not found in the repository (in minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeToLive")]
    pub time_to_live: Option<i64>,
}

/// Proxy configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryConanProxyProxy {
    /// How long to cache artifacts before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentMaxAge")]
    pub content_max_age: Option<i64>,
    /// How long to cache metadata before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataMaxAge")]
    pub metadata_max_age: Option<i64>,
    /// Location of the remote repository being proxied.
    #[serde(rename = "remoteUrl")]
    pub remote_url: String,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryConanProxyStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryConda {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<NexusRepositoryCondaProxy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryCondaProxy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryCondaProxyCleanup>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpClient")]
    pub http_client: Option<NexusRepositoryCondaProxyHttpClient>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Negative cache configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCache")]
    pub negative_cache: Option<NexusRepositoryCondaProxyNegativeCache>,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Proxy configuration.
    pub proxy: NexusRepositoryCondaProxyProxy,
    /// The name of the routing rule assigned to this repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingRule")]
    pub routing_rule: Option<String>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryCondaProxyStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryCondaProxyCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryCondaProxyHttpClient {
    /// HTTPClientAuthentication contains HTTP client authentication configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<NexusRepositoryCondaProxyHttpClientAuthentication>,
    /// Auto-block outbound connections on the repository if remote peer is detected as unreachable/unresponsive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBlock")]
    pub auto_block: Option<bool>,
    /// Block outbound connections on the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocked: Option<bool>,
    /// HTTPClientConnection contains HTTP client connection configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<NexusRepositoryCondaProxyHttpClientConnection>,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryCondaProxyHttpClientAuthentication {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmDomain")]
    pub ntlm_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmHost")]
    pub ntlm_host: Option<String>,
    /// Password for authentication.
    pub password: String,
    /// Type of authentication to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<NexusRepositoryCondaProxyHttpClientAuthenticationType>,
    /// Username for authentication.
    pub username: String,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryCondaProxyHttpClientAuthenticationType {
    #[serde(rename = "username")]
    Username,
    #[serde(rename = "ntlm")]
    Ntlm,
}

/// HTTPClientConnection contains HTTP client connection configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryCondaProxyHttpClientConnection {
    /// Whether to enable redirects to the same location (required by some servers)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCircularRedirects")]
    pub enable_circular_redirects: Option<bool>,
    /// Whether to allow cookies to be stored and used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCookies")]
    pub enable_cookies: Option<bool>,
    /// Total retries if the initial connection attempt suffers a timeout
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    /// Seconds to wait for activity before stopping and retrying the connection",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    /// Use certificates stored in the Nexus Repository Manager truststore to connect to external systems
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTrustStore")]
    pub use_trust_store: Option<bool>,
    /// Custom fragment to append to User-Agent header in HTTP requests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userAgentSuffix")]
    pub user_agent_suffix: Option<String>,
}

/// Negative cache configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryCondaProxyNegativeCache {
    /// Whether to cache responses for content not present in the proxied repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// How long to cache the fact that a file was not found in the repository (in minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeToLive")]
    pub time_to_live: Option<i64>,
}

/// Proxy configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryCondaProxyProxy {
    /// How long to cache artifacts before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentMaxAge")]
    pub content_max_age: Option<i64>,
    /// How long to cache metadata before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataMaxAge")]
    pub metadata_max_age: Option<i64>,
    /// Location of the remote repository being proxied.
    #[serde(rename = "remoteUrl")]
    pub remote_url: String,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryCondaProxyStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryDocker {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<NexusRepositoryDockerGroup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosted: Option<NexusRepositoryDockerHosted>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<NexusRepositoryDockerProxy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryDockerGroup {
    /// Docker contains data of a Docker Repositoriy.
    pub docker: NexusRepositoryDockerGroupDocker,
    /// Group configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<NexusRepositoryDockerGroupGroup>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryDockerGroupStorage>,
}

/// Docker contains data of a Docker Repositoriy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryDockerGroupDocker {
    /// Whether to force authentication (Docker Bearer Token Realm required if false)
    #[serde(rename = "forceBasicAuth")]
    pub force_basic_auth: bool,
    /// Create an HTTP connector at specified port
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpPort")]
    pub http_port: Option<i64>,
    /// Create an HTTPS connector at specified port
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpsPort")]
    pub https_port: Option<i64>,
    /// Whether to allow clients to use the V1 API to interact with this repository
    #[serde(rename = "v1Enabled")]
    pub v1_enabled: bool,
}

/// Group configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryDockerGroupGroup {
    /// Member repositories' names.
    #[serde(rename = "memberNames")]
    pub member_names: Vec<String>,
    /// Pro-only: This field is for the Group Deployment feature available in NXRM Pro.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writableMember")]
    pub writable_member: Option<String>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryDockerGroupStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryDockerHosted {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryDockerHostedCleanup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<NexusRepositoryDockerHostedComponent>,
    /// Docker contains data of a Docker Repositoriy.
    pub docker: NexusRepositoryDockerHostedDocker,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryDockerHostedStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryDockerHostedCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryDockerHostedComponent {
    /// Components in this repository count as proprietary for namespace conflict attacks (requires Sonatype Nexus Firewall)
    #[serde(rename = "proprietaryComponents")]
    pub proprietary_components: bool,
}

/// Docker contains data of a Docker Repositoriy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryDockerHostedDocker {
    /// Whether to force authentication (Docker Bearer Token Realm required if false)
    #[serde(rename = "forceBasicAuth")]
    pub force_basic_auth: bool,
    /// Create an HTTP connector at specified port
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpPort")]
    pub http_port: Option<i64>,
    /// Create an HTTPS connector at specified port
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpsPort")]
    pub https_port: Option<i64>,
    /// Whether to allow clients to use the V1 API to interact with this repository
    #[serde(rename = "v1Enabled")]
    pub v1_enabled: bool,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryDockerHostedStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
    /// WritePolicy controls if deployments of and updates to assets are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writePolicy")]
    pub write_policy: Option<NexusRepositoryDockerHostedStorageWritePolicy>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryDockerHostedStorageWritePolicy {
    #[serde(rename = "ALLOW")]
    Allow,
    #[serde(rename = "ALLOW_ONCE")]
    AllowOnce,
    #[serde(rename = "DENY")]
    Deny,
    #[serde(rename = "REPLICATION_ONLY")]
    ReplicationOnly,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryDockerProxy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryDockerProxyCleanup>,
    /// Docker contains data of a Docker Repositoriy.
    pub docker: NexusRepositoryDockerProxyDocker,
    /// DockerProxy contains data of a Docker Proxy Repository.
    #[serde(rename = "dockerProxy")]
    pub docker_proxy: NexusRepositoryDockerProxyDockerProxy,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpClient")]
    pub http_client: Option<NexusRepositoryDockerProxyHttpClient>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Negative cache configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCache")]
    pub negative_cache: Option<NexusRepositoryDockerProxyNegativeCache>,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Proxy configuration.
    pub proxy: NexusRepositoryDockerProxyProxy,
    /// The name of the routing rule assigned to this repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingRule")]
    pub routing_rule: Option<String>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryDockerProxyStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryDockerProxyCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

/// Docker contains data of a Docker Repositoriy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryDockerProxyDocker {
    /// Whether to force authentication (Docker Bearer Token Realm required if false)
    #[serde(rename = "forceBasicAuth")]
    pub force_basic_auth: bool,
    /// Create an HTTP connector at specified port
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpPort")]
    pub http_port: Option<i64>,
    /// Create an HTTPS connector at specified port
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpsPort")]
    pub https_port: Option<i64>,
    /// Whether to allow clients to use the V1 API to interact with this repository
    #[serde(rename = "v1Enabled")]
    pub v1_enabled: bool,
}

/// DockerProxy contains data of a Docker Proxy Repository.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryDockerProxyDockerProxy {
    /// Type of Docker Index.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexType")]
    pub index_type: Option<NexusRepositoryDockerProxyDockerProxyIndexType>,
    /// Url of Docker Index to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexUrl")]
    pub index_url: Option<String>,
}

/// DockerProxy contains data of a Docker Proxy Repository.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryDockerProxyDockerProxyIndexType {
    #[serde(rename = "HUB")]
    Hub,
    #[serde(rename = "REGISTRY")]
    Registry,
    #[serde(rename = "CUSTOM")]
    Custom,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryDockerProxyHttpClient {
    /// HTTPClientAuthentication contains HTTP client authentication configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<NexusRepositoryDockerProxyHttpClientAuthentication>,
    /// Auto-block outbound connections on the repository if remote peer is detected as unreachable/unresponsive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBlock")]
    pub auto_block: Option<bool>,
    /// Block outbound connections on the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocked: Option<bool>,
    /// HTTPClientConnection contains HTTP client connection configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<NexusRepositoryDockerProxyHttpClientConnection>,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryDockerProxyHttpClientAuthentication {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmDomain")]
    pub ntlm_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmHost")]
    pub ntlm_host: Option<String>,
    /// Password for authentication.
    pub password: String,
    /// Type of authentication to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<NexusRepositoryDockerProxyHttpClientAuthenticationType>,
    /// Username for authentication.
    pub username: String,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryDockerProxyHttpClientAuthenticationType {
    #[serde(rename = "username")]
    Username,
    #[serde(rename = "ntlm")]
    Ntlm,
}

/// HTTPClientConnection contains HTTP client connection configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryDockerProxyHttpClientConnection {
    /// Whether to enable redirects to the same location (required by some servers)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCircularRedirects")]
    pub enable_circular_redirects: Option<bool>,
    /// Whether to allow cookies to be stored and used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCookies")]
    pub enable_cookies: Option<bool>,
    /// Total retries if the initial connection attempt suffers a timeout
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    /// Seconds to wait for activity before stopping and retrying the connection",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    /// Use certificates stored in the Nexus Repository Manager truststore to connect to external systems
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTrustStore")]
    pub use_trust_store: Option<bool>,
    /// Custom fragment to append to User-Agent header in HTTP requests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userAgentSuffix")]
    pub user_agent_suffix: Option<String>,
}

/// Negative cache configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryDockerProxyNegativeCache {
    /// Whether to cache responses for content not present in the proxied repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// How long to cache the fact that a file was not found in the repository (in minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeToLive")]
    pub time_to_live: Option<i64>,
}

/// Proxy configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryDockerProxyProxy {
    /// How long to cache artifacts before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentMaxAge")]
    pub content_max_age: Option<i64>,
    /// How long to cache metadata before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataMaxAge")]
    pub metadata_max_age: Option<i64>,
    /// Location of the remote repository being proxied.
    #[serde(rename = "remoteUrl")]
    pub remote_url: String,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryDockerProxyStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryGitLfs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosted: Option<NexusRepositoryGitLfsHosted>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryGitLfsHosted {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryGitLfsHostedCleanup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<NexusRepositoryGitLfsHostedComponent>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryGitLfsHostedStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryGitLfsHostedCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryGitLfsHostedComponent {
    /// Components in this repository count as proprietary for namespace conflict attacks (requires Sonatype Nexus Firewall)
    #[serde(rename = "proprietaryComponents")]
    pub proprietary_components: bool,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryGitLfsHostedStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
    /// WritePolicy controls if deployments of and updates to assets are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writePolicy")]
    pub write_policy: Option<NexusRepositoryGitLfsHostedStorageWritePolicy>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryGitLfsHostedStorageWritePolicy {
    #[serde(rename = "ALLOW")]
    Allow,
    #[serde(rename = "ALLOW_ONCE")]
    AllowOnce,
    #[serde(rename = "DENY")]
    Deny,
    #[serde(rename = "REPLICATION_ONLY")]
    ReplicationOnly,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryGo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<NexusRepositoryGoGroup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<NexusRepositoryGoProxy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryGoGroup {
    /// Group configuration.
    pub group: NexusRepositoryGoGroupGroup,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryGoGroupStorage>,
}

/// Group configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryGoGroupGroup {
    /// Member repositories' names.
    #[serde(rename = "memberNames")]
    pub member_names: Vec<String>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryGoGroupStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryGoProxy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryGoProxyCleanup>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpClient")]
    pub http_client: Option<NexusRepositoryGoProxyHttpClient>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Negative cache configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCache")]
    pub negative_cache: Option<NexusRepositoryGoProxyNegativeCache>,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Proxy configuration.
    pub proxy: NexusRepositoryGoProxyProxy,
    /// The name of the routing rule assigned to this repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingRule")]
    pub routing_rule: Option<String>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryGoProxyStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryGoProxyCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryGoProxyHttpClient {
    /// HTTPClientAuthentication contains HTTP client authentication configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<NexusRepositoryGoProxyHttpClientAuthentication>,
    /// Auto-block outbound connections on the repository if remote peer is detected as unreachable/unresponsive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBlock")]
    pub auto_block: Option<bool>,
    /// Block outbound connections on the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocked: Option<bool>,
    /// HTTPClientConnection contains HTTP client connection configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<NexusRepositoryGoProxyHttpClientConnection>,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryGoProxyHttpClientAuthentication {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmDomain")]
    pub ntlm_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmHost")]
    pub ntlm_host: Option<String>,
    /// Password for authentication.
    pub password: String,
    /// Type of authentication to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<NexusRepositoryGoProxyHttpClientAuthenticationType>,
    /// Username for authentication.
    pub username: String,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryGoProxyHttpClientAuthenticationType {
    #[serde(rename = "username")]
    Username,
    #[serde(rename = "ntlm")]
    Ntlm,
}

/// HTTPClientConnection contains HTTP client connection configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryGoProxyHttpClientConnection {
    /// Whether to enable redirects to the same location (required by some servers)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCircularRedirects")]
    pub enable_circular_redirects: Option<bool>,
    /// Whether to allow cookies to be stored and used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCookies")]
    pub enable_cookies: Option<bool>,
    /// Total retries if the initial connection attempt suffers a timeout
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    /// Seconds to wait for activity before stopping and retrying the connection",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    /// Use certificates stored in the Nexus Repository Manager truststore to connect to external systems
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTrustStore")]
    pub use_trust_store: Option<bool>,
    /// Custom fragment to append to User-Agent header in HTTP requests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userAgentSuffix")]
    pub user_agent_suffix: Option<String>,
}

/// Negative cache configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryGoProxyNegativeCache {
    /// Whether to cache responses for content not present in the proxied repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// How long to cache the fact that a file was not found in the repository (in minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeToLive")]
    pub time_to_live: Option<i64>,
}

/// Proxy configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryGoProxyProxy {
    /// How long to cache artifacts before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentMaxAge")]
    pub content_max_age: Option<i64>,
    /// How long to cache metadata before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataMaxAge")]
    pub metadata_max_age: Option<i64>,
    /// Location of the remote repository being proxied.
    #[serde(rename = "remoteUrl")]
    pub remote_url: String,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryGoProxyStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryHelm {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosted: Option<NexusRepositoryHelmHosted>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<NexusRepositoryHelmProxy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryHelmHosted {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryHelmHostedCleanup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<NexusRepositoryHelmHostedComponent>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryHelmHostedStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryHelmHostedCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryHelmHostedComponent {
    /// Components in this repository count as proprietary for namespace conflict attacks (requires Sonatype Nexus Firewall)
    #[serde(rename = "proprietaryComponents")]
    pub proprietary_components: bool,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryHelmHostedStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
    /// WritePolicy controls if deployments of and updates to assets are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writePolicy")]
    pub write_policy: Option<NexusRepositoryHelmHostedStorageWritePolicy>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryHelmHostedStorageWritePolicy {
    #[serde(rename = "ALLOW")]
    Allow,
    #[serde(rename = "ALLOW_ONCE")]
    AllowOnce,
    #[serde(rename = "DENY")]
    Deny,
    #[serde(rename = "REPLICATION_ONLY")]
    ReplicationOnly,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryHelmProxy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryHelmProxyCleanup>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpClient")]
    pub http_client: Option<NexusRepositoryHelmProxyHttpClient>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Negative cache configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCache")]
    pub negative_cache: Option<NexusRepositoryHelmProxyNegativeCache>,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Proxy configuration.
    pub proxy: NexusRepositoryHelmProxyProxy,
    /// The name of the routing rule assigned to this repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingRule")]
    pub routing_rule: Option<String>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryHelmProxyStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryHelmProxyCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryHelmProxyHttpClient {
    /// HTTPClientAuthentication contains HTTP client authentication configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<NexusRepositoryHelmProxyHttpClientAuthentication>,
    /// Auto-block outbound connections on the repository if remote peer is detected as unreachable/unresponsive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBlock")]
    pub auto_block: Option<bool>,
    /// Block outbound connections on the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocked: Option<bool>,
    /// HTTPClientConnection contains HTTP client connection configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<NexusRepositoryHelmProxyHttpClientConnection>,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryHelmProxyHttpClientAuthentication {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmDomain")]
    pub ntlm_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmHost")]
    pub ntlm_host: Option<String>,
    /// Password for authentication.
    pub password: String,
    /// Type of authentication to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<NexusRepositoryHelmProxyHttpClientAuthenticationType>,
    /// Username for authentication.
    pub username: String,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryHelmProxyHttpClientAuthenticationType {
    #[serde(rename = "username")]
    Username,
    #[serde(rename = "ntlm")]
    Ntlm,
}

/// HTTPClientConnection contains HTTP client connection configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryHelmProxyHttpClientConnection {
    /// Whether to enable redirects to the same location (required by some servers)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCircularRedirects")]
    pub enable_circular_redirects: Option<bool>,
    /// Whether to allow cookies to be stored and used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCookies")]
    pub enable_cookies: Option<bool>,
    /// Total retries if the initial connection attempt suffers a timeout
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    /// Seconds to wait for activity before stopping and retrying the connection",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    /// Use certificates stored in the Nexus Repository Manager truststore to connect to external systems
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTrustStore")]
    pub use_trust_store: Option<bool>,
    /// Custom fragment to append to User-Agent header in HTTP requests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userAgentSuffix")]
    pub user_agent_suffix: Option<String>,
}

/// Negative cache configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryHelmProxyNegativeCache {
    /// Whether to cache responses for content not present in the proxied repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// How long to cache the fact that a file was not found in the repository (in minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeToLive")]
    pub time_to_live: Option<i64>,
}

/// Proxy configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryHelmProxyProxy {
    /// How long to cache artifacts before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentMaxAge")]
    pub content_max_age: Option<i64>,
    /// How long to cache metadata before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataMaxAge")]
    pub metadata_max_age: Option<i64>,
    /// Location of the remote repository being proxied.
    #[serde(rename = "remoteUrl")]
    pub remote_url: String,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryHelmProxyStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryMaven {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<NexusRepositoryMavenGroup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosted: Option<NexusRepositoryMavenHosted>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<NexusRepositoryMavenProxy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryMavenGroup {
    /// Group configuration.
    pub group: NexusRepositoryMavenGroupGroup,
    /// Maven contains additional data of maven repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maven: Option<NexusRepositoryMavenGroupMaven>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryMavenGroupStorage>,
}

/// Group configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryMavenGroupGroup {
    /// Member repositories' names.
    #[serde(rename = "memberNames")]
    pub member_names: Vec<String>,
}

/// Maven contains additional data of maven repository.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryMavenGroupMaven {
    /// Add Content-Disposition header as 'Attachment' to disable some content from being inline in a browser.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDisposition")]
    pub content_disposition: Option<NexusRepositoryMavenGroupMavenContentDisposition>,
    /// Validate that all paths are maven artifact or metadata paths.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "layoutPolicy")]
    pub layout_policy: Option<NexusRepositoryMavenGroupMavenLayoutPolicy>,
    /// VersionPolicy is a type of artifact that this repository stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionPolicy")]
    pub version_policy: Option<NexusRepositoryMavenGroupMavenVersionPolicy>,
}

/// Maven contains additional data of maven repository.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryMavenGroupMavenContentDisposition {
    #[serde(rename = "INLINE")]
    Inline,
    #[serde(rename = "ATTACHMENT")]
    Attachment,
}

/// Maven contains additional data of maven repository.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryMavenGroupMavenLayoutPolicy {
    #[serde(rename = "STRICT")]
    Strict,
    #[serde(rename = "PERMISSIVE")]
    Permissive,
}

/// Maven contains additional data of maven repository.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryMavenGroupMavenVersionPolicy {
    #[serde(rename = "RELEASE")]
    Release,
    #[serde(rename = "SNAPSHOT")]
    Snapshot,
    #[serde(rename = "MIXED")]
    Mixed,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryMavenGroupStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryMavenHosted {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryMavenHostedCleanup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<NexusRepositoryMavenHostedComponent>,
    /// Maven contains additional data of maven repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maven: Option<NexusRepositoryMavenHostedMaven>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryMavenHostedStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryMavenHostedCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryMavenHostedComponent {
    /// Components in this repository count as proprietary for namespace conflict attacks (requires Sonatype Nexus Firewall)
    #[serde(rename = "proprietaryComponents")]
    pub proprietary_components: bool,
}

/// Maven contains additional data of maven repository.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryMavenHostedMaven {
    /// Add Content-Disposition header as 'Attachment' to disable some content from being inline in a browser.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDisposition")]
    pub content_disposition: Option<NexusRepositoryMavenHostedMavenContentDisposition>,
    /// Validate that all paths are maven artifact or metadata paths.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "layoutPolicy")]
    pub layout_policy: Option<NexusRepositoryMavenHostedMavenLayoutPolicy>,
    /// VersionPolicy is a type of artifact that this repository stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionPolicy")]
    pub version_policy: Option<NexusRepositoryMavenHostedMavenVersionPolicy>,
}

/// Maven contains additional data of maven repository.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryMavenHostedMavenContentDisposition {
    #[serde(rename = "INLINE")]
    Inline,
    #[serde(rename = "ATTACHMENT")]
    Attachment,
}

/// Maven contains additional data of maven repository.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryMavenHostedMavenLayoutPolicy {
    #[serde(rename = "STRICT")]
    Strict,
    #[serde(rename = "PERMISSIVE")]
    Permissive,
}

/// Maven contains additional data of maven repository.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryMavenHostedMavenVersionPolicy {
    #[serde(rename = "RELEASE")]
    Release,
    #[serde(rename = "SNAPSHOT")]
    Snapshot,
    #[serde(rename = "MIXED")]
    Mixed,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryMavenHostedStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
    /// WritePolicy controls if deployments of and updates to assets are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writePolicy")]
    pub write_policy: Option<NexusRepositoryMavenHostedStorageWritePolicy>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryMavenHostedStorageWritePolicy {
    #[serde(rename = "ALLOW")]
    Allow,
    #[serde(rename = "ALLOW_ONCE")]
    AllowOnce,
    #[serde(rename = "DENY")]
    Deny,
    #[serde(rename = "REPLICATION_ONLY")]
    ReplicationOnly,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryMavenProxy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryMavenProxyCleanup>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpClient")]
    pub http_client: Option<NexusRepositoryMavenProxyHttpClient>,
    /// Maven contains additional data of maven repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maven: Option<NexusRepositoryMavenProxyMaven>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Negative cache configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCache")]
    pub negative_cache: Option<NexusRepositoryMavenProxyNegativeCache>,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Proxy configuration.
    pub proxy: NexusRepositoryMavenProxyProxy,
    /// The name of the routing rule assigned to this repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingRule")]
    pub routing_rule: Option<String>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryMavenProxyStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryMavenProxyCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryMavenProxyHttpClient {
    /// HTTPClientAuthenticationWithPreemptive contains HTTP client authentication configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<NexusRepositoryMavenProxyHttpClientAuthentication>,
    /// Auto-block outbound connections on the repository if remote peer is detected as unreachable/unresponsive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBlock")]
    pub auto_block: Option<bool>,
    /// Whether to block outbound connections on the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocked: Option<bool>,
    /// HTTPClientConnection contains HTTP client connection configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<NexusRepositoryMavenProxyHttpClientConnection>,
}

/// HTTPClientAuthenticationWithPreemptive contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryMavenProxyHttpClientAuthentication {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmDomain")]
    pub ntlm_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmHost")]
    pub ntlm_host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// Whether to use pre-emptive authentication. Use with caution. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub preemptive: Option<bool>,
    /// Type of authentication to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<NexusRepositoryMavenProxyHttpClientAuthenticationType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// HTTPClientAuthenticationWithPreemptive contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryMavenProxyHttpClientAuthenticationType {
    #[serde(rename = "username")]
    Username,
    #[serde(rename = "ntlm")]
    Ntlm,
}

/// HTTPClientConnection contains HTTP client connection configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryMavenProxyHttpClientConnection {
    /// Whether to enable redirects to the same location (required by some servers)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCircularRedirects")]
    pub enable_circular_redirects: Option<bool>,
    /// Whether to allow cookies to be stored and used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCookies")]
    pub enable_cookies: Option<bool>,
    /// Total retries if the initial connection attempt suffers a timeout
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    /// Seconds to wait for activity before stopping and retrying the connection",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    /// Use certificates stored in the Nexus Repository Manager truststore to connect to external systems
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTrustStore")]
    pub use_trust_store: Option<bool>,
    /// Custom fragment to append to User-Agent header in HTTP requests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userAgentSuffix")]
    pub user_agent_suffix: Option<String>,
}

/// Maven contains additional data of maven repository.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryMavenProxyMaven {
    /// Add Content-Disposition header as 'Attachment' to disable some content from being inline in a browser.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDisposition")]
    pub content_disposition: Option<NexusRepositoryMavenProxyMavenContentDisposition>,
    /// Validate that all paths are maven artifact or metadata paths.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "layoutPolicy")]
    pub layout_policy: Option<NexusRepositoryMavenProxyMavenLayoutPolicy>,
    /// VersionPolicy is a type of artifact that this repository stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionPolicy")]
    pub version_policy: Option<NexusRepositoryMavenProxyMavenVersionPolicy>,
}

/// Maven contains additional data of maven repository.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryMavenProxyMavenContentDisposition {
    #[serde(rename = "INLINE")]
    Inline,
    #[serde(rename = "ATTACHMENT")]
    Attachment,
}

/// Maven contains additional data of maven repository.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryMavenProxyMavenLayoutPolicy {
    #[serde(rename = "STRICT")]
    Strict,
    #[serde(rename = "PERMISSIVE")]
    Permissive,
}

/// Maven contains additional data of maven repository.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryMavenProxyMavenVersionPolicy {
    #[serde(rename = "RELEASE")]
    Release,
    #[serde(rename = "SNAPSHOT")]
    Snapshot,
    #[serde(rename = "MIXED")]
    Mixed,
}

/// Negative cache configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryMavenProxyNegativeCache {
    /// Whether to cache responses for content not present in the proxied repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// How long to cache the fact that a file was not found in the repository (in minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeToLive")]
    pub time_to_live: Option<i64>,
}

/// Proxy configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryMavenProxyProxy {
    /// How long to cache artifacts before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentMaxAge")]
    pub content_max_age: Option<i64>,
    /// How long to cache metadata before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataMaxAge")]
    pub metadata_max_age: Option<i64>,
    /// Location of the remote repository being proxied.
    #[serde(rename = "remoteUrl")]
    pub remote_url: String,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryMavenProxyStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

/// NexusRef is a reference to Nexus custom resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNexusRef {
    /// Kind specifies the kind of the Nexus resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name specifies the name of the Nexus resource.
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNpm {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<NexusRepositoryNpmGroup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosted: Option<NexusRepositoryNpmHosted>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<NexusRepositoryNpmProxy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNpmGroup {
    /// Group configuration.
    pub group: NexusRepositoryNpmGroupGroup,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryNpmGroupStorage>,
}

/// Group configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNpmGroupGroup {
    /// Member repositories' names.
    #[serde(rename = "memberNames")]
    pub member_names: Vec<String>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNpmGroupStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNpmHosted {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryNpmHostedCleanup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<NexusRepositoryNpmHostedComponent>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryNpmHostedStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNpmHostedCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNpmHostedComponent {
    /// Components in this repository count as proprietary for namespace conflict attacks (requires Sonatype Nexus Firewall)
    #[serde(rename = "proprietaryComponents")]
    pub proprietary_components: bool,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNpmHostedStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
    /// WritePolicy controls if deployments of and updates to assets are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writePolicy")]
    pub write_policy: Option<NexusRepositoryNpmHostedStorageWritePolicy>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryNpmHostedStorageWritePolicy {
    #[serde(rename = "ALLOW")]
    Allow,
    #[serde(rename = "ALLOW_ONCE")]
    AllowOnce,
    #[serde(rename = "DENY")]
    Deny,
    #[serde(rename = "REPLICATION_ONLY")]
    ReplicationOnly,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNpmProxy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryNpmProxyCleanup>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpClient")]
    pub http_client: Option<NexusRepositoryNpmProxyHttpClient>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Negative cache configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCache")]
    pub negative_cache: Option<NexusRepositoryNpmProxyNegativeCache>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub npm: Option<NexusRepositoryNpmProxyNpm>,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Proxy configuration.
    pub proxy: NexusRepositoryNpmProxyProxy,
    /// The name of the routing rule assigned to this repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingRule")]
    pub routing_rule: Option<String>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryNpmProxyStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNpmProxyCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNpmProxyHttpClient {
    /// HTTPClientAuthentication contains HTTP client authentication configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<NexusRepositoryNpmProxyHttpClientAuthentication>,
    /// Auto-block outbound connections on the repository if remote peer is detected as unreachable/unresponsive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBlock")]
    pub auto_block: Option<bool>,
    /// Block outbound connections on the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocked: Option<bool>,
    /// HTTPClientConnection contains HTTP client connection configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<NexusRepositoryNpmProxyHttpClientConnection>,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNpmProxyHttpClientAuthentication {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmDomain")]
    pub ntlm_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmHost")]
    pub ntlm_host: Option<String>,
    /// Password for authentication.
    pub password: String,
    /// Type of authentication to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<NexusRepositoryNpmProxyHttpClientAuthenticationType>,
    /// Username for authentication.
    pub username: String,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryNpmProxyHttpClientAuthenticationType {
    #[serde(rename = "username")]
    Username,
    #[serde(rename = "ntlm")]
    Ntlm,
}

/// HTTPClientConnection contains HTTP client connection configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNpmProxyHttpClientConnection {
    /// Whether to enable redirects to the same location (required by some servers)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCircularRedirects")]
    pub enable_circular_redirects: Option<bool>,
    /// Whether to allow cookies to be stored and used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCookies")]
    pub enable_cookies: Option<bool>,
    /// Total retries if the initial connection attempt suffers a timeout
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    /// Seconds to wait for activity before stopping and retrying the connection",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    /// Use certificates stored in the Nexus Repository Manager truststore to connect to external systems
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTrustStore")]
    pub use_trust_store: Option<bool>,
    /// Custom fragment to append to User-Agent header in HTTP requests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userAgentSuffix")]
    pub user_agent_suffix: Option<String>,
}

/// Negative cache configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNpmProxyNegativeCache {
    /// Whether to cache responses for content not present in the proxied repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// How long to cache the fact that a file was not found in the repository (in minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeToLive")]
    pub time_to_live: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNpmProxyNpm {
    /// Remove Non-Cataloged Versions
    #[serde(rename = "removeNonCataloged")]
    pub remove_non_cataloged: bool,
    /// Remove Quarantined Versions
    #[serde(rename = "removeQuarantined")]
    pub remove_quarantined: bool,
}

/// Proxy configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNpmProxyProxy {
    /// How long to cache artifacts before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentMaxAge")]
    pub content_max_age: Option<i64>,
    /// How long to cache metadata before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataMaxAge")]
    pub metadata_max_age: Option<i64>,
    /// Location of the remote repository being proxied.
    #[serde(rename = "remoteUrl")]
    pub remote_url: String,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNpmProxyStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNuget {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<NexusRepositoryNugetGroup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosted: Option<NexusRepositoryNugetHosted>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<NexusRepositoryNugetProxy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNugetGroup {
    /// Group configuration.
    pub group: NexusRepositoryNugetGroupGroup,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryNugetGroupStorage>,
}

/// Group configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNugetGroupGroup {
    /// Member repositories' names.
    #[serde(rename = "memberNames")]
    pub member_names: Vec<String>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNugetGroupStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNugetHosted {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryNugetHostedCleanup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<NexusRepositoryNugetHostedComponent>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryNugetHostedStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNugetHostedCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNugetHostedComponent {
    /// Components in this repository count as proprietary for namespace conflict attacks (requires Sonatype Nexus Firewall)
    #[serde(rename = "proprietaryComponents")]
    pub proprietary_components: bool,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNugetHostedStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
    /// WritePolicy controls if deployments of and updates to assets are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writePolicy")]
    pub write_policy: Option<NexusRepositoryNugetHostedStorageWritePolicy>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryNugetHostedStorageWritePolicy {
    #[serde(rename = "ALLOW")]
    Allow,
    #[serde(rename = "ALLOW_ONCE")]
    AllowOnce,
    #[serde(rename = "DENY")]
    Deny,
    #[serde(rename = "REPLICATION_ONLY")]
    ReplicationOnly,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNugetProxy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryNugetProxyCleanup>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpClient")]
    pub http_client: Option<NexusRepositoryNugetProxyHttpClient>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Negative cache configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCache")]
    pub negative_cache: Option<NexusRepositoryNugetProxyNegativeCache>,
    /// NugetProxy contains data specific to proxy repositories of format Nuget.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nugetProxy")]
    pub nuget_proxy: Option<NexusRepositoryNugetProxyNugetProxy>,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Proxy configuration.
    pub proxy: NexusRepositoryNugetProxyProxy,
    /// The name of the routing rule assigned to this repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingRule")]
    pub routing_rule: Option<String>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryNugetProxyStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNugetProxyCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNugetProxyHttpClient {
    /// HTTPClientAuthentication contains HTTP client authentication configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<NexusRepositoryNugetProxyHttpClientAuthentication>,
    /// Auto-block outbound connections on the repository if remote peer is detected as unreachable/unresponsive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBlock")]
    pub auto_block: Option<bool>,
    /// Block outbound connections on the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocked: Option<bool>,
    /// HTTPClientConnection contains HTTP client connection configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<NexusRepositoryNugetProxyHttpClientConnection>,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNugetProxyHttpClientAuthentication {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmDomain")]
    pub ntlm_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmHost")]
    pub ntlm_host: Option<String>,
    /// Password for authentication.
    pub password: String,
    /// Type of authentication to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<NexusRepositoryNugetProxyHttpClientAuthenticationType>,
    /// Username for authentication.
    pub username: String,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryNugetProxyHttpClientAuthenticationType {
    #[serde(rename = "username")]
    Username,
    #[serde(rename = "ntlm")]
    Ntlm,
}

/// HTTPClientConnection contains HTTP client connection configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNugetProxyHttpClientConnection {
    /// Whether to enable redirects to the same location (required by some servers)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCircularRedirects")]
    pub enable_circular_redirects: Option<bool>,
    /// Whether to allow cookies to be stored and used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCookies")]
    pub enable_cookies: Option<bool>,
    /// Total retries if the initial connection attempt suffers a timeout
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    /// Seconds to wait for activity before stopping and retrying the connection",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    /// Use certificates stored in the Nexus Repository Manager truststore to connect to external systems
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTrustStore")]
    pub use_trust_store: Option<bool>,
    /// Custom fragment to append to User-Agent header in HTTP requests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userAgentSuffix")]
    pub user_agent_suffix: Option<String>,
}

/// Negative cache configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNugetProxyNegativeCache {
    /// Whether to cache responses for content not present in the proxied repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// How long to cache the fact that a file was not found in the repository (in minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeToLive")]
    pub time_to_live: Option<i64>,
}

/// NugetProxy contains data specific to proxy repositories of format Nuget.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNugetProxyNugetProxy {
    /// NugetVersion is the used Nuget protocol version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nugetVersion")]
    pub nuget_version: Option<NexusRepositoryNugetProxyNugetProxyNugetVersion>,
    /// How long to cache query results from the proxied repository (in seconds)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryCacheItemMaxAge")]
    pub query_cache_item_max_age: Option<i64>,
}

/// NugetProxy contains data specific to proxy repositories of format Nuget.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryNugetProxyNugetProxyNugetVersion {
    V2,
    V3,
}

/// Proxy configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNugetProxyProxy {
    /// How long to cache artifacts before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentMaxAge")]
    pub content_max_age: Option<i64>,
    /// How long to cache metadata before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataMaxAge")]
    pub metadata_max_age: Option<i64>,
    /// Location of the remote repository being proxied.
    #[serde(rename = "remoteUrl")]
    pub remote_url: String,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryNugetProxyStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryP2 {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<NexusRepositoryP2Proxy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryP2Proxy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryP2ProxyCleanup>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpClient")]
    pub http_client: Option<NexusRepositoryP2ProxyHttpClient>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Negative cache configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCache")]
    pub negative_cache: Option<NexusRepositoryP2ProxyNegativeCache>,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Proxy configuration.
    pub proxy: NexusRepositoryP2ProxyProxy,
    /// The name of the routing rule assigned to this repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingRule")]
    pub routing_rule: Option<String>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryP2ProxyStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryP2ProxyCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryP2ProxyHttpClient {
    /// HTTPClientAuthentication contains HTTP client authentication configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<NexusRepositoryP2ProxyHttpClientAuthentication>,
    /// Auto-block outbound connections on the repository if remote peer is detected as unreachable/unresponsive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBlock")]
    pub auto_block: Option<bool>,
    /// Block outbound connections on the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocked: Option<bool>,
    /// HTTPClientConnection contains HTTP client connection configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<NexusRepositoryP2ProxyHttpClientConnection>,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryP2ProxyHttpClientAuthentication {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmDomain")]
    pub ntlm_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmHost")]
    pub ntlm_host: Option<String>,
    /// Password for authentication.
    pub password: String,
    /// Type of authentication to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<NexusRepositoryP2ProxyHttpClientAuthenticationType>,
    /// Username for authentication.
    pub username: String,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryP2ProxyHttpClientAuthenticationType {
    #[serde(rename = "username")]
    Username,
    #[serde(rename = "ntlm")]
    Ntlm,
}

/// HTTPClientConnection contains HTTP client connection configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryP2ProxyHttpClientConnection {
    /// Whether to enable redirects to the same location (required by some servers)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCircularRedirects")]
    pub enable_circular_redirects: Option<bool>,
    /// Whether to allow cookies to be stored and used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCookies")]
    pub enable_cookies: Option<bool>,
    /// Total retries if the initial connection attempt suffers a timeout
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    /// Seconds to wait for activity before stopping and retrying the connection",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    /// Use certificates stored in the Nexus Repository Manager truststore to connect to external systems
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTrustStore")]
    pub use_trust_store: Option<bool>,
    /// Custom fragment to append to User-Agent header in HTTP requests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userAgentSuffix")]
    pub user_agent_suffix: Option<String>,
}

/// Negative cache configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryP2ProxyNegativeCache {
    /// Whether to cache responses for content not present in the proxied repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// How long to cache the fact that a file was not found in the repository (in minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeToLive")]
    pub time_to_live: Option<i64>,
}

/// Proxy configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryP2ProxyProxy {
    /// How long to cache artifacts before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentMaxAge")]
    pub content_max_age: Option<i64>,
    /// How long to cache metadata before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataMaxAge")]
    pub metadata_max_age: Option<i64>,
    /// Location of the remote repository being proxied.
    #[serde(rename = "remoteUrl")]
    pub remote_url: String,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryP2ProxyStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryPypi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<NexusRepositoryPypiGroup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosted: Option<NexusRepositoryPypiHosted>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<NexusRepositoryPypiProxy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryPypiGroup {
    /// Group configuration.
    pub group: NexusRepositoryPypiGroupGroup,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryPypiGroupStorage>,
}

/// Group configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryPypiGroupGroup {
    /// Member repositories' names.
    #[serde(rename = "memberNames")]
    pub member_names: Vec<String>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryPypiGroupStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryPypiHosted {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryPypiHostedCleanup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<NexusRepositoryPypiHostedComponent>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryPypiHostedStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryPypiHostedCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryPypiHostedComponent {
    /// Components in this repository count as proprietary for namespace conflict attacks (requires Sonatype Nexus Firewall)
    #[serde(rename = "proprietaryComponents")]
    pub proprietary_components: bool,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryPypiHostedStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
    /// WritePolicy controls if deployments of and updates to assets are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writePolicy")]
    pub write_policy: Option<NexusRepositoryPypiHostedStorageWritePolicy>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryPypiHostedStorageWritePolicy {
    #[serde(rename = "ALLOW")]
    Allow,
    #[serde(rename = "ALLOW_ONCE")]
    AllowOnce,
    #[serde(rename = "DENY")]
    Deny,
    #[serde(rename = "REPLICATION_ONLY")]
    ReplicationOnly,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryPypiProxy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryPypiProxyCleanup>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpClient")]
    pub http_client: Option<NexusRepositoryPypiProxyHttpClient>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Negative cache configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCache")]
    pub negative_cache: Option<NexusRepositoryPypiProxyNegativeCache>,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Proxy configuration.
    pub proxy: NexusRepositoryPypiProxyProxy,
    /// The name of the routing rule assigned to this repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingRule")]
    pub routing_rule: Option<String>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryPypiProxyStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryPypiProxyCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryPypiProxyHttpClient {
    /// HTTPClientAuthentication contains HTTP client authentication configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<NexusRepositoryPypiProxyHttpClientAuthentication>,
    /// Auto-block outbound connections on the repository if remote peer is detected as unreachable/unresponsive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBlock")]
    pub auto_block: Option<bool>,
    /// Block outbound connections on the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocked: Option<bool>,
    /// HTTPClientConnection contains HTTP client connection configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<NexusRepositoryPypiProxyHttpClientConnection>,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryPypiProxyHttpClientAuthentication {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmDomain")]
    pub ntlm_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmHost")]
    pub ntlm_host: Option<String>,
    /// Password for authentication.
    pub password: String,
    /// Type of authentication to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<NexusRepositoryPypiProxyHttpClientAuthenticationType>,
    /// Username for authentication.
    pub username: String,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryPypiProxyHttpClientAuthenticationType {
    #[serde(rename = "username")]
    Username,
    #[serde(rename = "ntlm")]
    Ntlm,
}

/// HTTPClientConnection contains HTTP client connection configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryPypiProxyHttpClientConnection {
    /// Whether to enable redirects to the same location (required by some servers)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCircularRedirects")]
    pub enable_circular_redirects: Option<bool>,
    /// Whether to allow cookies to be stored and used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCookies")]
    pub enable_cookies: Option<bool>,
    /// Total retries if the initial connection attempt suffers a timeout
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    /// Seconds to wait for activity before stopping and retrying the connection",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    /// Use certificates stored in the Nexus Repository Manager truststore to connect to external systems
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTrustStore")]
    pub use_trust_store: Option<bool>,
    /// Custom fragment to append to User-Agent header in HTTP requests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userAgentSuffix")]
    pub user_agent_suffix: Option<String>,
}

/// Negative cache configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryPypiProxyNegativeCache {
    /// Whether to cache responses for content not present in the proxied repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// How long to cache the fact that a file was not found in the repository (in minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeToLive")]
    pub time_to_live: Option<i64>,
}

/// Proxy configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryPypiProxyProxy {
    /// How long to cache artifacts before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentMaxAge")]
    pub content_max_age: Option<i64>,
    /// How long to cache metadata before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataMaxAge")]
    pub metadata_max_age: Option<i64>,
    /// Location of the remote repository being proxied.
    #[serde(rename = "remoteUrl")]
    pub remote_url: String,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryPypiProxyStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryR {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<NexusRepositoryRGroup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosted: Option<NexusRepositoryRHosted>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<NexusRepositoryRProxy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRGroup {
    /// Group configuration.
    pub group: NexusRepositoryRGroupGroup,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryRGroupStorage>,
}

/// Group configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRGroupGroup {
    /// Member repositories' names.
    #[serde(rename = "memberNames")]
    pub member_names: Vec<String>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRGroupStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRHosted {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryRHostedCleanup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<NexusRepositoryRHostedComponent>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryRHostedStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRHostedCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRHostedComponent {
    /// Components in this repository count as proprietary for namespace conflict attacks (requires Sonatype Nexus Firewall)
    #[serde(rename = "proprietaryComponents")]
    pub proprietary_components: bool,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRHostedStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
    /// WritePolicy controls if deployments of and updates to assets are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writePolicy")]
    pub write_policy: Option<NexusRepositoryRHostedStorageWritePolicy>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryRHostedStorageWritePolicy {
    #[serde(rename = "ALLOW")]
    Allow,
    #[serde(rename = "ALLOW_ONCE")]
    AllowOnce,
    #[serde(rename = "DENY")]
    Deny,
    #[serde(rename = "REPLICATION_ONLY")]
    ReplicationOnly,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRProxy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryRProxyCleanup>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpClient")]
    pub http_client: Option<NexusRepositoryRProxyHttpClient>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Negative cache configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCache")]
    pub negative_cache: Option<NexusRepositoryRProxyNegativeCache>,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Proxy configuration.
    pub proxy: NexusRepositoryRProxyProxy,
    /// The name of the routing rule assigned to this repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingRule")]
    pub routing_rule: Option<String>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryRProxyStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRProxyCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRProxyHttpClient {
    /// HTTPClientAuthentication contains HTTP client authentication configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<NexusRepositoryRProxyHttpClientAuthentication>,
    /// Auto-block outbound connections on the repository if remote peer is detected as unreachable/unresponsive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBlock")]
    pub auto_block: Option<bool>,
    /// Block outbound connections on the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocked: Option<bool>,
    /// HTTPClientConnection contains HTTP client connection configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<NexusRepositoryRProxyHttpClientConnection>,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRProxyHttpClientAuthentication {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmDomain")]
    pub ntlm_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmHost")]
    pub ntlm_host: Option<String>,
    /// Password for authentication.
    pub password: String,
    /// Type of authentication to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<NexusRepositoryRProxyHttpClientAuthenticationType>,
    /// Username for authentication.
    pub username: String,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryRProxyHttpClientAuthenticationType {
    #[serde(rename = "username")]
    Username,
    #[serde(rename = "ntlm")]
    Ntlm,
}

/// HTTPClientConnection contains HTTP client connection configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRProxyHttpClientConnection {
    /// Whether to enable redirects to the same location (required by some servers)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCircularRedirects")]
    pub enable_circular_redirects: Option<bool>,
    /// Whether to allow cookies to be stored and used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCookies")]
    pub enable_cookies: Option<bool>,
    /// Total retries if the initial connection attempt suffers a timeout
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    /// Seconds to wait for activity before stopping and retrying the connection",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    /// Use certificates stored in the Nexus Repository Manager truststore to connect to external systems
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTrustStore")]
    pub use_trust_store: Option<bool>,
    /// Custom fragment to append to User-Agent header in HTTP requests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userAgentSuffix")]
    pub user_agent_suffix: Option<String>,
}

/// Negative cache configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRProxyNegativeCache {
    /// Whether to cache responses for content not present in the proxied repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// How long to cache the fact that a file was not found in the repository (in minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeToLive")]
    pub time_to_live: Option<i64>,
}

/// Proxy configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRProxyProxy {
    /// How long to cache artifacts before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentMaxAge")]
    pub content_max_age: Option<i64>,
    /// How long to cache metadata before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataMaxAge")]
    pub metadata_max_age: Option<i64>,
    /// Location of the remote repository being proxied.
    #[serde(rename = "remoteUrl")]
    pub remote_url: String,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRProxyStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRaw {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<NexusRepositoryRawGroup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosted: Option<NexusRepositoryRawHosted>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<NexusRepositoryRawProxy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRawGroup {
    /// Group configuration.
    pub group: NexusRepositoryRawGroupGroup,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub raw: Option<NexusRepositoryRawGroupRaw>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryRawGroupStorage>,
}

/// Group configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRawGroupGroup {
    /// Member repositories' names.
    #[serde(rename = "memberNames")]
    pub member_names: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRawGroupRaw {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDisposition")]
    pub content_disposition: Option<NexusRepositoryRawGroupRawContentDisposition>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryRawGroupRawContentDisposition {
    #[serde(rename = "INLINE")]
    Inline,
    #[serde(rename = "ATTACHMENT")]
    Attachment,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRawGroupStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRawHosted {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryRawHostedCleanup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<NexusRepositoryRawHostedComponent>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub raw: Option<NexusRepositoryRawHostedRaw>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryRawHostedStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRawHostedCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRawHostedComponent {
    /// Components in this repository count as proprietary for namespace conflict attacks (requires Sonatype Nexus Firewall)
    #[serde(rename = "proprietaryComponents")]
    pub proprietary_components: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRawHostedRaw {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDisposition")]
    pub content_disposition: Option<NexusRepositoryRawHostedRawContentDisposition>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryRawHostedRawContentDisposition {
    #[serde(rename = "INLINE")]
    Inline,
    #[serde(rename = "ATTACHMENT")]
    Attachment,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRawHostedStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
    /// WritePolicy controls if deployments of and updates to assets are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writePolicy")]
    pub write_policy: Option<NexusRepositoryRawHostedStorageWritePolicy>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryRawHostedStorageWritePolicy {
    #[serde(rename = "ALLOW")]
    Allow,
    #[serde(rename = "ALLOW_ONCE")]
    AllowOnce,
    #[serde(rename = "DENY")]
    Deny,
    #[serde(rename = "REPLICATION_ONLY")]
    ReplicationOnly,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRawProxy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryRawProxyCleanup>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpClient")]
    pub http_client: Option<NexusRepositoryRawProxyHttpClient>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Negative cache configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCache")]
    pub negative_cache: Option<NexusRepositoryRawProxyNegativeCache>,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Proxy configuration.
    pub proxy: NexusRepositoryRawProxyProxy,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub raw: Option<NexusRepositoryRawProxyRaw>,
    /// The name of the routing rule assigned to this repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingRule")]
    pub routing_rule: Option<String>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryRawProxyStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRawProxyCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRawProxyHttpClient {
    /// HTTPClientAuthentication contains HTTP client authentication configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<NexusRepositoryRawProxyHttpClientAuthentication>,
    /// Auto-block outbound connections on the repository if remote peer is detected as unreachable/unresponsive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBlock")]
    pub auto_block: Option<bool>,
    /// Block outbound connections on the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocked: Option<bool>,
    /// HTTPClientConnection contains HTTP client connection configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<NexusRepositoryRawProxyHttpClientConnection>,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRawProxyHttpClientAuthentication {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmDomain")]
    pub ntlm_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmHost")]
    pub ntlm_host: Option<String>,
    /// Password for authentication.
    pub password: String,
    /// Type of authentication to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<NexusRepositoryRawProxyHttpClientAuthenticationType>,
    /// Username for authentication.
    pub username: String,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryRawProxyHttpClientAuthenticationType {
    #[serde(rename = "username")]
    Username,
    #[serde(rename = "ntlm")]
    Ntlm,
}

/// HTTPClientConnection contains HTTP client connection configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRawProxyHttpClientConnection {
    /// Whether to enable redirects to the same location (required by some servers)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCircularRedirects")]
    pub enable_circular_redirects: Option<bool>,
    /// Whether to allow cookies to be stored and used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCookies")]
    pub enable_cookies: Option<bool>,
    /// Total retries if the initial connection attempt suffers a timeout
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    /// Seconds to wait for activity before stopping and retrying the connection",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    /// Use certificates stored in the Nexus Repository Manager truststore to connect to external systems
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTrustStore")]
    pub use_trust_store: Option<bool>,
    /// Custom fragment to append to User-Agent header in HTTP requests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userAgentSuffix")]
    pub user_agent_suffix: Option<String>,
}

/// Negative cache configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRawProxyNegativeCache {
    /// Whether to cache responses for content not present in the proxied repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// How long to cache the fact that a file was not found in the repository (in minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeToLive")]
    pub time_to_live: Option<i64>,
}

/// Proxy configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRawProxyProxy {
    /// How long to cache artifacts before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentMaxAge")]
    pub content_max_age: Option<i64>,
    /// How long to cache metadata before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataMaxAge")]
    pub metadata_max_age: Option<i64>,
    /// Location of the remote repository being proxied.
    #[serde(rename = "remoteUrl")]
    pub remote_url: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRawProxyRaw {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDisposition")]
    pub content_disposition: Option<NexusRepositoryRawProxyRawContentDisposition>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryRawProxyRawContentDisposition {
    #[serde(rename = "INLINE")]
    Inline,
    #[serde(rename = "ATTACHMENT")]
    Attachment,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRawProxyStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRubyGems {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<NexusRepositoryRubyGemsGroup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosted: Option<NexusRepositoryRubyGemsHosted>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<NexusRepositoryRubyGemsProxy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRubyGemsGroup {
    /// Group configuration.
    pub group: NexusRepositoryRubyGemsGroupGroup,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryRubyGemsGroupStorage>,
}

/// Group configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRubyGemsGroupGroup {
    /// Member repositories' names.
    #[serde(rename = "memberNames")]
    pub member_names: Vec<String>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRubyGemsGroupStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRubyGemsHosted {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryRubyGemsHostedCleanup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<NexusRepositoryRubyGemsHostedComponent>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryRubyGemsHostedStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRubyGemsHostedCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRubyGemsHostedComponent {
    /// Components in this repository count as proprietary for namespace conflict attacks (requires Sonatype Nexus Firewall)
    #[serde(rename = "proprietaryComponents")]
    pub proprietary_components: bool,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRubyGemsHostedStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
    /// WritePolicy controls if deployments of and updates to assets are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writePolicy")]
    pub write_policy: Option<NexusRepositoryRubyGemsHostedStorageWritePolicy>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryRubyGemsHostedStorageWritePolicy {
    #[serde(rename = "ALLOW")]
    Allow,
    #[serde(rename = "ALLOW_ONCE")]
    AllowOnce,
    #[serde(rename = "DENY")]
    Deny,
    #[serde(rename = "REPLICATION_ONLY")]
    ReplicationOnly,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRubyGemsProxy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryRubyGemsProxyCleanup>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpClient")]
    pub http_client: Option<NexusRepositoryRubyGemsProxyHttpClient>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Negative cache configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCache")]
    pub negative_cache: Option<NexusRepositoryRubyGemsProxyNegativeCache>,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Proxy configuration.
    pub proxy: NexusRepositoryRubyGemsProxyProxy,
    /// The name of the routing rule assigned to this repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingRule")]
    pub routing_rule: Option<String>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryRubyGemsProxyStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRubyGemsProxyCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRubyGemsProxyHttpClient {
    /// HTTPClientAuthentication contains HTTP client authentication configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<NexusRepositoryRubyGemsProxyHttpClientAuthentication>,
    /// Auto-block outbound connections on the repository if remote peer is detected as unreachable/unresponsive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBlock")]
    pub auto_block: Option<bool>,
    /// Block outbound connections on the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocked: Option<bool>,
    /// HTTPClientConnection contains HTTP client connection configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<NexusRepositoryRubyGemsProxyHttpClientConnection>,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRubyGemsProxyHttpClientAuthentication {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmDomain")]
    pub ntlm_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmHost")]
    pub ntlm_host: Option<String>,
    /// Password for authentication.
    pub password: String,
    /// Type of authentication to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<NexusRepositoryRubyGemsProxyHttpClientAuthenticationType>,
    /// Username for authentication.
    pub username: String,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryRubyGemsProxyHttpClientAuthenticationType {
    #[serde(rename = "username")]
    Username,
    #[serde(rename = "ntlm")]
    Ntlm,
}

/// HTTPClientConnection contains HTTP client connection configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRubyGemsProxyHttpClientConnection {
    /// Whether to enable redirects to the same location (required by some servers)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCircularRedirects")]
    pub enable_circular_redirects: Option<bool>,
    /// Whether to allow cookies to be stored and used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCookies")]
    pub enable_cookies: Option<bool>,
    /// Total retries if the initial connection attempt suffers a timeout
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    /// Seconds to wait for activity before stopping and retrying the connection",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    /// Use certificates stored in the Nexus Repository Manager truststore to connect to external systems
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTrustStore")]
    pub use_trust_store: Option<bool>,
    /// Custom fragment to append to User-Agent header in HTTP requests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userAgentSuffix")]
    pub user_agent_suffix: Option<String>,
}

/// Negative cache configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRubyGemsProxyNegativeCache {
    /// Whether to cache responses for content not present in the proxied repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// How long to cache the fact that a file was not found in the repository (in minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeToLive")]
    pub time_to_live: Option<i64>,
}

/// Proxy configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRubyGemsProxyProxy {
    /// How long to cache artifacts before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentMaxAge")]
    pub content_max_age: Option<i64>,
    /// How long to cache metadata before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataMaxAge")]
    pub metadata_max_age: Option<i64>,
    /// Location of the remote repository being proxied.
    #[serde(rename = "remoteUrl")]
    pub remote_url: String,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryRubyGemsProxyStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryYum {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<NexusRepositoryYumGroup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosted: Option<NexusRepositoryYumHosted>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<NexusRepositoryYumProxy>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryYumGroup {
    /// Group configuration.
    pub group: NexusRepositoryYumGroupGroup,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryYumGroupStorage>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "yumSigning")]
    pub yum_signing: Option<NexusRepositoryYumGroupYumSigning>,
}

/// Group configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryYumGroupGroup {
    /// Member repositories' names.
    #[serde(rename = "memberNames")]
    pub member_names: Vec<String>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryYumGroupStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryYumGroupYumSigning {
    /// PGP signing key pair (armored private key e.g. gpg --export-secret-key --armor)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keypair: Option<String>,
    /// Passphrase to access PGP signing key
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passphrase: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryYumHosted {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryYumHostedCleanup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<NexusRepositoryYumHostedComponent>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryYumHostedStorage>,
    /// Yum contains data of hosted repositories of format Yum.
    pub yum: NexusRepositoryYumHostedYum,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryYumHostedCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryYumHostedComponent {
    /// Components in this repository count as proprietary for namespace conflict attacks (requires Sonatype Nexus Firewall)
    #[serde(rename = "proprietaryComponents")]
    pub proprietary_components: bool,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryYumHostedStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
    /// WritePolicy controls if deployments of and updates to assets are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writePolicy")]
    pub write_policy: Option<NexusRepositoryYumHostedStorageWritePolicy>,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryYumHostedStorageWritePolicy {
    #[serde(rename = "ALLOW")]
    Allow,
    #[serde(rename = "ALLOW_ONCE")]
    AllowOnce,
    #[serde(rename = "DENY")]
    Deny,
    #[serde(rename = "REPLICATION_ONLY")]
    ReplicationOnly,
}

/// Yum contains data of hosted repositories of format Yum.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryYumHostedYum {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deployPolicy")]
    pub deploy_policy: Option<NexusRepositoryYumHostedYumDeployPolicy>,
    #[serde(rename = "repodataDepth")]
    pub repodata_depth: i64,
}

/// Yum contains data of hosted repositories of format Yum.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryYumHostedYumDeployPolicy {
    #[serde(rename = "PERMISSIVE")]
    Permissive,
    #[serde(rename = "STRICT")]
    Strict,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryYumProxy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cleanup: Option<NexusRepositoryYumProxyCleanup>,
    /// HTTP client configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpClient")]
    pub http_client: Option<NexusRepositoryYumProxyHttpClient>,
    /// A unique identifier for this repository.
    /// Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.
    pub name: String,
    /// Negative cache configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCache")]
    pub negative_cache: Option<NexusRepositoryYumProxyNegativeCache>,
    /// Online determines if the repository accepts incoming requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// Proxy configuration.
    pub proxy: NexusRepositoryYumProxyProxy,
    /// The name of the routing rule assigned to this repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingRule")]
    pub routing_rule: Option<String>,
    /// Storage configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<NexusRepositoryYumProxyStorage>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "yumSigning")]
    pub yum_signing: Option<NexusRepositoryYumProxyYumSigning>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryYumProxyCleanup {
    ///  Components that match any of the applied policies will be deleted.
    #[serde(rename = "policyNames")]
    pub policy_names: Vec<String>,
}

/// HTTP client configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryYumProxyHttpClient {
    /// HTTPClientAuthentication contains HTTP client authentication configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<NexusRepositoryYumProxyHttpClientAuthentication>,
    /// Auto-block outbound connections on the repository if remote peer is detected as unreachable/unresponsive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBlock")]
    pub auto_block: Option<bool>,
    /// Block outbound connections on the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocked: Option<bool>,
    /// HTTPClientConnection contains HTTP client connection configuration data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<NexusRepositoryYumProxyHttpClientConnection>,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryYumProxyHttpClientAuthentication {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmDomain")]
    pub ntlm_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntlmHost")]
    pub ntlm_host: Option<String>,
    /// Password for authentication.
    pub password: String,
    /// Type of authentication to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<NexusRepositoryYumProxyHttpClientAuthenticationType>,
    /// Username for authentication.
    pub username: String,
}

/// HTTPClientAuthentication contains HTTP client authentication configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NexusRepositoryYumProxyHttpClientAuthenticationType {
    #[serde(rename = "username")]
    Username,
    #[serde(rename = "ntlm")]
    Ntlm,
}

/// HTTPClientConnection contains HTTP client connection configuration data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryYumProxyHttpClientConnection {
    /// Whether to enable redirects to the same location (required by some servers)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCircularRedirects")]
    pub enable_circular_redirects: Option<bool>,
    /// Whether to allow cookies to be stored and used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCookies")]
    pub enable_cookies: Option<bool>,
    /// Total retries if the initial connection attempt suffers a timeout
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    /// Seconds to wait for activity before stopping and retrying the connection",
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    /// Use certificates stored in the Nexus Repository Manager truststore to connect to external systems
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTrustStore")]
    pub use_trust_store: Option<bool>,
    /// Custom fragment to append to User-Agent header in HTTP requests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userAgentSuffix")]
    pub user_agent_suffix: Option<String>,
}

/// Negative cache configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryYumProxyNegativeCache {
    /// Whether to cache responses for content not present in the proxied repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// How long to cache the fact that a file was not found in the repository (in minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeToLive")]
    pub time_to_live: Option<i64>,
}

/// Proxy configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryYumProxyProxy {
    /// How long to cache artifacts before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentMaxAge")]
    pub content_max_age: Option<i64>,
    /// How long to cache metadata before rechecking the remote repository (in minutes)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataMaxAge")]
    pub metadata_max_age: Option<i64>,
    /// Location of the remote repository being proxied.
    #[serde(rename = "remoteUrl")]
    pub remote_url: String,
}

/// Storage configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryYumProxyStorage {
    /// Blob store used to store repository contents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blobStoreName")]
    pub blob_store_name: Option<String>,
    /// StrictContentTypeValidation: Whether to validate uploaded content's MIME type appropriate for the repository format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "strictContentTypeValidation")]
    pub strict_content_type_validation: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryYumProxyYumSigning {
    /// PGP signing key pair (armored private key e.g. gpg --export-secret-key --armor)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keypair: Option<String>,
    /// Passphrase to access PGP signing key
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passphrase: Option<String>,
}

/// NexusRepositoryStatus defines the observed state of NexusRepository.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NexusRepositoryStatus {
    /// Error is an error message if something went wrong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// Value is a status of the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

