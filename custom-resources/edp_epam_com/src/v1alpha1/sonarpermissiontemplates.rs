// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/epam/edp-sonar-operator/edp.epam.com/v1alpha1/sonarpermissiontemplates.yaml
// kopium version: 0.22.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// SonarPermissionTemplateSpec defines the desired state of SonarPermissionTemplate.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "edp.epam.com", version = "v1alpha1", kind = "SonarPermissionTemplate", plural = "sonarpermissiontemplates")]
#[kube(namespaced)]
#[kube(status = "SonarPermissionTemplateStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct SonarPermissionTemplateSpec {
    /// Default is a flag to set permission template as default.
    /// Only one permission template can be default.
    /// If several permission templates have default flag, the random one will be chosen.
    /// Default permission template can't be deleted. You need to set another permission template as default before.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default: Option<bool>,
    /// Description of sonar permission template.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// GroupsPermissions is a map of groups and permissions assigned to them.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupsPermissions")]
    pub groups_permissions: Option<BTreeMap<String, Vec<String>>>,
    /// Name is a name of permission template.
    /// Name should be unique across all permission templates.
    /// Do not edit this field after creation. Otherwise, the permission template will be recreated.
    pub name: String,
    /// ProjectKeyPattern is key pattern. Must be a valid Java regular expression.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectKeyPattern")]
    pub project_key_pattern: Option<String>,
    /// SonarRef is a reference to Sonar custom resource.
    #[serde(rename = "sonarRef")]
    pub sonar_ref: SonarPermissionTemplateSonarRef,
}

/// SonarRef is a reference to Sonar custom resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SonarPermissionTemplateSonarRef {
    /// Kind specifies the kind of the Sonar resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name specifies the name of the Sonar resource.
    pub name: String,
}

/// SonarPermissionTemplateStatus defines the observed state of SonarPermissionTemplate.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SonarPermissionTemplateStatus {
    /// Error is an error message if something went wrong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// Value is a status of the permission template.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

