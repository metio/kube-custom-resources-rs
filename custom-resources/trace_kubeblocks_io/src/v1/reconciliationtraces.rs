// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/apecloud/kubeblocks/trace.kubeblocks.io/v1/reconciliationtraces.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::api::core::v1::ObjectReference;
}
use self::prelude::*;

/// ReconciliationTraceSpec defines the desired state of ReconciliationTrace
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "trace.kubeblocks.io", version = "v1", kind = "ReconciliationTrace", plural = "reconciliationtraces")]
#[kube(namespaced)]
#[kube(status = "ReconciliationTraceStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ReconciliationTraceSpec {
    /// DryRun tells the Controller to simulate the reconciliation process with a new desired spec of the TargetObject.
    /// And a reconciliation plan will be generated and described in the ReconciliationTraceStatus.
    /// The plan generation process will not impact the state of the TargetObject.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dryRun")]
    pub dry_run: Option<ReconciliationTraceDryRun>,
    /// Locale specifies the locale to use when localizing the reconciliation trace.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub locale: Option<String>,
    /// StateEvaluationExpression specifies the state evaluation expression used during reconciliation progress observation.
    /// The whole reconciliation process from the creation of the TargetObject to the deletion of it
    /// is separated into several reconciliation cycles.
    /// The StateEvaluationExpression is applied to the TargetObject,
    /// and an evaluation result of true indicates the end of a reconciliation cycle.
    /// StateEvaluationExpression overrides the builtin default value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stateEvaluationExpression")]
    pub state_evaluation_expression: Option<ReconciliationTraceStateEvaluationExpression>,
    /// TargetObject specifies the target Cluster object.
    /// Default is the Cluster object with same namespace and name as this ReconciliationTrace object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetObject")]
    pub target_object: Option<ReconciliationTraceTargetObject>,
}

/// DryRun tells the Controller to simulate the reconciliation process with a new desired spec of the TargetObject.
/// And a reconciliation plan will be generated and described in the ReconciliationTraceStatus.
/// The plan generation process will not impact the state of the TargetObject.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceDryRun {
    /// DesiredSpec specifies the desired spec of the TargetObject.
    /// The desired spec will be merged into the current spec by a strategic merge patch way to build the final spec,
    /// and the reconciliation plan will be calculated by comparing the current spec to the final spec.
    /// DesiredSpec should be a valid YAML string.
    #[serde(rename = "desiredSpec")]
    pub desired_spec: String,
}

/// StateEvaluationExpression specifies the state evaluation expression used during reconciliation progress observation.
/// The whole reconciliation process from the creation of the TargetObject to the deletion of it
/// is separated into several reconciliation cycles.
/// The StateEvaluationExpression is applied to the TargetObject,
/// and an evaluation result of true indicates the end of a reconciliation cycle.
/// StateEvaluationExpression overrides the builtin default value.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStateEvaluationExpression {
    /// CELExpression specifies to use CEL to evaluation the object state.
    /// The root object used in the expression is the primary object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "celExpression")]
    pub cel_expression: Option<ReconciliationTraceStateEvaluationExpressionCelExpression>,
}

/// CELExpression specifies to use CEL to evaluation the object state.
/// The root object used in the expression is the primary object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStateEvaluationExpressionCelExpression {
    /// Expression specifies the CEL expression.
    pub expression: String,
}

/// TargetObject specifies the target Cluster object.
/// Default is the Cluster object with same namespace and name as this ReconciliationTrace object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceTargetObject {
    /// Name of the referent.
    /// Default is same as the ReconciliationTrace object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// Default is same as the ReconciliationTrace object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// ReconciliationTraceStatus defines the observed state of ReconciliationTrace
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatus {
    /// CurrentState is the current state of the latest reconciliation cycle,
    /// that is the reconciliation process from the end of last reconciliation cycle until now.
    #[serde(rename = "currentState")]
    pub current_state: ReconciliationTraceStatusCurrentState,
    /// DesiredState is the desired state of the latest reconciliation cycle.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredState")]
    pub desired_state: Option<ReconciliationTraceStatusDesiredState>,
    /// DryRunResult specifies the dry-run result.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dryRunResult")]
    pub dry_run_result: Option<ReconciliationTraceStatusDryRunResult>,
    /// InitialObjectTree specifies the initial object tree when the latest reconciliation cycle started.
    #[serde(rename = "initialObjectTree")]
    pub initial_object_tree: ReconciliationTraceStatusInitialObjectTree,
}

/// CurrentState is the current state of the latest reconciliation cycle,
/// that is the reconciliation process from the end of last reconciliation cycle until now.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusCurrentState {
    /// Changes describes the detail reconciliation process.
    pub changes: Vec<ReconciliationTraceStatusCurrentStateChanges>,
    /// ObjectTree specifies the current object tree of the reconciliation cycle.
    /// Ideally, ObjectTree should be same as applying Changes to InitialObjectTree.
    #[serde(rename = "objectTree")]
    pub object_tree: ReconciliationTraceStatusCurrentStateObjectTree,
    /// Summary summarizes the ObjectTree and Changes.
    pub summary: ReconciliationTraceStatusCurrentStateSummary,
}

/// ObjectChange defines a detailed change of an object.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReconciliationTraceStatusCurrentStateChanges {
    /// ChangeType specifies the change type.
    /// Event - specifies that this is a Kubernetes Event.
    /// Creation - specifies that this is an object creation.
    /// Update - specifies that this is an object update.
    /// Deletion - specifies that this is an object deletion.
    #[serde(rename = "changeType")]
    pub change_type: ReconciliationTraceStatusCurrentStateChangesChangeType,
    /// Description describes the change in a user-friendly way.
    pub description: String,
    /// EventAttributes specifies the attributes of the event when ChangeType is Event.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventAttributes")]
    pub event_attributes: Option<ReconciliationTraceStatusCurrentStateChangesEventAttributes>,
    /// LocalDescription is the localized version of Description by using the Locale specified in `spec.locale`.
    /// Empty if the `spec.locale` is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localDescription")]
    pub local_description: Option<String>,
    /// ObjectReference specifies the Object this change described.
    #[serde(rename = "objectReference")]
    pub object_reference: ObjectReference,
    /// Revision specifies the revision of the object after this change.
    /// Revision can be compared globally between all ObjectChanges of all Objects, to build a total order object change sequence.
    pub revision: i64,
    /// Timestamp is a timestamp representing the ReconciliationTrace Controller time when this change occurred.
    /// It is not guaranteed to be set in happens-before order across separate changes.
    /// It is represented in RFC3339 form and is in UTC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
}

/// ObjectChange defines a detailed change of an object.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ReconciliationTraceStatusCurrentStateChangesChangeType {
    Event,
    Creation,
    Update,
    Deletion,
}

/// EventAttributes specifies the attributes of the event when ChangeType is Event.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusCurrentStateChangesEventAttributes {
    /// Name of the Event.
    pub name: String,
    /// Reason of the Event.
    pub reason: String,
    /// Type of the Event.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// ObjectReference specifies the Object this change described.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusCurrentStateChangesObjectReference {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    /// TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// ObjectTree specifies the current object tree of the reconciliation cycle.
/// Ideally, ObjectTree should be same as applying Changes to InitialObjectTree.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusCurrentStateObjectTree {
    /// Primary specifies reference of the primary object.
    pub primary: ObjectReference,
    /// Secondaries describes all the secondary objects of this object, if any.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secondaries: Option<serde_json::Value>,
}

/// Primary specifies reference of the primary object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusCurrentStateObjectTreePrimary {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    /// TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// Summary summarizes the ObjectTree and Changes.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusCurrentStateSummary {
    /// ObjectSummaries summarizes each object type.
    #[serde(rename = "objectSummaries")]
    pub object_summaries: Vec<ReconciliationTraceStatusCurrentStateSummaryObjectSummaries>,
}

/// ObjectSummary defines the total and change of an object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusCurrentStateSummaryObjectSummaries {
    /// ChangeSummary summarizes the change by comparing the final state to the current state of this type.
    /// Nil means no change.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "changeSummary")]
    pub change_summary: Option<ReconciliationTraceStatusCurrentStateSummaryObjectSummariesChangeSummary>,
    /// ObjectType of the object.
    #[serde(rename = "objectType")]
    pub object_type: ReconciliationTraceStatusCurrentStateSummaryObjectSummariesObjectType,
    /// Total number of the object of type defined by ObjectType.
    pub total: i32,
}

/// ChangeSummary summarizes the change by comparing the final state to the current state of this type.
/// Nil means no change.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusCurrentStateSummaryObjectSummariesChangeSummary {
    /// Added specifies the number of object will be added.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub added: Option<i32>,
    /// Deleted specifies the number of object will be deleted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deleted: Option<i32>,
    /// Updated specifies the number of object will be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub updated: Option<i32>,
}

/// ObjectType of the object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusCurrentStateSummaryObjectSummariesObjectType {
    /// APIVersion of the type.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Kind of the type.
    pub kind: String,
}

/// DesiredState is the desired state of the latest reconciliation cycle.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusDesiredState {
    /// Changes describes the detail reconciliation process.
    pub changes: Vec<ReconciliationTraceStatusDesiredStateChanges>,
    /// ObjectTree specifies the current object tree of the reconciliation cycle.
    /// Ideally, ObjectTree should be same as applying Changes to InitialObjectTree.
    #[serde(rename = "objectTree")]
    pub object_tree: ReconciliationTraceStatusDesiredStateObjectTree,
    /// Summary summarizes the ObjectTree and Changes.
    pub summary: ReconciliationTraceStatusDesiredStateSummary,
}

/// ObjectChange defines a detailed change of an object.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReconciliationTraceStatusDesiredStateChanges {
    /// ChangeType specifies the change type.
    /// Event - specifies that this is a Kubernetes Event.
    /// Creation - specifies that this is an object creation.
    /// Update - specifies that this is an object update.
    /// Deletion - specifies that this is an object deletion.
    #[serde(rename = "changeType")]
    pub change_type: ReconciliationTraceStatusDesiredStateChangesChangeType,
    /// Description describes the change in a user-friendly way.
    pub description: String,
    /// EventAttributes specifies the attributes of the event when ChangeType is Event.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventAttributes")]
    pub event_attributes: Option<ReconciliationTraceStatusDesiredStateChangesEventAttributes>,
    /// LocalDescription is the localized version of Description by using the Locale specified in `spec.locale`.
    /// Empty if the `spec.locale` is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localDescription")]
    pub local_description: Option<String>,
    /// ObjectReference specifies the Object this change described.
    #[serde(rename = "objectReference")]
    pub object_reference: ObjectReference,
    /// Revision specifies the revision of the object after this change.
    /// Revision can be compared globally between all ObjectChanges of all Objects, to build a total order object change sequence.
    pub revision: i64,
    /// Timestamp is a timestamp representing the ReconciliationTrace Controller time when this change occurred.
    /// It is not guaranteed to be set in happens-before order across separate changes.
    /// It is represented in RFC3339 form and is in UTC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
}

/// ObjectChange defines a detailed change of an object.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ReconciliationTraceStatusDesiredStateChangesChangeType {
    Event,
    Creation,
    Update,
    Deletion,
}

/// EventAttributes specifies the attributes of the event when ChangeType is Event.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusDesiredStateChangesEventAttributes {
    /// Name of the Event.
    pub name: String,
    /// Reason of the Event.
    pub reason: String,
    /// Type of the Event.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// ObjectReference specifies the Object this change described.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusDesiredStateChangesObjectReference {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    /// TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// ObjectTree specifies the current object tree of the reconciliation cycle.
/// Ideally, ObjectTree should be same as applying Changes to InitialObjectTree.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusDesiredStateObjectTree {
    /// Primary specifies reference of the primary object.
    pub primary: ObjectReference,
    /// Secondaries describes all the secondary objects of this object, if any.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secondaries: Option<serde_json::Value>,
}

/// Primary specifies reference of the primary object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusDesiredStateObjectTreePrimary {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    /// TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// Summary summarizes the ObjectTree and Changes.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusDesiredStateSummary {
    /// ObjectSummaries summarizes each object type.
    #[serde(rename = "objectSummaries")]
    pub object_summaries: Vec<ReconciliationTraceStatusDesiredStateSummaryObjectSummaries>,
}

/// ObjectSummary defines the total and change of an object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusDesiredStateSummaryObjectSummaries {
    /// ChangeSummary summarizes the change by comparing the final state to the current state of this type.
    /// Nil means no change.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "changeSummary")]
    pub change_summary: Option<ReconciliationTraceStatusDesiredStateSummaryObjectSummariesChangeSummary>,
    /// ObjectType of the object.
    #[serde(rename = "objectType")]
    pub object_type: ReconciliationTraceStatusDesiredStateSummaryObjectSummariesObjectType,
    /// Total number of the object of type defined by ObjectType.
    pub total: i32,
}

/// ChangeSummary summarizes the change by comparing the final state to the current state of this type.
/// Nil means no change.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusDesiredStateSummaryObjectSummariesChangeSummary {
    /// Added specifies the number of object will be added.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub added: Option<i32>,
    /// Deleted specifies the number of object will be deleted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deleted: Option<i32>,
    /// Updated specifies the number of object will be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub updated: Option<i32>,
}

/// ObjectType of the object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusDesiredStateSummaryObjectSummariesObjectType {
    /// APIVersion of the type.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Kind of the type.
    pub kind: String,
}

/// DryRunResult specifies the dry-run result.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusDryRunResult {
    /// DesiredSpecRevision specifies the revision of the DesiredSpec.
    #[serde(rename = "desiredSpecRevision")]
    pub desired_spec_revision: String,
    /// Message specifies a description of the failure reason.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// ObservedTargetGeneration specifies the observed generation of the TargetObject.
    #[serde(rename = "observedTargetGeneration")]
    pub observed_target_generation: i64,
    /// Phase specifies the current phase of the plan generation process.
    /// Succeed - the plan is calculated successfully.
    /// Failed - the plan can't be generated for some reason described in Reason.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<ReconciliationTraceStatusDryRunResultPhase>,
    /// Plan describes the detail reconciliation process if the DesiredSpec is applied.
    pub plan: ReconciliationTraceStatusDryRunResultPlan,
    /// Reason specifies the reason when the Phase is Failed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// SpecDiff describes the diff between the current spec and the final spec.
    /// The whole spec struct will be compared and an example SpecDiff looks like:
    /// {
    ///  	Affinity: {
    ///  		PodAntiAffinity: "Preferred",
    ///  		Tenancy: "SharedNode",
    ///  	},
    ///  	ComponentSpecs: {
    ///  		{
    ///  			ComponentDef: "postgresql",
    ///  			Name: "postgresql",
    /// -			Replicas: 2,
    ///  			Resources:
    ///  			{
    ///  				Limits:
    ///  				{
    /// -					CPU: 500m,
    /// -					Memory: 512Mi,
    ///  				},
    ///  				Requests:
    ///  				{
    /// -					CPU: 500m,
    /// -					Memory: 512Mi,
    ///  				},
    ///  			},
    ///  		},
    ///  	},
    /// }
    #[serde(rename = "specDiff")]
    pub spec_diff: String,
}

/// DryRunResult specifies the dry-run result.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ReconciliationTraceStatusDryRunResultPhase {
    Succeed,
    Failed,
}

/// Plan describes the detail reconciliation process if the DesiredSpec is applied.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusDryRunResultPlan {
    /// Changes describes the detail reconciliation process.
    pub changes: Vec<ReconciliationTraceStatusDryRunResultPlanChanges>,
    /// ObjectTree specifies the current object tree of the reconciliation cycle.
    /// Ideally, ObjectTree should be same as applying Changes to InitialObjectTree.
    #[serde(rename = "objectTree")]
    pub object_tree: ReconciliationTraceStatusDryRunResultPlanObjectTree,
    /// Summary summarizes the ObjectTree and Changes.
    pub summary: ReconciliationTraceStatusDryRunResultPlanSummary,
}

/// ObjectChange defines a detailed change of an object.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ReconciliationTraceStatusDryRunResultPlanChanges {
    /// ChangeType specifies the change type.
    /// Event - specifies that this is a Kubernetes Event.
    /// Creation - specifies that this is an object creation.
    /// Update - specifies that this is an object update.
    /// Deletion - specifies that this is an object deletion.
    #[serde(rename = "changeType")]
    pub change_type: ReconciliationTraceStatusDryRunResultPlanChangesChangeType,
    /// Description describes the change in a user-friendly way.
    pub description: String,
    /// EventAttributes specifies the attributes of the event when ChangeType is Event.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventAttributes")]
    pub event_attributes: Option<ReconciliationTraceStatusDryRunResultPlanChangesEventAttributes>,
    /// LocalDescription is the localized version of Description by using the Locale specified in `spec.locale`.
    /// Empty if the `spec.locale` is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localDescription")]
    pub local_description: Option<String>,
    /// ObjectReference specifies the Object this change described.
    #[serde(rename = "objectReference")]
    pub object_reference: ObjectReference,
    /// Revision specifies the revision of the object after this change.
    /// Revision can be compared globally between all ObjectChanges of all Objects, to build a total order object change sequence.
    pub revision: i64,
    /// Timestamp is a timestamp representing the ReconciliationTrace Controller time when this change occurred.
    /// It is not guaranteed to be set in happens-before order across separate changes.
    /// It is represented in RFC3339 form and is in UTC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
}

/// ObjectChange defines a detailed change of an object.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ReconciliationTraceStatusDryRunResultPlanChangesChangeType {
    Event,
    Creation,
    Update,
    Deletion,
}

/// EventAttributes specifies the attributes of the event when ChangeType is Event.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusDryRunResultPlanChangesEventAttributes {
    /// Name of the Event.
    pub name: String,
    /// Reason of the Event.
    pub reason: String,
    /// Type of the Event.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// ObjectReference specifies the Object this change described.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusDryRunResultPlanChangesObjectReference {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    /// TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// ObjectTree specifies the current object tree of the reconciliation cycle.
/// Ideally, ObjectTree should be same as applying Changes to InitialObjectTree.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusDryRunResultPlanObjectTree {
    /// Primary specifies reference of the primary object.
    pub primary: ObjectReference,
    /// Secondaries describes all the secondary objects of this object, if any.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secondaries: Option<serde_json::Value>,
}

/// Primary specifies reference of the primary object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusDryRunResultPlanObjectTreePrimary {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    /// TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// Summary summarizes the ObjectTree and Changes.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusDryRunResultPlanSummary {
    /// ObjectSummaries summarizes each object type.
    #[serde(rename = "objectSummaries")]
    pub object_summaries: Vec<ReconciliationTraceStatusDryRunResultPlanSummaryObjectSummaries>,
}

/// ObjectSummary defines the total and change of an object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusDryRunResultPlanSummaryObjectSummaries {
    /// ChangeSummary summarizes the change by comparing the final state to the current state of this type.
    /// Nil means no change.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "changeSummary")]
    pub change_summary: Option<ReconciliationTraceStatusDryRunResultPlanSummaryObjectSummariesChangeSummary>,
    /// ObjectType of the object.
    #[serde(rename = "objectType")]
    pub object_type: ReconciliationTraceStatusDryRunResultPlanSummaryObjectSummariesObjectType,
    /// Total number of the object of type defined by ObjectType.
    pub total: i32,
}

/// ChangeSummary summarizes the change by comparing the final state to the current state of this type.
/// Nil means no change.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusDryRunResultPlanSummaryObjectSummariesChangeSummary {
    /// Added specifies the number of object will be added.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub added: Option<i32>,
    /// Deleted specifies the number of object will be deleted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deleted: Option<i32>,
    /// Updated specifies the number of object will be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub updated: Option<i32>,
}

/// ObjectType of the object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusDryRunResultPlanSummaryObjectSummariesObjectType {
    /// APIVersion of the type.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Kind of the type.
    pub kind: String,
}

/// InitialObjectTree specifies the initial object tree when the latest reconciliation cycle started.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusInitialObjectTree {
    /// Primary specifies reference of the primary object.
    pub primary: ObjectReference,
    /// Secondaries describes all the secondary objects of this object, if any.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secondaries: Option<serde_json::Value>,
}

/// Primary specifies reference of the primary object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReconciliationTraceStatusInitialObjectTreePrimary {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string
    /// should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
    /// For example, if the object reference is to a container within a pod, this would take on a value like:
    /// "spec.containers{name}" (where "name" refers to the name of the container that triggered
    /// the event) or if no container name is specified "spec.containers[2]" (container with
    /// index 2 in this pod). This syntax is chosen only to have some well-defined way of
    /// referencing a part of an object.
    /// TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any.
    /// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

