// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/aws-controllers-k8s/eks-controller/eks.services.k8s.aws/v1alpha1/clusters.yaml
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ClusterSpec defines the desired state of Cluster.
/// 
/// An object representing an Amazon EKS cluster.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "eks.services.k8s.aws", version = "v1alpha1", kind = "Cluster", plural = "clusters")]
#[kube(namespaced)]
#[kube(status = "ClusterStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ClusterSpec {
    /// The access configuration for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessConfig")]
    pub access_config: Option<ClusterAccessConfig>,
    /// If you set this value to False when creating a cluster, the default networking
    /// add-ons will not be installed.
    /// 
    /// The default networking addons include vpc-cni, coredns, and kube-proxy.
    /// 
    /// Use this option when you plan to install third-party alternative add-ons
    /// or self-manage the default networking add-ons.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootstrapSelfManagedAddons")]
    pub bootstrap_self_managed_addons: Option<bool>,
    /// A unique, case-sensitive identifier that you provide to ensurethe idempotency
    /// of the request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientRequestToken")]
    pub client_request_token: Option<String>,
    /// Enable or disable the compute capability of EKS Auto Mode when creating your
    /// EKS Auto Mode cluster. If the compute capability is enabled, EKS Auto Mode
    /// will create and delete EC2 Managed Instances in your Amazon Web Services
    /// account
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "computeConfig")]
    pub compute_config: Option<ClusterComputeConfig>,
    /// The encryption configuration for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfig")]
    pub encryption_config: Option<Vec<ClusterEncryptionConfig>>,
    /// The Kubernetes network configuration for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesNetworkConfig")]
    pub kubernetes_network_config: Option<ClusterKubernetesNetworkConfig>,
    /// Enable or disable exporting the Kubernetes control plane logs for your cluster
    /// to CloudWatch Logs. By default, cluster control plane logs aren't exported
    /// to CloudWatch Logs. For more information, see Amazon EKS Cluster control
    /// plane logs (https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html)
    /// in the Amazon EKS User Guide .
    /// 
    /// CloudWatch Logs ingestion, archive storage, and data scanning rates apply
    /// to exported control plane logs. For more information, see CloudWatch Pricing
    /// (http://aws.amazon.com/cloudwatch/pricing/).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logging: Option<ClusterLogging>,
    /// The unique name to give to your cluster. The name can contain only alphanumeric
    /// characters (case-sensitive),hyphens, and underscores. It must start with
    /// an alphanumeric character and can't be longer than100 characters. The name
    /// must be unique within the Amazon Web Services Region and Amazon Web Services
    /// account that you're creating the cluster in.
    pub name: String,
    /// An object representing the configuration of your local Amazon EKS cluster
    /// on an Amazon Web Services Outpost. Before creating a local cluster on an
    /// Outpost, review Local clusters for Amazon EKS on Amazon Web Services Outposts
    /// (https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-local-cluster-overview.html)
    /// in the Amazon EKS User Guide. This object isn't available for creating Amazon
    /// EKS clusters on the Amazon Web Services cloud.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outpostConfig")]
    pub outpost_config: Option<ClusterOutpostConfig>,
    /// The configuration in the cluster for EKS Hybrid Nodes. You can't change or
    /// update this configuration after the cluster is created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteNetworkConfig")]
    pub remote_network_config: Option<ClusterRemoteNetworkConfig>,
    /// The VPC configuration that's used by the cluster control plane. Amazon EKS
    /// VPC resources have specific requirements to work properly with Kubernetes.
    /// For more information, see Cluster VPC Considerations (https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html)
    /// and Cluster Security Group Considerations (https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html)
    /// in the Amazon EKS User Guide. You must specify at least two subnets. You
    /// can specify up to five security groups. However, we recommend that you use
    /// a dedicated security group for your cluster control plane.
    #[serde(rename = "resourcesVPCConfig")]
    pub resources_vpc_config: ClusterResourcesVpcConfig,
    /// The Amazon Resource Name (ARN) of the IAM role that provides permissions
    /// for the Kubernetes control plane to make calls to Amazon Web Services API
    /// operations on your behalf. For more information, see Amazon EKS Service IAM
    /// Role (https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html)
    /// in the Amazon EKS User Guide .
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleARN")]
    pub role_arn: Option<String>,
    /// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference
    /// type to provide more user friendly syntax for references using 'from' field
    /// Ex:
    /// APIIDRef:
    /// 
    /// 	from:
    /// 	  name: my-api
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleRef")]
    pub role_ref: Option<ClusterRoleRef>,
    /// Enable or disable the block storage capability of EKS Auto Mode when creating
    /// your EKS Auto Mode cluster. If the block storage capability is enabled, EKS
    /// Auto Mode will create and delete EBS volumes in your Amazon Web Services
    /// account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageConfig")]
    pub storage_config: Option<ClusterStorageConfig>,
    /// Metadata that assists with categorization and organization. Each tag consists
    /// of a key and an optional value. You define both. Tags don't propagate to
    /// any other cluster or Amazon Web Services resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
    /// New clusters, by default, have extended support enabled. You can disable
    /// extended support when creating a cluster by setting this value to STANDARD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upgradePolicy")]
    pub upgrade_policy: Option<ClusterUpgradePolicy>,
    /// The desired Kubernetes version for your cluster. If you don't specify a value
    /// here, the default version available in Amazon EKS is used.
    /// 
    /// The default version might not be the latest version available.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    /// Enable or disable ARC zonal shift for the cluster. If zonal shift is enabled,
    /// Amazon Web Services configures zonal autoshift for the cluster.
    /// 
    /// Zonal shift is a feature of Amazon Application Recovery Controller (ARC).
    /// ARC zonal shift is designed to be a temporary measure that allows you to
    /// move traffic for a resource away from an impaired AZ until the zonal shift
    /// expires or you cancel it. You can extend the zonal shift if necessary.
    /// 
    /// You can start a zonal shift for an EKS cluster, or you can allow Amazon Web
    /// Services to do it for you by enabling zonal autoshift. This shift updates
    /// the flow of east-to-west network traffic in your cluster to only consider
    /// network endpoints for Pods running on worker nodes in healthy AZs. Additionally,
    /// any ALB or NLB handling ingress traffic for applications in your EKS cluster
    /// will automatically route traffic to targets in the healthy AZs. For more
    /// information about zonal shift in EKS, see Learn about Amazon Application
    /// Recovery Controller (ARC) Zonal Shift in Amazon EKS (https://docs.aws.amazon.com/eks/latest/userguide/zone-shift.html)
    /// in the Amazon EKS User Guide .
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "zonalShiftConfig")]
    pub zonal_shift_config: Option<ClusterZonalShiftConfig>,
}

/// The access configuration for the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterAccessConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationMode")]
    pub authentication_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootstrapClusterCreatorAdminPermissions")]
    pub bootstrap_cluster_creator_admin_permissions: Option<bool>,
}

/// Enable or disable the compute capability of EKS Auto Mode when creating your
/// EKS Auto Mode cluster. If the compute capability is enabled, EKS Auto Mode
/// will create and delete EC2 Managed Instances in your Amazon Web Services
/// account
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterComputeConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePools")]
    pub node_pools: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeRoleARN")]
    pub node_role_arn: Option<String>,
}

/// The encryption configuration for the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterEncryptionConfig {
    /// Identifies the Key Management Service (KMS) key used to encrypt the secrets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provider: Option<ClusterEncryptionConfigProvider>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<String>>,
}

/// Identifies the Key Management Service (KMS) key used to encrypt the secrets.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterEncryptionConfigProvider {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyARN")]
    pub key_arn: Option<String>,
    /// Reference field for KeyARN
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyRef")]
    pub key_ref: Option<ClusterEncryptionConfigProviderKeyRef>,
}

/// Reference field for KeyARN
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterEncryptionConfigProviderKeyRef {
    /// AWSResourceReference provides all the values necessary to reference another
    /// k8s resource for finding the identifier(Id/ARN/Name)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<ClusterEncryptionConfigProviderKeyRefFrom>,
}

/// AWSResourceReference provides all the values necessary to reference another
/// k8s resource for finding the identifier(Id/ARN/Name)
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterEncryptionConfigProviderKeyRefFrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// The Kubernetes network configuration for the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterKubernetesNetworkConfig {
    /// Indicates the current configuration of the load balancing capability on your
    /// EKS Auto Mode cluster. For example, if the capability is enabled or disabled.
    /// For more information, see EKS Auto Mode load balancing capability in the
    /// EKS User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticLoadBalancing")]
    pub elastic_load_balancing: Option<ClusterKubernetesNetworkConfigElasticLoadBalancing>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipFamily")]
    pub ip_family: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceIPv4CIDR")]
    pub service_i_pv4_cidr: Option<String>,
}

/// Indicates the current configuration of the load balancing capability on your
/// EKS Auto Mode cluster. For example, if the capability is enabled or disabled.
/// For more information, see EKS Auto Mode load balancing capability in the
/// EKS User Guide.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterKubernetesNetworkConfigElasticLoadBalancing {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Enable or disable exporting the Kubernetes control plane logs for your cluster
/// to CloudWatch Logs. By default, cluster control plane logs aren't exported
/// to CloudWatch Logs. For more information, see Amazon EKS Cluster control
/// plane logs (https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html)
/// in the Amazon EKS User Guide .
/// 
/// CloudWatch Logs ingestion, archive storage, and data scanning rates apply
/// to exported control plane logs. For more information, see CloudWatch Pricing
/// (http://aws.amazon.com/cloudwatch/pricing/).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterLogging {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterLogging")]
    pub cluster_logging: Option<Vec<ClusterLoggingClusterLogging>>,
}

/// An object representing the enabled or disabled Kubernetes control plane logs
/// for your cluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterLoggingClusterLogging {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<String>>,
}

/// An object representing the configuration of your local Amazon EKS cluster
/// on an Amazon Web Services Outpost. Before creating a local cluster on an
/// Outpost, review Local clusters for Amazon EKS on Amazon Web Services Outposts
/// (https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-local-cluster-overview.html)
/// in the Amazon EKS User Guide. This object isn't available for creating Amazon
/// EKS clusters on the Amazon Web Services cloud.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutpostConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controlPlaneInstanceType")]
    pub control_plane_instance_type: Option<String>,
    /// The placement configuration for all the control plane instances of your local
    /// Amazon EKS cluster on an Amazon Web Services Outpost. For more information,
    /// see Capacity considerations (https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-capacity-considerations.html)
    /// in the Amazon EKS User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controlPlanePlacement")]
    pub control_plane_placement: Option<ClusterOutpostConfigControlPlanePlacement>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outpostARNs")]
    pub outpost_ar_ns: Option<Vec<String>>,
}

/// The placement configuration for all the control plane instances of your local
/// Amazon EKS cluster on an Amazon Web Services Outpost. For more information,
/// see Capacity considerations (https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-capacity-considerations.html)
/// in the Amazon EKS User Guide.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterOutpostConfigControlPlanePlacement {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupName")]
    pub group_name: Option<String>,
}

/// The configuration in the cluster for EKS Hybrid Nodes. You can't change or
/// update this configuration after the cluster is created.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterRemoteNetworkConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteNodeNetworks")]
    pub remote_node_networks: Option<Vec<ClusterRemoteNetworkConfigRemoteNodeNetworks>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remotePodNetworks")]
    pub remote_pod_networks: Option<Vec<ClusterRemoteNetworkConfigRemotePodNetworks>>,
}

/// A network CIDR that can contain hybrid nodes.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterRemoteNetworkConfigRemoteNodeNetworks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidrs: Option<Vec<String>>,
}

/// A network CIDR that can contain pods that run Kubernetes webhooks on hybrid
/// nodes.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterRemoteNetworkConfigRemotePodNetworks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidrs: Option<Vec<String>>,
}

/// The VPC configuration that's used by the cluster control plane. Amazon EKS
/// VPC resources have specific requirements to work properly with Kubernetes.
/// For more information, see Cluster VPC Considerations (https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html)
/// and Cluster Security Group Considerations (https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html)
/// in the Amazon EKS User Guide. You must specify at least two subnets. You
/// can specify up to five security groups. However, we recommend that you use
/// a dedicated security group for your cluster control plane.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterResourcesVpcConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointPrivateAccess")]
    pub endpoint_private_access: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointPublicAccess")]
    pub endpoint_public_access: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicAccessCIDRs")]
    pub public_access_cid_rs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIDs")]
    pub security_group_i_ds: Option<Vec<String>>,
    /// Reference field for SecurityGroupIDs
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupRefs")]
    pub security_group_refs: Option<Vec<ClusterResourcesVpcConfigSecurityGroupRefs>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIDs")]
    pub subnet_i_ds: Option<Vec<String>>,
    /// Reference field for SubnetIDs
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetRefs")]
    pub subnet_refs: Option<Vec<ClusterResourcesVpcConfigSubnetRefs>>,
}

/// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference
/// type to provide more user friendly syntax for references using 'from' field
/// Ex:
/// APIIDRef:
/// 
/// 	from:
/// 	  name: my-api
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterResourcesVpcConfigSecurityGroupRefs {
    /// AWSResourceReference provides all the values necessary to reference another
    /// k8s resource for finding the identifier(Id/ARN/Name)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<ClusterResourcesVpcConfigSecurityGroupRefsFrom>,
}

/// AWSResourceReference provides all the values necessary to reference another
/// k8s resource for finding the identifier(Id/ARN/Name)
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterResourcesVpcConfigSecurityGroupRefsFrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference
/// type to provide more user friendly syntax for references using 'from' field
/// Ex:
/// APIIDRef:
/// 
/// 	from:
/// 	  name: my-api
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterResourcesVpcConfigSubnetRefs {
    /// AWSResourceReference provides all the values necessary to reference another
    /// k8s resource for finding the identifier(Id/ARN/Name)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<ClusterResourcesVpcConfigSubnetRefsFrom>,
}

/// AWSResourceReference provides all the values necessary to reference another
/// k8s resource for finding the identifier(Id/ARN/Name)
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterResourcesVpcConfigSubnetRefsFrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference
/// type to provide more user friendly syntax for references using 'from' field
/// Ex:
/// APIIDRef:
/// 
/// 	from:
/// 	  name: my-api
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterRoleRef {
    /// AWSResourceReference provides all the values necessary to reference another
    /// k8s resource for finding the identifier(Id/ARN/Name)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<ClusterRoleRefFrom>,
}

/// AWSResourceReference provides all the values necessary to reference another
/// k8s resource for finding the identifier(Id/ARN/Name)
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterRoleRefFrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Enable or disable the block storage capability of EKS Auto Mode when creating
/// your EKS Auto Mode cluster. If the block storage capability is enabled, EKS
/// Auto Mode will create and delete EBS volumes in your Amazon Web Services
/// account.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterStorageConfig {
    /// Indicates the current configuration of the block storage capability on your
    /// EKS Auto Mode cluster. For example, if the capability is enabled or disabled.
    /// If the block storage capability is enabled, EKS Auto Mode will create and
    /// delete EBS volumes in your Amazon Web Services account. For more information,
    /// see EKS Auto Mode block storage capability in the EKS User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockStorage")]
    pub block_storage: Option<ClusterStorageConfigBlockStorage>,
}

/// Indicates the current configuration of the block storage capability on your
/// EKS Auto Mode cluster. For example, if the capability is enabled or disabled.
/// If the block storage capability is enabled, EKS Auto Mode will create and
/// delete EBS volumes in your Amazon Web Services account. For more information,
/// see EKS Auto Mode block storage capability in the EKS User Guide.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterStorageConfigBlockStorage {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// New clusters, by default, have extended support enabled. You can disable
/// extended support when creating a cluster by setting this value to STANDARD.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterUpgradePolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supportType")]
    pub support_type: Option<String>,
}

/// Enable or disable ARC zonal shift for the cluster. If zonal shift is enabled,
/// Amazon Web Services configures zonal autoshift for the cluster.
/// 
/// Zonal shift is a feature of Amazon Application Recovery Controller (ARC).
/// ARC zonal shift is designed to be a temporary measure that allows you to
/// move traffic for a resource away from an impaired AZ until the zonal shift
/// expires or you cancel it. You can extend the zonal shift if necessary.
/// 
/// You can start a zonal shift for an EKS cluster, or you can allow Amazon Web
/// Services to do it for you by enabling zonal autoshift. This shift updates
/// the flow of east-to-west network traffic in your cluster to only consider
/// network endpoints for Pods running on worker nodes in healthy AZs. Additionally,
/// any ALB or NLB handling ingress traffic for applications in your EKS cluster
/// will automatically route traffic to targets in the healthy AZs. For more
/// information about zonal shift in EKS, see Learn about Amazon Application
/// Recovery Controller (ARC) Zonal Shift in Amazon EKS (https://docs.aws.amazon.com/eks/latest/userguide/zone-shift.html)
/// in the Amazon EKS User Guide .
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterZonalShiftConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// ClusterStatus defines the observed state of Cluster
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterStatus {
    /// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
    /// that is used to contain resource sync state, account ownership,
    /// constructed ARN for the resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ackResourceMetadata")]
    pub ack_resource_metadata: Option<ClusterStatusAckResourceMetadata>,
    /// The certificate-authority-data for your cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateAuthority")]
    pub certificate_authority: Option<ClusterStatusCertificateAuthority>,
    /// All CRS managed by ACK have a common `Status.Conditions` member that
    /// contains a collection of `ackv1alpha1.Condition` objects that describe
    /// the various terminal states of the CR and its backend AWS service API
    /// resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// The configuration used to connect to a cluster for registration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectorConfig")]
    pub connector_config: Option<ClusterStatusConnectorConfig>,
    /// The Unix epoch timestamp at object creation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdAt")]
    pub created_at: Option<String>,
    /// The endpoint for your Kubernetes API server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// An object representing the health of your Amazon EKS cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health: Option<ClusterStatusHealth>,
    /// The ID of your local Amazon EKS cluster on an Amazon Web Services Outpost.
    /// This property isn't available for an Amazon EKS cluster on the Amazon Web
    /// Services cloud.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The identity provider information for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identity: Option<ClusterStatusIdentity>,
    /// The platform version of your Amazon EKS cluster. For more information about
    /// clusters deployed on the Amazon Web Services Cloud, see Platform versions
    /// (https://docs.aws.amazon.com/eks/latest/userguide/platform-versions.html)
    /// in the Amazon EKS User Guide . For more information about local clusters
    /// deployed on an Outpost, see Amazon EKS local cluster platform versions (https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-platform-versions.html)
    /// in the Amazon EKS User Guide .
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "platformVersion")]
    pub platform_version: Option<String>,
    /// The current status of the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
/// that is used to contain resource sync state, account ownership,
/// constructed ARN for the resource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterStatusAckResourceMetadata {
    /// ARN is the Amazon Resource Name for the resource. This is a
    /// globally-unique identifier and is set only by the ACK service controller
    /// once the controller has orchestrated the creation of the resource OR
    /// when it has verified that an "adopted" resource (a resource where the
    /// ARN annotation was set by the Kubernetes user on the CR) exists and
    /// matches the supplied CR's Spec field values.
    /// https://github.com/aws/aws-controllers-k8s/issues/270
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// OwnerAccountID is the AWS Account ID of the account that owns the
    /// backend AWS service API resource.
    #[serde(rename = "ownerAccountID")]
    pub owner_account_id: String,
    /// Region is the AWS region in which the resource exists or will exist.
    pub region: String,
}

/// The certificate-authority-data for your cluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterStatusCertificateAuthority {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<String>,
}

/// The configuration used to connect to a cluster for registration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterStatusConnectorConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activationCode")]
    pub activation_code: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activationExpiry")]
    pub activation_expiry: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activationID")]
    pub activation_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleARN")]
    pub role_arn: Option<String>,
}

/// An object representing the health of your Amazon EKS cluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterStatusHealth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issues: Option<Vec<ClusterStatusHealthIssues>>,
}

/// An issue with your Amazon EKS cluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterStatusHealthIssues {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceIDs")]
    pub resource_i_ds: Option<Vec<String>>,
}

/// The identity provider information for the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterStatusIdentity {
    /// An object representing the OpenID Connect (https://openid.net/connect/) (OIDC)
    /// identity provider information for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oidc: Option<ClusterStatusIdentityOidc>,
}

/// An object representing the OpenID Connect (https://openid.net/connect/) (OIDC)
/// identity provider information for the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterStatusIdentityOidc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
}

