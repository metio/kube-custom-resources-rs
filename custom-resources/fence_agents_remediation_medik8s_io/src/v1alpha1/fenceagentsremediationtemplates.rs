// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/medik8s/fence-agents-remediation/fence-agents-remediation.medik8s.io/v1alpha1/fenceagentsremediationtemplates.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// FenceAgentsRemediationTemplateSpec defines the desired state of FenceAgentsRemediationTemplate
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "fence-agents-remediation.medik8s.io", version = "v1alpha1", kind = "FenceAgentsRemediationTemplate", plural = "fenceagentsremediationtemplates")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct FenceAgentsRemediationTemplateSpec {
    /// Template defines the desired state of FenceAgentsRemediationTemplate
    pub template: FenceAgentsRemediationTemplateTemplate,
}

/// Template defines the desired state of FenceAgentsRemediationTemplate
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FenceAgentsRemediationTemplateTemplate {
    /// FenceAgentsRemediationSpec defines the desired state of FenceAgentsRemediation
    pub spec: FenceAgentsRemediationTemplateTemplateSpec,
}

/// FenceAgentsRemediationSpec defines the desired state of FenceAgentsRemediation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FenceAgentsRemediationTemplateTemplateSpec {
    /// Agent is the name of fence agent that will be used.
    /// It should have a fence_ prefix.
    pub agent: String,
    /// NodeSecretNames maps the node name to the Secret name which contains params relevant for that node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSecretNames")]
    pub node_secret_names: Option<BTreeMap<String, String>>,
    /// NodeParameters are passed to the fencing agent according to the node that is fenced, since they are node specific
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodeparameters: Option<BTreeMap<String, BTreeMap<String, String>>>,
    /// RemediationStrategy is the remediation method for unhealthy nodes.
    /// Currently, it could be either "OutOfServiceTaint" or "ResourceDeletion".
    /// ResourceDeletion will iterate over all pods related to the unhealthy node and delete them.
    /// OutOfServiceTaint will add the out-of-service taint which is a new well-known taint "node.kubernetes.io/out-of-service"
    /// that enables automatic deletion of pv-attached pods on failed nodes, "out-of-service" taint is only supported on clusters with k8s version 1.26+ or OCP/OKD version 4.13+.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remediationStrategy")]
    pub remediation_strategy: Option<FenceAgentsRemediationTemplateTemplateSpecRemediationStrategy>,
    /// RetryCount is the number of times the fencing agent will be executed
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retrycount: Option<i64>,
    /// RetryInterval is the interval between each fencing agent execution
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retryinterval: Option<String>,
    /// SharedSecretName is the name of the Secret which will contain params needed for FAR in order to remediate any node.
    /// Using this Secret is optional.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sharedSecretName")]
    pub shared_secret_name: Option<String>,
    /// SharedParameters are parameters common to all nodes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sharedparameters: Option<BTreeMap<String, String>>,
    /// Timeout is the timeout for each fencing agent execution
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// FenceAgentsRemediationSpec defines the desired state of FenceAgentsRemediation
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum FenceAgentsRemediationTemplateTemplateSpecRemediationStrategy {
    ResourceDeletion,
    OutOfServiceTaint,
}

/// FenceAgentsRemediationTemplateStatus defines the observed state of FenceAgentsRemediationTemplate
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FenceAgentsRemediationTemplateStatus {
}

