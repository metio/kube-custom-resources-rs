// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/replicatedhq/troubleshoot/troubleshoot.sh/v1beta2/redactors.yaml
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// RedactorSpec defines the desired state of Redactor
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "troubleshoot.sh", version = "v1beta2", kind = "Redactor", plural = "redactors")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct RedactorSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redactors: Option<Vec<RedactorRedactors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RedactorRedactors {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSelector")]
    pub file_selector: Option<RedactorRedactorsFileSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub removals: Option<RedactorRedactorsRemovals>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RedactorRedactorsFileSelector {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub files: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RedactorRedactorsRemovals {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<Vec<RedactorRedactorsRemovalsRegex>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "yamlPath")]
    pub yaml_path: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RedactorRedactorsRemovalsRegex {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redactor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
}

/// RedactorStatus defines the observed state of Redactor
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RedactorStatus {
}

