// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/projectcalico/calico/crd.projectcalico.org/v1/caliconodestatuses.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "crd.projectcalico.org", version = "v1", kind = "CalicoNodeStatus", plural = "caliconodestatuses")]
#[kube(status = "CalicoNodeStatusStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct CalicoNodeStatusSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub classes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updatePeriodSeconds")]
    pub update_period_seconds: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CalicoNodeStatusStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agent: Option<CalicoNodeStatusStatusAgent>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bgp: Option<CalicoNodeStatusStatusBgp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastUpdated")]
    pub last_updated: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub routes: Option<CalicoNodeStatusStatusRoutes>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CalicoNodeStatusStatusAgent {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "birdV4")]
    pub bird_v4: Option<CalicoNodeStatusStatusAgentBirdV4>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "birdV6")]
    pub bird_v6: Option<CalicoNodeStatusStatusAgentBirdV6>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CalicoNodeStatusStatusAgentBirdV4 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastBootTime")]
    pub last_boot_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastReconfigurationTime")]
    pub last_reconfiguration_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routerID")]
    pub router_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CalicoNodeStatusStatusAgentBirdV6 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastBootTime")]
    pub last_boot_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastReconfigurationTime")]
    pub last_reconfiguration_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routerID")]
    pub router_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CalicoNodeStatusStatusBgp {
    #[serde(rename = "numberEstablishedV4")]
    pub number_established_v4: i64,
    #[serde(rename = "numberEstablishedV6")]
    pub number_established_v6: i64,
    #[serde(rename = "numberNotEstablishedV4")]
    pub number_not_established_v4: i64,
    #[serde(rename = "numberNotEstablishedV6")]
    pub number_not_established_v6: i64,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peersV4")]
    pub peers_v4: Option<Vec<CalicoNodeStatusStatusBgpPeersV4>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peersV6")]
    pub peers_v6: Option<Vec<CalicoNodeStatusStatusBgpPeersV6>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CalicoNodeStatusStatusBgpPeersV4 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerIP")]
    pub peer_ip: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub since: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CalicoNodeStatusStatusBgpPeersV6 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerIP")]
    pub peer_ip: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub since: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CalicoNodeStatusStatusRoutes {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routesV4")]
    pub routes_v4: Option<Vec<CalicoNodeStatusStatusRoutesRoutesV4>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routesV6")]
    pub routes_v6: Option<Vec<CalicoNodeStatusStatusRoutesRoutesV6>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CalicoNodeStatusStatusRoutesRoutesV4 {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gateway: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interface: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "learnedFrom")]
    pub learned_from: Option<CalicoNodeStatusStatusRoutesRoutesV4LearnedFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CalicoNodeStatusStatusRoutesRoutesV4LearnedFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerIP")]
    pub peer_ip: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceType")]
    pub source_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CalicoNodeStatusStatusRoutesRoutesV6 {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gateway: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interface: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "learnedFrom")]
    pub learned_from: Option<CalicoNodeStatusStatusRoutesRoutesV6LearnedFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CalicoNodeStatusStatusRoutesRoutesV6LearnedFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerIP")]
    pub peer_ip: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceType")]
    pub source_type: Option<String>,
}

