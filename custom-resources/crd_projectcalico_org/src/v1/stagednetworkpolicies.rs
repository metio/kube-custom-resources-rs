// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/projectcalico/calico/crd.projectcalico.org/v1/stagednetworkpolicies.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "crd.projectcalico.org", version = "v1", kind = "StagedNetworkPolicy", plural = "stagednetworkpolicies")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct StagedNetworkPolicySpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub egress: Option<Vec<StagedNetworkPolicyEgress>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingress: Option<Vec<StagedNetworkPolicyIngress>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "performanceHints")]
    pub performance_hints: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountSelector")]
    pub service_account_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stagedAction")]
    pub staged_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tier: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyEgress {
    pub action: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<StagedNetworkPolicyEgressDestination>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<StagedNetworkPolicyEgressHttp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icmp: Option<StagedNetworkPolicyEgressIcmp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipVersion")]
    pub ip_version: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<StagedNetworkPolicyEgressMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notICMP")]
    pub not_icmp: Option<StagedNetworkPolicyEgressNotIcmp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notProtocol")]
    pub not_protocol: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<StagedNetworkPolicyEgressSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyEgressDestination {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notNets")]
    pub not_nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notPorts")]
    pub not_ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notSelector")]
    pub not_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccounts")]
    pub service_accounts: Option<StagedNetworkPolicyEgressDestinationServiceAccounts>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<StagedNetworkPolicyEgressDestinationServices>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyEgressDestinationServiceAccounts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyEgressDestinationServices {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyEgressHttp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub paths: Option<Vec<StagedNetworkPolicyEgressHttpPaths>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyEgressHttpPaths {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyEgressIcmp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyEgressMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyEgressNotIcmp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyEgressSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notNets")]
    pub not_nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notPorts")]
    pub not_ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notSelector")]
    pub not_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccounts")]
    pub service_accounts: Option<StagedNetworkPolicyEgressSourceServiceAccounts>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<StagedNetworkPolicyEgressSourceServices>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyEgressSourceServiceAccounts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyEgressSourceServices {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyIngress {
    pub action: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<StagedNetworkPolicyIngressDestination>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<StagedNetworkPolicyIngressHttp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icmp: Option<StagedNetworkPolicyIngressIcmp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipVersion")]
    pub ip_version: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<StagedNetworkPolicyIngressMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notICMP")]
    pub not_icmp: Option<StagedNetworkPolicyIngressNotIcmp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notProtocol")]
    pub not_protocol: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<StagedNetworkPolicyIngressSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyIngressDestination {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notNets")]
    pub not_nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notPorts")]
    pub not_ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notSelector")]
    pub not_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccounts")]
    pub service_accounts: Option<StagedNetworkPolicyIngressDestinationServiceAccounts>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<StagedNetworkPolicyIngressDestinationServices>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyIngressDestinationServiceAccounts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyIngressDestinationServices {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyIngressHttp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub paths: Option<Vec<StagedNetworkPolicyIngressHttpPaths>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyIngressHttpPaths {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyIngressIcmp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyIngressMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyIngressNotIcmp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyIngressSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notNets")]
    pub not_nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notPorts")]
    pub not_ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notSelector")]
    pub not_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccounts")]
    pub service_accounts: Option<StagedNetworkPolicyIngressSourceServiceAccounts>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<StagedNetworkPolicyIngressSourceServices>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyIngressSourceServiceAccounts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedNetworkPolicyIngressSourceServices {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

