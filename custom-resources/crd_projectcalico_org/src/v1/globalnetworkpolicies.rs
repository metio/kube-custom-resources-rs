// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/projectcalico/calico/crd.projectcalico.org/v1/globalnetworkpolicies.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "crd.projectcalico.org", version = "v1", kind = "GlobalNetworkPolicy", plural = "globalnetworkpolicies")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct GlobalNetworkPolicySpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applyOnForward")]
    pub apply_on_forward: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "doNotTrack")]
    pub do_not_track: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub egress: Option<Vec<GlobalNetworkPolicyEgress>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingress: Option<Vec<GlobalNetworkPolicyIngress>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "performanceHints")]
    pub performance_hints: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preDNAT")]
    pub pre_dnat: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountSelector")]
    pub service_account_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tier: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyEgress {
    pub action: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<GlobalNetworkPolicyEgressDestination>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<GlobalNetworkPolicyEgressHttp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icmp: Option<GlobalNetworkPolicyEgressIcmp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipVersion")]
    pub ip_version: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<GlobalNetworkPolicyEgressMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notICMP")]
    pub not_icmp: Option<GlobalNetworkPolicyEgressNotIcmp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notProtocol")]
    pub not_protocol: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<GlobalNetworkPolicyEgressSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyEgressDestination {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notNets")]
    pub not_nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notPorts")]
    pub not_ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notSelector")]
    pub not_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccounts")]
    pub service_accounts: Option<GlobalNetworkPolicyEgressDestinationServiceAccounts>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<GlobalNetworkPolicyEgressDestinationServices>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyEgressDestinationServiceAccounts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyEgressDestinationServices {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyEgressHttp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub paths: Option<Vec<GlobalNetworkPolicyEgressHttpPaths>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyEgressHttpPaths {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyEgressIcmp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyEgressMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyEgressNotIcmp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyEgressSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notNets")]
    pub not_nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notPorts")]
    pub not_ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notSelector")]
    pub not_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccounts")]
    pub service_accounts: Option<GlobalNetworkPolicyEgressSourceServiceAccounts>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<GlobalNetworkPolicyEgressSourceServices>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyEgressSourceServiceAccounts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyEgressSourceServices {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyIngress {
    pub action: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<GlobalNetworkPolicyIngressDestination>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<GlobalNetworkPolicyIngressHttp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icmp: Option<GlobalNetworkPolicyIngressIcmp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipVersion")]
    pub ip_version: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<GlobalNetworkPolicyIngressMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notICMP")]
    pub not_icmp: Option<GlobalNetworkPolicyIngressNotIcmp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notProtocol")]
    pub not_protocol: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<GlobalNetworkPolicyIngressSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyIngressDestination {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notNets")]
    pub not_nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notPorts")]
    pub not_ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notSelector")]
    pub not_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccounts")]
    pub service_accounts: Option<GlobalNetworkPolicyIngressDestinationServiceAccounts>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<GlobalNetworkPolicyIngressDestinationServices>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyIngressDestinationServiceAccounts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyIngressDestinationServices {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyIngressHttp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub paths: Option<Vec<GlobalNetworkPolicyIngressHttpPaths>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyIngressHttpPaths {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyIngressIcmp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyIngressMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyIngressNotIcmp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyIngressSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notNets")]
    pub not_nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notPorts")]
    pub not_ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notSelector")]
    pub not_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccounts")]
    pub service_accounts: Option<GlobalNetworkPolicyIngressSourceServiceAccounts>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<GlobalNetworkPolicyIngressSourceServices>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyIngressSourceServiceAccounts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalNetworkPolicyIngressSourceServices {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

