// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/projectcalico/calico/crd.projectcalico.org/v1/kubecontrollersconfigurations.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "crd.projectcalico.org", version = "v1", kind = "KubeControllersConfiguration", plural = "kubecontrollersconfigurations")]
#[kube(status = "KubeControllersConfigurationStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct KubeControllersConfigurationSpec {
    pub controllers: KubeControllersConfigurationControllers,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "debugProfilePort")]
    pub debug_profile_port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "etcdV3CompactionPeriod")]
    pub etcd_v3_compaction_period: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthChecks")]
    pub health_checks: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logSeverityScreen")]
    pub log_severity_screen: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prometheusMetricsPort")]
    pub prometheus_metrics_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubeControllersConfigurationControllers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancer")]
    pub load_balancer: Option<KubeControllersConfigurationControllersLoadBalancer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<KubeControllersConfigurationControllersNamespace>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node: Option<KubeControllersConfigurationControllersNode>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<KubeControllersConfigurationControllersPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<KubeControllersConfigurationControllersServiceAccount>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workloadEndpoint")]
    pub workload_endpoint: Option<KubeControllersConfigurationControllersWorkloadEndpoint>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubeControllersConfigurationControllersLoadBalancer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "assignIPs")]
    pub assign_i_ps: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubeControllersConfigurationControllersNamespace {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reconcilerPeriod")]
    pub reconciler_period: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubeControllersConfigurationControllersNode {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostEndpoint")]
    pub host_endpoint: Option<KubeControllersConfigurationControllersNodeHostEndpoint>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "leakGracePeriod")]
    pub leak_grace_period: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reconcilerPeriod")]
    pub reconciler_period: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncLabels")]
    pub sync_labels: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubeControllersConfigurationControllersNodeHostEndpoint {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoCreate")]
    pub auto_create: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createDefaultHostEndpoint")]
    pub create_default_host_endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub templates: Option<Vec<KubeControllersConfigurationControllersNodeHostEndpointTemplates>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubeControllersConfigurationControllersNodeHostEndpointTemplates {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generateName")]
    pub generate_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "interfaceCIDRs")]
    pub interface_cid_rs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubeControllersConfigurationControllersPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reconcilerPeriod")]
    pub reconciler_period: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubeControllersConfigurationControllersServiceAccount {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reconcilerPeriod")]
    pub reconciler_period: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubeControllersConfigurationControllersWorkloadEndpoint {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reconcilerPeriod")]
    pub reconciler_period: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubeControllersConfigurationStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentVars")]
    pub environment_vars: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runningConfig")]
    pub running_config: Option<KubeControllersConfigurationStatusRunningConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubeControllersConfigurationStatusRunningConfig {
    pub controllers: KubeControllersConfigurationStatusRunningConfigControllers,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "debugProfilePort")]
    pub debug_profile_port: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "etcdV3CompactionPeriod")]
    pub etcd_v3_compaction_period: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthChecks")]
    pub health_checks: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logSeverityScreen")]
    pub log_severity_screen: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prometheusMetricsPort")]
    pub prometheus_metrics_port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubeControllersConfigurationStatusRunningConfigControllers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancer")]
    pub load_balancer: Option<KubeControllersConfigurationStatusRunningConfigControllersLoadBalancer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<KubeControllersConfigurationStatusRunningConfigControllersNamespace>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node: Option<KubeControllersConfigurationStatusRunningConfigControllersNode>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<KubeControllersConfigurationStatusRunningConfigControllersPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<KubeControllersConfigurationStatusRunningConfigControllersServiceAccount>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workloadEndpoint")]
    pub workload_endpoint: Option<KubeControllersConfigurationStatusRunningConfigControllersWorkloadEndpoint>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubeControllersConfigurationStatusRunningConfigControllersLoadBalancer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "assignIPs")]
    pub assign_i_ps: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubeControllersConfigurationStatusRunningConfigControllersNamespace {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reconcilerPeriod")]
    pub reconciler_period: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubeControllersConfigurationStatusRunningConfigControllersNode {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostEndpoint")]
    pub host_endpoint: Option<KubeControllersConfigurationStatusRunningConfigControllersNodeHostEndpoint>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "leakGracePeriod")]
    pub leak_grace_period: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reconcilerPeriod")]
    pub reconciler_period: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncLabels")]
    pub sync_labels: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubeControllersConfigurationStatusRunningConfigControllersNodeHostEndpoint {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoCreate")]
    pub auto_create: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createDefaultHostEndpoint")]
    pub create_default_host_endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub templates: Option<Vec<KubeControllersConfigurationStatusRunningConfigControllersNodeHostEndpointTemplates>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubeControllersConfigurationStatusRunningConfigControllersNodeHostEndpointTemplates {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generateName")]
    pub generate_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "interfaceCIDRs")]
    pub interface_cid_rs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubeControllersConfigurationStatusRunningConfigControllersPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reconcilerPeriod")]
    pub reconciler_period: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubeControllersConfigurationStatusRunningConfigControllersServiceAccount {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reconcilerPeriod")]
    pub reconciler_period: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubeControllersConfigurationStatusRunningConfigControllersWorkloadEndpoint {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reconcilerPeriod")]
    pub reconciler_period: Option<String>,
}

