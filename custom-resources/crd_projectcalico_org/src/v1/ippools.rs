// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/projectcalico/calico/crd.projectcalico.org/v1/ippools.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "crd.projectcalico.org", version = "v1", kind = "IPPool", plural = "ippools")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct IPPoolSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedUses")]
    pub allowed_uses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "assignmentMode")]
    pub assignment_mode: Option<IPPoolAssignmentMode>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockSize")]
    pub block_size: Option<i64>,
    pub cidr: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableBGPExport")]
    pub disable_bgp_export: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ipip: Option<IPPoolIpip>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipipMode")]
    pub ipip_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nat-outgoing")]
    pub nat_outgoing: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natOutgoing")]
    pub nat_outgoing_x: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vxlanMode")]
    pub vxlan_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IPPoolAssignmentMode {
    Automatic,
    Manual,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IPPoolIpip {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
}

