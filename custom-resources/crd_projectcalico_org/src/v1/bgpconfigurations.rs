// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/projectcalico/calico/crd.projectcalico.org/v1/bgpconfigurations.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "crd.projectcalico.org", version = "v1", kind = "BGPConfiguration", plural = "bgpconfigurations")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct BGPConfigurationSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asNumber")]
    pub as_number: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bindMode")]
    pub bind_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub communities: Option<Vec<BGPConfigurationCommunities>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoredInterfaces")]
    pub ignored_interfaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenPort")]
    pub listen_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localWorkloadPeeringIPV4")]
    pub local_workload_peering_ipv4: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localWorkloadPeeringIPV6")]
    pub local_workload_peering_ipv6: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logSeverityScreen")]
    pub log_severity_screen: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeMeshMaxRestartTime")]
    pub node_mesh_max_restart_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeMeshPassword")]
    pub node_mesh_password: Option<BGPConfigurationNodeMeshPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeToNodeMeshEnabled")]
    pub node_to_node_mesh_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixAdvertisements")]
    pub prefix_advertisements: Option<Vec<BGPConfigurationPrefixAdvertisements>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceClusterIPs")]
    pub service_cluster_i_ps: Option<Vec<BGPConfigurationServiceClusterIPs>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceExternalIPs")]
    pub service_external_i_ps: Option<Vec<BGPConfigurationServiceExternalIPs>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceLoadBalancerIPs")]
    pub service_load_balancer_i_ps: Option<Vec<BGPConfigurationServiceLoadBalancerIPs>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BGPConfigurationCommunities {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BGPConfigurationNodeMeshPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<BGPConfigurationNodeMeshPasswordSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BGPConfigurationNodeMeshPasswordSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BGPConfigurationPrefixAdvertisements {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub communities: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BGPConfigurationServiceClusterIPs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BGPConfigurationServiceExternalIPs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BGPConfigurationServiceLoadBalancerIPs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidr: Option<String>,
}

