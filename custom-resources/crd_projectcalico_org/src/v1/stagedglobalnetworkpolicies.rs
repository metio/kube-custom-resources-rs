// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/projectcalico/calico/crd.projectcalico.org/v1/stagedglobalnetworkpolicies.yaml
// kopium version: 0.22.4

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "crd.projectcalico.org", version = "v1", kind = "StagedGlobalNetworkPolicy", plural = "stagedglobalnetworkpolicies")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct StagedGlobalNetworkPolicySpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applyOnForward")]
    pub apply_on_forward: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "doNotTrack")]
    pub do_not_track: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub egress: Option<Vec<StagedGlobalNetworkPolicyEgress>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingress: Option<Vec<StagedGlobalNetworkPolicyIngress>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "performanceHints")]
    pub performance_hints: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preDNAT")]
    pub pre_dnat: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountSelector")]
    pub service_account_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stagedAction")]
    pub staged_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tier: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyEgress {
    pub action: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<StagedGlobalNetworkPolicyEgressDestination>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<StagedGlobalNetworkPolicyEgressHttp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icmp: Option<StagedGlobalNetworkPolicyEgressIcmp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipVersion")]
    pub ip_version: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<StagedGlobalNetworkPolicyEgressMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notICMP")]
    pub not_icmp: Option<StagedGlobalNetworkPolicyEgressNotIcmp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notProtocol")]
    pub not_protocol: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<StagedGlobalNetworkPolicyEgressSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyEgressDestination {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notNets")]
    pub not_nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notPorts")]
    pub not_ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notSelector")]
    pub not_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccounts")]
    pub service_accounts: Option<StagedGlobalNetworkPolicyEgressDestinationServiceAccounts>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<StagedGlobalNetworkPolicyEgressDestinationServices>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyEgressDestinationServiceAccounts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyEgressDestinationServices {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyEgressHttp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub paths: Option<Vec<StagedGlobalNetworkPolicyEgressHttpPaths>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyEgressHttpPaths {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyEgressIcmp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyEgressMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyEgressNotIcmp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyEgressSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notNets")]
    pub not_nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notPorts")]
    pub not_ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notSelector")]
    pub not_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccounts")]
    pub service_accounts: Option<StagedGlobalNetworkPolicyEgressSourceServiceAccounts>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<StagedGlobalNetworkPolicyEgressSourceServices>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyEgressSourceServiceAccounts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyEgressSourceServices {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyIngress {
    pub action: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<StagedGlobalNetworkPolicyIngressDestination>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<StagedGlobalNetworkPolicyIngressHttp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icmp: Option<StagedGlobalNetworkPolicyIngressIcmp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipVersion")]
    pub ip_version: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<StagedGlobalNetworkPolicyIngressMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notICMP")]
    pub not_icmp: Option<StagedGlobalNetworkPolicyIngressNotIcmp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notProtocol")]
    pub not_protocol: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<StagedGlobalNetworkPolicyIngressSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyIngressDestination {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notNets")]
    pub not_nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notPorts")]
    pub not_ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notSelector")]
    pub not_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccounts")]
    pub service_accounts: Option<StagedGlobalNetworkPolicyIngressDestinationServiceAccounts>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<StagedGlobalNetworkPolicyIngressDestinationServices>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyIngressDestinationServiceAccounts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyIngressDestinationServices {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyIngressHttp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub paths: Option<Vec<StagedGlobalNetworkPolicyIngressHttpPaths>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyIngressHttpPaths {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyIngressIcmp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyIngressMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyIngressNotIcmp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyIngressSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notNets")]
    pub not_nets: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notPorts")]
    pub not_ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notSelector")]
    pub not_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccounts")]
    pub service_accounts: Option<StagedGlobalNetworkPolicyIngressSourceServiceAccounts>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<StagedGlobalNetworkPolicyIngressSourceServices>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyIngressSourceServiceAccounts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StagedGlobalNetworkPolicyIngressSourceServices {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

