// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/VictoriaMetrics/operator/operator.victoriametrics.com/v1beta1/vmauths.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// VMAuthSpec defines the desired state of VMAuth
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "operator.victoriametrics.com", version = "v1beta1", kind = "VMAuth", plural = "vmauths")]
#[kube(namespaced)]
#[kube(status = "VmAuthStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct VmAuthSpec {
    /// Affinity If specified, the pod's scheduling constraints.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<BTreeMap<String, serde_json::Value>>,
    /// ConfigMaps is a list of ConfigMaps in the same namespace as the Application
    /// object, which shall be mounted into the Application container
    /// at /etc/vm/configs/CONFIGMAP_NAME folder
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMaps")]
    pub config_maps: Option<Vec<String>>,
    /// ConfigReloadAuthKeySecret defines optional secret reference authKey for /-/reload API requests.
    /// Given secret reference will be added to the application and vm-config-reloader as volume
    /// available since v0.57.0 version
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configReloadAuthKeySecret")]
    pub config_reload_auth_key_secret: Option<VmAuthConfigReloadAuthKeySecret>,
    /// ConfigReloaderExtraArgs that will be passed to  VMAuths config-reloader container
    /// for example resyncInterval: "30s"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configReloaderExtraArgs")]
    pub config_reloader_extra_args: Option<BTreeMap<String, String>>,
    /// ConfigReloaderImageTag defines image:tag for config-reloader container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configReloaderImageTag")]
    pub config_reloader_image_tag: Option<String>,
    /// ConfigReloaderResources config-reloader container resource request and limits, <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    /// if not defined default resources from operator config will be used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configReloaderResources")]
    pub config_reloader_resources: Option<VmAuthConfigReloaderResources>,
    /// ConfigSecret is the name of a Kubernetes Secret in the same namespace as the
    /// VMAuth object, which contains auth configuration for vmauth,
    /// configuration must be inside secret key: config.yaml.
    /// It must be created and managed manually.
    /// If it's defined, configuration for vmauth becomes unmanaged and operator'll not create any related secrets/config-reloaders
    /// Deprecated: use externalConfig.secretRef instead
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configSecret")]
    pub config_secret: Option<String>,
    /// Containers property allows to inject additions sidecars or to patch existing containers.
    /// It can be useful for proxies, backup, etc.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// DisableAutomountServiceAccountToken whether to disable serviceAccount auto mount by Kubernetes (available from v0.54.0).
    /// Operator will conditionally create volumes and volumeMounts for containers if it requires k8s API access.
    /// For example, vmagent and vm-config-reloader requires k8s API access.
    /// Operator creates volumes with name: "kube-api-access", which can be used as volumeMount for extraContainers if needed.
    /// And also adds VolumeMounts at /var/run/secrets/kubernetes.io/serviceaccount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableAutomountServiceAccountToken")]
    pub disable_automount_service_account_token: Option<bool>,
    /// DisableSelfServiceScrape controls creation of VMServiceScrape by operator
    /// for the application.
    /// Has priority over `VM_DISABLESELFSERVICESCRAPECREATION` operator env variable
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableSelfServiceScrape")]
    pub disable_self_service_scrape: Option<bool>,
    /// Specifies the DNS parameters of a pod.
    /// Parameters specified here will be merged to the generated DNS
    /// configuration based on DNSPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsConfig")]
    pub dns_config: Option<VmAuthDnsConfig>,
    /// DNSPolicy sets DNS policy for the pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsPolicy")]
    pub dns_policy: Option<String>,
    /// ExternalConfig defines a source of external VMAuth configuration.
    /// If it's defined, configuration for vmauth becomes unmanaged and operator'll not create any related secrets/config-reloaders
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalConfig")]
    pub external_config: Option<VmAuthExternalConfig>,
    /// ExtraArgs that will be passed to the application container
    /// for example remoteWrite.tmpDataPath: /tmp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraArgs")]
    pub extra_args: Option<BTreeMap<String, String>>,
    /// ExtraEnvs that will be passed to the application container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraEnvs")]
    pub extra_envs: Option<Vec<VmAuthExtraEnvs>>,
    /// ExtraEnvsFrom defines source of env variables for the application container
    /// could either be secret or configmap
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraEnvsFrom")]
    pub extra_envs_from: Option<Vec<VmAuthExtraEnvsFrom>>,
    /// HostAliases provides mapping for ip and hostname,
    /// that would be propagated to pod,
    /// cannot be used with HostNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostAliases")]
    pub host_aliases: Option<Vec<VmAuthHostAliases>>,
    /// HostNetwork controls whether the pod may use the node network namespace
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostNetwork")]
    pub host_network: Option<bool>,
    /// HostAliasesUnderScore provides mapping for ip and hostname,
    /// that would be propagated to pod,
    /// cannot be used with HostNetwork.
    /// Has Priority over hostAliases field
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "host_aliases")]
    pub host_aliases_x: Option<Vec<VmAuthHostAliases>>,
    /// Image - docker image settings
    /// if no specified operator uses default version from operator config
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<VmAuthImage>,
    /// ImagePullSecrets An optional list of references to secrets in the same namespace
    /// to use for pulling images from registries
    /// see <https://kubernetes.io/docs/concepts/containers/images/#referring-to-an-imagepullsecrets-on-a-pod>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<VmAuthImagePullSecrets>>,
    /// Ingress enables ingress configuration for VMAuth.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingress: Option<VmAuthIngress>,
    /// InitContainers allows adding initContainers to the pod definition.
    /// Any errors during the execution of an initContainer will lead to a restart of the Pod.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/init-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initContainers")]
    pub init_containers: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// InternalListenPort instructs vmauth to serve internal routes at given port
    /// available from v0.56.0 operator
    /// and v1.111.0 vmauth version
    /// related doc <https://docs.victoriametrics.com/victoriametrics/vmauth/#security>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalListenPort")]
    pub internal_listen_port: Option<String>,
    /// License allows to configure license key to be used for enterprise features.
    /// Using license key is supported starting from VictoriaMetrics v1.94.0.
    /// See [here](<https://docs.victoriametrics.com/victoriametrics/enterprise/)>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub license: Option<VmAuthLicense>,
    /// LivenessProbe that will be added CRD pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<BTreeMap<String, serde_json::Value>>,
    /// LogFormat for VMAuth to be configured with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logFormat")]
    pub log_format: Option<VmAuthLogFormat>,
    /// LogLevel for victoria metrics single to be configured with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<VmAuthLogLevel>,
    /// ManagedMetadata defines metadata that will be added to the all objects
    /// created by operator for the given CustomResource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedMetadata")]
    pub managed_metadata: Option<VmAuthManagedMetadata>,
    /// MinReadySeconds defines a minimum number of seconds to wait before starting update next pod
    /// if previous in healthy state
    /// Has no effect for VLogs and VMSingle
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minReadySeconds")]
    pub min_ready_seconds: Option<i32>,
    /// NodeSelector Define which Nodes the Pods are scheduled on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// Paused If set to true all actions on the underlying managed objects are not
    /// going to be performed, except for delete actions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub paused: Option<bool>,
    /// PodDisruptionBudget created by operator
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podDisruptionBudget")]
    pub pod_disruption_budget: Option<VmAuthPodDisruptionBudget>,
    /// PodMetadata configures Labels and Annotations which are propagated to the VMAuth pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podMetadata")]
    pub pod_metadata: Option<VmAuthPodMetadata>,
    /// Port listen address
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// PriorityClassName class assigned to the Pods
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityClassName")]
    pub priority_class_name: Option<String>,
    /// ReadinessGates defines pod readiness gates
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessGates")]
    pub readiness_gates: Option<Vec<VmAuthReadinessGates>>,
    /// ReadinessProbe that will be added CRD pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<BTreeMap<String, serde_json::Value>>,
    /// ReplicaCount is the expected size of the Application.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaCount")]
    pub replica_count: Option<i32>,
    /// Resources container resource request and limits, <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    /// if not defined default resources from operator config will be used
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<VmAuthResources>,
    /// The number of old ReplicaSets to retain to allow rollback in deployment or
    /// maximum number of revisions that will be maintained in the Deployment revision history.
    /// Has no effect at StatefulSets
    /// Defaults to 10.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimitCount")]
    pub revision_history_limit_count: Option<i32>,
    /// RuntimeClassName - defines runtime class for kubernetes pod.
    /// <https://kubernetes.io/docs/concepts/containers/runtime-class/>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeClassName")]
    pub runtime_class_name: Option<String>,
    /// SchedulerName - defines kubernetes scheduler name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulerName")]
    pub scheduler_name: Option<String>,
    /// Secrets is a list of Secrets in the same namespace as the Application
    /// object, which shall be mounted into the Application container
    /// at /etc/vm/secrets/SECRET_NAME folder
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secrets: Option<Vec<String>>,
    /// SecurityContext holds pod-level security attributes and common container settings.
    /// This defaults to the default PodSecurityContext.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<BTreeMap<String, serde_json::Value>>,
    /// SelectAllByDefault changes default behavior for empty CRD selectors, such userSelector.
    /// with selectAllByDefault: true and empty userSelector and userNamespaceSelector
    /// Operator selects all exist users
    /// with selectAllByDefault: false - selects nothing
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selectAllByDefault")]
    pub select_all_by_default: Option<bool>,
    /// ServiceAccountName is the name of the ServiceAccount to use to run the pods
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountName")]
    pub service_account_name: Option<String>,
    /// ServiceScrapeSpec that will be added to vmauth VMServiceScrape spec
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceScrapeSpec")]
    pub service_scrape_spec: Option<BTreeMap<String, serde_json::Value>>,
    /// ServiceSpec that will be added to vmsingle service spec
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSpec")]
    pub service_spec: Option<VmAuthServiceSpec>,
    /// StartupProbe that will be added to CRD pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbe")]
    pub startup_probe: Option<BTreeMap<String, serde_json::Value>>,
    /// TerminationGracePeriodSeconds period for container graceful termination
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// Tolerations If specified, the pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<VmAuthTolerations>>,
    /// TopologySpreadConstraints embedded kubernetes pod configuration option,
    /// controls how pods are spread across your cluster among failure-domains
    /// such as regions, zones, nodes, and other user-defined topology domains
    /// <https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologySpreadConstraints")]
    pub topology_spread_constraints: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// UnauthorizedAccessConfig configures access for un authorized users
    /// 
    /// Deprecated: use unauthorizedUserAccessSpec instead
    /// will be removed at v1.0 release
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unauthorizedAccessConfig")]
    pub unauthorized_access_config: Option<serde_json::Value>,
    /// UnauthorizedUserAccessSpec defines unauthorized_user config section of vmauth config
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unauthorizedUserAccessSpec")]
    pub unauthorized_user_access_spec: Option<VmAuthUnauthorizedUserAccessSpec>,
    /// UseDefaultResources controls resource settings
    /// By default, operator sets built-in resource requirements
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useDefaultResources")]
    pub use_default_resources: Option<bool>,
    /// UseProxyProtocol enables proxy protocol for vmauth
    /// <https://www.haproxy.org/download/2.3/doc/proxy-protocol.txt>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useProxyProtocol")]
    pub use_proxy_protocol: Option<bool>,
    /// UseStrictSecurity enables strict security mode for component
    /// it restricts disk writes access
    /// uses non-root user out of the box
    /// drops not needed security permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useStrictSecurity")]
    pub use_strict_security: Option<bool>,
    /// UseVMConfigReloader replaces prometheus-like config-reloader
    /// with vm one. It uses secrets watch instead of file watch
    /// which greatly increases speed of config updates
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useVMConfigReloader")]
    pub use_vm_config_reloader: Option<bool>,
    /// UserNamespaceSelector Namespaces to be selected for  VMAuth discovery.
    /// Works in combination with Selector.
    /// NamespaceSelector nil - only objects at VMAuth namespace.
    /// Selector nil - only objects at NamespaceSelector namespaces.
    /// If both nil - behaviour controlled by selectAllByDefault
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userNamespaceSelector")]
    pub user_namespace_selector: Option<VmAuthUserNamespaceSelector>,
    /// UserSelector defines VMUser to be selected for config file generation.
    /// Works in combination with NamespaceSelector.
    /// NamespaceSelector nil - only objects at VMAuth namespace.
    /// If both nil - behaviour controlled by selectAllByDefault
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userSelector")]
    pub user_selector: Option<VmAuthUserSelector>,
    /// VolumeMounts allows configuration of additional VolumeMounts on the output Deployment/StatefulSet definition.
    /// VolumeMounts specified will be appended to other VolumeMounts in the Application container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<VmAuthVolumeMounts>>,
    /// Volumes allows configuration of additional volumes on the output Deployment/StatefulSet definition.
    /// Volumes specified will be appended to other volumes that are generated.
    /// / +optional
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<BTreeMap<String, serde_json::Value>>>,
}

/// ConfigReloadAuthKeySecret defines optional secret reference authKey for /-/reload API requests.
/// Given secret reference will be added to the application and vm-config-reloader as volume
/// available since v0.57.0 version
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthConfigReloadAuthKeySecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// ConfigReloaderResources config-reloader container resource request and limits, <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
/// if not defined default resources from operator config will be used
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthConfigReloaderResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims,
    /// that are used by this container.
    /// 
    /// This is an alpha field and requires enabling the
    /// DynamicResourceAllocation feature gate.
    /// 
    /// This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<VmAuthConfigReloaderResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthConfigReloaderResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of
    /// the Pod where this field is used. It makes that resource available
    /// inside a container.
    pub name: String,
    /// Request is the name chosen for a request in the referenced claim.
    /// If empty, everything from the claim is made available, otherwise
    /// only the result of this request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
}

/// Specifies the DNS parameters of a pod.
/// Parameters specified here will be merged to the generated DNS
/// configuration based on DNSPolicy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthDnsConfig {
    /// A list of DNS name server IP addresses.
    /// This will be appended to the base nameservers generated from DNSPolicy.
    /// Duplicated nameservers will be removed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nameservers: Option<Vec<String>>,
    /// A list of DNS resolver options.
    /// This will be merged with the base options generated from DNSPolicy.
    /// Duplicated entries will be removed. Resolution options given in Options
    /// will override those that appear in the base DNSPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<VmAuthDnsConfigOptions>>,
    /// A list of DNS search domains for host-name lookup.
    /// This will be appended to the base search paths generated from DNSPolicy.
    /// Duplicated search paths will be removed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub searches: Option<Vec<String>>,
}

/// PodDNSConfigOption defines DNS resolver options of a pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthDnsConfigOptions {
    /// Name is this DNS resolver option's name.
    /// Required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value is this DNS resolver option's value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ExternalConfig defines a source of external VMAuth configuration.
/// If it's defined, configuration for vmauth becomes unmanaged and operator'll not create any related secrets/config-reloaders
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthExternalConfig {
    /// LocalPath contains static path to a config, which is managed externally for cases
    /// when using secrets is not applicable, e.g.: Vault sidecar.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localPath")]
    pub local_path: Option<String>,
    /// SecretRef defines selector for externally managed secret which contains configuration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<VmAuthExternalConfigSecretRef>,
}

/// SecretRef defines selector for externally managed secret which contains configuration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthExternalConfigSecretRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// EnvVar represents an environment variable present in a Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthExtraEnvs {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    /// Variable references $(VAR_NAME) are expanded
    /// using the previously defined environment variables in the container and
    /// any service environment variables. If a variable cannot be resolved,
    /// the reference in the input string will be unchanged. Double $$ are reduced
    /// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
    /// "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
    /// Escaped references will never be expanded, regardless of whether the variable
    /// exists or not.
    /// Defaults to "".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// EnvFromSource represents the source of a set of ConfigMaps
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthExtraEnvsFrom {
    /// The ConfigMap to select from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<VmAuthExtraEnvsFromConfigMapRef>,
    /// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The Secret to select from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<VmAuthExtraEnvsFromSecretRef>,
}

/// The ConfigMap to select from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthExtraEnvsFromConfigMapRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The Secret to select from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthExtraEnvsFromSecretRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
/// pod's hosts file.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthHostAliases {
    /// Hostnames for the above IP address.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostnames: Option<Vec<String>>,
    /// IP address of the host file entry.
    pub ip: String,
}

/// Image - docker image settings
/// if no specified operator uses default version from operator config
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthImage {
    /// PullPolicy describes how to pull docker image
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullPolicy")]
    pub pull_policy: Option<String>,
    /// Repository contains name of docker image + it's repository if needed
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// Tag contains desired docker image version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// LocalObjectReference contains enough information to let you locate the
/// referenced object inside the same namespace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthImagePullSecrets {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Ingress enables ingress configuration for VMAuth.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthIngress {
    /// Annotations is an unstructured key value map stored with a resource that may be
    /// set by external tools to store and retrieve arbitrary metadata. They are not
    /// queryable and should be preserved when modifying objects.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// ClassName defines ingress class name for VMAuth
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class_name: Option<String>,
    /// ExtraRules - additional rules for ingress,
    /// must be checked for correctness by user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraRules")]
    pub extra_rules: Option<Vec<VmAuthIngressExtraRules>>,
    /// ExtraTLS - additional TLS configuration for ingress
    /// must be checked for correctness by user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraTls")]
    pub extra_tls: Option<Vec<VmAuthIngressExtraTls>>,
    /// Host defines ingress host parameter for default rule
    /// It will be used, only if TlsHosts is empty
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Labels Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects. May match selectors of replication controllers
    /// and services.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Name must be unique within a namespace. Is required when creating resources, although
    /// some resources may allow a client to request the generation of an appropriate name
    /// automatically. Name is primarily intended for creation idempotence and configuration
    /// definition.
    /// Cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// TlsHosts configures TLS access for ingress, tlsSecretName must be defined for it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsHosts")]
    pub tls_hosts: Option<Vec<String>>,
    /// TlsSecretName defines secretname at the VMAuth namespace with cert and key
    /// <https://kubernetes.io/docs/concepts/services-networking/ingress/#tls>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSecretName")]
    pub tls_secret_name: Option<String>,
}

/// IngressRule represents the rules mapping the paths under a specified host to
/// the related backend services. Incoming requests are first evaluated for a host
/// match, then routed to the backend associated with the matching IngressRuleValue.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthIngressExtraRules {
    /// host is the fully qualified domain name of a network host, as defined by RFC 3986.
    /// Note the following deviations from the "host" part of the
    /// URI as defined in RFC 3986:
    /// 1. IPs are not allowed. Currently an IngressRuleValue can only apply to
    ///    the IP in the Spec of the parent Ingress.
    /// 2. The `:` delimiter is not respected because ports are not allowed.
    /// 	  Currently the port of an Ingress is implicitly :80 for http and
    /// 	  :443 for https.
    /// Both these may change in the future.
    /// Incoming requests are matched against the host before the
    /// IngressRuleValue. If the host is unspecified, the Ingress routes all
    /// traffic based on the specified IngressRuleValue.
    /// 
    /// host can be "precise" which is a domain name without the terminating dot of
    /// a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name
    /// prefixed with a single wildcard label (e.g. "*.foo.com").
    /// The wildcard character '*' must appear by itself as the first DNS label and
    /// matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*").
    /// Requests will be matched against the Host field in the following way:
    /// 1. If host is precise, the request matches this rule if the http host header is equal to Host.
    /// 2. If host is a wildcard, then the request matches this rule if the http host header
    /// is to equal to the suffix (removing the first label) of the wildcard rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// HTTPIngressRuleValue is a list of http selectors pointing to backends.
    /// In the example: <http://<host>/<path>?<searchpart>> -> backend where
    /// where parts of the url correspond to RFC 3986, this resource will be used
    /// to match against everything after the last '/' and before the first '?'
    /// or '#'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<VmAuthIngressExtraRulesHttp>,
}

/// HTTPIngressRuleValue is a list of http selectors pointing to backends.
/// In the example: <http://<host>/<path>?<searchpart>> -> backend where
/// where parts of the url correspond to RFC 3986, this resource will be used
/// to match against everything after the last '/' and before the first '?'
/// or '#'.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthIngressExtraRulesHttp {
    /// paths is a collection of paths that map requests to backends.
    pub paths: Vec<VmAuthIngressExtraRulesHttpPaths>,
}

/// HTTPIngressPath associates a path with a backend. Incoming urls matching the
/// path are forwarded to the backend.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthIngressExtraRulesHttpPaths {
    /// backend defines the referenced service endpoint to which the traffic
    /// will be forwarded to.
    pub backend: VmAuthIngressExtraRulesHttpPathsBackend,
    /// path is matched against the path of an incoming request. Currently it can
    /// contain characters disallowed from the conventional "path" part of a URL
    /// as defined by RFC 3986. Paths must begin with a '/' and must be present
    /// when using PathType with value "Exact" or "Prefix".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// pathType determines the interpretation of the path matching. PathType can
    /// be one of the following values:
    /// * Exact: Matches the URL path exactly.
    /// * Prefix: Matches based on a URL path prefix split by '/'. Matching is
    ///   done on a path element by element basis. A path element refers is the
    ///   list of labels in the path split by the '/' separator. A request is a
    ///   match for path p if every p is an element-wise prefix of p of the
    ///   request path. Note that if the last element of the path is a substring
    ///   of the last element in request path, it is not a match (e.g. /foo/bar
    ///   matches /foo/bar/baz, but does not match /foo/barbaz).
    /// * ImplementationSpecific: Interpretation of the Path matching is up to
    ///   the IngressClass. Implementations can treat this as a separate PathType
    ///   or treat it identically to Prefix or Exact path types.
    /// Implementations are required to support all path types.
    #[serde(rename = "pathType")]
    pub path_type: String,
}

/// backend defines the referenced service endpoint to which the traffic
/// will be forwarded to.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthIngressExtraRulesHttpPathsBackend {
    /// resource is an ObjectRef to another Kubernetes resource in the namespace
    /// of the Ingress object. If resource is specified, a service.Name and
    /// service.Port must not be specified.
    /// This is a mutually exclusive setting with "Service".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<VmAuthIngressExtraRulesHttpPathsBackendResource>,
    /// service references a service as a backend.
    /// This is a mutually exclusive setting with "Resource".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<VmAuthIngressExtraRulesHttpPathsBackendService>,
}

/// resource is an ObjectRef to another Kubernetes resource in the namespace
/// of the Ingress object. If resource is specified, a service.Name and
/// service.Port must not be specified.
/// This is a mutually exclusive setting with "Service".
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthIngressExtraRulesHttpPathsBackendResource {
    /// APIGroup is the group for the resource being referenced.
    /// If APIGroup is not specified, the specified Kind must be in the core API group.
    /// For any other third-party types, APIGroup is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    /// Kind is the type of resource being referenced
    pub kind: String,
    /// Name is the name of resource being referenced
    pub name: String,
}

/// service references a service as a backend.
/// This is a mutually exclusive setting with "Resource".
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthIngressExtraRulesHttpPathsBackendService {
    /// name is the referenced service. The service must exist in
    /// the same namespace as the Ingress object.
    pub name: String,
    /// port of the referenced service. A port name or port number
    /// is required for a IngressServiceBackend.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<VmAuthIngressExtraRulesHttpPathsBackendServicePort>,
}

/// port of the referenced service. A port name or port number
/// is required for a IngressServiceBackend.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthIngressExtraRulesHttpPathsBackendServicePort {
    /// name is the name of the port on the Service.
    /// This is a mutually exclusive setting with "Number".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// number is the numerical port number (e.g. 80) on the Service.
    /// This is a mutually exclusive setting with "Name".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub number: Option<i32>,
}

/// IngressTLS describes the transport layer security associated with an ingress.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthIngressExtraTls {
    /// hosts is a list of hosts included in the TLS certificate. The values in
    /// this list must match the name/s used in the tlsSecret. Defaults to the
    /// wildcard host setting for the loadbalancer controller fulfilling this
    /// Ingress, if left unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosts: Option<Vec<String>>,
    /// secretName is the name of the secret used to terminate TLS traffic on
    /// port 443. Field is left optional to allow TLS routing based on SNI
    /// hostname alone. If the SNI host in a listener conflicts with the "Host"
    /// header field used by an IngressRule, the SNI host is used for termination
    /// and value of the "Host" header is used for routing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// License allows to configure license key to be used for enterprise features.
/// Using license key is supported starting from VictoriaMetrics v1.94.0.
/// See [here](<https://docs.victoriametrics.com/victoriametrics/enterprise/)>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthLicense {
    /// Enforce offline verification of the license key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceOffline")]
    pub force_offline: Option<bool>,
    /// Enterprise license key. This flag is available only in [VictoriaMetrics enterprise](<https://docs.victoriametrics.com/victoriametrics/enterprise/).>
    /// To request a trial license, [go to](<https://victoriametrics.com/products/enterprise/trial)>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// KeyRef is reference to secret with license key for enterprise features.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyRef")]
    pub key_ref: Option<VmAuthLicenseKeyRef>,
    /// Interval to be used for checking for license key changes. Note that this is only applicable when using KeyRef.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reloadInterval")]
    pub reload_interval: Option<String>,
}

/// KeyRef is reference to secret with license key for enterprise features.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthLicenseKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// VMAuthSpec defines the desired state of VMAuth
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum VmAuthLogFormat {
    #[serde(rename = "default")]
    Default,
    #[serde(rename = "json")]
    Json,
}

/// VMAuthSpec defines the desired state of VMAuth
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum VmAuthLogLevel {
    #[serde(rename = "INFO")]
    Info,
    #[serde(rename = "WARN")]
    Warn,
    #[serde(rename = "ERROR")]
    Error,
    #[serde(rename = "FATAL")]
    Fatal,
    #[serde(rename = "PANIC")]
    Panic,
}

/// ManagedMetadata defines metadata that will be added to the all objects
/// created by operator for the given CustomResource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthManagedMetadata {
    /// Annotations is an unstructured key value map stored with a resource that may be
    /// set by external tools to store and retrieve arbitrary metadata. They are not
    /// queryable and should be preserved when modifying objects.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// PodDisruptionBudget created by operator
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthPodDisruptionBudget {
    /// An eviction is allowed if at most "maxUnavailable" pods selected by
    /// "selector" are unavailable after the eviction, i.e. even in absence of
    /// the evicted pod. For example, one can prevent all voluntary evictions
    /// by specifying 0. This is a mutually exclusive setting with "minAvailable".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
    /// An eviction is allowed if at least "minAvailable" pods selected by
    /// "selector" will still be available after the eviction, i.e. even in the
    /// absence of the evicted pod.  So for example you can prevent all voluntary
    /// evictions by specifying "100%".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minAvailable")]
    pub min_available: Option<IntOrString>,
    /// replaces default labels selector generated by operator
    /// it's useful when you need to create custom budget
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selectorLabels")]
    pub selector_labels: Option<BTreeMap<String, String>>,
}

/// PodMetadata configures Labels and Annotations which are propagated to the VMAuth pods.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthPodMetadata {
    /// Annotations is an unstructured key value map stored with a resource that may be
    /// set by external tools to store and retrieve arbitrary metadata. They are not
    /// queryable and should be preserved when modifying objects.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects. May match selectors of replication controllers
    /// and services.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Name must be unique within a namespace. Is required when creating resources, although
    /// some resources may allow a client to request the generation of an appropriate name
    /// automatically. Name is primarily intended for creation idempotence and configuration
    /// definition.
    /// Cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PodReadinessGate contains the reference to a pod condition
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthReadinessGates {
    /// ConditionType refers to a condition in the pod's condition list with matching type.
    #[serde(rename = "conditionType")]
    pub condition_type: String,
}

/// Resources container resource request and limits, <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
/// if not defined default resources from operator config will be used
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims,
    /// that are used by this container.
    /// 
    /// This is an alpha field and requires enabling the
    /// DynamicResourceAllocation feature gate.
    /// 
    /// This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<VmAuthResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of
    /// the Pod where this field is used. It makes that resource available
    /// inside a container.
    pub name: String,
    /// Request is the name chosen for a request in the referenced claim.
    /// If empty, everything from the claim is made available, otherwise
    /// only the result of this request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
}

/// ServiceSpec that will be added to vmsingle service spec
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthServiceSpec {
    /// EmbeddedObjectMetadata defines objectMeta for additional service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<VmAuthServiceSpecMetadata>,
    /// ServiceSpec describes the attributes that a user creates on a service.
    /// More info: <https://kubernetes.io/docs/concepts/services-networking/service/>
    pub spec: BTreeMap<String, serde_json::Value>,
    /// UseAsDefault applies changes from given service definition to the main object Service
    /// Changing from headless service to clusterIP or loadbalancer may break cross-component communication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useAsDefault")]
    pub use_as_default: Option<bool>,
}

/// EmbeddedObjectMetadata defines objectMeta for additional service.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthServiceSpecMetadata {
    /// Annotations is an unstructured key value map stored with a resource that may be
    /// set by external tools to store and retrieve arbitrary metadata. They are not
    /// queryable and should be preserved when modifying objects.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects. May match selectors of replication controllers
    /// and services.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Name must be unique within a namespace. Is required when creating resources, although
    /// some resources may allow a client to request the generation of an appropriate name
    /// automatically. Name is primarily intended for creation idempotence and configuration
    /// definition.
    /// Cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// The pod this Toleration is attached to tolerates any taint that matches
/// the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects.
    /// When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys.
    /// If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value.
    /// Valid operators are Exists and Equal. Defaults to Equal.
    /// Exists is equivalent to wildcard for value, so that a pod can
    /// tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be
    /// of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
    /// it is not set, which means tolerate the taint forever (do not evict). Zero and
    /// negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to.
    /// If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// UnauthorizedUserAccessSpec defines unauthorized_user config section of vmauth config
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthUnauthorizedUserAccessSpec {
    /// DefaultURLs backend url for non-matching paths filter
    /// usually used for default backend with error message
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_url: Option<Vec<String>>,
    /// DiscoverBackendIPs instructs discovering URLPrefix backend IPs via DNS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub discover_backend_ips: Option<bool>,
    /// DropSrcPathPrefixParts is the number of `/`-delimited request path prefix parts to drop before proxying the request to backend.
    /// See [here](<https://docs.victoriametrics.com/victoriametrics/vmauth/#dropping-request-path-prefix)> for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop_src_path_prefix_parts: Option<i64>,
    /// DumpRequestOnErrors instructs vmauth to return detailed request params to the client
    /// if routing rules don't allow to forward request to the backends.
    /// Useful for debugging `src_hosts` and `src_headers` based routing rules
    /// 
    /// available since v1.107.0 vmauth version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dump_request_on_errors: Option<bool>,
    /// Headers represent additional http headers, that vmauth uses
    /// in form of ["header_key: header_value"]
    /// multiple values for header key:
    /// ["header_key: value1,value2"]
    /// it's available since 1.68.0 version of vmauth
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    /// IPFilters defines per target src ip filters
    /// supported only with enterprise version of [vmauth](<https://docs.victoriametrics.com/victoriametrics/vmauth/#ip-filters)>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ip_filters: Option<VmAuthUnauthorizedUserAccessSpecIpFilters>,
    /// LoadBalancingPolicy defines load balancing policy to use for backend urls.
    /// Supported policies: least_loaded, first_available.
    /// See [here](<https://docs.victoriametrics.com/victoriametrics/vmauth/#load-balancing)> for more details (default "least_loaded")
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub load_balancing_policy: Option<VmAuthUnauthorizedUserAccessSpecLoadBalancingPolicy>,
    /// MaxConcurrentRequests defines max concurrent requests per user
    /// 300 is default value for vmauth
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_concurrent_requests: Option<i64>,
    /// MetricLabels - additional labels for metrics exported by vmauth for given user.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metric_labels: Option<BTreeMap<String, String>>,
    /// ResponseHeaders represent additional http headers, that vmauth adds for request response
    /// in form of ["header_key: header_value"]
    /// multiple values for header key:
    /// ["header_key: value1,value2"]
    /// it's available since 1.93.0 version of vmauth
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response_headers: Option<Vec<String>>,
    /// RetryStatusCodes defines http status codes in numeric format for request retries
    /// e.g. [429,503]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_status_codes: Option<Vec<i64>>,
    /// TLSConfig defines tls configuration for the backend connection
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<VmAuthUnauthorizedUserAccessSpecTlsConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url_map: Option<Vec<VmAuthUnauthorizedUserAccessSpecUrlMap>>,
    /// URLPrefix defines prefix prefix for destination
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url_prefix: Option<serde_json::Value>,
}

/// IPFilters defines per target src ip filters
/// supported only with enterprise version of [vmauth](<https://docs.victoriametrics.com/victoriametrics/vmauth/#ip-filters)>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthUnauthorizedUserAccessSpecIpFilters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_list: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deny_list: Option<Vec<String>>,
}

/// UnauthorizedUserAccessSpec defines unauthorized_user config section of vmauth config
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum VmAuthUnauthorizedUserAccessSpecLoadBalancingPolicy {
    #[serde(rename = "least_loaded")]
    LeastLoaded,
    #[serde(rename = "first_available")]
    FirstAvailable,
}

/// TLSConfig defines tls configuration for the backend connection
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthUnauthorizedUserAccessSpecTlsConfig {
    /// Struct containing the CA cert to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<VmAuthUnauthorizedUserAccessSpecTlsConfigCa>,
    /// Path to the CA cert in the container to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caFile")]
    pub ca_file: Option<String>,
    /// Struct containing the client cert file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<VmAuthUnauthorizedUserAccessSpecTlsConfigCert>,
    /// Path to the client cert file in the container for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certFile")]
    pub cert_file: Option<String>,
    /// Disable target certificate validation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insecureSkipVerify")]
    pub insecure_skip_verify: Option<bool>,
    /// Path to the client key file in the container for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyFile")]
    pub key_file: Option<String>,
    /// Secret containing the client key file for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keySecret")]
    pub key_secret: Option<VmAuthUnauthorizedUserAccessSpecTlsConfigKeySecret>,
    /// Used to verify the hostname for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
}

/// Struct containing the CA cert to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthUnauthorizedUserAccessSpecTlsConfigCa {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<VmAuthUnauthorizedUserAccessSpecTlsConfigCaConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<VmAuthUnauthorizedUserAccessSpecTlsConfigCaSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthUnauthorizedUserAccessSpecTlsConfigCaConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthUnauthorizedUserAccessSpecTlsConfigCaSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Struct containing the client cert file for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthUnauthorizedUserAccessSpecTlsConfigCert {
    /// ConfigMap containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<VmAuthUnauthorizedUserAccessSpecTlsConfigCertConfigMap>,
    /// Secret containing data to use for the targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<VmAuthUnauthorizedUserAccessSpecTlsConfigCertSecret>,
}

/// ConfigMap containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthUnauthorizedUserAccessSpecTlsConfigCertConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing data to use for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthUnauthorizedUserAccessSpecTlsConfigCertSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Secret containing the client key file for the targets.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthUnauthorizedUserAccessSpecTlsConfigKeySecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// UnauthorizedAccessConfigURLMap defines element of url_map routing configuration
/// For UnauthorizedAccessConfig and VMAuthUnauthorizedUserAccessSpec.URLMap
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthUnauthorizedUserAccessSpecUrlMap {
    /// DiscoverBackendIPs instructs discovering URLPrefix backend IPs via DNS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub discover_backend_ips: Option<bool>,
    /// DropSrcPathPrefixParts is the number of `/`-delimited request path prefix parts to drop before proxying the request to backend.
    /// See [here](<https://docs.victoriametrics.com/victoriametrics/vmauth/#dropping-request-path-prefix)> for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop_src_path_prefix_parts: Option<i64>,
    /// RequestHeaders represent additional http headers, that vmauth uses
    /// in form of ["header_key: header_value"]
    /// multiple values for header key:
    /// ["header_key: value1,value2"]
    /// it's available since 1.68.0 version of vmauth
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    /// LoadBalancingPolicy defines load balancing policy to use for backend urls.
    /// Supported policies: least_loaded, first_available.
    /// See [here](<https://docs.victoriametrics.com/victoriametrics/vmauth/#load-balancing)> for more details (default "least_loaded")
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub load_balancing_policy: Option<VmAuthUnauthorizedUserAccessSpecUrlMapLoadBalancingPolicy>,
    /// ResponseHeaders represent additional http headers, that vmauth adds for request response
    /// in form of ["header_key: header_value"]
    /// multiple values for header key:
    /// ["header_key: value1,value2"]
    /// it's available since 1.93.0 version of vmauth
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response_headers: Option<Vec<String>>,
    /// RetryStatusCodes defines http status codes in numeric format for request retries
    /// Can be defined per target or at VMUser.spec level
    /// e.g. [429,503]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_status_codes: Option<Vec<i64>>,
    /// SrcHeaders is an optional list of headers, which must match request headers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub src_headers: Option<Vec<String>>,
    /// SrcHosts is an optional list of regular expressions, which must match the request hostname.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub src_hosts: Option<Vec<String>>,
    /// SrcPaths is an optional list of regular expressions, which must match the request path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub src_paths: Option<Vec<String>>,
    /// SrcQueryArgs is an optional list of query args, which must match request URL query args.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub src_query_args: Option<Vec<String>>,
    /// UrlPrefix contains backend url prefixes for the proxied request url.
    /// URLPrefix defines prefix prefix for destination
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url_prefix: Option<serde_json::Value>,
}

/// UnauthorizedAccessConfigURLMap defines element of url_map routing configuration
/// For UnauthorizedAccessConfig and VMAuthUnauthorizedUserAccessSpec.URLMap
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum VmAuthUnauthorizedUserAccessSpecUrlMapLoadBalancingPolicy {
    #[serde(rename = "least_loaded")]
    LeastLoaded,
    #[serde(rename = "first_available")]
    FirstAvailable,
}

/// UserNamespaceSelector Namespaces to be selected for  VMAuth discovery.
/// Works in combination with Selector.
/// NamespaceSelector nil - only objects at VMAuth namespace.
/// Selector nil - only objects at NamespaceSelector namespaces.
/// If both nil - behaviour controlled by selectAllByDefault
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthUserNamespaceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<VmAuthUserNamespaceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthUserNamespaceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// UserSelector defines VMUser to be selected for config file generation.
/// Works in combination with NamespaceSelector.
/// NamespaceSelector nil - only objects at VMAuth namespace.
/// If both nil - behaviour controlled by selectAllByDefault
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthUserSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<VmAuthUserSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthUserSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// VolumeMount describes a mounting of a Volume within a container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthVolumeMounts {
    /// Path within the container at which the volume should be mounted.  Must
    /// not contain ':'.
    #[serde(rename = "mountPath")]
    pub mount_path: String,
    /// mountPropagation determines how mounts are propagated from the host
    /// to container and the other way around.
    /// When not set, MountPropagationNone is used.
    /// This field is beta in 1.10.
    /// When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
    /// (which defaults to None).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPropagation")]
    pub mount_propagation: Option<String>,
    /// This must match the Name of a Volume.
    pub name: String,
    /// Mounted read-only if true, read-write otherwise (false or unspecified).
    /// Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// RecursiveReadOnly specifies whether read-only mounts should be handled
    /// recursively.
    /// 
    /// If ReadOnly is false, this field has no meaning and must be unspecified.
    /// 
    /// If ReadOnly is true, and this field is set to Disabled, the mount is not made
    /// recursively read-only.  If this field is set to IfPossible, the mount is made
    /// recursively read-only, if it is supported by the container runtime.  If this
    /// field is set to Enabled, the mount is made recursively read-only if it is
    /// supported by the container runtime, otherwise the pod will not be started and
    /// an error will be generated to indicate the reason.
    /// 
    /// If this field is set to IfPossible or Enabled, MountPropagation must be set to
    /// None (or be unspecified, which defaults to None).
    /// 
    /// If this field is not specified, it is treated as an equivalent of Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recursiveReadOnly")]
    pub recursive_read_only: Option<String>,
    /// Path within the volume from which the container's volume should be mounted.
    /// Defaults to "" (volume's root).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPath")]
    pub sub_path: Option<String>,
    /// Expanded path within the volume from which the container's volume should be mounted.
    /// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
    /// Defaults to "" (volume's root).
    /// SubPathExpr and SubPath are mutually exclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPathExpr")]
    pub sub_path_expr: Option<String>,
}

/// VMAuthStatus defines the observed state of VMAuth
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAuthStatus {
    /// Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration defines current generation picked by operator for the
    /// reconcile
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// Reason defines human readable error reason
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// UpdateStatus defines a status for update rollout
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateStatus")]
    pub update_status: Option<String>,
}

