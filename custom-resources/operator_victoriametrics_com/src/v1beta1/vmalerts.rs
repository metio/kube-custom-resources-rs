// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/VictoriaMetrics/operator/operator.victoriametrics.com/v1beta1/vmalerts.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// VMAlertSpec defines the desired state of VMAlert
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "operator.victoriametrics.com", version = "v1beta1", kind = "VMAlert", plural = "vmalerts")]
#[kube(namespaced)]
#[kube(status = "VmAlertStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct VmAlertSpec {
    /// Affinity If specified, the pod's scheduling constraints.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<BTreeMap<String, serde_json::Value>>,
    /// ConfigMaps is a list of ConfigMaps in the same namespace as the Application
    /// object, which shall be mounted into the Application container
    /// at /etc/vm/configs/CONFIGMAP_NAME folder
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMaps")]
    pub config_maps: Option<Vec<String>>,
    /// ConfigReloadAuthKeySecret defines optional secret reference authKey for /-/reload API requests.
    /// Given secret reference will be added to the application and vm-config-reloader as volume
    /// available since v0.57.0 version
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configReloadAuthKeySecret")]
    pub config_reload_auth_key_secret: Option<VmAlertConfigReloadAuthKeySecret>,
    /// ConfigReloaderExtraArgs that will be passed to  VMAuths config-reloader container
    /// for example resyncInterval: "30s"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configReloaderExtraArgs")]
    pub config_reloader_extra_args: Option<BTreeMap<String, String>>,
    /// ConfigReloaderImageTag defines image:tag for config-reloader container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configReloaderImageTag")]
    pub config_reloader_image_tag: Option<String>,
    /// ConfigReloaderResources config-reloader container resource request and limits, <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    /// if not defined default resources from operator config will be used
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configReloaderResources")]
    pub config_reloader_resources: Option<VmAlertConfigReloaderResources>,
    /// Containers property allows to inject additions sidecars or to patch existing containers.
    /// It can be useful for proxies, backup, etc.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// Datasource Victoria Metrics or VMSelect url. Required parameter. e.g. <http://127.0.0.1:8428>
    pub datasource: VmAlertDatasource,
    /// DisableAutomountServiceAccountToken whether to disable serviceAccount auto mount by Kubernetes (available from v0.54.0).
    /// Operator will conditionally create volumes and volumeMounts for containers if it requires k8s API access.
    /// For example, vmagent and vm-config-reloader requires k8s API access.
    /// Operator creates volumes with name: "kube-api-access", which can be used as volumeMount for extraContainers if needed.
    /// And also adds VolumeMounts at /var/run/secrets/kubernetes.io/serviceaccount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableAutomountServiceAccountToken")]
    pub disable_automount_service_account_token: Option<bool>,
    /// DisableSelfServiceScrape controls creation of VMServiceScrape by operator
    /// for the application.
    /// Has priority over `VM_DISABLESELFSERVICESCRAPECREATION` operator env variable
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableSelfServiceScrape")]
    pub disable_self_service_scrape: Option<bool>,
    /// Specifies the DNS parameters of a pod.
    /// Parameters specified here will be merged to the generated DNS
    /// configuration based on DNSPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsConfig")]
    pub dns_config: Option<VmAlertDnsConfig>,
    /// DNSPolicy sets DNS policy for the pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsPolicy")]
    pub dns_policy: Option<String>,
    /// EnforcedNamespaceLabel enforces adding a namespace label of origin for each alert
    /// and metric that is user created. The label value will always be the namespace of the object that is
    /// being created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcedNamespaceLabel")]
    pub enforced_namespace_label: Option<String>,
    /// EvaluationInterval defines how often to evaluate rules by default
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluationInterval")]
    pub evaluation_interval: Option<String>,
    /// ExternalLabels in the form 'name: value' to add to all generated recording rules and alerts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalLabels")]
    pub external_labels: Option<BTreeMap<String, String>>,
    /// ExtraArgs that will be passed to the application container
    /// for example remoteWrite.tmpDataPath: /tmp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraArgs")]
    pub extra_args: Option<BTreeMap<String, String>>,
    /// ExtraEnvs that will be passed to the application container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraEnvs")]
    pub extra_envs: Option<Vec<VmAlertExtraEnvs>>,
    /// ExtraEnvsFrom defines source of env variables for the application container
    /// could either be secret or configmap
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraEnvsFrom")]
    pub extra_envs_from: Option<Vec<VmAlertExtraEnvsFrom>>,
    /// HostAliases provides mapping for ip and hostname,
    /// that would be propagated to pod,
    /// cannot be used with HostNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostAliases")]
    pub host_aliases: Option<Vec<VmAlertHostAliases>>,
    /// HostNetwork controls whether the pod may use the node network namespace
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostNetwork")]
    pub host_network: Option<bool>,
    /// HostAliasesUnderScore provides mapping for ip and hostname,
    /// that would be propagated to pod,
    /// cannot be used with HostNetwork.
    /// Has Priority over hostAliases field
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "host_aliases")]
    pub host_aliases_x: Option<Vec<VmAlertHostAliases>>,
    /// Image - docker image settings
    /// if no specified operator uses default version from operator config
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<VmAlertImage>,
    /// ImagePullSecrets An optional list of references to secrets in the same namespace
    /// to use for pulling images from registries
    /// see <https://kubernetes.io/docs/concepts/containers/images/#referring-to-an-imagepullsecrets-on-a-pod>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<VmAlertImagePullSecrets>>,
    /// InitContainers allows adding initContainers to the pod definition.
    /// Any errors during the execution of an initContainer will lead to a restart of the Pod.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/init-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initContainers")]
    pub init_containers: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// License allows to configure license key to be used for enterprise features.
    /// Using license key is supported starting from VictoriaMetrics v1.94.0.
    /// See [here](<https://docs.victoriametrics.com/victoriametrics/enterprise/)>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub license: Option<VmAlertLicense>,
    /// LivenessProbe that will be added CRD pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<BTreeMap<String, serde_json::Value>>,
    /// LogFormat for VMAlert to be configured with.
    /// default or json
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logFormat")]
    pub log_format: Option<VmAlertLogFormat>,
    /// LogLevel for VMAlert to be configured with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<VmAlertLogLevel>,
    /// ManagedMetadata defines metadata that will be added to the all objects
    /// created by operator for the given CustomResource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedMetadata")]
    pub managed_metadata: Option<VmAlertManagedMetadata>,
    /// MinReadySeconds defines a minimum number of seconds to wait before starting update next pod
    /// if previous in healthy state
    /// Has no effect for VLogs and VMSingle
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minReadySeconds")]
    pub min_ready_seconds: Option<i32>,
    /// NodeSelector Define which Nodes the Pods are scheduled on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// Notifier prometheus alertmanager endpoint spec. Required at least one of notifier or notifiers when there are alerting rules. e.g. <http://127.0.0.1:9093>
    /// If specified both notifier and notifiers, notifier will be added as last element to notifiers.
    /// only one of notifier options could be chosen: notifierConfigRef or notifiers +  notifier
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notifier: Option<VmAlertNotifier>,
    /// NotifierConfigRef reference for secret with notifier configuration for vmalert
    /// only one of notifier options could be chosen: notifierConfigRef or notifiers +  notifier
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notifierConfigRef")]
    pub notifier_config_ref: Option<VmAlertNotifierConfigRef>,
    /// Notifiers prometheus alertmanager endpoints. Required at least one of notifier or notifiers when there are alerting rules. e.g. <http://127.0.0.1:9093>
    /// If specified both notifier and notifiers, notifier will be added as last element to notifiers.
    /// only one of notifier options could be chosen: notifierConfigRef or notifiers +  notifier
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notifiers: Option<Vec<VmAlertNotifiers>>,
    /// Paused If set to true all actions on the underlying managed objects are not
    /// going to be performed, except for delete actions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub paused: Option<bool>,
    /// PodDisruptionBudget created by operator
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podDisruptionBudget")]
    pub pod_disruption_budget: Option<VmAlertPodDisruptionBudget>,
    /// PodMetadata configures Labels and Annotations which are propagated to the VMAlert pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podMetadata")]
    pub pod_metadata: Option<VmAlertPodMetadata>,
    /// Port listen address
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// PriorityClassName class assigned to the Pods
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityClassName")]
    pub priority_class_name: Option<String>,
    /// ReadinessGates defines pod readiness gates
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessGates")]
    pub readiness_gates: Option<Vec<VmAlertReadinessGates>>,
    /// ReadinessProbe that will be added CRD pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<BTreeMap<String, serde_json::Value>>,
    /// RemoteRead Optional URL to read vmalert state (persisted via RemoteWrite)
    /// This configuration only makes sense if alerts state has been successfully
    /// persisted (via RemoteWrite) before.
    /// see -remoteRead.url docs in vmalerts for details.
    /// E.g. <http://127.0.0.1:8428>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteRead")]
    pub remote_read: Option<VmAlertRemoteRead>,
    /// RemoteWrite Optional URL to remote-write compatible storage to persist
    /// vmalert state and rule results to.
    /// Rule results will be persisted according to each rule.
    /// Alerts state will be persisted in the form of time series named ALERTS and ALERTS_FOR_STATE
    /// see -remoteWrite.url docs in vmalerts for details.
    /// E.g. <http://127.0.0.1:8428>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteWrite")]
    pub remote_write: Option<VmAlertRemoteWrite>,
    /// ReplicaCount is the expected size of the Application.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaCount")]
    pub replica_count: Option<i32>,
    /// Resources container resource request and limits, <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    /// if not defined default resources from operator config will be used
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<VmAlertResources>,
    /// The number of old ReplicaSets to retain to allow rollback in deployment or
    /// maximum number of revisions that will be maintained in the Deployment revision history.
    /// Has no effect at StatefulSets
    /// Defaults to 10.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimitCount")]
    pub revision_history_limit_count: Option<i32>,
    /// RollingUpdate - overrides deployment update params.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdate")]
    pub rolling_update: Option<VmAlertRollingUpdate>,
    /// RuleNamespaceSelector to be selected for VMRules discovery.
    /// Works in combination with Selector.
    /// If both nil - behaviour controlled by selectAllByDefault
    /// NamespaceSelector nil - only objects at VMAlert namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleNamespaceSelector")]
    pub rule_namespace_selector: Option<VmAlertRuleNamespaceSelector>,
    /// RulePath to the file with alert rules.
    /// Supports patterns. Flag can be specified multiple times.
    /// Examples:
    /// -rule /path/to/file. Path to a single file with alerting rules
    /// -rule dir/*.yaml -rule /*.yaml. Relative path to all .yaml files in folder,
    /// absolute path to all .yaml files in root.
    /// by default operator adds /etc/vmalert/configs/base/vmalert.yaml
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rulePath")]
    pub rule_path: Option<Vec<String>>,
    /// RuleSelector selector to select which VMRules to mount for loading alerting
    /// rules from.
    /// Works in combination with NamespaceSelector.
    /// If both nil - behaviour controlled by selectAllByDefault
    /// NamespaceSelector nil - only objects at VMAlert namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleSelector")]
    pub rule_selector: Option<VmAlertRuleSelector>,
    /// RuntimeClassName - defines runtime class for kubernetes pod.
    /// <https://kubernetes.io/docs/concepts/containers/runtime-class/>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeClassName")]
    pub runtime_class_name: Option<String>,
    /// SchedulerName - defines kubernetes scheduler name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulerName")]
    pub scheduler_name: Option<String>,
    /// Secrets is a list of Secrets in the same namespace as the Application
    /// object, which shall be mounted into the Application container
    /// at /etc/vm/secrets/SECRET_NAME folder
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secrets: Option<Vec<String>>,
    /// SecurityContext holds pod-level security attributes and common container settings.
    /// This defaults to the default PodSecurityContext.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<BTreeMap<String, serde_json::Value>>,
    /// SelectAllByDefault changes default behavior for empty CRD selectors, such RuleSelector.
    /// with selectAllByDefault: true and empty serviceScrapeSelector and RuleNamespaceSelector
    /// Operator selects all exist serviceScrapes
    /// with selectAllByDefault: false - selects nothing
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selectAllByDefault")]
    pub select_all_by_default: Option<bool>,
    /// ServiceAccountName is the name of the ServiceAccount to use to run the pods
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountName")]
    pub service_account_name: Option<String>,
    /// ServiceScrapeSpec that will be added to vmalert VMServiceScrape spec
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceScrapeSpec")]
    pub service_scrape_spec: Option<BTreeMap<String, serde_json::Value>>,
    /// ServiceSpec that will be added to vmalert service spec
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSpec")]
    pub service_spec: Option<VmAlertServiceSpec>,
    /// StartupProbe that will be added to CRD pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbe")]
    pub startup_probe: Option<BTreeMap<String, serde_json::Value>>,
    /// TerminationGracePeriodSeconds period for container graceful termination
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// Tolerations If specified, the pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<VmAlertTolerations>>,
    /// TopologySpreadConstraints embedded kubernetes pod configuration option,
    /// controls how pods are spread across your cluster among failure-domains
    /// such as regions, zones, nodes, and other user-defined topology domains
    /// <https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologySpreadConstraints")]
    pub topology_spread_constraints: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// UpdateStrategy - overrides default update strategy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateStrategy")]
    pub update_strategy: Option<VmAlertUpdateStrategy>,
    /// UseDefaultResources controls resource settings
    /// By default, operator sets built-in resource requirements
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useDefaultResources")]
    pub use_default_resources: Option<bool>,
    /// UseStrictSecurity enables strict security mode for component
    /// it restricts disk writes access
    /// uses non-root user out of the box
    /// drops not needed security permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useStrictSecurity")]
    pub use_strict_security: Option<bool>,
    /// UseVMConfigReloader replaces prometheus-like config-reloader
    /// with vm one. It uses secrets watch instead of file watch
    /// which greatly increases speed of config updates
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useVMConfigReloader")]
    pub use_vm_config_reloader: Option<bool>,
    /// VolumeMounts allows configuration of additional VolumeMounts on the output Deployment/StatefulSet definition.
    /// VolumeMounts specified will be appended to other VolumeMounts in the Application container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<VmAlertVolumeMounts>>,
    /// Volumes allows configuration of additional volumes on the output Deployment/StatefulSet definition.
    /// Volumes specified will be appended to other volumes that are generated.
    /// / +optional
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<BTreeMap<String, serde_json::Value>>>,
}

/// ConfigReloadAuthKeySecret defines optional secret reference authKey for /-/reload API requests.
/// Given secret reference will be added to the application and vm-config-reloader as volume
/// available since v0.57.0 version
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertConfigReloadAuthKeySecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// ConfigReloaderResources config-reloader container resource request and limits, <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
/// if not defined default resources from operator config will be used
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertConfigReloaderResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims,
    /// that are used by this container.
    /// 
    /// This is an alpha field and requires enabling the
    /// DynamicResourceAllocation feature gate.
    /// 
    /// This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<VmAlertConfigReloaderResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertConfigReloaderResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of
    /// the Pod where this field is used. It makes that resource available
    /// inside a container.
    pub name: String,
    /// Request is the name chosen for a request in the referenced claim.
    /// If empty, everything from the claim is made available, otherwise
    /// only the result of this request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
}

/// Datasource Victoria Metrics or VMSelect url. Required parameter. e.g. <http://127.0.0.1:8428>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertDatasource {
    /// BasicAuth allow an endpoint to authenticate over basic authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<VmAlertDatasourceBasicAuth>,
    /// Path to bearer token file
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenFile")]
    pub bearer_token_file: Option<String>,
    /// Optional bearer auth token to use for -remoteWrite.url
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenSecret")]
    pub bearer_token_secret: Option<VmAlertDatasourceBearerTokenSecret>,
    /// Headers allow configuring custom http headers
    /// Must be in form of semicolon separated header with value
    /// e.g.
    /// headerName:headerValue
    /// vmalert supports it since 1.79.0 version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    /// OAuth2 defines OAuth2 configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth2: Option<BTreeMap<String, serde_json::Value>>,
    /// TLSConfig specifies TLSConfig configuration parameters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<BTreeMap<String, serde_json::Value>>,
    /// Victoria Metrics or VMSelect url. Required parameter. E.g. <http://127.0.0.1:8428>
    pub url: String,
}

/// BasicAuth allow an endpoint to authenticate over basic authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertDatasourceBasicAuth {
    /// Password defines reference for secret with password value
    /// The secret needs to be in the same namespace as scrape object
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<VmAlertDatasourceBasicAuthPassword>,
    /// PasswordFile defines path to password file at disk
    /// must be pre-mounted
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password_file: Option<String>,
    /// Username defines reference for secret with username value
    /// The secret needs to be in the same namespace as scrape object
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<VmAlertDatasourceBasicAuthUsername>,
}

/// Password defines reference for secret with password value
/// The secret needs to be in the same namespace as scrape object
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertDatasourceBasicAuthPassword {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Username defines reference for secret with username value
/// The secret needs to be in the same namespace as scrape object
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertDatasourceBasicAuthUsername {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Optional bearer auth token to use for -remoteWrite.url
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertDatasourceBearerTokenSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Specifies the DNS parameters of a pod.
/// Parameters specified here will be merged to the generated DNS
/// configuration based on DNSPolicy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertDnsConfig {
    /// A list of DNS name server IP addresses.
    /// This will be appended to the base nameservers generated from DNSPolicy.
    /// Duplicated nameservers will be removed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nameservers: Option<Vec<String>>,
    /// A list of DNS resolver options.
    /// This will be merged with the base options generated from DNSPolicy.
    /// Duplicated entries will be removed. Resolution options given in Options
    /// will override those that appear in the base DNSPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<VmAlertDnsConfigOptions>>,
    /// A list of DNS search domains for host-name lookup.
    /// This will be appended to the base search paths generated from DNSPolicy.
    /// Duplicated search paths will be removed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub searches: Option<Vec<String>>,
}

/// PodDNSConfigOption defines DNS resolver options of a pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertDnsConfigOptions {
    /// Name is this DNS resolver option's name.
    /// Required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value is this DNS resolver option's value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// EnvVar represents an environment variable present in a Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertExtraEnvs {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    /// Variable references $(VAR_NAME) are expanded
    /// using the previously defined environment variables in the container and
    /// any service environment variables. If a variable cannot be resolved,
    /// the reference in the input string will be unchanged. Double $$ are reduced
    /// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
    /// "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
    /// Escaped references will never be expanded, regardless of whether the variable
    /// exists or not.
    /// Defaults to "".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// EnvFromSource represents the source of a set of ConfigMaps
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertExtraEnvsFrom {
    /// The ConfigMap to select from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<VmAlertExtraEnvsFromConfigMapRef>,
    /// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The Secret to select from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<VmAlertExtraEnvsFromSecretRef>,
}

/// The ConfigMap to select from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertExtraEnvsFromConfigMapRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The Secret to select from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertExtraEnvsFromSecretRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
/// pod's hosts file.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertHostAliases {
    /// Hostnames for the above IP address.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostnames: Option<Vec<String>>,
    /// IP address of the host file entry.
    pub ip: String,
}

/// Image - docker image settings
/// if no specified operator uses default version from operator config
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertImage {
    /// PullPolicy describes how to pull docker image
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullPolicy")]
    pub pull_policy: Option<String>,
    /// Repository contains name of docker image + it's repository if needed
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// Tag contains desired docker image version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// LocalObjectReference contains enough information to let you locate the
/// referenced object inside the same namespace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertImagePullSecrets {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// License allows to configure license key to be used for enterprise features.
/// Using license key is supported starting from VictoriaMetrics v1.94.0.
/// See [here](<https://docs.victoriametrics.com/victoriametrics/enterprise/)>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertLicense {
    /// Enforce offline verification of the license key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceOffline")]
    pub force_offline: Option<bool>,
    /// Enterprise license key. This flag is available only in [VictoriaMetrics enterprise](<https://docs.victoriametrics.com/victoriametrics/enterprise/).>
    /// To request a trial license, [go to](<https://victoriametrics.com/products/enterprise/trial)>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// KeyRef is reference to secret with license key for enterprise features.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyRef")]
    pub key_ref: Option<VmAlertLicenseKeyRef>,
    /// Interval to be used for checking for license key changes. Note that this is only applicable when using KeyRef.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reloadInterval")]
    pub reload_interval: Option<String>,
}

/// KeyRef is reference to secret with license key for enterprise features.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertLicenseKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// VMAlertSpec defines the desired state of VMAlert
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum VmAlertLogFormat {
    #[serde(rename = "default")]
    Default,
    #[serde(rename = "json")]
    Json,
}

/// VMAlertSpec defines the desired state of VMAlert
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum VmAlertLogLevel {
    #[serde(rename = "INFO")]
    Info,
    #[serde(rename = "WARN")]
    Warn,
    #[serde(rename = "ERROR")]
    Error,
    #[serde(rename = "FATAL")]
    Fatal,
    #[serde(rename = "PANIC")]
    Panic,
}

/// ManagedMetadata defines metadata that will be added to the all objects
/// created by operator for the given CustomResource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertManagedMetadata {
    /// Annotations is an unstructured key value map stored with a resource that may be
    /// set by external tools to store and retrieve arbitrary metadata. They are not
    /// queryable and should be preserved when modifying objects.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// Notifier prometheus alertmanager endpoint spec. Required at least one of notifier or notifiers when there are alerting rules. e.g. <http://127.0.0.1:9093>
/// If specified both notifier and notifiers, notifier will be added as last element to notifiers.
/// only one of notifier options could be chosen: notifierConfigRef or notifiers +  notifier
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertNotifier {
    /// BasicAuth allow an endpoint to authenticate over basic authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<VmAlertNotifierBasicAuth>,
    /// Path to bearer token file
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenFile")]
    pub bearer_token_file: Option<String>,
    /// Optional bearer auth token to use for -remoteWrite.url
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenSecret")]
    pub bearer_token_secret: Option<VmAlertNotifierBearerTokenSecret>,
    /// Headers allow configuring custom http headers
    /// Must be in form of semicolon separated header with value
    /// e.g.
    /// headerName:headerValue
    /// vmalert supports it since 1.79.0 version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    /// OAuth2 defines OAuth2 configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth2: Option<BTreeMap<String, serde_json::Value>>,
    /// Selector allows service discovery for alertmanager
    /// in this case all matched vmalertmanager replicas will be added into vmalert notifier.url
    /// as statefulset pod.fqdn
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<VmAlertNotifierSelector>,
    /// TLSConfig specifies TLSConfig configuration parameters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<BTreeMap<String, serde_json::Value>>,
    /// AlertManager url.  E.g. <http://127.0.0.1:9093>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// BasicAuth allow an endpoint to authenticate over basic authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertNotifierBasicAuth {
    /// Password defines reference for secret with password value
    /// The secret needs to be in the same namespace as scrape object
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<VmAlertNotifierBasicAuthPassword>,
    /// PasswordFile defines path to password file at disk
    /// must be pre-mounted
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password_file: Option<String>,
    /// Username defines reference for secret with username value
    /// The secret needs to be in the same namespace as scrape object
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<VmAlertNotifierBasicAuthUsername>,
}

/// Password defines reference for secret with password value
/// The secret needs to be in the same namespace as scrape object
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertNotifierBasicAuthPassword {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Username defines reference for secret with username value
/// The secret needs to be in the same namespace as scrape object
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertNotifierBasicAuthUsername {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Optional bearer auth token to use for -remoteWrite.url
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertNotifierBearerTokenSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selector allows service discovery for alertmanager
/// in this case all matched vmalertmanager replicas will be added into vmalert notifier.url
/// as statefulset pod.fqdn
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertNotifierSelector {
    /// A label selector is a label query over a set of resources. The result of matchLabels and
    /// matchExpressions are ANDed. An empty label selector matches all objects. A null
    /// label selector matches no objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<VmAlertNotifierSelectorLabelSelector>,
    /// NamespaceSelector is a selector for selecting either all namespaces or a
    /// list of namespaces.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<VmAlertNotifierSelectorNamespaceSelector>,
}

/// A label selector is a label query over a set of resources. The result of matchLabels and
/// matchExpressions are ANDed. An empty label selector matches all objects. A null
/// label selector matches no objects.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertNotifierSelectorLabelSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<VmAlertNotifierSelectorLabelSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertNotifierSelectorLabelSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// NamespaceSelector is a selector for selecting either all namespaces or a
/// list of namespaces.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertNotifierSelectorNamespaceSelector {
    /// Boolean describing whether all namespaces are selected in contrast to a
    /// list restricting them.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub any: Option<bool>,
    /// List of namespace names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchNames")]
    pub match_names: Option<Vec<String>>,
}

/// NotifierConfigRef reference for secret with notifier configuration for vmalert
/// only one of notifier options could be chosen: notifierConfigRef or notifiers +  notifier
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertNotifierConfigRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// VMAlertNotifierSpec defines the notifier url for sending information about alerts
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertNotifiers {
    /// BasicAuth allow an endpoint to authenticate over basic authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<VmAlertNotifiersBasicAuth>,
    /// Path to bearer token file
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenFile")]
    pub bearer_token_file: Option<String>,
    /// Optional bearer auth token to use for -remoteWrite.url
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenSecret")]
    pub bearer_token_secret: Option<VmAlertNotifiersBearerTokenSecret>,
    /// Headers allow configuring custom http headers
    /// Must be in form of semicolon separated header with value
    /// e.g.
    /// headerName:headerValue
    /// vmalert supports it since 1.79.0 version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    /// OAuth2 defines OAuth2 configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth2: Option<BTreeMap<String, serde_json::Value>>,
    /// Selector allows service discovery for alertmanager
    /// in this case all matched vmalertmanager replicas will be added into vmalert notifier.url
    /// as statefulset pod.fqdn
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<VmAlertNotifiersSelector>,
    /// TLSConfig specifies TLSConfig configuration parameters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<BTreeMap<String, serde_json::Value>>,
    /// AlertManager url.  E.g. <http://127.0.0.1:9093>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// BasicAuth allow an endpoint to authenticate over basic authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertNotifiersBasicAuth {
    /// Password defines reference for secret with password value
    /// The secret needs to be in the same namespace as scrape object
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<VmAlertNotifiersBasicAuthPassword>,
    /// PasswordFile defines path to password file at disk
    /// must be pre-mounted
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password_file: Option<String>,
    /// Username defines reference for secret with username value
    /// The secret needs to be in the same namespace as scrape object
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<VmAlertNotifiersBasicAuthUsername>,
}

/// Password defines reference for secret with password value
/// The secret needs to be in the same namespace as scrape object
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertNotifiersBasicAuthPassword {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Username defines reference for secret with username value
/// The secret needs to be in the same namespace as scrape object
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertNotifiersBasicAuthUsername {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Optional bearer auth token to use for -remoteWrite.url
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertNotifiersBearerTokenSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selector allows service discovery for alertmanager
/// in this case all matched vmalertmanager replicas will be added into vmalert notifier.url
/// as statefulset pod.fqdn
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertNotifiersSelector {
    /// A label selector is a label query over a set of resources. The result of matchLabels and
    /// matchExpressions are ANDed. An empty label selector matches all objects. A null
    /// label selector matches no objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<VmAlertNotifiersSelectorLabelSelector>,
    /// NamespaceSelector is a selector for selecting either all namespaces or a
    /// list of namespaces.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<VmAlertNotifiersSelectorNamespaceSelector>,
}

/// A label selector is a label query over a set of resources. The result of matchLabels and
/// matchExpressions are ANDed. An empty label selector matches all objects. A null
/// label selector matches no objects.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertNotifiersSelectorLabelSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<VmAlertNotifiersSelectorLabelSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertNotifiersSelectorLabelSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// NamespaceSelector is a selector for selecting either all namespaces or a
/// list of namespaces.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertNotifiersSelectorNamespaceSelector {
    /// Boolean describing whether all namespaces are selected in contrast to a
    /// list restricting them.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub any: Option<bool>,
    /// List of namespace names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchNames")]
    pub match_names: Option<Vec<String>>,
}

/// PodDisruptionBudget created by operator
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertPodDisruptionBudget {
    /// An eviction is allowed if at most "maxUnavailable" pods selected by
    /// "selector" are unavailable after the eviction, i.e. even in absence of
    /// the evicted pod. For example, one can prevent all voluntary evictions
    /// by specifying 0. This is a mutually exclusive setting with "minAvailable".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
    /// An eviction is allowed if at least "minAvailable" pods selected by
    /// "selector" will still be available after the eviction, i.e. even in the
    /// absence of the evicted pod.  So for example you can prevent all voluntary
    /// evictions by specifying "100%".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minAvailable")]
    pub min_available: Option<IntOrString>,
    /// replaces default labels selector generated by operator
    /// it's useful when you need to create custom budget
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selectorLabels")]
    pub selector_labels: Option<BTreeMap<String, String>>,
}

/// PodMetadata configures Labels and Annotations which are propagated to the VMAlert pods.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertPodMetadata {
    /// Annotations is an unstructured key value map stored with a resource that may be
    /// set by external tools to store and retrieve arbitrary metadata. They are not
    /// queryable and should be preserved when modifying objects.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects. May match selectors of replication controllers
    /// and services.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Name must be unique within a namespace. Is required when creating resources, although
    /// some resources may allow a client to request the generation of an appropriate name
    /// automatically. Name is primarily intended for creation idempotence and configuration
    /// definition.
    /// Cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PodReadinessGate contains the reference to a pod condition
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertReadinessGates {
    /// ConditionType refers to a condition in the pod's condition list with matching type.
    #[serde(rename = "conditionType")]
    pub condition_type: String,
}

/// RemoteRead Optional URL to read vmalert state (persisted via RemoteWrite)
/// This configuration only makes sense if alerts state has been successfully
/// persisted (via RemoteWrite) before.
/// see -remoteRead.url docs in vmalerts for details.
/// E.g. <http://127.0.0.1:8428>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertRemoteRead {
    /// BasicAuth allow an endpoint to authenticate over basic authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<VmAlertRemoteReadBasicAuth>,
    /// Path to bearer token file
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenFile")]
    pub bearer_token_file: Option<String>,
    /// Optional bearer auth token to use for -remoteWrite.url
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenSecret")]
    pub bearer_token_secret: Option<VmAlertRemoteReadBearerTokenSecret>,
    /// Headers allow configuring custom http headers
    /// Must be in form of semicolon separated header with value
    /// e.g.
    /// headerName:headerValue
    /// vmalert supports it since 1.79.0 version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    /// Lookback defines how far to look into past for alerts timeseries. For example, if lookback=1h then range from now() to now()-1h will be scanned. (default 1h0m0s)
    /// Applied only to RemoteReadSpec
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lookback: Option<String>,
    /// OAuth2 defines OAuth2 configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth2: Option<BTreeMap<String, serde_json::Value>>,
    /// TLSConfig specifies TLSConfig configuration parameters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<BTreeMap<String, serde_json::Value>>,
    /// URL of the endpoint to send samples to.
    pub url: String,
}

/// BasicAuth allow an endpoint to authenticate over basic authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertRemoteReadBasicAuth {
    /// Password defines reference for secret with password value
    /// The secret needs to be in the same namespace as scrape object
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<VmAlertRemoteReadBasicAuthPassword>,
    /// PasswordFile defines path to password file at disk
    /// must be pre-mounted
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password_file: Option<String>,
    /// Username defines reference for secret with username value
    /// The secret needs to be in the same namespace as scrape object
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<VmAlertRemoteReadBasicAuthUsername>,
}

/// Password defines reference for secret with password value
/// The secret needs to be in the same namespace as scrape object
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertRemoteReadBasicAuthPassword {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Username defines reference for secret with username value
/// The secret needs to be in the same namespace as scrape object
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertRemoteReadBasicAuthUsername {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Optional bearer auth token to use for -remoteWrite.url
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertRemoteReadBearerTokenSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// RemoteWrite Optional URL to remote-write compatible storage to persist
/// vmalert state and rule results to.
/// Rule results will be persisted according to each rule.
/// Alerts state will be persisted in the form of time series named ALERTS and ALERTS_FOR_STATE
/// see -remoteWrite.url docs in vmalerts for details.
/// E.g. <http://127.0.0.1:8428>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertRemoteWrite {
    /// BasicAuth allow an endpoint to authenticate over basic authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<VmAlertRemoteWriteBasicAuth>,
    /// Path to bearer token file
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenFile")]
    pub bearer_token_file: Option<String>,
    /// Optional bearer auth token to use for -remoteWrite.url
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bearerTokenSecret")]
    pub bearer_token_secret: Option<VmAlertRemoteWriteBearerTokenSecret>,
    /// Defines number of readers that concurrently write into remote storage (default 1)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub concurrency: Option<i32>,
    /// Defines interval of flushes to remote write endpoint (default 5s)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flushInterval")]
    pub flush_interval: Option<String>,
    /// Headers allow configuring custom http headers
    /// Must be in form of semicolon separated header with value
    /// e.g.
    /// headerName:headerValue
    /// vmalert supports it since 1.79.0 version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    /// Defines defines max number of timeseries to be flushed at once (default 1000)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBatchSize")]
    pub max_batch_size: Option<i32>,
    /// Defines the max number of pending datapoints to remote write endpoint (default 100000)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxQueueSize")]
    pub max_queue_size: Option<i32>,
    /// OAuth2 defines OAuth2 configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth2: Option<BTreeMap<String, serde_json::Value>>,
    /// TLSConfig specifies TLSConfig configuration parameters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<BTreeMap<String, serde_json::Value>>,
    /// URL of the endpoint to send samples to.
    pub url: String,
}

/// BasicAuth allow an endpoint to authenticate over basic authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertRemoteWriteBasicAuth {
    /// Password defines reference for secret with password value
    /// The secret needs to be in the same namespace as scrape object
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<VmAlertRemoteWriteBasicAuthPassword>,
    /// PasswordFile defines path to password file at disk
    /// must be pre-mounted
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password_file: Option<String>,
    /// Username defines reference for secret with username value
    /// The secret needs to be in the same namespace as scrape object
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<VmAlertRemoteWriteBasicAuthUsername>,
}

/// Password defines reference for secret with password value
/// The secret needs to be in the same namespace as scrape object
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertRemoteWriteBasicAuthPassword {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Username defines reference for secret with username value
/// The secret needs to be in the same namespace as scrape object
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertRemoteWriteBasicAuthUsername {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Optional bearer auth token to use for -remoteWrite.url
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertRemoteWriteBearerTokenSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Resources container resource request and limits, <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
/// if not defined default resources from operator config will be used
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims,
    /// that are used by this container.
    /// 
    /// This is an alpha field and requires enabling the
    /// DynamicResourceAllocation feature gate.
    /// 
    /// This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<VmAlertResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of
    /// the Pod where this field is used. It makes that resource available
    /// inside a container.
    pub name: String,
    /// Request is the name chosen for a request in the referenced claim.
    /// If empty, everything from the claim is made available, otherwise
    /// only the result of this request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
}

/// RollingUpdate - overrides deployment update params.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertRollingUpdate {
    /// The maximum number of pods that can be scheduled above the desired number of
    /// pods.
    /// Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
    /// This can not be 0 if MaxUnavailable is 0.
    /// Absolute number is calculated from percentage by rounding up.
    /// Defaults to 25%.
    /// Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when
    /// the rolling update starts, such that the total number of old and new pods do not exceed
    /// 130% of desired pods. Once old pods have been killed,
    /// new ReplicaSet can be scaled up further, ensuring that total number of pods running
    /// at any time during the update is at most 130% of desired pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSurge")]
    pub max_surge: Option<IntOrString>,
    /// The maximum number of pods that can be unavailable during the update.
    /// Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
    /// Absolute number is calculated from percentage by rounding down.
    /// This can not be 0 if MaxSurge is 0.
    /// Defaults to 25%.
    /// Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods
    /// immediately when the rolling update starts. Once new pods are ready, old ReplicaSet
    /// can be scaled down further, followed by scaling up the new ReplicaSet, ensuring
    /// that the total number of pods available at all times during the update is at
    /// least 70% of desired pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
}

/// RuleNamespaceSelector to be selected for VMRules discovery.
/// Works in combination with Selector.
/// If both nil - behaviour controlled by selectAllByDefault
/// NamespaceSelector nil - only objects at VMAlert namespace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertRuleNamespaceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<VmAlertRuleNamespaceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertRuleNamespaceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// RuleSelector selector to select which VMRules to mount for loading alerting
/// rules from.
/// Works in combination with NamespaceSelector.
/// If both nil - behaviour controlled by selectAllByDefault
/// NamespaceSelector nil - only objects at VMAlert namespace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertRuleSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<VmAlertRuleSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertRuleSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// ServiceSpec that will be added to vmalert service spec
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertServiceSpec {
    /// EmbeddedObjectMetadata defines objectMeta for additional service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<VmAlertServiceSpecMetadata>,
    /// ServiceSpec describes the attributes that a user creates on a service.
    /// More info: <https://kubernetes.io/docs/concepts/services-networking/service/>
    pub spec: BTreeMap<String, serde_json::Value>,
    /// UseAsDefault applies changes from given service definition to the main object Service
    /// Changing from headless service to clusterIP or loadbalancer may break cross-component communication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useAsDefault")]
    pub use_as_default: Option<bool>,
}

/// EmbeddedObjectMetadata defines objectMeta for additional service.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertServiceSpecMetadata {
    /// Annotations is an unstructured key value map stored with a resource that may be
    /// set by external tools to store and retrieve arbitrary metadata. They are not
    /// queryable and should be preserved when modifying objects.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects. May match selectors of replication controllers
    /// and services.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Name must be unique within a namespace. Is required when creating resources, although
    /// some resources may allow a client to request the generation of an appropriate name
    /// automatically. Name is primarily intended for creation idempotence and configuration
    /// definition.
    /// Cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// The pod this Toleration is attached to tolerates any taint that matches
/// the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects.
    /// When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys.
    /// If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value.
    /// Valid operators are Exists and Equal. Defaults to Equal.
    /// Exists is equivalent to wildcard for value, so that a pod can
    /// tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be
    /// of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
    /// it is not set, which means tolerate the taint forever (do not evict). Zero and
    /// negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to.
    /// If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// VMAlertSpec defines the desired state of VMAlert
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum VmAlertUpdateStrategy {
    Recreate,
    RollingUpdate,
}

/// VolumeMount describes a mounting of a Volume within a container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertVolumeMounts {
    /// Path within the container at which the volume should be mounted.  Must
    /// not contain ':'.
    #[serde(rename = "mountPath")]
    pub mount_path: String,
    /// mountPropagation determines how mounts are propagated from the host
    /// to container and the other way around.
    /// When not set, MountPropagationNone is used.
    /// This field is beta in 1.10.
    /// When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
    /// (which defaults to None).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPropagation")]
    pub mount_propagation: Option<String>,
    /// This must match the Name of a Volume.
    pub name: String,
    /// Mounted read-only if true, read-write otherwise (false or unspecified).
    /// Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// RecursiveReadOnly specifies whether read-only mounts should be handled
    /// recursively.
    /// 
    /// If ReadOnly is false, this field has no meaning and must be unspecified.
    /// 
    /// If ReadOnly is true, and this field is set to Disabled, the mount is not made
    /// recursively read-only.  If this field is set to IfPossible, the mount is made
    /// recursively read-only, if it is supported by the container runtime.  If this
    /// field is set to Enabled, the mount is made recursively read-only if it is
    /// supported by the container runtime, otherwise the pod will not be started and
    /// an error will be generated to indicate the reason.
    /// 
    /// If this field is set to IfPossible or Enabled, MountPropagation must be set to
    /// None (or be unspecified, which defaults to None).
    /// 
    /// If this field is not specified, it is treated as an equivalent of Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recursiveReadOnly")]
    pub recursive_read_only: Option<String>,
    /// Path within the volume from which the container's volume should be mounted.
    /// Defaults to "" (volume's root).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPath")]
    pub sub_path: Option<String>,
    /// Expanded path within the volume from which the container's volume should be mounted.
    /// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
    /// Defaults to "" (volume's root).
    /// SubPathExpr and SubPath are mutually exclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPathExpr")]
    pub sub_path_expr: Option<String>,
}

/// VMAlertStatus defines the observed state of VMAlert
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VmAlertStatus {
    /// Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration defines current generation picked by operator for the
    /// reconcile
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// Reason defines human readable error reason
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// UpdateStatus defines a status for update rollout
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateStatus")]
    pub update_status: Option<String>,
}

