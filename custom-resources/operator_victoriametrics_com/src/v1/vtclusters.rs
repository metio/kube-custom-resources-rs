// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/VictoriaMetrics/operator/operator.victoriametrics.com/v1/vtclusters.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// VTClusterSpec defines the desired state of VTCluster
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "operator.victoriametrics.com", version = "v1", kind = "VTCluster", plural = "vtclusters")]
#[kube(namespaced)]
#[kube(status = "VtClusterStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct VtClusterSpec {
    /// ClusterDomainName defines domain name suffix for in-cluster dns addresses
    /// aka .cluster.local
    /// used by vtinsert and vtselect to build vtstorage address
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterDomainName")]
    pub cluster_domain_name: Option<String>,
    /// ClusterVersion defines default images tag for all components.
    /// it can be overwritten with component specific image.tag value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterVersion")]
    pub cluster_version: Option<String>,
    /// ImagePullSecrets An optional list of references to secrets in the same namespace
    /// to use for pulling images from registries
    /// see <https://kubernetes.io/docs/concepts/containers/images/#referring-to-an-imagepullsecrets-on-a-pod>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<VtClusterImagePullSecrets>>,
    /// VTInsert defines vtinsert component configuration at victoria-traces cluster
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insert: Option<VtClusterInsert>,
    /// ManagedMetadata defines metadata that will be added to the all objects
    /// created by operator for the given CustomResource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedMetadata")]
    pub managed_metadata: Option<VtClusterManagedMetadata>,
    /// Paused If set to true all actions on the underlying managed objects are not
    /// going to be performed, except for delete actions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub paused: Option<bool>,
    /// RequestsLoadBalancer configures load-balancing for vtinsert and vtselect requests.
    /// It helps to evenly spread load across pods.
    /// Usually it's not possible with Kubernetes TCP-based services.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestsLoadBalancer")]
    pub requests_load_balancer: Option<VtClusterRequestsLoadBalancer>,
    /// VTSelect defines vtselect component configuration at victoria-traces cluster
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub select: Option<VtClusterSelect>,
    /// ServiceAccountName is the name of the ServiceAccount to use to run the
    /// VTSelect, VTInsert and VTStorage Pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountName")]
    pub service_account_name: Option<String>,
    /// VTStorage defines vtstorage component configuration at victoria-traces cluster
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<VtClusterStorage>,
    /// UseStrictSecurity enables strict security mode for component
    /// it restricts disk writes access
    /// uses non-root user out of the box
    /// drops not needed security permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useStrictSecurity")]
    pub use_strict_security: Option<bool>,
}

/// LocalObjectReference contains enough information to let you locate the
/// referenced object inside the same namespace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterImagePullSecrets {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// VTInsert defines vtinsert component configuration at victoria-traces cluster
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterInsert {
    /// Affinity If specified, the pod's scheduling constraints.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<BTreeMap<String, serde_json::Value>>,
    /// ConfigMaps is a list of ConfigMaps in the same namespace as the Application
    /// object, which shall be mounted into the Application container
    /// at /etc/vm/configs/CONFIGMAP_NAME folder
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMaps")]
    pub config_maps: Option<Vec<String>>,
    /// Containers property allows to inject additions sidecars or to patch existing containers.
    /// It can be useful for proxies, backup, etc.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// DisableAutomountServiceAccountToken whether to disable serviceAccount auto mount by Kubernetes (available from v0.54.0).
    /// Operator will conditionally create volumes and volumeMounts for containers if it requires k8s API access.
    /// For example, vmagent and vm-config-reloader requires k8s API access.
    /// Operator creates volumes with name: "kube-api-access", which can be used as volumeMount for extraContainers if needed.
    /// And also adds VolumeMounts at /var/run/secrets/kubernetes.io/serviceaccount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableAutomountServiceAccountToken")]
    pub disable_automount_service_account_token: Option<bool>,
    /// DisableSelfServiceScrape controls creation of VMServiceScrape by operator
    /// for the application.
    /// Has priority over `VM_DISABLESELFSERVICESCRAPECREATION` operator env variable
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableSelfServiceScrape")]
    pub disable_self_service_scrape: Option<bool>,
    /// Specifies the DNS parameters of a pod.
    /// Parameters specified here will be merged to the generated DNS
    /// configuration based on DNSPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsConfig")]
    pub dns_config: Option<VtClusterInsertDnsConfig>,
    /// DNSPolicy sets DNS policy for the pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsPolicy")]
    pub dns_policy: Option<String>,
    /// ExtraArgs that will be passed to the application container
    /// for example remoteWrite.tmpDataPath: /tmp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraArgs")]
    pub extra_args: Option<BTreeMap<String, String>>,
    /// ExtraEnvs that will be passed to the application container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraEnvs")]
    pub extra_envs: Option<Vec<VtClusterInsertExtraEnvs>>,
    /// ExtraEnvsFrom defines source of env variables for the application container
    /// could either be secret or configmap
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraEnvsFrom")]
    pub extra_envs_from: Option<Vec<VtClusterInsertExtraEnvsFrom>>,
    /// HostAliases provides mapping for ip and hostname,
    /// that would be propagated to pod,
    /// cannot be used with HostNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostAliases")]
    pub host_aliases: Option<Vec<VtClusterInsertHostAliases>>,
    /// HostNetwork controls whether the pod may use the node network namespace
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostNetwork")]
    pub host_network: Option<bool>,
    /// HostAliasesUnderScore provides mapping for ip and hostname,
    /// that would be propagated to pod,
    /// cannot be used with HostNetwork.
    /// Has Priority over hostAliases field
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "host_aliases")]
    pub host_aliases_x: Option<Vec<VtClusterInsertHostAliases>>,
    /// Configures horizontal pod autoscaling.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hpa: Option<BTreeMap<String, serde_json::Value>>,
    /// Image - docker image settings
    /// if no specified operator uses default version from operator config
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<VtClusterInsertImage>,
    /// ImagePullSecrets An optional list of references to secrets in the same namespace
    /// to use for pulling images from registries
    /// see <https://kubernetes.io/docs/concepts/containers/images/#referring-to-an-imagepullsecrets-on-a-pod>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<VtClusterInsertImagePullSecrets>>,
    /// InitContainers allows adding initContainers to the pod definition.
    /// Any errors during the execution of an initContainer will lead to a restart of the Pod.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/init-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initContainers")]
    pub init_containers: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// LivenessProbe that will be added CRD pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<BTreeMap<String, serde_json::Value>>,
    /// LogFormat for VTSelect to be configured with.
    /// default or json
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logFormat")]
    pub log_format: Option<VtClusterInsertLogFormat>,
    /// LogLevel for VTSelect to be configured with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<VtClusterInsertLogLevel>,
    /// MinReadySeconds defines a minimum number of seconds to wait before starting update next pod
    /// if previous in healthy state
    /// Has no effect for VLogs and VMSingle
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minReadySeconds")]
    pub min_ready_seconds: Option<i32>,
    /// NodeSelector Define which Nodes the Pods are scheduled on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// Paused If set to true all actions on the underlying managed objects are not
    /// going to be performed, except for delete actions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub paused: Option<bool>,
    /// PodDisruptionBudget created by operator
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podDisruptionBudget")]
    pub pod_disruption_budget: Option<VtClusterInsertPodDisruptionBudget>,
    /// PodMetadata configures Labels and Annotations which are propagated to the VTSelect pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podMetadata")]
    pub pod_metadata: Option<VtClusterInsertPodMetadata>,
    /// Port listen address
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// PriorityClassName class assigned to the Pods
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityClassName")]
    pub priority_class_name: Option<String>,
    /// ReadinessGates defines pod readiness gates
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessGates")]
    pub readiness_gates: Option<Vec<VtClusterInsertReadinessGates>>,
    /// ReadinessProbe that will be added CRD pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<BTreeMap<String, serde_json::Value>>,
    /// ReplicaCount is the expected size of the Application.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaCount")]
    pub replica_count: Option<i32>,
    /// Resources container resource request and limits, <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    /// if not defined default resources from operator config will be used
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<VtClusterInsertResources>,
    /// The number of old ReplicaSets to retain to allow rollback in deployment or
    /// maximum number of revisions that will be maintained in the Deployment revision history.
    /// Has no effect at StatefulSets
    /// Defaults to 10.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimitCount")]
    pub revision_history_limit_count: Option<i32>,
    /// RollingUpdate - overrides deployment update params.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdate")]
    pub rolling_update: Option<VtClusterInsertRollingUpdate>,
    /// RuntimeClassName - defines runtime class for kubernetes pod.
    /// <https://kubernetes.io/docs/concepts/containers/runtime-class/>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeClassName")]
    pub runtime_class_name: Option<String>,
    /// SchedulerName - defines kubernetes scheduler name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulerName")]
    pub scheduler_name: Option<String>,
    /// Secrets is a list of Secrets in the same namespace as the Application
    /// object, which shall be mounted into the Application container
    /// at /etc/vm/secrets/SECRET_NAME folder
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secrets: Option<Vec<String>>,
    /// SecurityContext holds pod-level security attributes and common container settings.
    /// This defaults to the default PodSecurityContext.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<BTreeMap<String, serde_json::Value>>,
    /// ServiceScrapeSpec that will be added to vtselect VMServiceScrape spec
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceScrapeSpec")]
    pub service_scrape_spec: Option<BTreeMap<String, serde_json::Value>>,
    /// ServiceSpec that will be added to vtselect service spec
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSpec")]
    pub service_spec: Option<VtClusterInsertServiceSpec>,
    /// StartupProbe that will be added to CRD pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbe")]
    pub startup_probe: Option<BTreeMap<String, serde_json::Value>>,
    /// TerminationGracePeriodSeconds period for container graceful termination
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// Tolerations If specified, the pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<VtClusterInsertTolerations>>,
    /// TopologySpreadConstraints embedded kubernetes pod configuration option,
    /// controls how pods are spread across your cluster among failure-domains
    /// such as regions, zones, nodes, and other user-defined topology domains
    /// <https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologySpreadConstraints")]
    pub topology_spread_constraints: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// UpdateStrategy - overrides default update strategy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateStrategy")]
    pub update_strategy: Option<VtClusterInsertUpdateStrategy>,
    /// UseDefaultResources controls resource settings
    /// By default, operator sets built-in resource requirements
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useDefaultResources")]
    pub use_default_resources: Option<bool>,
    /// UseStrictSecurity enables strict security mode for component
    /// it restricts disk writes access
    /// uses non-root user out of the box
    /// drops not needed security permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useStrictSecurity")]
    pub use_strict_security: Option<bool>,
    /// VolumeMounts allows configuration of additional VolumeMounts on the output Deployment/StatefulSet definition.
    /// VolumeMounts specified will be appended to other VolumeMounts in the Application container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<VtClusterInsertVolumeMounts>>,
    /// Volumes allows configuration of additional volumes on the output Deployment/StatefulSet definition.
    /// Volumes specified will be appended to other volumes that are generated.
    /// / +optional
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<BTreeMap<String, serde_json::Value>>>,
}

/// Specifies the DNS parameters of a pod.
/// Parameters specified here will be merged to the generated DNS
/// configuration based on DNSPolicy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterInsertDnsConfig {
    /// A list of DNS name server IP addresses.
    /// This will be appended to the base nameservers generated from DNSPolicy.
    /// Duplicated nameservers will be removed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nameservers: Option<Vec<String>>,
    /// A list of DNS resolver options.
    /// This will be merged with the base options generated from DNSPolicy.
    /// Duplicated entries will be removed. Resolution options given in Options
    /// will override those that appear in the base DNSPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<VtClusterInsertDnsConfigOptions>>,
    /// A list of DNS search domains for host-name lookup.
    /// This will be appended to the base search paths generated from DNSPolicy.
    /// Duplicated search paths will be removed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub searches: Option<Vec<String>>,
}

/// PodDNSConfigOption defines DNS resolver options of a pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterInsertDnsConfigOptions {
    /// Name is this DNS resolver option's name.
    /// Required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value is this DNS resolver option's value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// EnvVar represents an environment variable present in a Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterInsertExtraEnvs {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    /// Variable references $(VAR_NAME) are expanded
    /// using the previously defined environment variables in the container and
    /// any service environment variables. If a variable cannot be resolved,
    /// the reference in the input string will be unchanged. Double $$ are reduced
    /// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
    /// "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
    /// Escaped references will never be expanded, regardless of whether the variable
    /// exists or not.
    /// Defaults to "".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// EnvFromSource represents the source of a set of ConfigMaps
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterInsertExtraEnvsFrom {
    /// The ConfigMap to select from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<VtClusterInsertExtraEnvsFromConfigMapRef>,
    /// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The Secret to select from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<VtClusterInsertExtraEnvsFromSecretRef>,
}

/// The ConfigMap to select from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterInsertExtraEnvsFromConfigMapRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The Secret to select from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterInsertExtraEnvsFromSecretRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
/// pod's hosts file.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterInsertHostAliases {
    /// Hostnames for the above IP address.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostnames: Option<Vec<String>>,
    /// IP address of the host file entry.
    pub ip: String,
}

/// Image - docker image settings
/// if no specified operator uses default version from operator config
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterInsertImage {
    /// PullPolicy describes how to pull docker image
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullPolicy")]
    pub pull_policy: Option<String>,
    /// Repository contains name of docker image + it's repository if needed
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// Tag contains desired docker image version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// LocalObjectReference contains enough information to let you locate the
/// referenced object inside the same namespace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterInsertImagePullSecrets {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// VTInsert defines vtinsert component configuration at victoria-traces cluster
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum VtClusterInsertLogFormat {
    #[serde(rename = "default")]
    Default,
    #[serde(rename = "json")]
    Json,
}

/// VTInsert defines vtinsert component configuration at victoria-traces cluster
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum VtClusterInsertLogLevel {
    #[serde(rename = "INFO")]
    Info,
    #[serde(rename = "WARN")]
    Warn,
    #[serde(rename = "ERROR")]
    Error,
    #[serde(rename = "FATAL")]
    Fatal,
    #[serde(rename = "PANIC")]
    Panic,
}

/// PodDisruptionBudget created by operator
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterInsertPodDisruptionBudget {
    /// An eviction is allowed if at most "maxUnavailable" pods selected by
    /// "selector" are unavailable after the eviction, i.e. even in absence of
    /// the evicted pod. For example, one can prevent all voluntary evictions
    /// by specifying 0. This is a mutually exclusive setting with "minAvailable".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
    /// An eviction is allowed if at least "minAvailable" pods selected by
    /// "selector" will still be available after the eviction, i.e. even in the
    /// absence of the evicted pod.  So for example you can prevent all voluntary
    /// evictions by specifying "100%".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minAvailable")]
    pub min_available: Option<IntOrString>,
    /// replaces default labels selector generated by operator
    /// it's useful when you need to create custom budget
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selectorLabels")]
    pub selector_labels: Option<BTreeMap<String, String>>,
}

/// PodMetadata configures Labels and Annotations which are propagated to the VTSelect pods.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterInsertPodMetadata {
    /// Annotations is an unstructured key value map stored with a resource that may be
    /// set by external tools to store and retrieve arbitrary metadata. They are not
    /// queryable and should be preserved when modifying objects.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects. May match selectors of replication controllers
    /// and services.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Name must be unique within a namespace. Is required when creating resources, although
    /// some resources may allow a client to request the generation of an appropriate name
    /// automatically. Name is primarily intended for creation idempotence and configuration
    /// definition.
    /// Cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PodReadinessGate contains the reference to a pod condition
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterInsertReadinessGates {
    /// ConditionType refers to a condition in the pod's condition list with matching type.
    #[serde(rename = "conditionType")]
    pub condition_type: String,
}

/// Resources container resource request and limits, <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
/// if not defined default resources from operator config will be used
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterInsertResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims,
    /// that are used by this container.
    /// 
    /// This is an alpha field and requires enabling the
    /// DynamicResourceAllocation feature gate.
    /// 
    /// This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<VtClusterInsertResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterInsertResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of
    /// the Pod where this field is used. It makes that resource available
    /// inside a container.
    pub name: String,
    /// Request is the name chosen for a request in the referenced claim.
    /// If empty, everything from the claim is made available, otherwise
    /// only the result of this request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
}

/// RollingUpdate - overrides deployment update params.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterInsertRollingUpdate {
    /// The maximum number of pods that can be scheduled above the desired number of
    /// pods.
    /// Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
    /// This can not be 0 if MaxUnavailable is 0.
    /// Absolute number is calculated from percentage by rounding up.
    /// Defaults to 25%.
    /// Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when
    /// the rolling update starts, such that the total number of old and new pods do not exceed
    /// 130% of desired pods. Once old pods have been killed,
    /// new ReplicaSet can be scaled up further, ensuring that total number of pods running
    /// at any time during the update is at most 130% of desired pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSurge")]
    pub max_surge: Option<IntOrString>,
    /// The maximum number of pods that can be unavailable during the update.
    /// Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
    /// Absolute number is calculated from percentage by rounding down.
    /// This can not be 0 if MaxSurge is 0.
    /// Defaults to 25%.
    /// Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods
    /// immediately when the rolling update starts. Once new pods are ready, old ReplicaSet
    /// can be scaled down further, followed by scaling up the new ReplicaSet, ensuring
    /// that the total number of pods available at all times during the update is at
    /// least 70% of desired pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
}

/// ServiceSpec that will be added to vtselect service spec
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterInsertServiceSpec {
    /// EmbeddedObjectMetadata defines objectMeta for additional service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<VtClusterInsertServiceSpecMetadata>,
    /// ServiceSpec describes the attributes that a user creates on a service.
    /// More info: <https://kubernetes.io/docs/concepts/services-networking/service/>
    pub spec: BTreeMap<String, serde_json::Value>,
    /// UseAsDefault applies changes from given service definition to the main object Service
    /// Changing from headless service to clusterIP or loadbalancer may break cross-component communication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useAsDefault")]
    pub use_as_default: Option<bool>,
}

/// EmbeddedObjectMetadata defines objectMeta for additional service.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterInsertServiceSpecMetadata {
    /// Annotations is an unstructured key value map stored with a resource that may be
    /// set by external tools to store and retrieve arbitrary metadata. They are not
    /// queryable and should be preserved when modifying objects.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects. May match selectors of replication controllers
    /// and services.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Name must be unique within a namespace. Is required when creating resources, although
    /// some resources may allow a client to request the generation of an appropriate name
    /// automatically. Name is primarily intended for creation idempotence and configuration
    /// definition.
    /// Cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// The pod this Toleration is attached to tolerates any taint that matches
/// the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterInsertTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects.
    /// When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys.
    /// If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value.
    /// Valid operators are Exists and Equal. Defaults to Equal.
    /// Exists is equivalent to wildcard for value, so that a pod can
    /// tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be
    /// of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
    /// it is not set, which means tolerate the taint forever (do not evict). Zero and
    /// negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to.
    /// If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// VTInsert defines vtinsert component configuration at victoria-traces cluster
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum VtClusterInsertUpdateStrategy {
    Recreate,
    RollingUpdate,
}

/// VolumeMount describes a mounting of a Volume within a container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterInsertVolumeMounts {
    /// Path within the container at which the volume should be mounted.  Must
    /// not contain ':'.
    #[serde(rename = "mountPath")]
    pub mount_path: String,
    /// mountPropagation determines how mounts are propagated from the host
    /// to container and the other way around.
    /// When not set, MountPropagationNone is used.
    /// This field is beta in 1.10.
    /// When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
    /// (which defaults to None).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPropagation")]
    pub mount_propagation: Option<String>,
    /// This must match the Name of a Volume.
    pub name: String,
    /// Mounted read-only if true, read-write otherwise (false or unspecified).
    /// Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// RecursiveReadOnly specifies whether read-only mounts should be handled
    /// recursively.
    /// 
    /// If ReadOnly is false, this field has no meaning and must be unspecified.
    /// 
    /// If ReadOnly is true, and this field is set to Disabled, the mount is not made
    /// recursively read-only.  If this field is set to IfPossible, the mount is made
    /// recursively read-only, if it is supported by the container runtime.  If this
    /// field is set to Enabled, the mount is made recursively read-only if it is
    /// supported by the container runtime, otherwise the pod will not be started and
    /// an error will be generated to indicate the reason.
    /// 
    /// If this field is set to IfPossible or Enabled, MountPropagation must be set to
    /// None (or be unspecified, which defaults to None).
    /// 
    /// If this field is not specified, it is treated as an equivalent of Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recursiveReadOnly")]
    pub recursive_read_only: Option<String>,
    /// Path within the volume from which the container's volume should be mounted.
    /// Defaults to "" (volume's root).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPath")]
    pub sub_path: Option<String>,
    /// Expanded path within the volume from which the container's volume should be mounted.
    /// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
    /// Defaults to "" (volume's root).
    /// SubPathExpr and SubPath are mutually exclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPathExpr")]
    pub sub_path_expr: Option<String>,
}

/// ManagedMetadata defines metadata that will be added to the all objects
/// created by operator for the given CustomResource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterManagedMetadata {
    /// Annotations is an unstructured key value map stored with a resource that may be
    /// set by external tools to store and retrieve arbitrary metadata. They are not
    /// queryable and should be preserved when modifying objects.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// RequestsLoadBalancer configures load-balancing for vtinsert and vtselect requests.
/// It helps to evenly spread load across pods.
/// Usually it's not possible with Kubernetes TCP-based services.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterRequestsLoadBalancer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableInsertBalancing")]
    pub disable_insert_balancing: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableSelectBalancing")]
    pub disable_select_balancing: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// VMAuthLoadBalancerSpec defines configuration spec for VMAuth used as load-balancer
    /// for VMCluster component
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<BTreeMap<String, serde_json::Value>>,
}

/// VTSelect defines vtselect component configuration at victoria-traces cluster
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterSelect {
    /// Affinity If specified, the pod's scheduling constraints.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<BTreeMap<String, serde_json::Value>>,
    /// ConfigMaps is a list of ConfigMaps in the same namespace as the Application
    /// object, which shall be mounted into the Application container
    /// at /etc/vm/configs/CONFIGMAP_NAME folder
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMaps")]
    pub config_maps: Option<Vec<String>>,
    /// Containers property allows to inject additions sidecars or to patch existing containers.
    /// It can be useful for proxies, backup, etc.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// DisableAutomountServiceAccountToken whether to disable serviceAccount auto mount by Kubernetes (available from v0.54.0).
    /// Operator will conditionally create volumes and volumeMounts for containers if it requires k8s API access.
    /// For example, vmagent and vm-config-reloader requires k8s API access.
    /// Operator creates volumes with name: "kube-api-access", which can be used as volumeMount for extraContainers if needed.
    /// And also adds VolumeMounts at /var/run/secrets/kubernetes.io/serviceaccount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableAutomountServiceAccountToken")]
    pub disable_automount_service_account_token: Option<bool>,
    /// DisableSelfServiceScrape controls creation of VMServiceScrape by operator
    /// for the application.
    /// Has priority over `VM_DISABLESELFSERVICESCRAPECREATION` operator env variable
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableSelfServiceScrape")]
    pub disable_self_service_scrape: Option<bool>,
    /// Specifies the DNS parameters of a pod.
    /// Parameters specified here will be merged to the generated DNS
    /// configuration based on DNSPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsConfig")]
    pub dns_config: Option<VtClusterSelectDnsConfig>,
    /// DNSPolicy sets DNS policy for the pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsPolicy")]
    pub dns_policy: Option<String>,
    /// ExtraArgs that will be passed to the application container
    /// for example remoteWrite.tmpDataPath: /tmp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraArgs")]
    pub extra_args: Option<BTreeMap<String, String>>,
    /// ExtraEnvs that will be passed to the application container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraEnvs")]
    pub extra_envs: Option<Vec<VtClusterSelectExtraEnvs>>,
    /// ExtraEnvsFrom defines source of env variables for the application container
    /// could either be secret or configmap
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraEnvsFrom")]
    pub extra_envs_from: Option<Vec<VtClusterSelectExtraEnvsFrom>>,
    /// HostAliases provides mapping for ip and hostname,
    /// that would be propagated to pod,
    /// cannot be used with HostNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostAliases")]
    pub host_aliases: Option<Vec<VtClusterSelectHostAliases>>,
    /// HostNetwork controls whether the pod may use the node network namespace
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostNetwork")]
    pub host_network: Option<bool>,
    /// HostAliasesUnderScore provides mapping for ip and hostname,
    /// that would be propagated to pod,
    /// cannot be used with HostNetwork.
    /// Has Priority over hostAliases field
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "host_aliases")]
    pub host_aliases_x: Option<Vec<VtClusterSelectHostAliases>>,
    /// Configures horizontal pod autoscaling.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hpa: Option<BTreeMap<String, serde_json::Value>>,
    /// Image - docker image settings
    /// if no specified operator uses default version from operator config
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<VtClusterSelectImage>,
    /// ImagePullSecrets An optional list of references to secrets in the same namespace
    /// to use for pulling images from registries
    /// see <https://kubernetes.io/docs/concepts/containers/images/#referring-to-an-imagepullsecrets-on-a-pod>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<VtClusterSelectImagePullSecrets>>,
    /// InitContainers allows adding initContainers to the pod definition.
    /// Any errors during the execution of an initContainer will lead to a restart of the Pod.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/init-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initContainers")]
    pub init_containers: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// LivenessProbe that will be added CRD pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<BTreeMap<String, serde_json::Value>>,
    /// LogFormat for VTSelect to be configured with.
    /// default or json
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logFormat")]
    pub log_format: Option<VtClusterSelectLogFormat>,
    /// LogLevel for VTSelect to be configured with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<VtClusterSelectLogLevel>,
    /// MinReadySeconds defines a minimum number of seconds to wait before starting update next pod
    /// if previous in healthy state
    /// Has no effect for VLogs and VMSingle
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minReadySeconds")]
    pub min_ready_seconds: Option<i32>,
    /// NodeSelector Define which Nodes the Pods are scheduled on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// Paused If set to true all actions on the underlying managed objects are not
    /// going to be performed, except for delete actions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub paused: Option<bool>,
    /// PodDisruptionBudget created by operator
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podDisruptionBudget")]
    pub pod_disruption_budget: Option<VtClusterSelectPodDisruptionBudget>,
    /// PodMetadata configures Labels and Annotations which are propagated to the VTSelect pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podMetadata")]
    pub pod_metadata: Option<VtClusterSelectPodMetadata>,
    /// Port listen address
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// PriorityClassName class assigned to the Pods
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityClassName")]
    pub priority_class_name: Option<String>,
    /// ReadinessGates defines pod readiness gates
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessGates")]
    pub readiness_gates: Option<Vec<VtClusterSelectReadinessGates>>,
    /// ReadinessProbe that will be added CRD pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<BTreeMap<String, serde_json::Value>>,
    /// ReplicaCount is the expected size of the Application.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaCount")]
    pub replica_count: Option<i32>,
    /// Resources container resource request and limits, <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    /// if not defined default resources from operator config will be used
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<VtClusterSelectResources>,
    /// The number of old ReplicaSets to retain to allow rollback in deployment or
    /// maximum number of revisions that will be maintained in the Deployment revision history.
    /// Has no effect at StatefulSets
    /// Defaults to 10.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimitCount")]
    pub revision_history_limit_count: Option<i32>,
    /// RollingUpdate - overrides deployment update params.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdate")]
    pub rolling_update: Option<VtClusterSelectRollingUpdate>,
    /// RuntimeClassName - defines runtime class for kubernetes pod.
    /// <https://kubernetes.io/docs/concepts/containers/runtime-class/>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeClassName")]
    pub runtime_class_name: Option<String>,
    /// SchedulerName - defines kubernetes scheduler name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulerName")]
    pub scheduler_name: Option<String>,
    /// Secrets is a list of Secrets in the same namespace as the Application
    /// object, which shall be mounted into the Application container
    /// at /etc/vm/secrets/SECRET_NAME folder
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secrets: Option<Vec<String>>,
    /// SecurityContext holds pod-level security attributes and common container settings.
    /// This defaults to the default PodSecurityContext.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<BTreeMap<String, serde_json::Value>>,
    /// ServiceScrapeSpec that will be added to vtselect VMServiceScrape spec
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceScrapeSpec")]
    pub service_scrape_spec: Option<BTreeMap<String, serde_json::Value>>,
    /// ServiceSpec that will be added to vtselect service spec
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSpec")]
    pub service_spec: Option<VtClusterSelectServiceSpec>,
    /// StartupProbe that will be added to CRD pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbe")]
    pub startup_probe: Option<BTreeMap<String, serde_json::Value>>,
    /// TerminationGracePeriodSeconds period for container graceful termination
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// Tolerations If specified, the pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<VtClusterSelectTolerations>>,
    /// TopologySpreadConstraints embedded kubernetes pod configuration option,
    /// controls how pods are spread across your cluster among failure-domains
    /// such as regions, zones, nodes, and other user-defined topology domains
    /// <https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologySpreadConstraints")]
    pub topology_spread_constraints: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// UpdateStrategy - overrides default update strategy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateStrategy")]
    pub update_strategy: Option<VtClusterSelectUpdateStrategy>,
    /// UseDefaultResources controls resource settings
    /// By default, operator sets built-in resource requirements
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useDefaultResources")]
    pub use_default_resources: Option<bool>,
    /// UseStrictSecurity enables strict security mode for component
    /// it restricts disk writes access
    /// uses non-root user out of the box
    /// drops not needed security permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useStrictSecurity")]
    pub use_strict_security: Option<bool>,
    /// VolumeMounts allows configuration of additional VolumeMounts on the output Deployment/StatefulSet definition.
    /// VolumeMounts specified will be appended to other VolumeMounts in the Application container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<VtClusterSelectVolumeMounts>>,
    /// Volumes allows configuration of additional volumes on the output Deployment/StatefulSet definition.
    /// Volumes specified will be appended to other volumes that are generated.
    /// / +optional
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<BTreeMap<String, serde_json::Value>>>,
}

/// Specifies the DNS parameters of a pod.
/// Parameters specified here will be merged to the generated DNS
/// configuration based on DNSPolicy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterSelectDnsConfig {
    /// A list of DNS name server IP addresses.
    /// This will be appended to the base nameservers generated from DNSPolicy.
    /// Duplicated nameservers will be removed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nameservers: Option<Vec<String>>,
    /// A list of DNS resolver options.
    /// This will be merged with the base options generated from DNSPolicy.
    /// Duplicated entries will be removed. Resolution options given in Options
    /// will override those that appear in the base DNSPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<VtClusterSelectDnsConfigOptions>>,
    /// A list of DNS search domains for host-name lookup.
    /// This will be appended to the base search paths generated from DNSPolicy.
    /// Duplicated search paths will be removed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub searches: Option<Vec<String>>,
}

/// PodDNSConfigOption defines DNS resolver options of a pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterSelectDnsConfigOptions {
    /// Name is this DNS resolver option's name.
    /// Required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value is this DNS resolver option's value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// EnvVar represents an environment variable present in a Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterSelectExtraEnvs {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    /// Variable references $(VAR_NAME) are expanded
    /// using the previously defined environment variables in the container and
    /// any service environment variables. If a variable cannot be resolved,
    /// the reference in the input string will be unchanged. Double $$ are reduced
    /// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
    /// "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
    /// Escaped references will never be expanded, regardless of whether the variable
    /// exists or not.
    /// Defaults to "".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// EnvFromSource represents the source of a set of ConfigMaps
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterSelectExtraEnvsFrom {
    /// The ConfigMap to select from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<VtClusterSelectExtraEnvsFromConfigMapRef>,
    /// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The Secret to select from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<VtClusterSelectExtraEnvsFromSecretRef>,
}

/// The ConfigMap to select from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterSelectExtraEnvsFromConfigMapRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The Secret to select from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterSelectExtraEnvsFromSecretRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
/// pod's hosts file.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterSelectHostAliases {
    /// Hostnames for the above IP address.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostnames: Option<Vec<String>>,
    /// IP address of the host file entry.
    pub ip: String,
}

/// Image - docker image settings
/// if no specified operator uses default version from operator config
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterSelectImage {
    /// PullPolicy describes how to pull docker image
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullPolicy")]
    pub pull_policy: Option<String>,
    /// Repository contains name of docker image + it's repository if needed
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// Tag contains desired docker image version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// LocalObjectReference contains enough information to let you locate the
/// referenced object inside the same namespace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterSelectImagePullSecrets {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// VTSelect defines vtselect component configuration at victoria-traces cluster
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum VtClusterSelectLogFormat {
    #[serde(rename = "default")]
    Default,
    #[serde(rename = "json")]
    Json,
}

/// VTSelect defines vtselect component configuration at victoria-traces cluster
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum VtClusterSelectLogLevel {
    #[serde(rename = "INFO")]
    Info,
    #[serde(rename = "WARN")]
    Warn,
    #[serde(rename = "ERROR")]
    Error,
    #[serde(rename = "FATAL")]
    Fatal,
    #[serde(rename = "PANIC")]
    Panic,
}

/// PodDisruptionBudget created by operator
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterSelectPodDisruptionBudget {
    /// An eviction is allowed if at most "maxUnavailable" pods selected by
    /// "selector" are unavailable after the eviction, i.e. even in absence of
    /// the evicted pod. For example, one can prevent all voluntary evictions
    /// by specifying 0. This is a mutually exclusive setting with "minAvailable".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
    /// An eviction is allowed if at least "minAvailable" pods selected by
    /// "selector" will still be available after the eviction, i.e. even in the
    /// absence of the evicted pod.  So for example you can prevent all voluntary
    /// evictions by specifying "100%".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minAvailable")]
    pub min_available: Option<IntOrString>,
    /// replaces default labels selector generated by operator
    /// it's useful when you need to create custom budget
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selectorLabels")]
    pub selector_labels: Option<BTreeMap<String, String>>,
}

/// PodMetadata configures Labels and Annotations which are propagated to the VTSelect pods.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterSelectPodMetadata {
    /// Annotations is an unstructured key value map stored with a resource that may be
    /// set by external tools to store and retrieve arbitrary metadata. They are not
    /// queryable and should be preserved when modifying objects.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects. May match selectors of replication controllers
    /// and services.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Name must be unique within a namespace. Is required when creating resources, although
    /// some resources may allow a client to request the generation of an appropriate name
    /// automatically. Name is primarily intended for creation idempotence and configuration
    /// definition.
    /// Cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PodReadinessGate contains the reference to a pod condition
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterSelectReadinessGates {
    /// ConditionType refers to a condition in the pod's condition list with matching type.
    #[serde(rename = "conditionType")]
    pub condition_type: String,
}

/// Resources container resource request and limits, <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
/// if not defined default resources from operator config will be used
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterSelectResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims,
    /// that are used by this container.
    /// 
    /// This is an alpha field and requires enabling the
    /// DynamicResourceAllocation feature gate.
    /// 
    /// This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<VtClusterSelectResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterSelectResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of
    /// the Pod where this field is used. It makes that resource available
    /// inside a container.
    pub name: String,
    /// Request is the name chosen for a request in the referenced claim.
    /// If empty, everything from the claim is made available, otherwise
    /// only the result of this request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
}

/// RollingUpdate - overrides deployment update params.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterSelectRollingUpdate {
    /// The maximum number of pods that can be scheduled above the desired number of
    /// pods.
    /// Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
    /// This can not be 0 if MaxUnavailable is 0.
    /// Absolute number is calculated from percentage by rounding up.
    /// Defaults to 25%.
    /// Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when
    /// the rolling update starts, such that the total number of old and new pods do not exceed
    /// 130% of desired pods. Once old pods have been killed,
    /// new ReplicaSet can be scaled up further, ensuring that total number of pods running
    /// at any time during the update is at most 130% of desired pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSurge")]
    pub max_surge: Option<IntOrString>,
    /// The maximum number of pods that can be unavailable during the update.
    /// Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
    /// Absolute number is calculated from percentage by rounding down.
    /// This can not be 0 if MaxSurge is 0.
    /// Defaults to 25%.
    /// Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods
    /// immediately when the rolling update starts. Once new pods are ready, old ReplicaSet
    /// can be scaled down further, followed by scaling up the new ReplicaSet, ensuring
    /// that the total number of pods available at all times during the update is at
    /// least 70% of desired pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
}

/// ServiceSpec that will be added to vtselect service spec
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterSelectServiceSpec {
    /// EmbeddedObjectMetadata defines objectMeta for additional service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<VtClusterSelectServiceSpecMetadata>,
    /// ServiceSpec describes the attributes that a user creates on a service.
    /// More info: <https://kubernetes.io/docs/concepts/services-networking/service/>
    pub spec: BTreeMap<String, serde_json::Value>,
    /// UseAsDefault applies changes from given service definition to the main object Service
    /// Changing from headless service to clusterIP or loadbalancer may break cross-component communication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useAsDefault")]
    pub use_as_default: Option<bool>,
}

/// EmbeddedObjectMetadata defines objectMeta for additional service.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterSelectServiceSpecMetadata {
    /// Annotations is an unstructured key value map stored with a resource that may be
    /// set by external tools to store and retrieve arbitrary metadata. They are not
    /// queryable and should be preserved when modifying objects.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects. May match selectors of replication controllers
    /// and services.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Name must be unique within a namespace. Is required when creating resources, although
    /// some resources may allow a client to request the generation of an appropriate name
    /// automatically. Name is primarily intended for creation idempotence and configuration
    /// definition.
    /// Cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// The pod this Toleration is attached to tolerates any taint that matches
/// the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterSelectTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects.
    /// When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys.
    /// If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value.
    /// Valid operators are Exists and Equal. Defaults to Equal.
    /// Exists is equivalent to wildcard for value, so that a pod can
    /// tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be
    /// of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
    /// it is not set, which means tolerate the taint forever (do not evict). Zero and
    /// negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to.
    /// If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// VTSelect defines vtselect component configuration at victoria-traces cluster
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum VtClusterSelectUpdateStrategy {
    Recreate,
    RollingUpdate,
}

/// VolumeMount describes a mounting of a Volume within a container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterSelectVolumeMounts {
    /// Path within the container at which the volume should be mounted.  Must
    /// not contain ':'.
    #[serde(rename = "mountPath")]
    pub mount_path: String,
    /// mountPropagation determines how mounts are propagated from the host
    /// to container and the other way around.
    /// When not set, MountPropagationNone is used.
    /// This field is beta in 1.10.
    /// When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
    /// (which defaults to None).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPropagation")]
    pub mount_propagation: Option<String>,
    /// This must match the Name of a Volume.
    pub name: String,
    /// Mounted read-only if true, read-write otherwise (false or unspecified).
    /// Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// RecursiveReadOnly specifies whether read-only mounts should be handled
    /// recursively.
    /// 
    /// If ReadOnly is false, this field has no meaning and must be unspecified.
    /// 
    /// If ReadOnly is true, and this field is set to Disabled, the mount is not made
    /// recursively read-only.  If this field is set to IfPossible, the mount is made
    /// recursively read-only, if it is supported by the container runtime.  If this
    /// field is set to Enabled, the mount is made recursively read-only if it is
    /// supported by the container runtime, otherwise the pod will not be started and
    /// an error will be generated to indicate the reason.
    /// 
    /// If this field is set to IfPossible or Enabled, MountPropagation must be set to
    /// None (or be unspecified, which defaults to None).
    /// 
    /// If this field is not specified, it is treated as an equivalent of Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recursiveReadOnly")]
    pub recursive_read_only: Option<String>,
    /// Path within the volume from which the container's volume should be mounted.
    /// Defaults to "" (volume's root).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPath")]
    pub sub_path: Option<String>,
    /// Expanded path within the volume from which the container's volume should be mounted.
    /// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
    /// Defaults to "" (volume's root).
    /// SubPathExpr and SubPath are mutually exclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPathExpr")]
    pub sub_path_expr: Option<String>,
}

/// VTStorage defines vtstorage component configuration at victoria-traces cluster
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStorage {
    /// Affinity If specified, the pod's scheduling constraints.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<BTreeMap<String, serde_json::Value>>,
    /// ClaimTemplates allows adding additional VolumeClaimTemplates for StatefulSet
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimTemplates")]
    pub claim_templates: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// ConfigMaps is a list of ConfigMaps in the same namespace as the Application
    /// object, which shall be mounted into the Application container
    /// at /etc/vm/configs/CONFIGMAP_NAME folder
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMaps")]
    pub config_maps: Option<Vec<String>>,
    /// Containers property allows to inject additions sidecars or to patch existing containers.
    /// It can be useful for proxies, backup, etc.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// DisableAutomountServiceAccountToken whether to disable serviceAccount auto mount by Kubernetes (available from v0.54.0).
    /// Operator will conditionally create volumes and volumeMounts for containers if it requires k8s API access.
    /// For example, vmagent and vm-config-reloader requires k8s API access.
    /// Operator creates volumes with name: "kube-api-access", which can be used as volumeMount for extraContainers if needed.
    /// And also adds VolumeMounts at /var/run/secrets/kubernetes.io/serviceaccount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableAutomountServiceAccountToken")]
    pub disable_automount_service_account_token: Option<bool>,
    /// DisableSelfServiceScrape controls creation of VMServiceScrape by operator
    /// for the application.
    /// Has priority over `VM_DISABLESELFSERVICESCRAPECREATION` operator env variable
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableSelfServiceScrape")]
    pub disable_self_service_scrape: Option<bool>,
    /// Specifies the DNS parameters of a pod.
    /// Parameters specified here will be merged to the generated DNS
    /// configuration based on DNSPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsConfig")]
    pub dns_config: Option<VtClusterStorageDnsConfig>,
    /// DNSPolicy sets DNS policy for the pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsPolicy")]
    pub dns_policy: Option<String>,
    /// ExtraArgs that will be passed to the application container
    /// for example remoteWrite.tmpDataPath: /tmp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraArgs")]
    pub extra_args: Option<BTreeMap<String, String>>,
    /// ExtraEnvs that will be passed to the application container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraEnvs")]
    pub extra_envs: Option<Vec<VtClusterStorageExtraEnvs>>,
    /// ExtraEnvsFrom defines source of env variables for the application container
    /// could either be secret or configmap
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraEnvsFrom")]
    pub extra_envs_from: Option<Vec<VtClusterStorageExtraEnvsFrom>>,
    /// FutureRetention for the stored traces
    /// Log entries with timestamps bigger than now+futureRetention are rejected during data ingestion
    /// see <https://docs.victoriametrics.com/victoriatraces/#configure-and-run-victoriatraces>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "futureRetention")]
    pub future_retention: Option<String>,
    /// HostAliases provides mapping for ip and hostname,
    /// that would be propagated to pod,
    /// cannot be used with HostNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostAliases")]
    pub host_aliases: Option<Vec<VtClusterStorageHostAliases>>,
    /// HostNetwork controls whether the pod may use the node network namespace
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostNetwork")]
    pub host_network: Option<bool>,
    /// HostAliasesUnderScore provides mapping for ip and hostname,
    /// that would be propagated to pod,
    /// cannot be used with HostNetwork.
    /// Has Priority over hostAliases field
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "host_aliases")]
    pub host_aliases_x: Option<Vec<VtClusterStorageHostAliases>>,
    /// Image - docker image settings
    /// if no specified operator uses default version from operator config
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<VtClusterStorageImage>,
    /// ImagePullSecrets An optional list of references to secrets in the same namespace
    /// to use for pulling images from registries
    /// see <https://kubernetes.io/docs/concepts/containers/images/#referring-to-an-imagepullsecrets-on-a-pod>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<VtClusterStorageImagePullSecrets>>,
    /// InitContainers allows adding initContainers to the pod definition.
    /// Any errors during the execution of an initContainer will lead to a restart of the Pod.
    /// More info: <https://kubernetes.io/docs/concepts/workloads/pods/init-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initContainers")]
    pub init_containers: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// LivenessProbe that will be added CRD pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<BTreeMap<String, serde_json::Value>>,
    /// LogFormat for VTStorage to be configured with.
    /// default or json
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logFormat")]
    pub log_format: Option<VtClusterStorageLogFormat>,
    /// Whether to log all the ingested log entries; this can be useful for debugging of data ingestion
    /// see <https://docs.victoriametrics.com/victoriatraces/#configure-and-run-victoriatraces>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logIngestedRows")]
    pub log_ingested_rows: Option<bool>,
    /// LogLevel for VTStorage to be configured with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<VtClusterStorageLogLevel>,
    /// LogNewStreams Whether to log creation of new streams; this can be useful for debugging of high cardinality issues with log streams
    /// see <https://docs.victoriametrics.com/victoriatraces/#configure-and-run-victoriatraces>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logNewStreams")]
    pub log_new_streams: Option<bool>,
    /// MaintenanceInsertNodeIDs - excludes given node ids from insert requests routing, must contain pod suffixes - for pod-0, id will be 0 and etc.
    /// lets say, you have pod-0, pod-1, pod-2, pod-3. to exclude pod-0 and pod-3 from insert routing, define nodeIDs: [0,3].
    /// Useful at storage expanding, when you want to rebalance some data at cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceInsertNodeIDs")]
    pub maintenance_insert_node_i_ds: Option<Vec<i64>>,
    /// MaintenanceInsertNodeIDs - excludes given node ids from select requests routing, must contain pod suffixes - for pod-0, id will be 0 and etc.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceSelectNodeIDs")]
    pub maintenance_select_node_i_ds: Option<Vec<i64>>,
    /// MinReadySeconds defines a minimum number of seconds to wait before starting update next pod
    /// if previous in healthy state
    /// Has no effect for VLogs and VMSingle
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minReadySeconds")]
    pub min_ready_seconds: Option<i32>,
    /// NodeSelector Define which Nodes the Pods are scheduled on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// Paused If set to true all actions on the underlying managed objects are not
    /// going to be performed, except for delete actions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub paused: Option<bool>,
    /// PersistentVolumeClaimRetentionPolicy allows configuration of PVC retention policy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeClaimRetentionPolicy")]
    pub persistent_volume_claim_retention_policy: Option<VtClusterStoragePersistentVolumeClaimRetentionPolicy>,
    /// PodDisruptionBudget created by operator
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podDisruptionBudget")]
    pub pod_disruption_budget: Option<VtClusterStoragePodDisruptionBudget>,
    /// PodMetadata configures Labels and Annotations which are propagated to the VTStorage pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podMetadata")]
    pub pod_metadata: Option<VtClusterStoragePodMetadata>,
    /// Port listen address
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// PriorityClassName class assigned to the Pods
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityClassName")]
    pub priority_class_name: Option<String>,
    /// ReadinessGates defines pod readiness gates
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessGates")]
    pub readiness_gates: Option<Vec<VtClusterStorageReadinessGates>>,
    /// ReadinessProbe that will be added CRD pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<BTreeMap<String, serde_json::Value>>,
    /// ReplicaCount is the expected size of the Application.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaCount")]
    pub replica_count: Option<i32>,
    /// Resources container resource request and limits, <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    /// if not defined default resources from operator config will be used
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<VtClusterStorageResources>,
    /// RetentionMaxDiskSpaceUsageBytes for the stored traces
    /// VictoriaTraces keeps at least two last days of data in order to guarantee that the traces for the last day can be returned in queries.
    /// This means that the total disk space usage may exceed the -retention.maxDiskSpaceUsageBytes,
    /// if the size of the last two days of data exceeds the -retention.maxDiskSpaceUsageBytes.
    /// <https://docs.victoriametrics.com/victoriatraces/#configure-and-run-victoriatraces>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retentionMaxDiskSpaceUsageBytes")]
    pub retention_max_disk_space_usage_bytes: Option<String>,
    /// RetentionPeriod for the stored traces
    /// <https://docs.victoriametrics.com/victoriatraces/#configure-and-run-victoriatraces>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retentionPeriod")]
    pub retention_period: Option<String>,
    /// The number of old ReplicaSets to retain to allow rollback in deployment or
    /// maximum number of revisions that will be maintained in the Deployment revision history.
    /// Has no effect at StatefulSets
    /// Defaults to 10.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimitCount")]
    pub revision_history_limit_count: Option<i32>,
    /// RollingUpdateStrategy defines strategy for application updates
    /// Default is OnDelete, in this case operator handles update process
    /// Can be changed for RollingUpdate
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdateStrategy")]
    pub rolling_update_strategy: Option<String>,
    /// RollingUpdateStrategyBehavior defines customized behavior for rolling updates.
    /// It applies if the RollingUpdateStrategy is set to OnDelete, which is the default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdateStrategyBehavior")]
    pub rolling_update_strategy_behavior: Option<VtClusterStorageRollingUpdateStrategyBehavior>,
    /// RuntimeClassName - defines runtime class for kubernetes pod.
    /// <https://kubernetes.io/docs/concepts/containers/runtime-class/>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeClassName")]
    pub runtime_class_name: Option<String>,
    /// SchedulerName - defines kubernetes scheduler name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulerName")]
    pub scheduler_name: Option<String>,
    /// Secrets is a list of Secrets in the same namespace as the Application
    /// object, which shall be mounted into the Application container
    /// at /etc/vm/secrets/SECRET_NAME folder
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secrets: Option<Vec<String>>,
    /// SecurityContext holds pod-level security attributes and common container settings.
    /// This defaults to the default PodSecurityContext.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<BTreeMap<String, serde_json::Value>>,
    /// ServiceScrapeSpec that will be added to vtselect VMServiceScrape spec
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceScrapeSpec")]
    pub service_scrape_spec: Option<BTreeMap<String, serde_json::Value>>,
    /// ServiceSpec that will be added to vtselect service spec
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSpec")]
    pub service_spec: Option<VtClusterStorageServiceSpec>,
    /// StartupProbe that will be added to CRD pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbe")]
    pub startup_probe: Option<BTreeMap<String, serde_json::Value>>,
    /// Storage configures persistent volume for VTStorage
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<VtClusterStorageStorage>,
    /// StorageDataPath - path to storage data
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageDataPath")]
    pub storage_data_path: Option<String>,
    /// TerminationGracePeriodSeconds period for container graceful termination
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// Tolerations If specified, the pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<VtClusterStorageTolerations>>,
    /// TopologySpreadConstraints embedded kubernetes pod configuration option,
    /// controls how pods are spread across your cluster among failure-domains
    /// such as regions, zones, nodes, and other user-defined topology domains
    /// <https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologySpreadConstraints")]
    pub topology_spread_constraints: Option<Vec<BTreeMap<String, serde_json::Value>>>,
    /// UseDefaultResources controls resource settings
    /// By default, operator sets built-in resource requirements
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useDefaultResources")]
    pub use_default_resources: Option<bool>,
    /// UseStrictSecurity enables strict security mode for component
    /// it restricts disk writes access
    /// uses non-root user out of the box
    /// drops not needed security permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useStrictSecurity")]
    pub use_strict_security: Option<bool>,
    /// VolumeMounts allows configuration of additional VolumeMounts on the output Deployment/StatefulSet definition.
    /// VolumeMounts specified will be appended to other VolumeMounts in the Application container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<VtClusterStorageVolumeMounts>>,
    /// Volumes allows configuration of additional volumes on the output Deployment/StatefulSet definition.
    /// Volumes specified will be appended to other volumes that are generated.
    /// / +optional
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<BTreeMap<String, serde_json::Value>>>,
}

/// Specifies the DNS parameters of a pod.
/// Parameters specified here will be merged to the generated DNS
/// configuration based on DNSPolicy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStorageDnsConfig {
    /// A list of DNS name server IP addresses.
    /// This will be appended to the base nameservers generated from DNSPolicy.
    /// Duplicated nameservers will be removed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nameservers: Option<Vec<String>>,
    /// A list of DNS resolver options.
    /// This will be merged with the base options generated from DNSPolicy.
    /// Duplicated entries will be removed. Resolution options given in Options
    /// will override those that appear in the base DNSPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<VtClusterStorageDnsConfigOptions>>,
    /// A list of DNS search domains for host-name lookup.
    /// This will be appended to the base search paths generated from DNSPolicy.
    /// Duplicated search paths will be removed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub searches: Option<Vec<String>>,
}

/// PodDNSConfigOption defines DNS resolver options of a pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStorageDnsConfigOptions {
    /// Name is this DNS resolver option's name.
    /// Required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value is this DNS resolver option's value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// EnvVar represents an environment variable present in a Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStorageExtraEnvs {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    /// Variable references $(VAR_NAME) are expanded
    /// using the previously defined environment variables in the container and
    /// any service environment variables. If a variable cannot be resolved,
    /// the reference in the input string will be unchanged. Double $$ are reduced
    /// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
    /// "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
    /// Escaped references will never be expanded, regardless of whether the variable
    /// exists or not.
    /// Defaults to "".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// EnvFromSource represents the source of a set of ConfigMaps
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStorageExtraEnvsFrom {
    /// The ConfigMap to select from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<VtClusterStorageExtraEnvsFromConfigMapRef>,
    /// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The Secret to select from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<VtClusterStorageExtraEnvsFromSecretRef>,
}

/// The ConfigMap to select from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStorageExtraEnvsFromConfigMapRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The Secret to select from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStorageExtraEnvsFromSecretRef {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
/// pod's hosts file.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStorageHostAliases {
    /// Hostnames for the above IP address.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostnames: Option<Vec<String>>,
    /// IP address of the host file entry.
    pub ip: String,
}

/// Image - docker image settings
/// if no specified operator uses default version from operator config
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStorageImage {
    /// PullPolicy describes how to pull docker image
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullPolicy")]
    pub pull_policy: Option<String>,
    /// Repository contains name of docker image + it's repository if needed
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// Tag contains desired docker image version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// LocalObjectReference contains enough information to let you locate the
/// referenced object inside the same namespace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStorageImagePullSecrets {
    /// Name of the referent.
    /// This field is effectively required, but due to backwards compatibility is
    /// allowed to be empty. Instances of this type with an empty value here are
    /// almost certainly wrong.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// VTStorage defines vtstorage component configuration at victoria-traces cluster
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum VtClusterStorageLogFormat {
    #[serde(rename = "default")]
    Default,
    #[serde(rename = "json")]
    Json,
}

/// VTStorage defines vtstorage component configuration at victoria-traces cluster
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum VtClusterStorageLogLevel {
    #[serde(rename = "INFO")]
    Info,
    #[serde(rename = "WARN")]
    Warn,
    #[serde(rename = "ERROR")]
    Error,
    #[serde(rename = "FATAL")]
    Fatal,
    #[serde(rename = "PANIC")]
    Panic,
}

/// PersistentVolumeClaimRetentionPolicy allows configuration of PVC retention policy
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStoragePersistentVolumeClaimRetentionPolicy {
    /// WhenDeleted specifies what happens to PVCs created from StatefulSet
    /// VolumeClaimTemplates when the StatefulSet is deleted. The default policy
    /// of `Retain` causes PVCs to not be affected by StatefulSet deletion. The
    /// `Delete` policy causes those PVCs to be deleted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "whenDeleted")]
    pub when_deleted: Option<String>,
    /// WhenScaled specifies what happens to PVCs created from StatefulSet
    /// VolumeClaimTemplates when the StatefulSet is scaled down. The default
    /// policy of `Retain` causes PVCs to not be affected by a scaledown. The
    /// `Delete` policy causes the associated PVCs for any excess pods above
    /// the replica count to be deleted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "whenScaled")]
    pub when_scaled: Option<String>,
}

/// PodDisruptionBudget created by operator
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStoragePodDisruptionBudget {
    /// An eviction is allowed if at most "maxUnavailable" pods selected by
    /// "selector" are unavailable after the eviction, i.e. even in absence of
    /// the evicted pod. For example, one can prevent all voluntary evictions
    /// by specifying 0. This is a mutually exclusive setting with "minAvailable".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
    /// An eviction is allowed if at least "minAvailable" pods selected by
    /// "selector" will still be available after the eviction, i.e. even in the
    /// absence of the evicted pod.  So for example you can prevent all voluntary
    /// evictions by specifying "100%".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minAvailable")]
    pub min_available: Option<IntOrString>,
    /// replaces default labels selector generated by operator
    /// it's useful when you need to create custom budget
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selectorLabels")]
    pub selector_labels: Option<BTreeMap<String, String>>,
}

/// PodMetadata configures Labels and Annotations which are propagated to the VTStorage pods.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStoragePodMetadata {
    /// Annotations is an unstructured key value map stored with a resource that may be
    /// set by external tools to store and retrieve arbitrary metadata. They are not
    /// queryable and should be preserved when modifying objects.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects. May match selectors of replication controllers
    /// and services.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Name must be unique within a namespace. Is required when creating resources, although
    /// some resources may allow a client to request the generation of an appropriate name
    /// automatically. Name is primarily intended for creation idempotence and configuration
    /// definition.
    /// Cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PodReadinessGate contains the reference to a pod condition
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStorageReadinessGates {
    /// ConditionType refers to a condition in the pod's condition list with matching type.
    #[serde(rename = "conditionType")]
    pub condition_type: String,
}

/// Resources container resource request and limits, <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
/// if not defined default resources from operator config will be used
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStorageResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims,
    /// that are used by this container.
    /// 
    /// This is an alpha field and requires enabling the
    /// DynamicResourceAllocation feature gate.
    /// 
    /// This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<VtClusterStorageResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStorageResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of
    /// the Pod where this field is used. It makes that resource available
    /// inside a container.
    pub name: String,
    /// Request is the name chosen for a request in the referenced claim.
    /// If empty, everything from the claim is made available, otherwise
    /// only the result of this request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
}

/// RollingUpdateStrategyBehavior defines customized behavior for rolling updates.
/// It applies if the RollingUpdateStrategy is set to OnDelete, which is the default.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStorageRollingUpdateStrategyBehavior {
    /// MaxUnavailable defines the maximum number of pods that can be unavailable during the update.
    /// It can be specified as an absolute number (e.g. 2) or a percentage of the total pods (e.g. "50%").
    /// For example, if set to 100%, all pods will be upgraded at once, minimizing downtime when needed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
}

/// ServiceSpec that will be added to vtselect service spec
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStorageServiceSpec {
    /// EmbeddedObjectMetadata defines objectMeta for additional service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<VtClusterStorageServiceSpecMetadata>,
    /// ServiceSpec describes the attributes that a user creates on a service.
    /// More info: <https://kubernetes.io/docs/concepts/services-networking/service/>
    pub spec: BTreeMap<String, serde_json::Value>,
    /// UseAsDefault applies changes from given service definition to the main object Service
    /// Changing from headless service to clusterIP or loadbalancer may break cross-component communication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useAsDefault")]
    pub use_as_default: Option<bool>,
}

/// EmbeddedObjectMetadata defines objectMeta for additional service.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStorageServiceSpecMetadata {
    /// Annotations is an unstructured key value map stored with a resource that may be
    /// set by external tools to store and retrieve arbitrary metadata. They are not
    /// queryable and should be preserved when modifying objects.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels Map of string keys and values that can be used to organize and categorize
    /// (scope and select) objects. May match selectors of replication controllers
    /// and services.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/labels>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// Name must be unique within a namespace. Is required when creating resources, although
    /// some resources may allow a client to request the generation of an appropriate name
    /// automatically. Name is primarily intended for creation idempotence and configuration
    /// definition.
    /// Cannot be updated.
    /// More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Storage configures persistent volume for VTStorage
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStorageStorage {
    /// Deprecated: subPath usage will be disabled by default in a future release, this option will become unnecessary.
    /// DisableMountSubPath allows to remove any subPath usage in volume mounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableMountSubPath")]
    pub disable_mount_sub_path: Option<bool>,
    /// EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More
    /// info: <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emptyDir")]
    pub empty_dir: Option<VtClusterStorageStorageEmptyDir>,
    /// A PVC spec to be used by the StatefulSets/Deployments.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeClaimTemplate")]
    pub volume_claim_template: Option<BTreeMap<String, serde_json::Value>>,
}

/// EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More
/// info: <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir>
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStorageStorageEmptyDir {
    /// medium represents what type of storage medium should back this directory.
    /// The default is "" which means to use the node's default medium.
    /// Must be an empty string (default) or Memory.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#emptydir>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub medium: Option<String>,
    /// sizeLimit is the total amount of local storage required for this EmptyDir volume.
    /// The size limit is also applicable for memory medium.
    /// The maximum usage on memory medium EmptyDir would be the minimum value between
    /// the SizeLimit specified here and the sum of memory limits of all containers in a pod.
    /// The default is nil which means that the limit is undefined.
    /// More info: <https://kubernetes.io/docs/concepts/storage/volumes#emptydir>
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeLimit")]
    pub size_limit: Option<IntOrString>,
}

/// The pod this Toleration is attached to tolerates any taint that matches
/// the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStorageTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects.
    /// When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys.
    /// If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value.
    /// Valid operators are Exists and Equal. Defaults to Equal.
    /// Exists is equivalent to wildcard for value, so that a pod can
    /// tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be
    /// of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
    /// it is not set, which means tolerate the taint forever (do not evict). Zero and
    /// negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to.
    /// If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// VolumeMount describes a mounting of a Volume within a container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStorageVolumeMounts {
    /// Path within the container at which the volume should be mounted.  Must
    /// not contain ':'.
    #[serde(rename = "mountPath")]
    pub mount_path: String,
    /// mountPropagation determines how mounts are propagated from the host
    /// to container and the other way around.
    /// When not set, MountPropagationNone is used.
    /// This field is beta in 1.10.
    /// When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
    /// (which defaults to None).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPropagation")]
    pub mount_propagation: Option<String>,
    /// This must match the Name of a Volume.
    pub name: String,
    /// Mounted read-only if true, read-write otherwise (false or unspecified).
    /// Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// RecursiveReadOnly specifies whether read-only mounts should be handled
    /// recursively.
    /// 
    /// If ReadOnly is false, this field has no meaning and must be unspecified.
    /// 
    /// If ReadOnly is true, and this field is set to Disabled, the mount is not made
    /// recursively read-only.  If this field is set to IfPossible, the mount is made
    /// recursively read-only, if it is supported by the container runtime.  If this
    /// field is set to Enabled, the mount is made recursively read-only if it is
    /// supported by the container runtime, otherwise the pod will not be started and
    /// an error will be generated to indicate the reason.
    /// 
    /// If this field is set to IfPossible or Enabled, MountPropagation must be set to
    /// None (or be unspecified, which defaults to None).
    /// 
    /// If this field is not specified, it is treated as an equivalent of Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recursiveReadOnly")]
    pub recursive_read_only: Option<String>,
    /// Path within the volume from which the container's volume should be mounted.
    /// Defaults to "" (volume's root).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPath")]
    pub sub_path: Option<String>,
    /// Expanded path within the volume from which the container's volume should be mounted.
    /// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
    /// Defaults to "" (volume's root).
    /// SubPathExpr and SubPath are mutually exclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPathExpr")]
    pub sub_path_expr: Option<String>,
}

/// VTClusterStatus defines the observed state of VTCluster
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VtClusterStatus {
    /// Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration defines current generation picked by operator for the
    /// reconcile
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// Reason defines human readable error reason
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// UpdateStatus defines a status for update rollout
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateStatus")]
    pub update_status: Option<String>,
}

