// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/tigera/operator/operator.tigera.io/v1/packetcaptureapis.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// Specification of the desired state for the PacketCaptureAPI.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "operator.tigera.io", version = "v1", kind = "PacketCaptureAPI", plural = "packetcaptureapis")]
#[kube(status = "PacketCaptureApiStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct PacketCaptureApiSpec {
    /// PacketCaptureAPIDeployment configures the PacketCaptureAPI Deployment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packetCaptureAPIDeployment")]
    pub packet_capture_api_deployment: Option<PacketCaptureApiPacketCaptureApiDeployment>,
}

/// PacketCaptureAPIDeployment configures the PacketCaptureAPI Deployment.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PacketCaptureApiPacketCaptureApiDeployment {
    /// Spec is the specification of the PacketCaptureAPI Deployment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<PacketCaptureApiPacketCaptureApiDeploymentSpec>,
}

/// Spec is the specification of the PacketCaptureAPI Deployment.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PacketCaptureApiPacketCaptureApiDeploymentSpec {
    /// Template describes the PacketCaptureAPI Deployment pod that will be created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<PacketCaptureApiPacketCaptureApiDeploymentSpecTemplate>,
}

/// Template describes the PacketCaptureAPI Deployment pod that will be created.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PacketCaptureApiPacketCaptureApiDeploymentSpecTemplate {
    /// Spec is the PacketCaptureAPI Deployment's PodSpec.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<PacketCaptureApiPacketCaptureApiDeploymentSpecTemplateSpec>,
}

/// Spec is the PacketCaptureAPI Deployment's PodSpec.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PacketCaptureApiPacketCaptureApiDeploymentSpecTemplateSpec {
    /// Containers is a list of PacketCaptureAPI containers.
    /// If specified, this overrides the specified PacketCaptureAPI Deployment containers.
    /// If omitted, the PacketCaptureAPI Deployment will use its default values for its containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<PacketCaptureApiPacketCaptureApiDeploymentSpecTemplateSpecContainers>>,
    /// InitContainers is a list of PacketCaptureAPI init containers.
    /// If specified, this overrides the specified PacketCaptureAPI Deployment init containers.
    /// If omitted, the PacketCaptureAPI Deployment will use its default values for its init containers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initContainers")]
    pub init_containers: Option<Vec<PacketCaptureApiPacketCaptureApiDeploymentSpecTemplateSpecInitContainers>>,
}

/// PacketCaptureAPIDeploymentContainer is a PacketCaptureAPI Deployment container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PacketCaptureApiPacketCaptureApiDeploymentSpecTemplateSpecContainers {
    /// Name is an enum which identifies the PacketCaptureAPI Deployment container by name.
    /// Supported values are: tigera-packetcapture-server
    pub name: PacketCaptureApiPacketCaptureApiDeploymentSpecTemplateSpecContainersName,
    /// Resources allows customization of limits and requests for compute resources such as cpu and memory.
    /// If specified, this overrides the named PacketCaptureAPI Deployment container's resources.
    /// If omitted, the PacketCaptureAPI Deployment will use its default value for this container's resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<PacketCaptureApiPacketCaptureApiDeploymentSpecTemplateSpecContainersResources>,
}

/// PacketCaptureAPIDeploymentContainer is a PacketCaptureAPI Deployment container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PacketCaptureApiPacketCaptureApiDeploymentSpecTemplateSpecContainersName {
    #[serde(rename = "tigera-packetcapture-server")]
    TigeraPacketcaptureServer,
}

/// Resources allows customization of limits and requests for compute resources such as cpu and memory.
/// If specified, this overrides the named PacketCaptureAPI Deployment container's resources.
/// If omitted, the PacketCaptureAPI Deployment will use its default value for this container's resources.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PacketCaptureApiPacketCaptureApiDeploymentSpecTemplateSpecContainersResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims,
    /// that are used by this container.
    /// This is an alpha field and requires enabling the
    /// DynamicResourceAllocation feature gate.
    /// This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<PacketCaptureApiPacketCaptureApiDeploymentSpecTemplateSpecContainersResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PacketCaptureApiPacketCaptureApiDeploymentSpecTemplateSpecContainersResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of
    /// the Pod where this field is used. It makes that resource available
    /// inside a container.
    pub name: String,
    /// Request is the name chosen for a request in the referenced claim.
    /// If empty, everything from the claim is made available, otherwise
    /// only the result of this request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
}

/// PacketCaptureAPIDeploymentInitContainer is a PacketCaptureAPI Deployment init container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PacketCaptureApiPacketCaptureApiDeploymentSpecTemplateSpecInitContainers {
    /// Name is an enum which identifies the PacketCaptureAPI Deployment init container by name.
    /// Supported values are: tigera-packetcapture-server-tls-key-cert-provisioner
    pub name: PacketCaptureApiPacketCaptureApiDeploymentSpecTemplateSpecInitContainersName,
    /// Resources allows customization of limits and requests for compute resources such as cpu and memory.
    /// If specified, this overrides the named PacketCaptureAPI Deployment init container's resources.
    /// If omitted, the PacketCaptureAPI Deployment will use its default value for this init container's resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<PacketCaptureApiPacketCaptureApiDeploymentSpecTemplateSpecInitContainersResources>,
}

/// PacketCaptureAPIDeploymentInitContainer is a PacketCaptureAPI Deployment init container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PacketCaptureApiPacketCaptureApiDeploymentSpecTemplateSpecInitContainersName {
    #[serde(rename = "tigera-packetcapture-server-tls-key-cert-provisioner")]
    TigeraPacketcaptureServerTlsKeyCertProvisioner,
}

/// Resources allows customization of limits and requests for compute resources such as cpu and memory.
/// If specified, this overrides the named PacketCaptureAPI Deployment init container's resources.
/// If omitted, the PacketCaptureAPI Deployment will use its default value for this init container's resources.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PacketCaptureApiPacketCaptureApiDeploymentSpecTemplateSpecInitContainersResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims,
    /// that are used by this container.
    /// This is an alpha field and requires enabling the
    /// DynamicResourceAllocation feature gate.
    /// This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<PacketCaptureApiPacketCaptureApiDeploymentSpecTemplateSpecInitContainersResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PacketCaptureApiPacketCaptureApiDeploymentSpecTemplateSpecInitContainersResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of
    /// the Pod where this field is used. It makes that resource available
    /// inside a container.
    pub name: String,
    /// Request is the name chosen for a request in the referenced claim.
    /// If empty, everything from the claim is made available, otherwise
    /// only the result of this request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
}

/// Most recently observed state for the PacketCaptureAPI.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PacketCaptureApiStatus {
    /// Conditions represents the latest observed set of conditions for the component. A component may be one or more of
    /// Ready, Progressing, Degraded or other customer types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// State provides user-readable status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

