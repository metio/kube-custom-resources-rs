// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/volcano-sh/volcano/topology.volcano.sh/v1alpha1/hypernodes.yaml
// kopium version: 0.22.4

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// Spec defines the desired configuration of the HyperNode.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "topology.volcano.sh", version = "v1alpha1", kind = "HyperNode", plural = "hypernodes")]
#[kube(status = "HyperNodeStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct HyperNodeSpec {
    /// Members defines a list of node groups or individual nodes included in the HyperNode.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub members: Option<Vec<HyperNodeMembers>>,
    /// Tier categorizes the performance level of the HyperNode.
    pub tier: i64,
}

/// MemberSpec represents a specific node or a hyperNodes in the hyperNode.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct HyperNodeMembers {
    /// Selector defines the selection rules for this member.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<HyperNodeMembersSelector>,
    /// Type specifies the member type.
    #[serde(rename = "type")]
    pub r#type: HyperNodeMembersType,
}

/// Selector defines the selection rules for this member.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HyperNodeMembersSelector {
    /// ExactMatch defines the exact match criteria.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<HyperNodeMembersSelectorExactMatch>,
    /// LabelMatch defines the labels match criteria (only take effect when Member Type is "Node").
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelMatch")]
    pub label_match: Option<HyperNodeMembersSelectorLabelMatch>,
    /// RegexMatch defines the regex match criteria.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<HyperNodeMembersSelectorRegexMatch>,
}

/// ExactMatch defines the exact match criteria.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HyperNodeMembersSelectorExactMatch {
    /// Name specifies the exact name of the node to match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// LabelMatch defines the labels match criteria (only take effect when Member Type is "Node").
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HyperNodeMembersSelectorLabelMatch {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<HyperNodeMembersSelectorLabelMatchMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HyperNodeMembersSelectorLabelMatchMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// RegexMatch defines the regex match criteria.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HyperNodeMembersSelectorRegexMatch {
    /// Pattern defines the regex pattern to match node names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
}

/// MemberSpec represents a specific node or a hyperNodes in the hyperNode.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum HyperNodeMembersType {
    Node,
    HyperNode,
}

/// Status provides the current state of the HyperNode.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HyperNodeStatus {
    /// Conditions provide details about the current state of the HyperNode.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// NodeCount is the total number of nodes currently in the HyperNode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeCount")]
    pub node_count: Option<i64>,
}

