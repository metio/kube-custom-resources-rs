// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/apecloud/kubeblocks/experimental.kubeblocks.io/v1alpha1/nodecountscalers.yaml
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// NodeCountScalerSpec defines the desired state of NodeCountScaler
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "experimental.kubeblocks.io", version = "v1alpha1", kind = "NodeCountScaler", plural = "nodecountscalers")]
#[kube(namespaced)]
#[kube(status = "NodeCountScalerStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct NodeCountScalerSpec {
    /// Specified the target Cluster name this scaler applies to.
    #[serde(rename = "targetClusterName")]
    pub target_cluster_name: String,
    /// Specified the target Component names this scaler applies to.
    /// All Components will be applied if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetComponentNames")]
    pub target_component_names: Option<Vec<String>>,
}

/// NodeCountScalerStatus defines the observed state of NodeCountScaler
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeCountScalerStatus {
    /// Records the current status information of all Components specified in the NodeCountScalerSpec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "componentStatuses")]
    pub component_statuses: Option<Vec<NodeCountScalerStatusComponentStatuses>>,
    /// Represents the latest available observations of a nodecountscaler's current state.
    /// Known .status.conditions.type are: "ScaleReady".
    /// ScaleReady - All target components are ready.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// LastScaleTime is the last time the NodeCountScaler scaled the number of instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastScaleTime")]
    pub last_scale_time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeCountScalerStatusComponentStatuses {
    /// The number of instances of this component with a Ready condition for at least MinReadySeconds defined in the instance template.
    #[serde(rename = "availableReplicas")]
    pub available_replicas: i32,
    /// The current number of instances of this component.
    #[serde(rename = "currentReplicas")]
    pub current_replicas: i32,
    /// The desired number of instances of this component.
    /// Usually, it should be the number of nodes.
    #[serde(rename = "desiredReplicas")]
    pub desired_replicas: i32,
    /// Specified the Component name.
    pub name: String,
    /// The number of instances of this component with a Ready condition.
    #[serde(rename = "readyReplicas")]
    pub ready_replicas: i32,
}

