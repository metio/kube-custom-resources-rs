// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/redhat-cop/vault-config-operator/redhatcop.redhat.io/v1alpha1/pkisecretengineconfigs.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// PKISecretEngineConfigSpec defines the desired state of PKISecretEngineConfig
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "redhatcop.redhat.io", version = "v1alpha1", kind = "PKISecretEngineConfig", plural = "pkisecretengineconfigs")]
#[kube(namespaced)]
#[kube(status = "PKISecretEngineConfigStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct PKISecretEngineConfigSpec {
    /// Disables or enables CRL building.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "CRLDisable")]
    pub crl_disable: Option<bool>,
    /// Specifies the URL values for the CRL Distribution Points field. This can be an array or a comma-separated string list.
    /// kubebuilder:validation:UniqueItems=true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "CRLDistributionPoints")]
    pub crl_distribution_points: Option<Vec<String>>,
    /// Specifies the time until expiration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "CRLExpiry")]
    pub crl_expiry: Option<String>,
    /// Specifies the requested IP Subject Alternative Names, in a comma-delimited list.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "IPSans")]
    pub ip_sans: Option<String>,
    /// Specifies the requested Time To Live (after which the certificate will be expired). This cannot be larger than the engine's max (or, if not set, the system max).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "TTL")]
    pub ttl: Option<String>,
    /// Specifies the requested URI Subject Alternative Names, in a comma-delimited list.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "URISans")]
    pub uri_sans: Option<String>,
    /// Specifies the requested Subject Alternative Names, in a comma-delimited list. These can be host names or email addresses; they will be parsed into their respective fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "altNames")]
    pub alt_names: Option<String>,
    /// Authentication is the kube auth configuration to be used to execute this request
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<PKISecretEngineConfigAuthentication>,
    /// CertificateKey key to be used when retrieving the signed certificate
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateKey")]
    pub certificate_key: Option<String>,
    /// Specifies the requested CN for the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonName")]
    pub common_name: Option<String>,
    /// Connection represents the information needed to connect to Vault. This operator uses the standard Vault environment variables to connect to Vault. If you need to override those settings and for example connect to a different Vault instance, you can do with this section of the CR.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<PKISecretEngineConfigConnection>,
    /// Specifies the C (Country) values in the subject field of issued certificates. This is a comma-separated string or JSON array.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// If set, the given common_name will not be included in DNS or Email Subject Alternate Names (as appropriate). Useful if the CN is not a hostname or email address, but is instead some human-readable identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludeCnFromSans")]
    pub exclude_cn_from_sans: Option<bool>,
    /// ExternalSignSecret retrieves the signed intermediate certificate from a Kubernetes secret. Allows submitting the signed CA certificate corresponding to a private key generated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalSignSecret")]
    pub external_sign_secret: Option<PKISecretEngineConfigExternalSignSecret>,
    /// Specifies the format for returned data. Can be pem, der, or pem_bundle. If der, the output is base64 encoded. If pem_bundle, the certificate field will contain the private key (if exported) and certificate, concatenated; if the issuing CA is not a Vault-derived self-signed root, this will be included as well.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<PKISecretEngineConfigFormat>,
    /// Use the configured refered Vault PKISecretEngineConfig to issue a certificate with appropriate values for acting as an intermediate CA.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalSign")]
    pub internal_sign: Option<PKISecretEngineConfigInternalSign>,
    /// Specifies the URL values for the Issuing Certificate field. This can be an array or a comma-separated string list.
    /// kubebuilder:validation:UniqueItems=true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "issuingCertificates")]
    pub issuing_certificates: Option<Vec<String>>,
    /// Specifies the number of bits to use. This must be changed to a valid value if the key_type is ec, e.g., 224, 256, 384 or 521.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyBits")]
    pub key_bits: Option<i64>,
    /// Specifies the desired key type; must be rsa or ec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyType")]
    pub key_type: Option<PKISecretEngineConfigKeyType>,
    /// Specifies the L (Locality) values in the subject field of issued certificates. This is a comma-separated string or JSON array.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub locality: Option<String>,
    /// Specifies the maximum path length to encode in the generated certificate. -1 means no limit. Unless the signing certificate has a maximum path length set, in which case the path length is set to one less than that of the signing certificate. A limit of 0 means a literal path length of zero.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPathLength")]
    pub max_path_length: Option<i64>,
    /// Specifies the URL values for the OCSP Servers field. This can be an array or a comma-separated string list.
    /// kubebuilder:validation:UniqueItems=true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspServers")]
    pub ocsp_servers: Option<Vec<String>>,
    /// Specifies the O (Organization) values in the subject field of issued certificates. This is a comma-separated string or JSON array.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    /// Specifies custom OID/UTF8-string SANs. These must match values specified on the role in allowed_other_sans (see role creation for allowed_other_sans globbing rules). The format is the same as OpenSSL: <oid>;<type>:<value> where the only current valid type is UTF8. This can be a comma-delimited list or a JSON string slice.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "otherSans")]
    pub other_sans: Option<String>,
    /// Specifies the OU (OrganizationalUnit) values in the subject field of issued certificates. This is a comma-separated string or JSON array.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ou: Option<String>,
    /// Path at which to create the role.
    /// The final path in Vault will be {[spec.authentication.namespace]}/{spec.path}/config/{metadata.name}.
    /// The authentication role must have the following capabilities = [ "create", "read", "update", "delete"] on that path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// A comma separated string (or, string array) containing DNS domains for which certificates are allowed to be issued or signed by this CA certificate. Note that subdomains are allowed, as per RFC.
    /// kubebuilder:validation:UniqueItems=true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "permittedDnsDomains")]
    pub permitted_dns_domains: Option<Vec<String>>,
    /// Specifies the Postal Code values in the subject field of issued certificates. This is a comma-separated string or JSON array.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postalCode")]
    pub postal_code: Option<String>,
    /// Specifies the format for marshaling the private key. Defaults to der which will return either base64-encoded DER or PEM-encoded DER, depending on the value of format. The other option is pkcs8 which will return the key marshalled as PEM-encoded PKCS8.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKeyFormat")]
    pub private_key_format: Option<String>,
    /// Specifies the type of the root to create. If exported, the private key will be returned in the response; if internal the private key will not be returned and cannot be retrieved later. This is part of the request URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKeyType")]
    pub private_key_type: Option<PKISecretEngineConfigPrivateKeyType>,
    /// Specifies the ST (Province) values in the subject field of issued certificates. This is a comma-separated string or JSON array.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub province: Option<String>,
    /// Specifies the Serial Number, if any. Otherwise Vault will generate a random serial for you. If you want more than one, specify alternative names in the alt_names map using OID 2.5.4.5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serialNumber")]
    pub serial_number: Option<String>,
    /// Specifies the Street Address values in the subject field of issued certificates. This is a comma-separated string or JSON array.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streetAddress")]
    pub street_address: Option<String>,
    /// Specifies the type of certificate authority. Root CA or Intermediate CA. This is part of the request URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<PKISecretEngineConfigType>,
}

/// Authentication is the kube auth configuration to be used to execute this request
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PKISecretEngineConfigAuthentication {
    /// Namespace is the Vault namespace to be used in all the operations withing this connection/authentication. Only available in Vault Enterprise.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Path is the path of the role used for this kube auth authentication. The operator will try to authenticate at {[namespace/]}auth/{spec.path}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Role the role to be used during authentication
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// ServiceAccount is the service account used for the kube auth authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<PKISecretEngineConfigAuthenticationServiceAccount>,
}

/// ServiceAccount is the service account used for the kube auth authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PKISecretEngineConfigAuthenticationServiceAccount {
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Connection represents the information needed to connect to Vault. This operator uses the standard Vault environment variables to connect to Vault. If you need to override those settings and for example connect to a different Vault instance, you can do with this section of the CR.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PKISecretEngineConfigConnection {
    /// Address Address of the Vault server expressed as a URL and port, for example: https://127.0.0.1:8200/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// MaxRetries Maximum number of retries when certain error codes are encountered. The default is 2, for three total attempts. Set this to 0 or less to disable retrying. Error codes that are retried are 412 (client consistency requirement not satisfied) and all 5xx except for 501 (not implemented).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    pub max_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tLSConfig")]
    pub t_ls_config: Option<PKISecretEngineConfigConnectionTLsConfig>,
    /// Timeout Timeout variable. The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeOut")]
    pub time_out: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PKISecretEngineConfigConnectionTLsConfig {
    /// Cacert Path to a PEM-encoded CA certificate file on the local disk. This file is used to verify the Vault server's SSL certificate. This environment variable takes precedence over a cert passed via the secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cacert: Option<String>,
    /// SkipVerify Do not verify Vault's presented certificate before communicating with it. Setting this variable is not recommended and voids Vault's security model.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipVerify")]
    pub skip_verify: Option<bool>,
    /// TLSSecret namespace-local secret containing the tls material for the connection. the expected keys for the secret are: ca bundle -> "ca.crt", certificate -> "tls.crt", key -> "tls.key"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSecret")]
    pub tls_secret: Option<PKISecretEngineConfigConnectionTLsConfigTlsSecret>,
    /// TLSServerName Name to use as the SNI host when connecting via TLS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsServerName")]
    pub tls_server_name: Option<String>,
}

/// TLSSecret namespace-local secret containing the tls material for the connection. the expected keys for the secret are: ca bundle -> "ca.crt", certificate -> "tls.crt", key -> "tls.key"
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PKISecretEngineConfigConnectionTLsConfigTlsSecret {
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ExternalSignSecret retrieves the signed intermediate certificate from a Kubernetes secret. Allows submitting the signed CA certificate corresponding to a private key generated.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PKISecretEngineConfigExternalSignSecret {
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PKISecretEngineConfigSpec defines the desired state of PKISecretEngineConfig
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PKISecretEngineConfigFormat {
    #[serde(rename = "pem")]
    Pem,
    #[serde(rename = "pem_bundle")]
    PemBundle,
    #[serde(rename = "der")]
    Der,
}

/// Use the configured refered Vault PKISecretEngineConfig to issue a certificate with appropriate values for acting as an intermediate CA.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PKISecretEngineConfigInternalSign {
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PKISecretEngineConfigSpec defines the desired state of PKISecretEngineConfig
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PKISecretEngineConfigKeyType {
    #[serde(rename = "rsa")]
    Rsa,
    #[serde(rename = "ec")]
    Ec,
}

/// PKISecretEngineConfigSpec defines the desired state of PKISecretEngineConfig
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PKISecretEngineConfigPrivateKeyType {
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "exported")]
    Exported,
}

/// PKISecretEngineConfigSpec defines the desired state of PKISecretEngineConfig
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PKISecretEngineConfigType {
    #[serde(rename = "root")]
    Root,
    #[serde(rename = "intermediate")]
    Intermediate,
}

/// PKISecretEngineConfigStatus defines the observed state of PKISecretEngineConfig
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PKISecretEngineConfigStatus {
    /// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
    /// Important: Run "make" to regenerate code after modifying this file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exported: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generated: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub signed: Option<bool>,
}

