// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/redhat-cop/vault-config-operator/redhatcop.redhat.io/v1alpha1/kubernetesauthengineroles.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// KubernetesAuthEngineRoleSpec defines the desired state of KubernetesAuthEngineRole
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "redhatcop.redhat.io", version = "v1alpha1", kind = "KubernetesAuthEngineRole", plural = "kubernetesauthengineroles")]
#[kube(namespaced)]
#[kube(status = "KubernetesAuthEngineRoleStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct KubernetesAuthEngineRoleSpec {
    /// AliasNameSource Configures how identity aliases are generated. Valid choices are: serviceaccount_uid, serviceaccount_name When serviceaccount_uid is specified, the machine generated UID from the service account will be used as the identity alias name. When serviceaccount_name is specified, the service account's namespace and name will be used as the identity alias name e.g vault/vault-auth. While it is strongly advised that you use serviceaccount_uid, you may also use serviceaccount_name in cases where you want to set the alias ahead of time, and the risks are mitigated or otherwise acceptable given your use case. It is very important to limit who is able to delete/create service accounts within a given cluster. See the Create an Entity Alias document which further expands on the potential security implications mentioned above.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aliasNameSource")]
    pub alias_name_source: Option<KubernetesAuthEngineRoleAliasNameSource>,
    /// Audience Audience claim to verify in the JWT.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audience: Option<String>,
    /// Authentication is the kube auth configuration to be used to execute this request
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<KubernetesAuthEngineRoleAuthentication>,
    /// Connection represents the information needed to connect to Vault. This operator uses the standard Vault environment variables to connect to Vault. If you need to override those settings and for example connect to a different Vault instance, you can do with this section of the CR.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<KubernetesAuthEngineRoleConnection>,
    /// The name of the obejct created in Vault. If this is specified it takes precedence over {metatada.name}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Path at which to make the configuration.
    /// The final path in Vault will be {[spec.authentication.namespace]}/auth/{spec.path}/role/{metadata.name}.
    /// The authentication role must have the following capabilities = [ "create", "read", "update", "delete"] on that path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Policies is a list of policy names to be bound to this role.
    /// kubebuilder:validation:UniqueItems=true
    pub policies: Vec<String>,
    /// TargetNamespaces specifies how to retrieve the namespaces bound to this Vault role.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetNamespaces")]
    pub target_namespaces: Option<KubernetesAuthEngineRoleTargetNamespaces>,
    /// TargetServiceAccounts is a list of service account names that will receive this role
    /// kubebuilder:validation:UniqueItems=true
    #[serde(rename = "targetServiceAccounts")]
    pub target_service_accounts: Vec<String>,
    /// TokenBoundCIDRs List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well.
    /// kubebuilder:validation:UniqueItems=true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenBoundCIDRs")]
    pub token_bound_cid_rs: Option<Vec<String>>,
    /// TokenExplicitMaxTTL If set, will encode an explicit max TTL onto the token. This is a hard cap even if token_ttl and token_max_ttl would otherwise allow a renewal.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenExplicitMaxTTL")]
    pub token_explicit_max_ttl: Option<i64>,
    /// TokenMaxTTL The maximum lifetime for generated tokens. This current value of this will be referenced at renewal time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenMaxTTL")]
    pub token_max_ttl: Option<i64>,
    /// TokenNoDefaultPolicy If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in token_policies
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenNoDefaultPolicy")]
    pub token_no_default_policy: Option<bool>,
    /// TokenNumUses The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited. If you require the token to have the ability to create child tokens, you will need to set this value to 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenNumUses")]
    pub token_num_uses: Option<i64>,
    /// TokenPeriod The period, if any, to set on the token.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenPeriod")]
    pub token_period: Option<i64>,
    /// TokenTTL The incremental lifetime for generated tokens. This current value of this will be referenced at renewal time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenTTL")]
    pub token_ttl: Option<i64>,
    /// TokenType The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenType")]
    pub token_type: Option<KubernetesAuthEngineRoleTokenType>,
}

/// KubernetesAuthEngineRoleSpec defines the desired state of KubernetesAuthEngineRole
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KubernetesAuthEngineRoleAliasNameSource {
    #[serde(rename = "serviceaccount_uid")]
    ServiceaccountUid,
    #[serde(rename = "serviceaccount_name")]
    ServiceaccountName,
}

/// Authentication is the kube auth configuration to be used to execute this request
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubernetesAuthEngineRoleAuthentication {
    /// Namespace is the Vault namespace to be used in all the operations withing this connection/authentication. Only available in Vault Enterprise.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Path is the path of the role used for this kube auth authentication. The operator will try to authenticate at {[namespace/]}auth/{spec.path}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Role the role to be used during authentication
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// ServiceAccount is the service account used for the kube auth authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<KubernetesAuthEngineRoleAuthenticationServiceAccount>,
}

/// ServiceAccount is the service account used for the kube auth authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubernetesAuthEngineRoleAuthenticationServiceAccount {
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Connection represents the information needed to connect to Vault. This operator uses the standard Vault environment variables to connect to Vault. If you need to override those settings and for example connect to a different Vault instance, you can do with this section of the CR.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubernetesAuthEngineRoleConnection {
    /// Address Address of the Vault server expressed as a URL and port, for example: https://127.0.0.1:8200/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// MaxRetries Maximum number of retries when certain error codes are encountered. The default is 2, for three total attempts. Set this to 0 or less to disable retrying. Error codes that are retried are 412 (client consistency requirement not satisfied) and all 5xx except for 501 (not implemented).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    pub max_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tLSConfig")]
    pub t_ls_config: Option<KubernetesAuthEngineRoleConnectionTLsConfig>,
    /// Timeout Timeout variable. The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeOut")]
    pub time_out: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubernetesAuthEngineRoleConnectionTLsConfig {
    /// Cacert Path to a PEM-encoded CA certificate file on the local disk. This file is used to verify the Vault server's SSL certificate. This environment variable takes precedence over a cert passed via the secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cacert: Option<String>,
    /// SkipVerify Do not verify Vault's presented certificate before communicating with it. Setting this variable is not recommended and voids Vault's security model.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipVerify")]
    pub skip_verify: Option<bool>,
    /// TLSSecret namespace-local secret containing the tls material for the connection. the expected keys for the secret are: ca bundle -> "ca.crt", certificate -> "tls.crt", key -> "tls.key"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSecret")]
    pub tls_secret: Option<KubernetesAuthEngineRoleConnectionTLsConfigTlsSecret>,
    /// TLSServerName Name to use as the SNI host when connecting via TLS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsServerName")]
    pub tls_server_name: Option<String>,
}

/// TLSSecret namespace-local secret containing the tls material for the connection. the expected keys for the secret are: ca bundle -> "ca.crt", certificate -> "tls.crt", key -> "tls.key"
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubernetesAuthEngineRoleConnectionTLsConfigTlsSecret {
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// TargetNamespaces specifies how to retrieve the namespaces bound to this Vault role.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubernetesAuthEngineRoleTargetNamespaces {
    /// TargetNamespaceSelector is a selector of namespaces from which service accounts will receove this role. Either TargetNamespaceSelector or TargetNamespaces can be specified
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetNamespaceSelector")]
    pub target_namespace_selector: Option<KubernetesAuthEngineRoleTargetNamespacesTargetNamespaceSelector>,
    /// TargetNamespaces is a list of namespace from which service accounts will receive this role. Either TargetNamespaceSelector or TargetNamespaces can be specified.
    /// kubebuilder:validation:UniqueItems=true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetNamespaces")]
    pub target_namespaces: Option<Vec<String>>,
}

/// TargetNamespaceSelector is a selector of namespaces from which service accounts will receove this role. Either TargetNamespaceSelector or TargetNamespaces can be specified
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubernetesAuthEngineRoleTargetNamespacesTargetNamespaceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KubernetesAuthEngineRoleTargetNamespacesTargetNamespaceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubernetesAuthEngineRoleTargetNamespacesTargetNamespaceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// KubernetesAuthEngineRoleSpec defines the desired state of KubernetesAuthEngineRole
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KubernetesAuthEngineRoleTokenType {
    #[serde(rename = "service")]
    Service,
    #[serde(rename = "batch")]
    Batch,
    #[serde(rename = "default")]
    Default,
    #[serde(rename = "default-service")]
    DefaultService,
    #[serde(rename = "default-batch")]
    DefaultBatch,
}

/// KubernetesAuthEngineRoleStatus defines the observed state of KubernetesAuthEngineRole
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KubernetesAuthEngineRoleStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
}

