// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/redhat-cop/vault-config-operator/redhatcop.redhat.io/v1alpha1/databasesecretenginestaticroles.yaml
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// DatabaseSecretEngineStaticRoleSpec defines the desired state of DatabaseSecretEngineStaticRole
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "redhatcop.redhat.io", version = "v1alpha1", kind = "DatabaseSecretEngineStaticRole", plural = "databasesecretenginestaticroles")]
#[kube(namespaced)]
#[kube(status = "DatabaseSecretEngineStaticRoleStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct DatabaseSecretEngineStaticRoleSpec {
    /// Authentication is the kube auth configuration to be used to execute this request
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<DatabaseSecretEngineStaticRoleAuthentication>,
    /// Connection represents the information needed to connect to Vault. This operator uses the standard Vault environment variables to connect to Vault. If you need to override those settings and for example connect to a different Vault instance, you can do with this section of the CR.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<DatabaseSecretEngineStaticRoleConnection>,
    /// CredentialType Specifies the type of credential that will be generated for the role. Options include: password, rsa_private_key. See the plugin's API page for credential types supported by individual databases.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialType")]
    pub credential_type: Option<DatabaseSecretEngineStaticRoleCredentialType>,
    /// DBName The name of the database connection to use for this role.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dBName")]
    pub d_b_name: Option<String>,
    /// The name of the obejct created in Vault. If this is specified it takes precedence over {metatada.name}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// PasswordCredentialConfig specifies the configuraiton when the password credential type is chosen.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordCredentialConfig")]
    pub password_credential_config: Option<DatabaseSecretEngineStaticRolePasswordCredentialConfig>,
    /// Path at which to create the role. The final path in Vault will be {[spec.authentication.namespace]}/{spec.path}/roles/{metadata.name}. The authentication role must have the following capabilities = [ "create", "read", "update", "delete"] on that path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// RotationPeriod Specifies the amount of time Vault should wait before rotating the password. The minimum is 5 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rotationPeriod")]
    pub rotation_period: Option<i64>,
    /// RotationStatements Specifies the database statements to be executed to rotate the password for the configured database user. Not every plugin type will support this functionality. See the plugin's API page for more information on support and formatting for this parameter. kubebuilder:validation:UniqueItems=true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rotationStatements")]
    pub rotation_statements: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rsaPrivateKeyCredentialConfig")]
    pub rsa_private_key_credential_config: Option<DatabaseSecretEngineStaticRoleRsaPrivateKeyCredentialConfig>,
    /// Username Specifies the database username that this Vault role corresponds to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// Authentication is the kube auth configuration to be used to execute this request
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseSecretEngineStaticRoleAuthentication {
    /// Namespace is the Vault namespace to be used in all the operations withing this connection/authentication. Only available in Vault Enterprise.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Path is the path of the role used for this kube auth authentication. The operator will try to authenticate at {[namespace/]}auth/{spec.path}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Role the role to be used during authentication
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// ServiceAccount is the service account used for the kube auth authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<DatabaseSecretEngineStaticRoleAuthenticationServiceAccount>,
}

/// ServiceAccount is the service account used for the kube auth authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseSecretEngineStaticRoleAuthenticationServiceAccount {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Connection represents the information needed to connect to Vault. This operator uses the standard Vault environment variables to connect to Vault. If you need to override those settings and for example connect to a different Vault instance, you can do with this section of the CR.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseSecretEngineStaticRoleConnection {
    /// Address Address of the Vault server expressed as a URL and port, for example: https://127.0.0.1:8200/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// MaxRetries Maximum number of retries when certain error codes are encountered. The default is 2, for three total attempts. Set this to 0 or less to disable retrying. Error codes that are retried are 412 (client consistency requirement not satisfied) and all 5xx except for 501 (not implemented).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    pub max_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tLSConfig")]
    pub t_ls_config: Option<DatabaseSecretEngineStaticRoleConnectionTLsConfig>,
    /// Timeout Timeout variable. The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeOut")]
    pub time_out: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseSecretEngineStaticRoleConnectionTLsConfig {
    /// Cacert Path to a PEM-encoded CA certificate file on the local disk. This file is used to verify the Vault server's SSL certificate. This environment variable takes precedence over a cert passed via the secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cacert: Option<String>,
    /// SkipVerify Do not verify Vault's presented certificate before communicating with it. Setting this variable is not recommended and voids Vault's security model.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipVerify")]
    pub skip_verify: Option<bool>,
    /// TLSSecret namespace-local secret containing the tls material for the connection. the expected keys for the secret are: ca bundle -> "ca.crt", certificate -> "tls.crt", key -> "tls.key"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSecret")]
    pub tls_secret: Option<DatabaseSecretEngineStaticRoleConnectionTLsConfigTlsSecret>,
    /// TLSServerName Name to use as the SNI host when connecting via TLS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsServerName")]
    pub tls_server_name: Option<String>,
}

/// TLSSecret namespace-local secret containing the tls material for the connection. the expected keys for the secret are: ca bundle -> "ca.crt", certificate -> "tls.crt", key -> "tls.key"
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseSecretEngineStaticRoleConnectionTLsConfigTlsSecret {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// DatabaseSecretEngineStaticRoleSpec defines the desired state of DatabaseSecretEngineStaticRole
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DatabaseSecretEngineStaticRoleCredentialType {
    #[serde(rename = "password")]
    Password,
    #[serde(rename = "rsa_private_key")]
    RsaPrivateKey,
}

/// PasswordCredentialConfig specifies the configuraiton when the password credential type is chosen.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseSecretEngineStaticRolePasswordCredentialConfig {
    /// PasswordPolicy The policy used for password generation. If not provided, defaults to the password policy of the database configuration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordPolicy")]
    pub password_policy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseSecretEngineStaticRoleRsaPrivateKeyCredentialConfig {
    /// Format The output format of the generated private key credential. The private key will be returned from the API in PEM encoding. Options include: pkcs8
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<DatabaseSecretEngineStaticRoleRsaPrivateKeyCredentialConfigFormat>,
    /// KeyBits The bit size of the RSA key to generate. Options include: 2048, 3072, 4096.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyBits")]
    pub key_bits: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DatabaseSecretEngineStaticRoleRsaPrivateKeyCredentialConfigFormat {
    #[serde(rename = "pkcs8")]
    Pkcs8,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DatabaseSecretEngineStaticRoleRsaPrivateKeyCredentialConfigKeyBits {
    #[serde(rename = "2048")]
    r#_2048,
    #[serde(rename = "3072")]
    r#_3072,
    #[serde(rename = "4096")]
    r#_4096,
}

/// DatabaseSecretEngineStaticRoleStatus defines the observed state of DatabaseSecretEngineStaticRole
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseSecretEngineStaticRoleStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
}

