// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/karmada-io/karmada/autoscaling.karmada.io/v1alpha1/federatedhpas.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// Spec is the specification of the FederatedHPA.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "autoscaling.karmada.io", version = "v1alpha1", kind = "FederatedHPA", plural = "federatedhpas")]
#[kube(namespaced)]
#[kube(status = "FederatedHpaStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct FederatedHpaSpec {
    /// Behavior configures the scaling behavior of the target
    /// in both Up and Down directions (scaleUp and scaleDown fields respectively).
    /// If not set, the default HPAScalingRules for scale up and scale down are used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub behavior: Option<FederatedHpaBehavior>,
    /// MaxReplicas is the upper limit for the number of replicas to which the
    /// autoscaler can scale up.
    /// It cannot be less that minReplicas.
    #[serde(rename = "maxReplicas")]
    pub max_replicas: i32,
    /// Metrics contains the specifications for which to use to calculate the
    /// desired replica count (the maximum replica count across all metrics will
    /// be used). The desired replica count is calculated multiplying the
    /// ratio between the target value and the current value by the current
    /// number of pods. Ergo, metrics used must decrease as the pod count is
    /// increased, and vice-versa. See the individual metric source types for
    /// more information about how each type of metric must respond.
    /// If not set, the default metric will be set to 80% average CPU utilization.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics: Option<Vec<FederatedHpaMetrics>>,
    /// MinReplicas is the lower limit for the number of replicas to which the
    /// autoscaler can scale down.
    /// It defaults to 1 pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minReplicas")]
    pub min_replicas: Option<i32>,
    /// ScaleTargetRef points to the target resource to scale, and is used to
    /// the pods for which metrics should be collected, as well as to actually
    /// change the replica count.
    #[serde(rename = "scaleTargetRef")]
    pub scale_target_ref: FederatedHpaScaleTargetRef,
}

/// Behavior configures the scaling behavior of the target
/// in both Up and Down directions (scaleUp and scaleDown fields respectively).
/// If not set, the default HPAScalingRules for scale up and scale down are used.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaBehavior {
    /// scaleDown is scaling policy for scaling Down.
    /// If not set, the default value is to allow to scale down to minReplicas pods, with a
    /// 300 second stabilization window (i.e., the highest recommendation for
    /// the last 300sec is used).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scaleDown")]
    pub scale_down: Option<FederatedHpaBehaviorScaleDown>,
    /// scaleUp is scaling policy for scaling Up.
    /// If not set, the default value is the higher of:
    ///   * increase no more than 4 pods per 60 seconds
    ///   * double the number of pods per 60 seconds
    /// No stabilization is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scaleUp")]
    pub scale_up: Option<FederatedHpaBehaviorScaleUp>,
}

/// scaleDown is scaling policy for scaling Down.
/// If not set, the default value is to allow to scale down to minReplicas pods, with a
/// 300 second stabilization window (i.e., the highest recommendation for
/// the last 300sec is used).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaBehaviorScaleDown {
    /// policies is a list of potential scaling polices which can be used during scaling.
    /// If not set, use the default values:
    /// - For scale up: allow doubling the number of pods, or an absolute change of 4 pods in a 15s window.
    /// - For scale down: allow all pods to be removed in a 15s window.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policies: Option<Vec<FederatedHpaBehaviorScaleDownPolicies>>,
    /// selectPolicy is used to specify which policy should be used.
    /// If not set, the default value Max is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selectPolicy")]
    pub select_policy: Option<String>,
    /// stabilizationWindowSeconds is the number of seconds for which past recommendations should be
    /// considered while scaling up or scaling down.
    /// StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour).
    /// If not set, use the default values:
    /// - For scale up: 0 (i.e. no stabilization is done).
    /// - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stabilizationWindowSeconds")]
    pub stabilization_window_seconds: Option<i32>,
    /// tolerance is the tolerance on the ratio between the current and desired
    /// metric value under which no updates are made to the desired number of
    /// replicas (e.g. 0.01 for 1%). Must be greater than or equal to zero. If not
    /// set, the default cluster-wide tolerance is applied (by default 10%).
    /// 
    /// For example, if autoscaling is configured with a memory consumption target of 100Mi,
    /// and scale-down and scale-up tolerances of 5% and 1% respectively, scaling will be
    /// triggered when the actual consumption falls below 95Mi or exceeds 101Mi.
    /// 
    /// This is an alpha field and requires enabling the HPAConfigurableTolerance
    /// feature gate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerance: Option<IntOrString>,
}

/// HPAScalingPolicy is a single policy which must hold true for a specified past interval.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaBehaviorScaleDownPolicies {
    /// periodSeconds specifies the window of time for which the policy should hold true.
    /// PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
    #[serde(rename = "periodSeconds")]
    pub period_seconds: i32,
    /// type is used to specify the scaling policy.
    #[serde(rename = "type")]
    pub r#type: String,
    /// value contains the amount of change which is permitted by the policy.
    /// It must be greater than zero
    pub value: i32,
}

/// scaleUp is scaling policy for scaling Up.
/// If not set, the default value is the higher of:
///   * increase no more than 4 pods per 60 seconds
///   * double the number of pods per 60 seconds
/// No stabilization is used.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaBehaviorScaleUp {
    /// policies is a list of potential scaling polices which can be used during scaling.
    /// If not set, use the default values:
    /// - For scale up: allow doubling the number of pods, or an absolute change of 4 pods in a 15s window.
    /// - For scale down: allow all pods to be removed in a 15s window.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policies: Option<Vec<FederatedHpaBehaviorScaleUpPolicies>>,
    /// selectPolicy is used to specify which policy should be used.
    /// If not set, the default value Max is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selectPolicy")]
    pub select_policy: Option<String>,
    /// stabilizationWindowSeconds is the number of seconds for which past recommendations should be
    /// considered while scaling up or scaling down.
    /// StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour).
    /// If not set, use the default values:
    /// - For scale up: 0 (i.e. no stabilization is done).
    /// - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stabilizationWindowSeconds")]
    pub stabilization_window_seconds: Option<i32>,
    /// tolerance is the tolerance on the ratio between the current and desired
    /// metric value under which no updates are made to the desired number of
    /// replicas (e.g. 0.01 for 1%). Must be greater than or equal to zero. If not
    /// set, the default cluster-wide tolerance is applied (by default 10%).
    /// 
    /// For example, if autoscaling is configured with a memory consumption target of 100Mi,
    /// and scale-down and scale-up tolerances of 5% and 1% respectively, scaling will be
    /// triggered when the actual consumption falls below 95Mi or exceeds 101Mi.
    /// 
    /// This is an alpha field and requires enabling the HPAConfigurableTolerance
    /// feature gate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerance: Option<IntOrString>,
}

/// HPAScalingPolicy is a single policy which must hold true for a specified past interval.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaBehaviorScaleUpPolicies {
    /// periodSeconds specifies the window of time for which the policy should hold true.
    /// PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
    #[serde(rename = "periodSeconds")]
    pub period_seconds: i32,
    /// type is used to specify the scaling policy.
    #[serde(rename = "type")]
    pub r#type: String,
    /// value contains the amount of change which is permitted by the policy.
    /// It must be greater than zero
    pub value: i32,
}

/// MetricSpec specifies how to scale based on a single metric
/// (only `type` and one other matching field should be set at once).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetrics {
    /// containerResource refers to a resource metric (such as those specified in
    /// requests and limits) known to Kubernetes describing a single container in
    /// each pod of the current scale target (e.g. CPU or memory). Such metrics are
    /// built in to Kubernetes, and have special scaling options on top of those
    /// available to normal per-pod metrics using the "pods" source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerResource")]
    pub container_resource: Option<FederatedHpaMetricsContainerResource>,
    /// external refers to a global metric that is not associated
    /// with any Kubernetes object. It allows autoscaling based on information
    /// coming from components running outside of cluster
    /// (for example length of queue in cloud messaging service, or
    /// QPS from loadbalancer running outside of cluster).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external: Option<FederatedHpaMetricsExternal>,
    /// object refers to a metric describing a single kubernetes object
    /// (for example, hits-per-second on an Ingress object).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object: Option<FederatedHpaMetricsObject>,
    /// pods refers to a metric describing each pod in the current scale target
    /// (for example, transactions-processed-per-second).  The values will be
    /// averaged together before being compared to the target value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<FederatedHpaMetricsPods>,
    /// resource refers to a resource metric (such as those specified in
    /// requests and limits) known to Kubernetes describing each pod in the
    /// current scale target (e.g. CPU or memory). Such metrics are built in to
    /// Kubernetes, and have special scaling options on top of those available
    /// to normal per-pod metrics using the "pods" source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<FederatedHpaMetricsResource>,
    /// type is the type of metric source.  It should be one of "ContainerResource", "External",
    /// "Object", "Pods" or "Resource", each mapping to a matching field in the object.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// containerResource refers to a resource metric (such as those specified in
/// requests and limits) known to Kubernetes describing a single container in
/// each pod of the current scale target (e.g. CPU or memory). Such metrics are
/// built in to Kubernetes, and have special scaling options on top of those
/// available to normal per-pod metrics using the "pods" source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetricsContainerResource {
    /// container is the name of the container in the pods of the scaling target
    pub container: String,
    /// name is the name of the resource in question.
    pub name: String,
    /// target specifies the target value for the given metric
    pub target: FederatedHpaMetricsContainerResourceTarget,
}

/// target specifies the target value for the given metric
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetricsContainerResourceTarget {
    /// averageUtilization is the target value of the average of the
    /// resource metric across all relevant pods, represented as a percentage of
    /// the requested value of the resource for the pods.
    /// Currently only valid for Resource metric source type
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "averageUtilization")]
    pub average_utilization: Option<i32>,
    /// averageValue is the target value of the average of the
    /// metric across all relevant pods (as a quantity)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "averageValue")]
    pub average_value: Option<IntOrString>,
    /// type represents whether the metric type is Utilization, Value, or AverageValue
    #[serde(rename = "type")]
    pub r#type: String,
    /// value is the target value of the metric (as a quantity).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<IntOrString>,
}

/// external refers to a global metric that is not associated
/// with any Kubernetes object. It allows autoscaling based on information
/// coming from components running outside of cluster
/// (for example length of queue in cloud messaging service, or
/// QPS from loadbalancer running outside of cluster).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetricsExternal {
    /// metric identifies the target metric by name and selector
    pub metric: FederatedHpaMetricsExternalMetric,
    /// target specifies the target value for the given metric
    pub target: FederatedHpaMetricsExternalTarget,
}

/// metric identifies the target metric by name and selector
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetricsExternalMetric {
    /// name is the name of the given metric
    pub name: String,
    /// selector is the string-encoded form of a standard kubernetes label selector for the given metric
    /// When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
    /// When unset, just the metricName will be used to gather metrics.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<FederatedHpaMetricsExternalMetricSelector>,
}

/// selector is the string-encoded form of a standard kubernetes label selector for the given metric
/// When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
/// When unset, just the metricName will be used to gather metrics.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetricsExternalMetricSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<FederatedHpaMetricsExternalMetricSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetricsExternalMetricSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// target specifies the target value for the given metric
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetricsExternalTarget {
    /// averageUtilization is the target value of the average of the
    /// resource metric across all relevant pods, represented as a percentage of
    /// the requested value of the resource for the pods.
    /// Currently only valid for Resource metric source type
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "averageUtilization")]
    pub average_utilization: Option<i32>,
    /// averageValue is the target value of the average of the
    /// metric across all relevant pods (as a quantity)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "averageValue")]
    pub average_value: Option<IntOrString>,
    /// type represents whether the metric type is Utilization, Value, or AverageValue
    #[serde(rename = "type")]
    pub r#type: String,
    /// value is the target value of the metric (as a quantity).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<IntOrString>,
}

/// object refers to a metric describing a single kubernetes object
/// (for example, hits-per-second on an Ingress object).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetricsObject {
    /// describedObject specifies the descriptions of a object,such as kind,name apiVersion
    #[serde(rename = "describedObject")]
    pub described_object: FederatedHpaMetricsObjectDescribedObject,
    /// metric identifies the target metric by name and selector
    pub metric: FederatedHpaMetricsObjectMetric,
    /// target specifies the target value for the given metric
    pub target: FederatedHpaMetricsObjectTarget,
}

/// describedObject specifies the descriptions of a object,such as kind,name apiVersion
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetricsObjectDescribedObject {
    /// apiVersion is the API version of the referent
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// kind is the kind of the referent; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>
    pub kind: String,
    /// name is the name of the referent; More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    pub name: String,
}

/// metric identifies the target metric by name and selector
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetricsObjectMetric {
    /// name is the name of the given metric
    pub name: String,
    /// selector is the string-encoded form of a standard kubernetes label selector for the given metric
    /// When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
    /// When unset, just the metricName will be used to gather metrics.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<FederatedHpaMetricsObjectMetricSelector>,
}

/// selector is the string-encoded form of a standard kubernetes label selector for the given metric
/// When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
/// When unset, just the metricName will be used to gather metrics.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetricsObjectMetricSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<FederatedHpaMetricsObjectMetricSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetricsObjectMetricSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// target specifies the target value for the given metric
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetricsObjectTarget {
    /// averageUtilization is the target value of the average of the
    /// resource metric across all relevant pods, represented as a percentage of
    /// the requested value of the resource for the pods.
    /// Currently only valid for Resource metric source type
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "averageUtilization")]
    pub average_utilization: Option<i32>,
    /// averageValue is the target value of the average of the
    /// metric across all relevant pods (as a quantity)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "averageValue")]
    pub average_value: Option<IntOrString>,
    /// type represents whether the metric type is Utilization, Value, or AverageValue
    #[serde(rename = "type")]
    pub r#type: String,
    /// value is the target value of the metric (as a quantity).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<IntOrString>,
}

/// pods refers to a metric describing each pod in the current scale target
/// (for example, transactions-processed-per-second).  The values will be
/// averaged together before being compared to the target value.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetricsPods {
    /// metric identifies the target metric by name and selector
    pub metric: FederatedHpaMetricsPodsMetric,
    /// target specifies the target value for the given metric
    pub target: FederatedHpaMetricsPodsTarget,
}

/// metric identifies the target metric by name and selector
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetricsPodsMetric {
    /// name is the name of the given metric
    pub name: String,
    /// selector is the string-encoded form of a standard kubernetes label selector for the given metric
    /// When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
    /// When unset, just the metricName will be used to gather metrics.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<FederatedHpaMetricsPodsMetricSelector>,
}

/// selector is the string-encoded form of a standard kubernetes label selector for the given metric
/// When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
/// When unset, just the metricName will be used to gather metrics.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetricsPodsMetricSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<FederatedHpaMetricsPodsMetricSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetricsPodsMetricSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// target specifies the target value for the given metric
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetricsPodsTarget {
    /// averageUtilization is the target value of the average of the
    /// resource metric across all relevant pods, represented as a percentage of
    /// the requested value of the resource for the pods.
    /// Currently only valid for Resource metric source type
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "averageUtilization")]
    pub average_utilization: Option<i32>,
    /// averageValue is the target value of the average of the
    /// metric across all relevant pods (as a quantity)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "averageValue")]
    pub average_value: Option<IntOrString>,
    /// type represents whether the metric type is Utilization, Value, or AverageValue
    #[serde(rename = "type")]
    pub r#type: String,
    /// value is the target value of the metric (as a quantity).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<IntOrString>,
}

/// resource refers to a resource metric (such as those specified in
/// requests and limits) known to Kubernetes describing each pod in the
/// current scale target (e.g. CPU or memory). Such metrics are built in to
/// Kubernetes, and have special scaling options on top of those available
/// to normal per-pod metrics using the "pods" source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetricsResource {
    /// name is the name of the resource in question.
    pub name: String,
    /// target specifies the target value for the given metric
    pub target: FederatedHpaMetricsResourceTarget,
}

/// target specifies the target value for the given metric
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaMetricsResourceTarget {
    /// averageUtilization is the target value of the average of the
    /// resource metric across all relevant pods, represented as a percentage of
    /// the requested value of the resource for the pods.
    /// Currently only valid for Resource metric source type
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "averageUtilization")]
    pub average_utilization: Option<i32>,
    /// averageValue is the target value of the average of the
    /// metric across all relevant pods (as a quantity)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "averageValue")]
    pub average_value: Option<IntOrString>,
    /// type represents whether the metric type is Utilization, Value, or AverageValue
    #[serde(rename = "type")]
    pub r#type: String,
    /// value is the target value of the metric (as a quantity).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<IntOrString>,
}

/// ScaleTargetRef points to the target resource to scale, and is used to
/// the pods for which metrics should be collected, as well as to actually
/// change the replica count.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaScaleTargetRef {
    /// apiVersion is the API version of the referent
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// kind is the kind of the referent; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>
    pub kind: String,
    /// name is the name of the referent; More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    pub name: String,
}

/// Status is the current status of the FederatedHPA.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatus {
    /// conditions is the set of conditions required for this autoscaler to scale its target,
    /// and indicates whether or not those conditions are met.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// currentMetrics is the last read state of the metrics used by this autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "currentMetrics")]
    pub current_metrics: Option<Vec<FederatedHpaStatusCurrentMetrics>>,
    /// currentReplicas is current number of replicas of pods managed by this autoscaler,
    /// as last seen by the autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "currentReplicas")]
    pub current_replicas: Option<i32>,
    /// desiredReplicas is the desired number of replicas of pods managed by this autoscaler,
    /// as last calculated by the autoscaler.
    #[serde(rename = "desiredReplicas")]
    pub desired_replicas: i32,
    /// lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods,
    /// used by the autoscaler to control how often the number of pods is changed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastScaleTime")]
    pub last_scale_time: Option<String>,
    /// observedGeneration is the most recent generation observed by this autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

/// MetricStatus describes the last-read state of a single metric.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetrics {
    /// container resource refers to a resource metric (such as those specified in
    /// requests and limits) known to Kubernetes describing a single container in each pod in the
    /// current scale target (e.g. CPU or memory). Such metrics are built in to
    /// Kubernetes, and have special scaling options on top of those available
    /// to normal per-pod metrics using the "pods" source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerResource")]
    pub container_resource: Option<FederatedHpaStatusCurrentMetricsContainerResource>,
    /// external refers to a global metric that is not associated
    /// with any Kubernetes object. It allows autoscaling based on information
    /// coming from components running outside of cluster
    /// (for example length of queue in cloud messaging service, or
    /// QPS from loadbalancer running outside of cluster).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external: Option<FederatedHpaStatusCurrentMetricsExternal>,
    /// object refers to a metric describing a single kubernetes object
    /// (for example, hits-per-second on an Ingress object).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object: Option<FederatedHpaStatusCurrentMetricsObject>,
    /// pods refers to a metric describing each pod in the current scale target
    /// (for example, transactions-processed-per-second).  The values will be
    /// averaged together before being compared to the target value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<FederatedHpaStatusCurrentMetricsPods>,
    /// resource refers to a resource metric (such as those specified in
    /// requests and limits) known to Kubernetes describing each pod in the
    /// current scale target (e.g. CPU or memory). Such metrics are built in to
    /// Kubernetes, and have special scaling options on top of those available
    /// to normal per-pod metrics using the "pods" source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<FederatedHpaStatusCurrentMetricsResource>,
    /// type is the type of metric source.  It will be one of "ContainerResource", "External",
    /// "Object", "Pods" or "Resource", each corresponds to a matching field in the object.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// container resource refers to a resource metric (such as those specified in
/// requests and limits) known to Kubernetes describing a single container in each pod in the
/// current scale target (e.g. CPU or memory). Such metrics are built in to
/// Kubernetes, and have special scaling options on top of those available
/// to normal per-pod metrics using the "pods" source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetricsContainerResource {
    /// container is the name of the container in the pods of the scaling target
    pub container: String,
    /// current contains the current value for the given metric
    pub current: FederatedHpaStatusCurrentMetricsContainerResourceCurrent,
    /// name is the name of the resource in question.
    pub name: String,
}

/// current contains the current value for the given metric
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetricsContainerResourceCurrent {
    /// currentAverageUtilization is the current value of the average of the
    /// resource metric across all relevant pods, represented as a percentage of
    /// the requested value of the resource for the pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "averageUtilization")]
    pub average_utilization: Option<i32>,
    /// averageValue is the current value of the average of the
    /// metric across all relevant pods (as a quantity)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "averageValue")]
    pub average_value: Option<IntOrString>,
    /// value is the current value of the metric (as a quantity).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<IntOrString>,
}

/// external refers to a global metric that is not associated
/// with any Kubernetes object. It allows autoscaling based on information
/// coming from components running outside of cluster
/// (for example length of queue in cloud messaging service, or
/// QPS from loadbalancer running outside of cluster).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetricsExternal {
    /// current contains the current value for the given metric
    pub current: FederatedHpaStatusCurrentMetricsExternalCurrent,
    /// metric identifies the target metric by name and selector
    pub metric: FederatedHpaStatusCurrentMetricsExternalMetric,
}

/// current contains the current value for the given metric
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetricsExternalCurrent {
    /// currentAverageUtilization is the current value of the average of the
    /// resource metric across all relevant pods, represented as a percentage of
    /// the requested value of the resource for the pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "averageUtilization")]
    pub average_utilization: Option<i32>,
    /// averageValue is the current value of the average of the
    /// metric across all relevant pods (as a quantity)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "averageValue")]
    pub average_value: Option<IntOrString>,
    /// value is the current value of the metric (as a quantity).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<IntOrString>,
}

/// metric identifies the target metric by name and selector
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetricsExternalMetric {
    /// name is the name of the given metric
    pub name: String,
    /// selector is the string-encoded form of a standard kubernetes label selector for the given metric
    /// When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
    /// When unset, just the metricName will be used to gather metrics.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<FederatedHpaStatusCurrentMetricsExternalMetricSelector>,
}

/// selector is the string-encoded form of a standard kubernetes label selector for the given metric
/// When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
/// When unset, just the metricName will be used to gather metrics.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetricsExternalMetricSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<FederatedHpaStatusCurrentMetricsExternalMetricSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetricsExternalMetricSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// object refers to a metric describing a single kubernetes object
/// (for example, hits-per-second on an Ingress object).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetricsObject {
    /// current contains the current value for the given metric
    pub current: FederatedHpaStatusCurrentMetricsObjectCurrent,
    /// DescribedObject specifies the descriptions of a object,such as kind,name apiVersion
    #[serde(rename = "describedObject")]
    pub described_object: FederatedHpaStatusCurrentMetricsObjectDescribedObject,
    /// metric identifies the target metric by name and selector
    pub metric: FederatedHpaStatusCurrentMetricsObjectMetric,
}

/// current contains the current value for the given metric
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetricsObjectCurrent {
    /// currentAverageUtilization is the current value of the average of the
    /// resource metric across all relevant pods, represented as a percentage of
    /// the requested value of the resource for the pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "averageUtilization")]
    pub average_utilization: Option<i32>,
    /// averageValue is the current value of the average of the
    /// metric across all relevant pods (as a quantity)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "averageValue")]
    pub average_value: Option<IntOrString>,
    /// value is the current value of the metric (as a quantity).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<IntOrString>,
}

/// DescribedObject specifies the descriptions of a object,such as kind,name apiVersion
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetricsObjectDescribedObject {
    /// apiVersion is the API version of the referent
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// kind is the kind of the referent; More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds>
    pub kind: String,
    /// name is the name of the referent; More info: <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names>
    pub name: String,
}

/// metric identifies the target metric by name and selector
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetricsObjectMetric {
    /// name is the name of the given metric
    pub name: String,
    /// selector is the string-encoded form of a standard kubernetes label selector for the given metric
    /// When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
    /// When unset, just the metricName will be used to gather metrics.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<FederatedHpaStatusCurrentMetricsObjectMetricSelector>,
}

/// selector is the string-encoded form of a standard kubernetes label selector for the given metric
/// When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
/// When unset, just the metricName will be used to gather metrics.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetricsObjectMetricSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<FederatedHpaStatusCurrentMetricsObjectMetricSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetricsObjectMetricSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// pods refers to a metric describing each pod in the current scale target
/// (for example, transactions-processed-per-second).  The values will be
/// averaged together before being compared to the target value.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetricsPods {
    /// current contains the current value for the given metric
    pub current: FederatedHpaStatusCurrentMetricsPodsCurrent,
    /// metric identifies the target metric by name and selector
    pub metric: FederatedHpaStatusCurrentMetricsPodsMetric,
}

/// current contains the current value for the given metric
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetricsPodsCurrent {
    /// currentAverageUtilization is the current value of the average of the
    /// resource metric across all relevant pods, represented as a percentage of
    /// the requested value of the resource for the pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "averageUtilization")]
    pub average_utilization: Option<i32>,
    /// averageValue is the current value of the average of the
    /// metric across all relevant pods (as a quantity)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "averageValue")]
    pub average_value: Option<IntOrString>,
    /// value is the current value of the metric (as a quantity).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<IntOrString>,
}

/// metric identifies the target metric by name and selector
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetricsPodsMetric {
    /// name is the name of the given metric
    pub name: String,
    /// selector is the string-encoded form of a standard kubernetes label selector for the given metric
    /// When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
    /// When unset, just the metricName will be used to gather metrics.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<FederatedHpaStatusCurrentMetricsPodsMetricSelector>,
}

/// selector is the string-encoded form of a standard kubernetes label selector for the given metric
/// When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
/// When unset, just the metricName will be used to gather metrics.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetricsPodsMetricSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<FederatedHpaStatusCurrentMetricsPodsMetricSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetricsPodsMetricSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// resource refers to a resource metric (such as those specified in
/// requests and limits) known to Kubernetes describing each pod in the
/// current scale target (e.g. CPU or memory). Such metrics are built in to
/// Kubernetes, and have special scaling options on top of those available
/// to normal per-pod metrics using the "pods" source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetricsResource {
    /// current contains the current value for the given metric
    pub current: FederatedHpaStatusCurrentMetricsResourceCurrent,
    /// name is the name of the resource in question.
    pub name: String,
}

/// current contains the current value for the given metric
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedHpaStatusCurrentMetricsResourceCurrent {
    /// currentAverageUtilization is the current value of the average of the
    /// resource metric across all relevant pods, represented as a percentage of
    /// the requested value of the resource for the pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "averageUtilization")]
    pub average_utilization: Option<i32>,
    /// averageValue is the current value of the average of the
    /// metric across all relevant pods (as a quantity)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "averageValue")]
    pub average_value: Option<IntOrString>,
    /// value is the current value of the metric (as a quantity).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<IntOrString>,
}

