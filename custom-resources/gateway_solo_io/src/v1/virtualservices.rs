// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/solo-io/gloo/gateway.solo.io/v1/virtualservices.yaml
// kopium version: 0.22.4

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "gateway.solo.io", version = "v1", kind = "VirtualService", plural = "virtualservices")]
#[kube(namespaced)]
#[kube(status = "VirtualServiceStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct VirtualServiceSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespacedStatuses")]
    pub namespaced_statuses: Option<VirtualServiceNamespacedStatuses>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslConfig")]
    pub ssl_config: Option<VirtualServiceSslConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualHost")]
    pub virtual_host: Option<VirtualServiceVirtualHost>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceNamespacedStatuses {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceSslConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnProtocols")]
    pub alpn_protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableTlsSessionResumption")]
    pub disable_tls_session_resumption: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaplePolicy")]
    pub ocsp_staple_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oneWayTls")]
    pub one_way_tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<VirtualServiceSslConfigParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<VirtualServiceSslConfigSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<VirtualServiceSslConfigSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sniDomains")]
    pub sni_domains: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslFiles")]
    pub ssl_files: Option<VirtualServiceSslConfigSslFiles>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportSocketConnectTimeout")]
    pub transport_socket_connect_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifySubjectAltName")]
    pub verify_subject_alt_name: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceSslConfigParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherSuites")]
    pub cipher_suites: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecdhCurves")]
    pub ecdh_curves: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceSslConfigSds {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callCredentials")]
    pub call_credentials: Option<VirtualServiceSslConfigSdsCallCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatesSecretName")]
    pub certificates_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationContextName")]
    pub validation_context_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceSslConfigSdsCallCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileCredentialSource")]
    pub file_credential_source: Option<VirtualServiceSslConfigSdsCallCredentialsFileCredentialSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceSslConfigSdsCallCredentialsFileCredentialSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenFileName")]
    pub token_file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceSslConfigSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceSslConfigSslFiles {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaple")]
    pub ocsp_staple: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCa")]
    pub root_ca: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCert")]
    pub tls_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domains: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<VirtualServiceVirtualHostOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "optionsConfigRefs")]
    pub options_config_refs: Option<VirtualServiceVirtualHostOptionsConfigRefs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub routes: Option<Vec<VirtualServiceVirtualHostRoutes>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferPerRoute")]
    pub buffer_per_route: Option<VirtualServiceVirtualHostOptionsBufferPerRoute>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cors: Option<VirtualServiceVirtualHostOptionsCors>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "corsPolicyMergeSettings")]
    pub cors_policy_merge_settings: Option<VirtualServiceVirtualHostOptionsCorsPolicyMergeSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csrf: Option<VirtualServiceVirtualHostOptionsCsrf>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dlp: Option<VirtualServiceVirtualHostOptionsDlp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extProc")]
    pub ext_proc: Option<VirtualServiceVirtualHostOptionsExtProc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extauth: Option<VirtualServiceVirtualHostOptionsExtauth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extensions: Option<VirtualServiceVirtualHostOptionsExtensions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerManipulation")]
    pub header_manipulation: Option<VirtualServiceVirtualHostOptionsHeaderManipulation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeAttemptCountInResponse")]
    pub include_attempt_count_in_response: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeRequestAttemptCount")]
    pub include_request_attempt_count: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jwt: Option<VirtualServiceVirtualHostOptionsJwt>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwtStaged")]
    pub jwt_staged: Option<VirtualServiceVirtualHostOptionsJwtStaged>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitConfigs")]
    pub rate_limit_configs: Option<VirtualServiceVirtualHostOptionsRateLimitConfigs>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitEarlyConfigs")]
    pub rate_limit_early_configs: Option<VirtualServiceVirtualHostOptionsRateLimitEarlyConfigs>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitRegularConfigs")]
    pub rate_limit_regular_configs: Option<VirtualServiceVirtualHostOptionsRateLimitRegularConfigs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ratelimit: Option<VirtualServiceVirtualHostOptionsRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ratelimitBasic")]
    pub ratelimit_basic: Option<VirtualServiceVirtualHostOptionsRatelimitBasic>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ratelimitEarly")]
    pub ratelimit_early: Option<VirtualServiceVirtualHostOptionsRatelimitEarly>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ratelimitRegular")]
    pub ratelimit_regular: Option<VirtualServiceVirtualHostOptionsRatelimitRegular>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rbac: Option<VirtualServiceVirtualHostOptionsRbac>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<VirtualServiceVirtualHostOptionsRetries>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stagedTransformations")]
    pub staged_transformations: Option<VirtualServiceVirtualHostOptionsStagedTransformations>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stats: Option<VirtualServiceVirtualHostOptionsStats>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transformations: Option<VirtualServiceVirtualHostOptionsTransformations>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub waf: Option<VirtualServiceVirtualHostOptionsWaf>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsBufferPerRoute {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<VirtualServiceVirtualHostOptionsBufferPerRouteBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsBufferPerRouteBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsCors {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowCredentials")]
    pub allow_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowHeaders")]
    pub allow_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowMethods")]
    pub allow_methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowOrigin")]
    pub allow_origin: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowOriginRegex")]
    pub allow_origin_regex: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableForRoute")]
    pub disable_for_route: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exposeHeaders")]
    pub expose_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAge")]
    pub max_age: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsCorsPolicyMergeSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exposeHeaders")]
    pub expose_headers: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsCsrf {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalOrigins")]
    pub additional_origins: Option<Vec<VirtualServiceVirtualHostOptionsCsrfAdditionalOrigins>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterEnabled")]
    pub filter_enabled: Option<VirtualServiceVirtualHostOptionsCsrfFilterEnabled>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowEnabled")]
    pub shadow_enabled: Option<VirtualServiceVirtualHostOptionsCsrfShadowEnabled>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsCsrfAdditionalOrigins {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<VirtualServiceVirtualHostOptionsCsrfAdditionalOriginsSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsCsrfAdditionalOriginsSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<VirtualServiceVirtualHostOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsCsrfFilterEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<VirtualServiceVirtualHostOptionsCsrfFilterEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsCsrfFilterEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsCsrfShadowEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<VirtualServiceVirtualHostOptionsCsrfShadowEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsCsrfShadowEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsDlp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<VirtualServiceVirtualHostOptionsDlpActions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enabledFor")]
    pub enabled_for: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsDlpActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionType")]
    pub action_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAction")]
    pub custom_action: Option<VirtualServiceVirtualHostOptionsDlpActionsCustomAction>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyValueAction")]
    pub key_value_action: Option<VirtualServiceVirtualHostOptionsDlpActionsKeyValueAction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shadow: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsDlpActionsCustomAction {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maskChar")]
    pub mask_char: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<VirtualServiceVirtualHostOptionsDlpActionsCustomActionPercent>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexActions")]
    pub regex_actions: Option<Vec<VirtualServiceVirtualHostOptionsDlpActionsCustomActionRegexActions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsDlpActionsCustomActionPercent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsDlpActionsCustomActionRegexActions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsDlpActionsKeyValueAction {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyToMask")]
    pub key_to_mask: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maskChar")]
    pub mask_char: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<VirtualServiceVirtualHostOptionsDlpActionsKeyValueActionPercent>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsDlpActionsKeyValueActionPercent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsExtProc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overrides: Option<VirtualServiceVirtualHostOptionsExtProcOverrides>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsExtProcOverrides {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncMode")]
    pub async_mode: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<VirtualServiceVirtualHostOptionsExtProcOverridesGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataContextNamespaces")]
    pub metadata_context_namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingMode")]
    pub processing_mode: Option<VirtualServiceVirtualHostOptionsExtProcOverridesProcessingMode>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestAttributes")]
    pub request_attributes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseAttributes")]
    pub response_attributes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "typedMetadataContextNamespaces")]
    pub typed_metadata_context_namespaces: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsExtProcOverridesGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extProcServerRef")]
    pub ext_proc_server_ref: Option<VirtualServiceVirtualHostOptionsExtProcOverridesGrpcServiceExtProcServerRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialMetadata")]
    pub initial_metadata: Option<Vec<VirtualServiceVirtualHostOptionsExtProcOverridesGrpcServiceInitialMetadata>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryPolicy")]
    pub retry_policy: Option<VirtualServiceVirtualHostOptionsExtProcOverridesGrpcServiceRetryPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsExtProcOverridesGrpcServiceExtProcServerRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsExtProcOverridesGrpcServiceInitialMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsExtProcOverridesGrpcServiceRetryPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numRetries")]
    pub num_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryBackOff")]
    pub retry_back_off: Option<VirtualServiceVirtualHostOptionsExtProcOverridesGrpcServiceRetryPolicyRetryBackOff>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsExtProcOverridesGrpcServiceRetryPolicyRetryBackOff {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseInterval")]
    pub base_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInterval")]
    pub max_interval: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsExtProcOverridesProcessingMode {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestBodyMode")]
    pub request_body_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaderMode")]
    pub request_header_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTrailerMode")]
    pub request_trailer_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseBodyMode")]
    pub response_body_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeaderMode")]
    pub response_header_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTrailerMode")]
    pub response_trailer_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsExtauth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<VirtualServiceVirtualHostOptionsExtauthConfigRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAuth")]
    pub custom_auth: Option<VirtualServiceVirtualHostOptionsExtauthCustomAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsExtauthConfigRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsExtauthCustomAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contextExtensions")]
    pub context_extensions: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsExtensions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsHeaderManipulation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToAdd")]
    pub request_headers_to_add: Option<Vec<VirtualServiceVirtualHostOptionsHeaderManipulationRequestHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToRemove")]
    pub request_headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersToAdd")]
    pub response_headers_to_add: Option<Vec<VirtualServiceVirtualHostOptionsHeaderManipulationResponseHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersToRemove")]
    pub response_headers_to_remove: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsHeaderManipulationRequestHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<VirtualServiceVirtualHostOptionsHeaderManipulationRequestHeadersToAddHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerSecretRef")]
    pub header_secret_ref: Option<VirtualServiceVirtualHostOptionsHeaderManipulationRequestHeadersToAddHeaderSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsHeaderManipulationRequestHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsHeaderManipulationRequestHeadersToAddHeaderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsHeaderManipulationResponseHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<VirtualServiceVirtualHostOptionsHeaderManipulationResponseHeadersToAddHeader>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsHeaderManipulationResponseHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwt {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowMissingOrFailedJwt")]
    pub allow_missing_or_failed_jwt: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub providers: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsJwtProviders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationPolicy")]
    pub validation_policy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtProviders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachFailedStatusToMetadata")]
    pub attach_failed_status_to_metadata: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimsToHeaders")]
    pub claims_to_headers: Option<Vec<VirtualServiceVirtualHostOptionsJwtProvidersClaimsToHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clockSkewSeconds")]
    pub clock_skew_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jwks: Option<VirtualServiceVirtualHostOptionsJwtProvidersJwks>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepToken")]
    pub keep_token: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenSource")]
    pub token_source: Option<VirtualServiceVirtualHostOptionsJwtProvidersTokenSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtProvidersClaimsToHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claim: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtProvidersJwks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub local: Option<VirtualServiceVirtualHostOptionsJwtProvidersJwksLocal>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<VirtualServiceVirtualHostOptionsJwtProvidersJwksRemote>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtProvidersJwksLocal {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtProvidersJwksRemote {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncFetch")]
    pub async_fetch: Option<VirtualServiceVirtualHostOptionsJwtProvidersJwksRemoteAsyncFetch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheDuration")]
    pub cache_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamRef")]
    pub upstream_ref: Option<VirtualServiceVirtualHostOptionsJwtProvidersJwksRemoteUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtProvidersJwksRemoteAsyncFetch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fastListener")]
    pub fast_listener: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtProvidersJwksRemoteUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtProvidersTokenSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostOptionsJwtProvidersTokenSourceHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParams")]
    pub query_params: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtProvidersTokenSourceHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStaged {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "afterExtAuth")]
    pub after_ext_auth: Option<VirtualServiceVirtualHostOptionsJwtStagedAfterExtAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "beforeExtAuth")]
    pub before_ext_auth: Option<VirtualServiceVirtualHostOptionsJwtStagedBeforeExtAuth>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStagedAfterExtAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowMissingOrFailedJwt")]
    pub allow_missing_or_failed_jwt: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub providers: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsJwtStagedAfterExtAuthProviders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationPolicy")]
    pub validation_policy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStagedAfterExtAuthProviders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachFailedStatusToMetadata")]
    pub attach_failed_status_to_metadata: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimsToHeaders")]
    pub claims_to_headers: Option<Vec<VirtualServiceVirtualHostOptionsJwtStagedAfterExtAuthProvidersClaimsToHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clockSkewSeconds")]
    pub clock_skew_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jwks: Option<VirtualServiceVirtualHostOptionsJwtStagedAfterExtAuthProvidersJwks>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepToken")]
    pub keep_token: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenSource")]
    pub token_source: Option<VirtualServiceVirtualHostOptionsJwtStagedAfterExtAuthProvidersTokenSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStagedAfterExtAuthProvidersClaimsToHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claim: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStagedAfterExtAuthProvidersJwks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub local: Option<VirtualServiceVirtualHostOptionsJwtStagedAfterExtAuthProvidersJwksLocal>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<VirtualServiceVirtualHostOptionsJwtStagedAfterExtAuthProvidersJwksRemote>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStagedAfterExtAuthProvidersJwksLocal {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStagedAfterExtAuthProvidersJwksRemote {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncFetch")]
    pub async_fetch: Option<VirtualServiceVirtualHostOptionsJwtStagedAfterExtAuthProvidersJwksRemoteAsyncFetch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheDuration")]
    pub cache_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamRef")]
    pub upstream_ref: Option<VirtualServiceVirtualHostOptionsJwtStagedAfterExtAuthProvidersJwksRemoteUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStagedAfterExtAuthProvidersJwksRemoteAsyncFetch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fastListener")]
    pub fast_listener: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStagedAfterExtAuthProvidersJwksRemoteUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStagedAfterExtAuthProvidersTokenSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostOptionsJwtStagedAfterExtAuthProvidersTokenSourceHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParams")]
    pub query_params: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStagedAfterExtAuthProvidersTokenSourceHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStagedBeforeExtAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowMissingOrFailedJwt")]
    pub allow_missing_or_failed_jwt: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub providers: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsJwtStagedBeforeExtAuthProviders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationPolicy")]
    pub validation_policy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStagedBeforeExtAuthProviders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachFailedStatusToMetadata")]
    pub attach_failed_status_to_metadata: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimsToHeaders")]
    pub claims_to_headers: Option<Vec<VirtualServiceVirtualHostOptionsJwtStagedBeforeExtAuthProvidersClaimsToHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clockSkewSeconds")]
    pub clock_skew_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jwks: Option<VirtualServiceVirtualHostOptionsJwtStagedBeforeExtAuthProvidersJwks>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepToken")]
    pub keep_token: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenSource")]
    pub token_source: Option<VirtualServiceVirtualHostOptionsJwtStagedBeforeExtAuthProvidersTokenSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStagedBeforeExtAuthProvidersClaimsToHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claim: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStagedBeforeExtAuthProvidersJwks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub local: Option<VirtualServiceVirtualHostOptionsJwtStagedBeforeExtAuthProvidersJwksLocal>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<VirtualServiceVirtualHostOptionsJwtStagedBeforeExtAuthProvidersJwksRemote>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStagedBeforeExtAuthProvidersJwksLocal {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStagedBeforeExtAuthProvidersJwksRemote {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncFetch")]
    pub async_fetch: Option<VirtualServiceVirtualHostOptionsJwtStagedBeforeExtAuthProvidersJwksRemoteAsyncFetch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheDuration")]
    pub cache_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamRef")]
    pub upstream_ref: Option<VirtualServiceVirtualHostOptionsJwtStagedBeforeExtAuthProvidersJwksRemoteUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStagedBeforeExtAuthProvidersJwksRemoteAsyncFetch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fastListener")]
    pub fast_listener: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStagedBeforeExtAuthProvidersJwksRemoteUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStagedBeforeExtAuthProvidersTokenSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostOptionsJwtStagedBeforeExtAuthProvidersTokenSourceHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParams")]
    pub query_params: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsJwtStagedBeforeExtAuthProvidersTokenSourceHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRateLimitConfigs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub refs: Option<Vec<VirtualServiceVirtualHostOptionsRateLimitConfigsRefs>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRateLimitConfigsRefs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRateLimitEarlyConfigs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub refs: Option<Vec<VirtualServiceVirtualHostOptionsRateLimitEarlyConfigsRefs>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRateLimitEarlyConfigsRefs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRateLimitRegularConfigs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub refs: Option<Vec<VirtualServiceVirtualHostOptionsRateLimitRegularConfigsRefs>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRateLimitRegularConfigsRefs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRatelimit")]
    pub local_ratelimit: Option<VirtualServiceVirtualHostOptionsRatelimitLocalRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimits")]
    pub rate_limits: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitRateLimits>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitLocalRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillInterval")]
    pub fill_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokens")]
    pub max_tokens: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokensPerFill")]
    pub tokens_per_fill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimits {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitRateLimitsActions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setActions")]
    pub set_actions: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadata")]
    pub dynamic_metadata: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsLimitDynamicMetadata>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsLimitDynamicMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsLimitDynamicMetadataMetadataKey>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsLimitDynamicMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitRateLimitsLimitDynamicMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsLimitDynamicMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRateLimitsSetActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitBasic {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "anonymousLimits")]
    pub anonymous_limits: Option<VirtualServiceVirtualHostOptionsRatelimitBasicAnonymousLimits>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedLimits")]
    pub authorized_limits: Option<VirtualServiceVirtualHostOptionsRatelimitBasicAuthorizedLimits>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitBasicAnonymousLimits {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestsPerUnit")]
    pub requests_per_unit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitBasicAuthorizedLimits {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestsPerUnit")]
    pub requests_per_unit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarly {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRatelimit")]
    pub local_ratelimit: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyLocalRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimits")]
    pub rate_limits: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimits>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyLocalRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillInterval")]
    pub fill_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokens")]
    pub max_tokens: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokensPerFill")]
    pub tokens_per_fill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimits {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setActions")]
    pub set_actions: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadata")]
    pub dynamic_metadata: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsLimitDynamicMetadata>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsLimitDynamicMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsLimitDynamicMetadataMetadataKey>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsLimitDynamicMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsLimitDynamicMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsLimitDynamicMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitEarlyRateLimitsSetActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegular {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRatelimit")]
    pub local_ratelimit: Option<VirtualServiceVirtualHostOptionsRatelimitRegularLocalRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimits")]
    pub rate_limits: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimits>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularLocalRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillInterval")]
    pub fill_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokens")]
    pub max_tokens: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokensPerFill")]
    pub tokens_per_fill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimits {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setActions")]
    pub set_actions: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadata")]
    pub dynamic_metadata: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsLimitDynamicMetadata>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsLimitDynamicMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsLimitDynamicMetadataMetadataKey>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsLimitDynamicMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsLimitDynamicMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsLimitDynamicMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRatelimitRegularRateLimitsSetActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRbac {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policies: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsRbacPolicies>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRbacPolicies {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nestedClaimDelimiter")]
    pub nested_claim_delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<VirtualServiceVirtualHostOptionsRbacPoliciesPermissions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub principals: Option<Vec<VirtualServiceVirtualHostOptionsRbacPoliciesPrincipals>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRbacPoliciesPermissions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathPrefix")]
    pub path_prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRbacPoliciesPrincipals {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwtPrincipal")]
    pub jwt_principal: Option<VirtualServiceVirtualHostOptionsRbacPoliciesPrincipalsJwtPrincipal>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRbacPoliciesPrincipalsJwtPrincipal {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRetries {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numRetries")]
    pub num_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "perTryTimeout")]
    pub per_try_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "previousPriorities")]
    pub previous_priorities: Option<VirtualServiceVirtualHostOptionsRetriesPreviousPriorities>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitedRetryBackOff")]
    pub rate_limited_retry_back_off: Option<VirtualServiceVirtualHostOptionsRetriesRateLimitedRetryBackOff>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retriableStatusCodes")]
    pub retriable_status_codes: Option<Vec<i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryBackOff")]
    pub retry_back_off: Option<VirtualServiceVirtualHostOptionsRetriesRetryBackOff>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryOn")]
    pub retry_on: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRetriesPreviousPriorities {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateFrequency")]
    pub update_frequency: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRetriesRateLimitedRetryBackOff {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInterval")]
    pub max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resetHeaders")]
    pub reset_headers: Option<Vec<VirtualServiceVirtualHostOptionsRetriesRateLimitedRetryBackOffResetHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRetriesRateLimitedRetryBackOffResetHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsRetriesRetryBackOff {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseInterval")]
    pub base_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInterval")]
    pub max_interval: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub early: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarly>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inheritTransformation")]
    pub inherit_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postRouting")]
    pub post_routing: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRouting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regular: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegular>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarly {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRouting {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegular {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStagedTransformationsRegularResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStats {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualClusters")]
    pub virtual_clusters: Option<Vec<VirtualServiceVirtualHostOptionsStatsVirtualClusters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsStatsVirtualClusters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<VirtualServiceVirtualHostOptionsTransformationsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostOptionsTransformationsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostOptionsTransformationsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostOptionsTransformationsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostOptionsTransformationsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostOptionsTransformationsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsTransformationsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsWaf {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "auditLogging")]
    pub audit_logging: Option<VirtualServiceVirtualHostOptionsWafAuditLogging>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRuleSets")]
    pub config_map_rule_sets: Option<Vec<VirtualServiceVirtualHostOptionsWafConfigMapRuleSets>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreRuleSet")]
    pub core_rule_set: Option<VirtualServiceVirtualHostOptionsWafCoreRuleSet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customInterventionMessage")]
    pub custom_intervention_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersOnly")]
    pub request_headers_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersOnly")]
    pub response_headers_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleSets")]
    pub rule_sets: Option<Vec<VirtualServiceVirtualHostOptionsWafRuleSets>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsWafAuditLogging {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsWafConfigMapRuleSets {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<VirtualServiceVirtualHostOptionsWafConfigMapRuleSetsConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataMapKeys")]
    pub data_map_keys: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsWafConfigMapRuleSetsConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsWafCoreRuleSet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSettingsFile")]
    pub custom_settings_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSettingsString")]
    pub custom_settings_string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsWafRuleSets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleStr")]
    pub rule_str: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsConfigRefs {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delegateOptions")]
    pub delegate_options: Option<Vec<VirtualServiceVirtualHostOptionsConfigRefsDelegateOptions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostOptionsConfigRefsDelegateOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutes {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delegateAction")]
    pub delegate_action: Option<VirtualServiceVirtualHostRoutesDelegateAction>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directResponseAction")]
    pub direct_response_action: Option<VirtualServiceVirtualHostRoutesDirectResponseAction>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inheritableMatchers")]
    pub inheritable_matchers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inheritablePathMatchers")]
    pub inheritable_path_matchers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<VirtualServiceVirtualHostRoutesMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<VirtualServiceVirtualHostRoutesOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "optionsConfigRefs")]
    pub options_config_refs: Option<VirtualServiceVirtualHostRoutesOptionsConfigRefs>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redirectAction")]
    pub redirect_action: Option<VirtualServiceVirtualHostRoutesRedirectAction>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeAction")]
    pub route_action: Option<VirtualServiceVirtualHostRoutesRouteAction>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesDelegateAction {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<VirtualServiceVirtualHostRoutesDelegateActionRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<VirtualServiceVirtualHostRoutesDelegateActionSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesDelegateActionRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesDelegateActionSelector {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expressions: Option<Vec<VirtualServiceVirtualHostRoutesDelegateActionSelectorExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesDelegateActionSelectorExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesDirectResponseAction {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<VirtualServiceVirtualHostRoutesMatchersConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostRoutesMatchersHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<VirtualServiceVirtualHostRoutesMatchersQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesMatchersConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesMatchersHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesMatchersQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ai: Option<VirtualServiceVirtualHostRoutesOptionsAi>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appendXForwardedHost")]
    pub append_x_forwarded_host: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoHostRewrite")]
    pub auto_host_rewrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferPerRoute")]
    pub buffer_per_route: Option<VirtualServiceVirtualHostRoutesOptionsBufferPerRoute>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cors: Option<VirtualServiceVirtualHostRoutesOptionsCors>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csrf: Option<VirtualServiceVirtualHostRoutesOptionsCsrf>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dlp: Option<VirtualServiceVirtualHostRoutesOptionsDlp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyMetadata")]
    pub envoy_metadata: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extProc")]
    pub ext_proc: Option<VirtualServiceVirtualHostRoutesOptionsExtProc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extauth: Option<VirtualServiceVirtualHostRoutesOptionsExtauth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extensions: Option<VirtualServiceVirtualHostRoutesOptionsExtensions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub faults: Option<VirtualServiceVirtualHostRoutesOptionsFaults>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerManipulation")]
    pub header_manipulation: Option<VirtualServiceVirtualHostRoutesOptionsHeaderManipulation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostRewrite")]
    pub host_rewrite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostRewriteHeader")]
    pub host_rewrite_header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostRewritePathRegex")]
    pub host_rewrite_path_regex: Option<VirtualServiceVirtualHostRoutesOptionsHostRewritePathRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeout")]
    pub idle_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jwt: Option<VirtualServiceVirtualHostRoutesOptionsJwt>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwtProvidersStaged")]
    pub jwt_providers_staged: Option<VirtualServiceVirtualHostRoutesOptionsJwtProvidersStaged>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwtStaged")]
    pub jwt_staged: Option<VirtualServiceVirtualHostRoutesOptionsJwtStaged>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lbHash")]
    pub lb_hash: Option<VirtualServiceVirtualHostRoutesOptionsLbHash>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxStreamDuration")]
    pub max_stream_duration: Option<VirtualServiceVirtualHostRoutesOptionsMaxStreamDuration>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixRewrite")]
    pub prefix_rewrite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitConfigs")]
    pub rate_limit_configs: Option<VirtualServiceVirtualHostRoutesOptionsRateLimitConfigs>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitEarlyConfigs")]
    pub rate_limit_early_configs: Option<VirtualServiceVirtualHostRoutesOptionsRateLimitEarlyConfigs>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitRegularConfigs")]
    pub rate_limit_regular_configs: Option<VirtualServiceVirtualHostRoutesOptionsRateLimitRegularConfigs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ratelimit: Option<VirtualServiceVirtualHostRoutesOptionsRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ratelimitBasic")]
    pub ratelimit_basic: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitBasic>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ratelimitEarly")]
    pub ratelimit_early: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarly>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ratelimitRegular")]
    pub ratelimit_regular: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegular>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rbac: Option<VirtualServiceVirtualHostRoutesOptionsRbac>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexRewrite")]
    pub regex_rewrite: Option<VirtualServiceVirtualHostRoutesOptionsRegexRewrite>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<VirtualServiceVirtualHostRoutesOptionsRetries>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shadowing: Option<VirtualServiceVirtualHostRoutesOptionsShadowing>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stagedTransformations")]
    pub staged_transformations: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformations>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing: Option<VirtualServiceVirtualHostRoutesOptionsTracing>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transformations: Option<VirtualServiceVirtualHostRoutesOptionsTransformations>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upgrades: Option<Vec<VirtualServiceVirtualHostRoutesOptionsUpgrades>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub waf: Option<VirtualServiceVirtualHostRoutesOptionsWaf>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub defaults: Option<Vec<VirtualServiceVirtualHostRoutesOptionsAiDefaults>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "promptEnrichment")]
    pub prompt_enrichment: Option<VirtualServiceVirtualHostRoutesOptionsAiPromptEnrichment>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "promptGuard")]
    pub prompt_guard: Option<VirtualServiceVirtualHostRoutesOptionsAiPromptGuard>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rag: Option<VirtualServiceVirtualHostRoutesOptionsAiRag>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeType")]
    pub route_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "semanticCache")]
    pub semantic_cache: Option<VirtualServiceVirtualHostRoutesOptionsAiSemanticCache>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiDefaults {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    pub r#override: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<serde_json::Value>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiPromptEnrichment {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<Vec<VirtualServiceVirtualHostRoutesOptionsAiPromptEnrichmentAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prepend: Option<Vec<VirtualServiceVirtualHostRoutesOptionsAiPromptEnrichmentPrepend>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiPromptEnrichmentAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiPromptEnrichmentPrepend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiPromptGuard {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequest>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<VirtualServiceVirtualHostRoutesOptionsAiPromptGuardResponse>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customResponse")]
    pub custom_response: Option<VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequestCustomResponse>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub moderation: Option<VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequestModeration>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequestRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequestWebhook>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequestCustomResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusCode")]
    pub status_code: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequestModeration {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openai: Option<VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequestModerationOpenai>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequestModerationOpenai {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequestModerationOpenaiAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequestModerationOpenaiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequestModerationOpenaiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequestModerationOpenaiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequestModerationOpenaiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequestModerationOpenaiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequestRegex {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub builtins: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matches: Option<Vec<VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequestRegexMatches>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequestRegexMatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequestWebhook {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardHeaders")]
    pub forward_headers: Option<Vec<VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequestWebhookForwardHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiPromptGuardRequestWebhookForwardHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchType")]
    pub match_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiPromptGuardResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<VirtualServiceVirtualHostRoutesOptionsAiPromptGuardResponseRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<VirtualServiceVirtualHostRoutesOptionsAiPromptGuardResponseWebhook>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiPromptGuardResponseRegex {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub builtins: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matches: Option<Vec<VirtualServiceVirtualHostRoutesOptionsAiPromptGuardResponseRegexMatches>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiPromptGuardResponseRegexMatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiPromptGuardResponseWebhook {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardHeaders")]
    pub forward_headers: Option<Vec<VirtualServiceVirtualHostRoutesOptionsAiPromptGuardResponseWebhookForwardHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiPromptGuardResponseWebhookForwardHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchType")]
    pub match_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiRag {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub datastore: Option<VirtualServiceVirtualHostRoutesOptionsAiRagDatastore>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub embedding: Option<VirtualServiceVirtualHostRoutesOptionsAiRagEmbedding>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "promptTemplate")]
    pub prompt_template: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiRagDatastore {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub postgres: Option<VirtualServiceVirtualHostRoutesOptionsAiRagDatastorePostgres>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiRagDatastorePostgres {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectionName")]
    pub collection_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionString")]
    pub connection_string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiRagEmbedding {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureOpenai")]
    pub azure_openai: Option<VirtualServiceVirtualHostRoutesOptionsAiRagEmbeddingAzureOpenai>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openai: Option<VirtualServiceVirtualHostRoutesOptionsAiRagEmbeddingOpenai>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiRagEmbeddingAzureOpenai {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<VirtualServiceVirtualHostRoutesOptionsAiRagEmbeddingAzureOpenaiAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentName")]
    pub deployment_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiRagEmbeddingAzureOpenaiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesOptionsAiRagEmbeddingAzureOpenaiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<VirtualServiceVirtualHostRoutesOptionsAiRagEmbeddingAzureOpenaiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiRagEmbeddingAzureOpenaiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiRagEmbeddingAzureOpenaiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiRagEmbeddingOpenai {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<VirtualServiceVirtualHostRoutesOptionsAiRagEmbeddingOpenaiAuthToken>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiRagEmbeddingOpenaiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesOptionsAiRagEmbeddingOpenaiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<VirtualServiceVirtualHostRoutesOptionsAiRagEmbeddingOpenaiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiRagEmbeddingOpenaiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiRagEmbeddingOpenaiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiSemanticCache {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub datastore: Option<VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheDatastore>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distanceThreshold")]
    pub distance_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub embedding: Option<VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheEmbedding>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheDatastore {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redis: Option<VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheDatastoreRedis>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weaviate: Option<VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheDatastoreWeaviate>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheDatastoreRedis {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionString")]
    pub connection_string: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scoreThreshold")]
    pub score_threshold: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheDatastoreWeaviate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcPort")]
    pub grpc_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpPort")]
    pub http_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheEmbedding {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureOpenai")]
    pub azure_openai: Option<VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheEmbeddingAzureOpenai>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openai: Option<VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheEmbeddingOpenai>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheEmbeddingAzureOpenai {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheEmbeddingAzureOpenaiAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentName")]
    pub deployment_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheEmbeddingAzureOpenaiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheEmbeddingAzureOpenaiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheEmbeddingAzureOpenaiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheEmbeddingAzureOpenaiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheEmbeddingAzureOpenaiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheEmbeddingOpenai {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheEmbeddingOpenaiAuthToken>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheEmbeddingOpenaiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheEmbeddingOpenaiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheEmbeddingOpenaiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheEmbeddingOpenaiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsAiSemanticCacheEmbeddingOpenaiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsBufferPerRoute {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<VirtualServiceVirtualHostRoutesOptionsBufferPerRouteBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsBufferPerRouteBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsCors {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowCredentials")]
    pub allow_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowHeaders")]
    pub allow_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowMethods")]
    pub allow_methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowOrigin")]
    pub allow_origin: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowOriginRegex")]
    pub allow_origin_regex: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableForRoute")]
    pub disable_for_route: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exposeHeaders")]
    pub expose_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAge")]
    pub max_age: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsCsrf {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalOrigins")]
    pub additional_origins: Option<Vec<VirtualServiceVirtualHostRoutesOptionsCsrfAdditionalOrigins>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterEnabled")]
    pub filter_enabled: Option<VirtualServiceVirtualHostRoutesOptionsCsrfFilterEnabled>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowEnabled")]
    pub shadow_enabled: Option<VirtualServiceVirtualHostRoutesOptionsCsrfShadowEnabled>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsCsrfAdditionalOrigins {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<VirtualServiceVirtualHostRoutesOptionsCsrfAdditionalOriginsSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsCsrfAdditionalOriginsSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<VirtualServiceVirtualHostRoutesOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsCsrfFilterEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<VirtualServiceVirtualHostRoutesOptionsCsrfFilterEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsCsrfFilterEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsCsrfShadowEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<VirtualServiceVirtualHostRoutesOptionsCsrfShadowEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsCsrfShadowEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsDlp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<VirtualServiceVirtualHostRoutesOptionsDlpActions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enabledFor")]
    pub enabled_for: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsDlpActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionType")]
    pub action_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAction")]
    pub custom_action: Option<VirtualServiceVirtualHostRoutesOptionsDlpActionsCustomAction>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyValueAction")]
    pub key_value_action: Option<VirtualServiceVirtualHostRoutesOptionsDlpActionsKeyValueAction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shadow: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsDlpActionsCustomAction {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maskChar")]
    pub mask_char: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<VirtualServiceVirtualHostRoutesOptionsDlpActionsCustomActionPercent>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexActions")]
    pub regex_actions: Option<Vec<VirtualServiceVirtualHostRoutesOptionsDlpActionsCustomActionRegexActions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsDlpActionsCustomActionPercent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsDlpActionsCustomActionRegexActions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsDlpActionsKeyValueAction {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyToMask")]
    pub key_to_mask: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maskChar")]
    pub mask_char: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<VirtualServiceVirtualHostRoutesOptionsDlpActionsKeyValueActionPercent>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsDlpActionsKeyValueActionPercent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsExtProc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overrides: Option<VirtualServiceVirtualHostRoutesOptionsExtProcOverrides>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsExtProcOverrides {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncMode")]
    pub async_mode: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<VirtualServiceVirtualHostRoutesOptionsExtProcOverridesGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataContextNamespaces")]
    pub metadata_context_namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingMode")]
    pub processing_mode: Option<VirtualServiceVirtualHostRoutesOptionsExtProcOverridesProcessingMode>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestAttributes")]
    pub request_attributes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseAttributes")]
    pub response_attributes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "typedMetadataContextNamespaces")]
    pub typed_metadata_context_namespaces: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsExtProcOverridesGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extProcServerRef")]
    pub ext_proc_server_ref: Option<VirtualServiceVirtualHostRoutesOptionsExtProcOverridesGrpcServiceExtProcServerRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialMetadata")]
    pub initial_metadata: Option<Vec<VirtualServiceVirtualHostRoutesOptionsExtProcOverridesGrpcServiceInitialMetadata>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryPolicy")]
    pub retry_policy: Option<VirtualServiceVirtualHostRoutesOptionsExtProcOverridesGrpcServiceRetryPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsExtProcOverridesGrpcServiceExtProcServerRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsExtProcOverridesGrpcServiceInitialMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsExtProcOverridesGrpcServiceRetryPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numRetries")]
    pub num_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryBackOff")]
    pub retry_back_off: Option<VirtualServiceVirtualHostRoutesOptionsExtProcOverridesGrpcServiceRetryPolicyRetryBackOff>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsExtProcOverridesGrpcServiceRetryPolicyRetryBackOff {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseInterval")]
    pub base_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInterval")]
    pub max_interval: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsExtProcOverridesProcessingMode {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestBodyMode")]
    pub request_body_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaderMode")]
    pub request_header_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTrailerMode")]
    pub request_trailer_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseBodyMode")]
    pub response_body_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeaderMode")]
    pub response_header_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTrailerMode")]
    pub response_trailer_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsExtauth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<VirtualServiceVirtualHostRoutesOptionsExtauthConfigRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAuth")]
    pub custom_auth: Option<VirtualServiceVirtualHostRoutesOptionsExtauthCustomAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsExtauthConfigRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsExtauthCustomAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contextExtensions")]
    pub context_extensions: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsExtensions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsFaults {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub abort: Option<VirtualServiceVirtualHostRoutesOptionsFaultsAbort>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delay: Option<VirtualServiceVirtualHostRoutesOptionsFaultsDelay>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsFaultsAbort {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpStatus")]
    pub http_status: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percentage: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsFaultsDelay {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fixedDelay")]
    pub fixed_delay: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percentage: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsHeaderManipulation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToAdd")]
    pub request_headers_to_add: Option<Vec<VirtualServiceVirtualHostRoutesOptionsHeaderManipulationRequestHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToRemove")]
    pub request_headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersToAdd")]
    pub response_headers_to_add: Option<Vec<VirtualServiceVirtualHostRoutesOptionsHeaderManipulationResponseHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersToRemove")]
    pub response_headers_to_remove: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsHeaderManipulationRequestHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<VirtualServiceVirtualHostRoutesOptionsHeaderManipulationRequestHeadersToAddHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerSecretRef")]
    pub header_secret_ref: Option<VirtualServiceVirtualHostRoutesOptionsHeaderManipulationRequestHeadersToAddHeaderSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsHeaderManipulationRequestHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsHeaderManipulationRequestHeadersToAddHeaderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsHeaderManipulationResponseHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<VirtualServiceVirtualHostRoutesOptionsHeaderManipulationResponseHeadersToAddHeader>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsHeaderManipulationResponseHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsHostRewritePathRegex {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<VirtualServiceVirtualHostRoutesOptionsHostRewritePathRegexPattern>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub substitution: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsHostRewritePathRegexPattern {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<VirtualServiceVirtualHostRoutesOptionsHostRewritePathRegexPatternGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsHostRewritePathRegexPatternGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwt {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStaged {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "afterExtAuth")]
    pub after_ext_auth: Option<VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedAfterExtAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "beforeExtAuth")]
    pub before_ext_auth: Option<VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedBeforeExtAuth>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedAfterExtAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowMissingOrFailedJwt")]
    pub allow_missing_or_failed_jwt: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub providers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedAfterExtAuthProviders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationPolicy")]
    pub validation_policy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedAfterExtAuthProviders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachFailedStatusToMetadata")]
    pub attach_failed_status_to_metadata: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimsToHeaders")]
    pub claims_to_headers: Option<Vec<VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersClaimsToHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clockSkewSeconds")]
    pub clock_skew_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jwks: Option<VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersJwks>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepToken")]
    pub keep_token: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenSource")]
    pub token_source: Option<VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersTokenSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersClaimsToHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claim: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersJwks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub local: Option<VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersJwksLocal>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersJwksRemote>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersJwksLocal {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersJwksRemote {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncFetch")]
    pub async_fetch: Option<VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersJwksRemoteAsyncFetch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheDuration")]
    pub cache_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamRef")]
    pub upstream_ref: Option<VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersJwksRemoteUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersJwksRemoteAsyncFetch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fastListener")]
    pub fast_listener: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersJwksRemoteUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersTokenSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersTokenSourceHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParams")]
    pub query_params: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersTokenSourceHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedBeforeExtAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowMissingOrFailedJwt")]
    pub allow_missing_or_failed_jwt: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub providers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedBeforeExtAuthProviders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationPolicy")]
    pub validation_policy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedBeforeExtAuthProviders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachFailedStatusToMetadata")]
    pub attach_failed_status_to_metadata: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimsToHeaders")]
    pub claims_to_headers: Option<Vec<VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersClaimsToHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clockSkewSeconds")]
    pub clock_skew_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jwks: Option<VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersJwks>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepToken")]
    pub keep_token: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenSource")]
    pub token_source: Option<VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersTokenSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersClaimsToHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claim: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersJwks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub local: Option<VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksLocal>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksRemote>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksLocal {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksRemote {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncFetch")]
    pub async_fetch: Option<VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksRemoteAsyncFetch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheDuration")]
    pub cache_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamRef")]
    pub upstream_ref: Option<VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksRemoteUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksRemoteAsyncFetch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fastListener")]
    pub fast_listener: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksRemoteUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersTokenSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersTokenSourceHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParams")]
    pub query_params: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersTokenSourceHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtStaged {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "afterExtAuth")]
    pub after_ext_auth: Option<VirtualServiceVirtualHostRoutesOptionsJwtStagedAfterExtAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "beforeExtAuth")]
    pub before_ext_auth: Option<VirtualServiceVirtualHostRoutesOptionsJwtStagedBeforeExtAuth>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtStagedAfterExtAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsJwtStagedBeforeExtAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsLbHash {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hashPolicies")]
    pub hash_policies: Option<Vec<VirtualServiceVirtualHostRoutesOptionsLbHashHashPolicies>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsLbHashHashPolicies {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cookie: Option<VirtualServiceVirtualHostRoutesOptionsLbHashHashPoliciesCookie>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceIp")]
    pub source_ip: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub terminal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsLbHashHashPoliciesCookie {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsMaxStreamDuration {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcTimeoutHeaderMax")]
    pub grpc_timeout_header_max: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcTimeoutHeaderOffset")]
    pub grpc_timeout_header_offset: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxStreamDuration")]
    pub max_stream_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRateLimitConfigs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub refs: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRateLimitConfigsRefs>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRateLimitConfigsRefs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRateLimitEarlyConfigs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub refs: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRateLimitEarlyConfigsRefs>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRateLimitEarlyConfigsRefs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRateLimitRegularConfigs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub refs: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRateLimitRegularConfigsRefs>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRateLimitRegularConfigsRefs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeVhRateLimits")]
    pub include_vh_rate_limits: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRatelimit")]
    pub local_ratelimit: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitLocalRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimits")]
    pub rate_limits: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimits>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitLocalRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillInterval")]
    pub fill_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokens")]
    pub max_tokens: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokensPerFill")]
    pub tokens_per_fill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimits {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setActions")]
    pub set_actions: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadata")]
    pub dynamic_metadata: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsLimitDynamicMetadata>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsLimitDynamicMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsLimitDynamicMetadataMetadataKey>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsLimitDynamicMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsLimitDynamicMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsLimitDynamicMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRateLimitsSetActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitBasic {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "anonymousLimits")]
    pub anonymous_limits: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitBasicAnonymousLimits>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedLimits")]
    pub authorized_limits: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitBasicAuthorizedLimits>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitBasicAnonymousLimits {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestsPerUnit")]
    pub requests_per_unit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitBasicAuthorizedLimits {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestsPerUnit")]
    pub requests_per_unit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarly {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeVhRateLimits")]
    pub include_vh_rate_limits: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRatelimit")]
    pub local_ratelimit: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyLocalRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimits")]
    pub rate_limits: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimits>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyLocalRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillInterval")]
    pub fill_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokens")]
    pub max_tokens: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokensPerFill")]
    pub tokens_per_fill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimits {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setActions")]
    pub set_actions: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadata")]
    pub dynamic_metadata: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsLimitDynamicMetadata>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsLimitDynamicMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsLimitDynamicMetadataMetadataKey>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsLimitDynamicMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsLimitDynamicMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsLimitDynamicMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitEarlyRateLimitsSetActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegular {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeVhRateLimits")]
    pub include_vh_rate_limits: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRatelimit")]
    pub local_ratelimit: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularLocalRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimits")]
    pub rate_limits: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimits>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularLocalRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillInterval")]
    pub fill_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokens")]
    pub max_tokens: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokensPerFill")]
    pub tokens_per_fill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimits {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setActions")]
    pub set_actions: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadata")]
    pub dynamic_metadata: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsLimitDynamicMetadata>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsLimitDynamicMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsLimitDynamicMetadataMetadataKey>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsLimitDynamicMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsLimitDynamicMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsLimitDynamicMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRatelimitRegularRateLimitsSetActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRbac {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policies: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsRbacPolicies>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRbacPolicies {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nestedClaimDelimiter")]
    pub nested_claim_delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<VirtualServiceVirtualHostRoutesOptionsRbacPoliciesPermissions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub principals: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRbacPoliciesPrincipals>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRbacPoliciesPermissions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathPrefix")]
    pub path_prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRbacPoliciesPrincipals {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwtPrincipal")]
    pub jwt_principal: Option<VirtualServiceVirtualHostRoutesOptionsRbacPoliciesPrincipalsJwtPrincipal>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRbacPoliciesPrincipalsJwtPrincipal {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRegexRewrite {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<VirtualServiceVirtualHostRoutesOptionsRegexRewritePattern>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub substitution: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRegexRewritePattern {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<VirtualServiceVirtualHostRoutesOptionsRegexRewritePatternGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRegexRewritePatternGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRetries {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numRetries")]
    pub num_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "perTryTimeout")]
    pub per_try_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "previousPriorities")]
    pub previous_priorities: Option<VirtualServiceVirtualHostRoutesOptionsRetriesPreviousPriorities>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitedRetryBackOff")]
    pub rate_limited_retry_back_off: Option<VirtualServiceVirtualHostRoutesOptionsRetriesRateLimitedRetryBackOff>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retriableStatusCodes")]
    pub retriable_status_codes: Option<Vec<i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryBackOff")]
    pub retry_back_off: Option<VirtualServiceVirtualHostRoutesOptionsRetriesRetryBackOff>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryOn")]
    pub retry_on: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRetriesPreviousPriorities {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateFrequency")]
    pub update_frequency: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRetriesRateLimitedRetryBackOff {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInterval")]
    pub max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resetHeaders")]
    pub reset_headers: Option<Vec<VirtualServiceVirtualHostRoutesOptionsRetriesRateLimitedRetryBackOffResetHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRetriesRateLimitedRetryBackOffResetHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsRetriesRetryBackOff {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseInterval")]
    pub base_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInterval")]
    pub max_interval: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsShadowing {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percentage: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upstream: Option<VirtualServiceVirtualHostRoutesOptionsShadowingUpstream>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsShadowingUpstream {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub early: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarly>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inheritTransformation")]
    pub inherit_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postRouting")]
    pub post_routing: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRouting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regular: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegular>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarly {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRouting {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegular {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTracing {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub propagate: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeDescriptor")]
    pub route_descriptor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tracePercentages")]
    pub trace_percentages: Option<VirtualServiceVirtualHostRoutesOptionsTracingTracePercentages>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTracingTracePercentages {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSamplePercentage")]
    pub client_sample_percentage: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overallSamplePercentage")]
    pub overall_sample_percentage: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "randomSamplePercentage")]
    pub random_sample_percentage: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsTransformationsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsUpgrades {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connect: Option<VirtualServiceVirtualHostRoutesOptionsUpgradesConnect>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub websocket: Option<VirtualServiceVirtualHostRoutesOptionsUpgradesWebsocket>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsUpgradesConnect {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsUpgradesWebsocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsWaf {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "auditLogging")]
    pub audit_logging: Option<VirtualServiceVirtualHostRoutesOptionsWafAuditLogging>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRuleSets")]
    pub config_map_rule_sets: Option<Vec<VirtualServiceVirtualHostRoutesOptionsWafConfigMapRuleSets>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreRuleSet")]
    pub core_rule_set: Option<VirtualServiceVirtualHostRoutesOptionsWafCoreRuleSet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customInterventionMessage")]
    pub custom_intervention_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersOnly")]
    pub request_headers_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersOnly")]
    pub response_headers_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleSets")]
    pub rule_sets: Option<Vec<VirtualServiceVirtualHostRoutesOptionsWafRuleSets>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsWafAuditLogging {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsWafConfigMapRuleSets {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<VirtualServiceVirtualHostRoutesOptionsWafConfigMapRuleSetsConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataMapKeys")]
    pub data_map_keys: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsWafConfigMapRuleSetsConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsWafCoreRuleSet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSettingsFile")]
    pub custom_settings_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSettingsString")]
    pub custom_settings_string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsWafRuleSets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleStr")]
    pub rule_str: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsConfigRefs {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delegateOptions")]
    pub delegate_options: Option<Vec<VirtualServiceVirtualHostRoutesOptionsConfigRefsDelegateOptions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesOptionsConfigRefsDelegateOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRedirectAction {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostRedirect")]
    pub host_redirect: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpsRedirect")]
    pub https_redirect: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathRedirect")]
    pub path_redirect: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portRedirect")]
    pub port_redirect: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixRewrite")]
    pub prefix_rewrite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexRewrite")]
    pub regex_rewrite: Option<VirtualServiceVirtualHostRoutesRedirectActionRegexRewrite>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCode")]
    pub response_code: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stripQuery")]
    pub strip_query: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRedirectActionRegexRewrite {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<VirtualServiceVirtualHostRoutesRedirectActionRegexRewritePattern>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub substitution: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRedirectActionRegexRewritePattern {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<VirtualServiceVirtualHostRoutesRedirectActionRegexRewritePatternGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRedirectActionRegexRewritePatternGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteAction {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterHeader")]
    pub cluster_header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicForwardProxy")]
    pub dynamic_forward_proxy: Option<VirtualServiceVirtualHostRoutesRouteActionDynamicForwardProxy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multi: Option<VirtualServiceVirtualHostRoutesRouteActionMulti>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub single: Option<VirtualServiceVirtualHostRoutesRouteActionSingle>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamGroup")]
    pub upstream_group: Option<VirtualServiceVirtualHostRoutesRouteActionUpstreamGroup>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionDynamicForwardProxy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoHostRewriteHeader")]
    pub auto_host_rewrite_header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostRewrite")]
    pub host_rewrite: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMulti {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destinations: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinations>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestination>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub consul: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationConsul>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationSpec")]
    pub destination_spec: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpec>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kube: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationKube>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subset: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationSubset>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upstream: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationUpstream>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationConsul {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCenters")]
    pub data_centers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecAws>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecAzure>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rest: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRest>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecAws {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invocationStyle")]
    pub invocation_style: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logicalName")]
    pub logical_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsAlb")]
    pub unwrap_as_alb: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsApiGateway")]
    pub unwrap_as_api_gateway: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wrapAsApiGateway")]
    pub wrap_as_api_gateway: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecAzure {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionName")]
    pub function_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub function: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub package: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecGrpcParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecGrpcParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionName")]
    pub function_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationKube {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationKubeRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationKubeRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationSubset {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsDestinationUpstream {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferPerRoute")]
    pub buffer_per_route: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsBufferPerRoute>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csrf: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsCsrf>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extauth: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsExtauth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extensions: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsExtensions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerManipulation")]
    pub header_manipulation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsHeaderManipulation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stagedTransformations")]
    pub staged_transformations: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformations>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transformations: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformations>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsBufferPerRoute {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsBufferPerRouteBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsBufferPerRouteBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsCsrf {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalOrigins")]
    pub additional_origins: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsCsrfAdditionalOrigins>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterEnabled")]
    pub filter_enabled: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsCsrfFilterEnabled>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowEnabled")]
    pub shadow_enabled: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsCsrfShadowEnabled>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsCsrfAdditionalOrigins {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsCsrfAdditionalOriginsSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsCsrfAdditionalOriginsSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsCsrfFilterEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsCsrfFilterEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsCsrfFilterEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsCsrfShadowEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsCsrfShadowEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsCsrfShadowEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsExtauth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsExtauthConfigRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAuth")]
    pub custom_auth: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsExtauthCustomAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsExtauthConfigRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsExtauthCustomAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contextExtensions")]
    pub context_extensions: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsExtensions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsHeaderManipulation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToAdd")]
    pub request_headers_to_add: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsHeaderManipulationRequestHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToRemove")]
    pub request_headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersToAdd")]
    pub response_headers_to_add: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsHeaderManipulationResponseHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersToRemove")]
    pub response_headers_to_remove: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsHeaderManipulationRequestHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsHeaderManipulationRequestHeadersToAddHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerSecretRef")]
    pub header_secret_ref: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsHeaderManipulationRequestHeadersToAddHeaderSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsHeaderManipulationRequestHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsHeaderManipulationRequestHeadersToAddHeaderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsHeaderManipulationResponseHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsHeaderManipulationResponseHeadersToAddHeader>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsHeaderManipulationResponseHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub early: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarly>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inheritTransformation")]
    pub inherit_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postRouting")]
    pub post_routing: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRouting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regular: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegular>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarly {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRouting {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegular {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingle {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub consul: Option<VirtualServiceVirtualHostRoutesRouteActionSingleConsul>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationSpec")]
    pub destination_spec: Option<VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpec>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kube: Option<VirtualServiceVirtualHostRoutesRouteActionSingleKube>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subset: Option<VirtualServiceVirtualHostRoutesRouteActionSingleSubset>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upstream: Option<VirtualServiceVirtualHostRoutesRouteActionSingleUpstream>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleConsul {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCenters")]
    pub data_centers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecAws>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecAzure>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rest: Option<VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRest>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecAws {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invocationStyle")]
    pub invocation_style: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logicalName")]
    pub logical_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsAlb")]
    pub unwrap_as_alb: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsApiGateway")]
    pub unwrap_as_api_gateway: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wrapAsApiGateway")]
    pub wrap_as_api_gateway: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecAzure {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionName")]
    pub function_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub function: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub package: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecGrpcParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecGrpcParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionName")]
    pub function_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleDestinationSpecRestResponseTransformationSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleKube {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<VirtualServiceVirtualHostRoutesRouteActionSingleKubeRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleKubeRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleSubset {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionSingleUpstream {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceVirtualHostRoutesRouteActionUpstreamGroup {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServiceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, serde_json::Value>>,
}

