// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/solo-io/gloo/gateway.solo.io/v1/routetables.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "gateway.solo.io", version = "v1", kind = "RouteTable", plural = "routetables")]
#[kube(namespaced)]
#[kube(status = "RouteTableStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct RouteTableSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespacedStatuses")]
    pub namespaced_statuses: Option<RouteTableNamespacedStatuses>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub routes: Option<Vec<RouteTableRoutes>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableNamespacedStatuses {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutes {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delegateAction")]
    pub delegate_action: Option<RouteTableRoutesDelegateAction>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "directResponseAction")]
    pub direct_response_action: Option<RouteTableRoutesDirectResponseAction>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inheritableMatchers")]
    pub inheritable_matchers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inheritablePathMatchers")]
    pub inheritable_path_matchers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<RouteTableRoutesMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<RouteTableRoutesOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "optionsConfigRefs")]
    pub options_config_refs: Option<RouteTableRoutesOptionsConfigRefs>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redirectAction")]
    pub redirect_action: Option<RouteTableRoutesRedirectAction>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeAction")]
    pub route_action: Option<RouteTableRoutesRouteAction>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesDelegateAction {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<RouteTableRoutesDelegateActionRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<RouteTableRoutesDelegateActionSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesDelegateActionRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesDelegateActionSelector {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expressions: Option<Vec<RouteTableRoutesDelegateActionSelectorExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesDelegateActionSelectorExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesDirectResponseAction {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<RouteTableRoutesMatchersConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteTableRoutesMatchersHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<RouteTableRoutesMatchersQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesMatchersConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesMatchersHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesMatchersQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ai: Option<RouteTableRoutesOptionsAi>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appendXForwardedHost")]
    pub append_x_forwarded_host: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoHostRewrite")]
    pub auto_host_rewrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferPerRoute")]
    pub buffer_per_route: Option<RouteTableRoutesOptionsBufferPerRoute>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cors: Option<RouteTableRoutesOptionsCors>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csrf: Option<RouteTableRoutesOptionsCsrf>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dlp: Option<RouteTableRoutesOptionsDlp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyMetadata")]
    pub envoy_metadata: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extProc")]
    pub ext_proc: Option<RouteTableRoutesOptionsExtProc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extauth: Option<RouteTableRoutesOptionsExtauth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extensions: Option<RouteTableRoutesOptionsExtensions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub faults: Option<RouteTableRoutesOptionsFaults>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerManipulation")]
    pub header_manipulation: Option<RouteTableRoutesOptionsHeaderManipulation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostRewrite")]
    pub host_rewrite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostRewriteHeader")]
    pub host_rewrite_header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostRewritePathRegex")]
    pub host_rewrite_path_regex: Option<RouteTableRoutesOptionsHostRewritePathRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeout")]
    pub idle_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jwt: Option<RouteTableRoutesOptionsJwt>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwtProvidersStaged")]
    pub jwt_providers_staged: Option<RouteTableRoutesOptionsJwtProvidersStaged>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwtStaged")]
    pub jwt_staged: Option<RouteTableRoutesOptionsJwtStaged>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lbHash")]
    pub lb_hash: Option<RouteTableRoutesOptionsLbHash>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxStreamDuration")]
    pub max_stream_duration: Option<RouteTableRoutesOptionsMaxStreamDuration>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixRewrite")]
    pub prefix_rewrite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitConfigs")]
    pub rate_limit_configs: Option<RouteTableRoutesOptionsRateLimitConfigs>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitEarlyConfigs")]
    pub rate_limit_early_configs: Option<RouteTableRoutesOptionsRateLimitEarlyConfigs>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitRegularConfigs")]
    pub rate_limit_regular_configs: Option<RouteTableRoutesOptionsRateLimitRegularConfigs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ratelimit: Option<RouteTableRoutesOptionsRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ratelimitBasic")]
    pub ratelimit_basic: Option<RouteTableRoutesOptionsRatelimitBasic>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ratelimitEarly")]
    pub ratelimit_early: Option<RouteTableRoutesOptionsRatelimitEarly>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ratelimitRegular")]
    pub ratelimit_regular: Option<RouteTableRoutesOptionsRatelimitRegular>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rbac: Option<RouteTableRoutesOptionsRbac>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexRewrite")]
    pub regex_rewrite: Option<RouteTableRoutesOptionsRegexRewrite>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<RouteTableRoutesOptionsRetries>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shadowing: Option<RouteTableRoutesOptionsShadowing>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stagedTransformations")]
    pub staged_transformations: Option<RouteTableRoutesOptionsStagedTransformations>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing: Option<RouteTableRoutesOptionsTracing>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transformations: Option<RouteTableRoutesOptionsTransformations>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upgrades: Option<Vec<RouteTableRoutesOptionsUpgrades>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub waf: Option<RouteTableRoutesOptionsWaf>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub defaults: Option<Vec<RouteTableRoutesOptionsAiDefaults>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "promptEnrichment")]
    pub prompt_enrichment: Option<RouteTableRoutesOptionsAiPromptEnrichment>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "promptGuard")]
    pub prompt_guard: Option<RouteTableRoutesOptionsAiPromptGuard>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rag: Option<RouteTableRoutesOptionsAiRag>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeType")]
    pub route_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "semanticCache")]
    pub semantic_cache: Option<RouteTableRoutesOptionsAiSemanticCache>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiDefaults {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    pub r#override: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<serde_json::Value>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiPromptEnrichment {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<Vec<RouteTableRoutesOptionsAiPromptEnrichmentAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prepend: Option<Vec<RouteTableRoutesOptionsAiPromptEnrichmentPrepend>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiPromptEnrichmentAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiPromptEnrichmentPrepend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiPromptGuard {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<RouteTableRoutesOptionsAiPromptGuardRequest>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<RouteTableRoutesOptionsAiPromptGuardResponse>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiPromptGuardRequest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customResponse")]
    pub custom_response: Option<RouteTableRoutesOptionsAiPromptGuardRequestCustomResponse>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub moderation: Option<RouteTableRoutesOptionsAiPromptGuardRequestModeration>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<RouteTableRoutesOptionsAiPromptGuardRequestRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<RouteTableRoutesOptionsAiPromptGuardRequestWebhook>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiPromptGuardRequestCustomResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusCode")]
    pub status_code: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiPromptGuardRequestModeration {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openai: Option<RouteTableRoutesOptionsAiPromptGuardRequestModerationOpenai>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiPromptGuardRequestModerationOpenai {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<RouteTableRoutesOptionsAiPromptGuardRequestModerationOpenaiAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiPromptGuardRequestModerationOpenaiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesOptionsAiPromptGuardRequestModerationOpenaiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<RouteTableRoutesOptionsAiPromptGuardRequestModerationOpenaiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiPromptGuardRequestModerationOpenaiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiPromptGuardRequestModerationOpenaiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiPromptGuardRequestRegex {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub builtins: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matches: Option<Vec<RouteTableRoutesOptionsAiPromptGuardRequestRegexMatches>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiPromptGuardRequestRegexMatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiPromptGuardRequestWebhook {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardHeaders")]
    pub forward_headers: Option<Vec<RouteTableRoutesOptionsAiPromptGuardRequestWebhookForwardHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiPromptGuardRequestWebhookForwardHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchType")]
    pub match_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiPromptGuardResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<RouteTableRoutesOptionsAiPromptGuardResponseRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<RouteTableRoutesOptionsAiPromptGuardResponseWebhook>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiPromptGuardResponseRegex {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub builtins: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matches: Option<Vec<RouteTableRoutesOptionsAiPromptGuardResponseRegexMatches>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiPromptGuardResponseRegexMatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiPromptGuardResponseWebhook {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardHeaders")]
    pub forward_headers: Option<Vec<RouteTableRoutesOptionsAiPromptGuardResponseWebhookForwardHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiPromptGuardResponseWebhookForwardHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchType")]
    pub match_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiRag {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub datastore: Option<RouteTableRoutesOptionsAiRagDatastore>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub embedding: Option<RouteTableRoutesOptionsAiRagEmbedding>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "promptTemplate")]
    pub prompt_template: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiRagDatastore {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub postgres: Option<RouteTableRoutesOptionsAiRagDatastorePostgres>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiRagDatastorePostgres {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectionName")]
    pub collection_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionString")]
    pub connection_string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiRagEmbedding {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureOpenai")]
    pub azure_openai: Option<RouteTableRoutesOptionsAiRagEmbeddingAzureOpenai>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openai: Option<RouteTableRoutesOptionsAiRagEmbeddingOpenai>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiRagEmbeddingAzureOpenai {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<RouteTableRoutesOptionsAiRagEmbeddingAzureOpenaiAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentName")]
    pub deployment_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiRagEmbeddingAzureOpenaiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesOptionsAiRagEmbeddingAzureOpenaiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<RouteTableRoutesOptionsAiRagEmbeddingAzureOpenaiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiRagEmbeddingAzureOpenaiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiRagEmbeddingAzureOpenaiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiRagEmbeddingOpenai {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<RouteTableRoutesOptionsAiRagEmbeddingOpenaiAuthToken>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiRagEmbeddingOpenaiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesOptionsAiRagEmbeddingOpenaiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<RouteTableRoutesOptionsAiRagEmbeddingOpenaiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiRagEmbeddingOpenaiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiRagEmbeddingOpenaiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiSemanticCache {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub datastore: Option<RouteTableRoutesOptionsAiSemanticCacheDatastore>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distanceThreshold")]
    pub distance_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub embedding: Option<RouteTableRoutesOptionsAiSemanticCacheEmbedding>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiSemanticCacheDatastore {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redis: Option<RouteTableRoutesOptionsAiSemanticCacheDatastoreRedis>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weaviate: Option<RouteTableRoutesOptionsAiSemanticCacheDatastoreWeaviate>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiSemanticCacheDatastoreRedis {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionString")]
    pub connection_string: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scoreThreshold")]
    pub score_threshold: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiSemanticCacheDatastoreWeaviate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcPort")]
    pub grpc_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpPort")]
    pub http_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiSemanticCacheEmbedding {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureOpenai")]
    pub azure_openai: Option<RouteTableRoutesOptionsAiSemanticCacheEmbeddingAzureOpenai>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openai: Option<RouteTableRoutesOptionsAiSemanticCacheEmbeddingOpenai>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiSemanticCacheEmbeddingAzureOpenai {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<RouteTableRoutesOptionsAiSemanticCacheEmbeddingAzureOpenaiAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentName")]
    pub deployment_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiSemanticCacheEmbeddingAzureOpenaiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesOptionsAiSemanticCacheEmbeddingAzureOpenaiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<RouteTableRoutesOptionsAiSemanticCacheEmbeddingAzureOpenaiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiSemanticCacheEmbeddingAzureOpenaiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiSemanticCacheEmbeddingAzureOpenaiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiSemanticCacheEmbeddingOpenai {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<RouteTableRoutesOptionsAiSemanticCacheEmbeddingOpenaiAuthToken>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiSemanticCacheEmbeddingOpenaiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesOptionsAiSemanticCacheEmbeddingOpenaiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<RouteTableRoutesOptionsAiSemanticCacheEmbeddingOpenaiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiSemanticCacheEmbeddingOpenaiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsAiSemanticCacheEmbeddingOpenaiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsBufferPerRoute {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<RouteTableRoutesOptionsBufferPerRouteBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsBufferPerRouteBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsCors {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowCredentials")]
    pub allow_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowHeaders")]
    pub allow_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowMethods")]
    pub allow_methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowOrigin")]
    pub allow_origin: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowOriginRegex")]
    pub allow_origin_regex: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableForRoute")]
    pub disable_for_route: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exposeHeaders")]
    pub expose_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAge")]
    pub max_age: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsCsrf {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalOrigins")]
    pub additional_origins: Option<Vec<RouteTableRoutesOptionsCsrfAdditionalOrigins>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterEnabled")]
    pub filter_enabled: Option<RouteTableRoutesOptionsCsrfFilterEnabled>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowEnabled")]
    pub shadow_enabled: Option<RouteTableRoutesOptionsCsrfShadowEnabled>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsCsrfAdditionalOrigins {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<RouteTableRoutesOptionsCsrfAdditionalOriginsSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsCsrfAdditionalOriginsSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<RouteTableRoutesOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsCsrfFilterEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<RouteTableRoutesOptionsCsrfFilterEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsCsrfFilterEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsCsrfShadowEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<RouteTableRoutesOptionsCsrfShadowEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsCsrfShadowEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsDlp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<RouteTableRoutesOptionsDlpActions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enabledFor")]
    pub enabled_for: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsDlpActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionType")]
    pub action_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAction")]
    pub custom_action: Option<RouteTableRoutesOptionsDlpActionsCustomAction>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyValueAction")]
    pub key_value_action: Option<RouteTableRoutesOptionsDlpActionsKeyValueAction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shadow: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsDlpActionsCustomAction {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maskChar")]
    pub mask_char: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<RouteTableRoutesOptionsDlpActionsCustomActionPercent>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexActions")]
    pub regex_actions: Option<Vec<RouteTableRoutesOptionsDlpActionsCustomActionRegexActions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsDlpActionsCustomActionPercent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsDlpActionsCustomActionRegexActions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsDlpActionsKeyValueAction {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyToMask")]
    pub key_to_mask: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maskChar")]
    pub mask_char: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<RouteTableRoutesOptionsDlpActionsKeyValueActionPercent>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsDlpActionsKeyValueActionPercent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsExtProc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overrides: Option<RouteTableRoutesOptionsExtProcOverrides>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsExtProcOverrides {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncMode")]
    pub async_mode: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<RouteTableRoutesOptionsExtProcOverridesGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataContextNamespaces")]
    pub metadata_context_namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingMode")]
    pub processing_mode: Option<RouteTableRoutesOptionsExtProcOverridesProcessingMode>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestAttributes")]
    pub request_attributes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseAttributes")]
    pub response_attributes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "typedMetadataContextNamespaces")]
    pub typed_metadata_context_namespaces: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsExtProcOverridesGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extProcServerRef")]
    pub ext_proc_server_ref: Option<RouteTableRoutesOptionsExtProcOverridesGrpcServiceExtProcServerRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialMetadata")]
    pub initial_metadata: Option<Vec<RouteTableRoutesOptionsExtProcOverridesGrpcServiceInitialMetadata>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryPolicy")]
    pub retry_policy: Option<RouteTableRoutesOptionsExtProcOverridesGrpcServiceRetryPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsExtProcOverridesGrpcServiceExtProcServerRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsExtProcOverridesGrpcServiceInitialMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsExtProcOverridesGrpcServiceRetryPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numRetries")]
    pub num_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryBackOff")]
    pub retry_back_off: Option<RouteTableRoutesOptionsExtProcOverridesGrpcServiceRetryPolicyRetryBackOff>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsExtProcOverridesGrpcServiceRetryPolicyRetryBackOff {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseInterval")]
    pub base_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInterval")]
    pub max_interval: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsExtProcOverridesProcessingMode {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestBodyMode")]
    pub request_body_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaderMode")]
    pub request_header_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTrailerMode")]
    pub request_trailer_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseBodyMode")]
    pub response_body_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeaderMode")]
    pub response_header_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTrailerMode")]
    pub response_trailer_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsExtauth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<RouteTableRoutesOptionsExtauthConfigRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAuth")]
    pub custom_auth: Option<RouteTableRoutesOptionsExtauthCustomAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsExtauthConfigRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsExtauthCustomAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contextExtensions")]
    pub context_extensions: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsExtensions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsFaults {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub abort: Option<RouteTableRoutesOptionsFaultsAbort>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delay: Option<RouteTableRoutesOptionsFaultsDelay>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsFaultsAbort {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpStatus")]
    pub http_status: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percentage: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsFaultsDelay {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fixedDelay")]
    pub fixed_delay: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percentage: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsHeaderManipulation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToAdd")]
    pub request_headers_to_add: Option<Vec<RouteTableRoutesOptionsHeaderManipulationRequestHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToRemove")]
    pub request_headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersToAdd")]
    pub response_headers_to_add: Option<Vec<RouteTableRoutesOptionsHeaderManipulationResponseHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersToRemove")]
    pub response_headers_to_remove: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsHeaderManipulationRequestHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<RouteTableRoutesOptionsHeaderManipulationRequestHeadersToAddHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerSecretRef")]
    pub header_secret_ref: Option<RouteTableRoutesOptionsHeaderManipulationRequestHeadersToAddHeaderSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsHeaderManipulationRequestHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsHeaderManipulationRequestHeadersToAddHeaderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsHeaderManipulationResponseHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<RouteTableRoutesOptionsHeaderManipulationResponseHeadersToAddHeader>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsHeaderManipulationResponseHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsHostRewritePathRegex {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<RouteTableRoutesOptionsHostRewritePathRegexPattern>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub substitution: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsHostRewritePathRegexPattern {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<RouteTableRoutesOptionsHostRewritePathRegexPatternGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsHostRewritePathRegexPatternGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwt {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStaged {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "afterExtAuth")]
    pub after_ext_auth: Option<RouteTableRoutesOptionsJwtProvidersStagedAfterExtAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "beforeExtAuth")]
    pub before_ext_auth: Option<RouteTableRoutesOptionsJwtProvidersStagedBeforeExtAuth>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStagedAfterExtAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowMissingOrFailedJwt")]
    pub allow_missing_or_failed_jwt: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub providers: Option<BTreeMap<String, RouteTableRoutesOptionsJwtProvidersStagedAfterExtAuthProviders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationPolicy")]
    pub validation_policy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStagedAfterExtAuthProviders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachFailedStatusToMetadata")]
    pub attach_failed_status_to_metadata: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimsToHeaders")]
    pub claims_to_headers: Option<Vec<RouteTableRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersClaimsToHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clockSkewSeconds")]
    pub clock_skew_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jwks: Option<RouteTableRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersJwks>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepToken")]
    pub keep_token: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenSource")]
    pub token_source: Option<RouteTableRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersTokenSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersClaimsToHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claim: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersJwks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub local: Option<RouteTableRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersJwksLocal>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<RouteTableRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersJwksRemote>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersJwksLocal {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersJwksRemote {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncFetch")]
    pub async_fetch: Option<RouteTableRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersJwksRemoteAsyncFetch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheDuration")]
    pub cache_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamRef")]
    pub upstream_ref: Option<RouteTableRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersJwksRemoteUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersJwksRemoteAsyncFetch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fastListener")]
    pub fast_listener: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersJwksRemoteUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersTokenSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteTableRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersTokenSourceHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParams")]
    pub query_params: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStagedAfterExtAuthProvidersTokenSourceHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStagedBeforeExtAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowMissingOrFailedJwt")]
    pub allow_missing_or_failed_jwt: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub providers: Option<BTreeMap<String, RouteTableRoutesOptionsJwtProvidersStagedBeforeExtAuthProviders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationPolicy")]
    pub validation_policy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStagedBeforeExtAuthProviders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachFailedStatusToMetadata")]
    pub attach_failed_status_to_metadata: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimsToHeaders")]
    pub claims_to_headers: Option<Vec<RouteTableRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersClaimsToHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clockSkewSeconds")]
    pub clock_skew_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jwks: Option<RouteTableRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersJwks>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepToken")]
    pub keep_token: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenSource")]
    pub token_source: Option<RouteTableRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersTokenSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersClaimsToHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claim: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersJwks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub local: Option<RouteTableRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksLocal>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<RouteTableRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksRemote>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksLocal {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksRemote {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncFetch")]
    pub async_fetch: Option<RouteTableRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksRemoteAsyncFetch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheDuration")]
    pub cache_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamRef")]
    pub upstream_ref: Option<RouteTableRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksRemoteUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksRemoteAsyncFetch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fastListener")]
    pub fast_listener: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksRemoteUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersTokenSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteTableRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersTokenSourceHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParams")]
    pub query_params: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtProvidersStagedBeforeExtAuthProvidersTokenSourceHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtStaged {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "afterExtAuth")]
    pub after_ext_auth: Option<RouteTableRoutesOptionsJwtStagedAfterExtAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "beforeExtAuth")]
    pub before_ext_auth: Option<RouteTableRoutesOptionsJwtStagedBeforeExtAuth>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtStagedAfterExtAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsJwtStagedBeforeExtAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsLbHash {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hashPolicies")]
    pub hash_policies: Option<Vec<RouteTableRoutesOptionsLbHashHashPolicies>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsLbHashHashPolicies {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cookie: Option<RouteTableRoutesOptionsLbHashHashPoliciesCookie>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceIp")]
    pub source_ip: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub terminal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsLbHashHashPoliciesCookie {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsMaxStreamDuration {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcTimeoutHeaderMax")]
    pub grpc_timeout_header_max: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcTimeoutHeaderOffset")]
    pub grpc_timeout_header_offset: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxStreamDuration")]
    pub max_stream_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRateLimitConfigs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub refs: Option<Vec<RouteTableRoutesOptionsRateLimitConfigsRefs>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRateLimitConfigsRefs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRateLimitEarlyConfigs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub refs: Option<Vec<RouteTableRoutesOptionsRateLimitEarlyConfigsRefs>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRateLimitEarlyConfigsRefs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRateLimitRegularConfigs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub refs: Option<Vec<RouteTableRoutesOptionsRateLimitRegularConfigsRefs>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRateLimitRegularConfigsRefs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeVhRateLimits")]
    pub include_vh_rate_limits: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRatelimit")]
    pub local_ratelimit: Option<RouteTableRoutesOptionsRatelimitLocalRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimits")]
    pub rate_limits: Option<Vec<RouteTableRoutesOptionsRatelimitRateLimits>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitLocalRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillInterval")]
    pub fill_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokens")]
    pub max_tokens: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokensPerFill")]
    pub tokens_per_fill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimits {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<RouteTableRoutesOptionsRatelimitRateLimitsActions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<RouteTableRoutesOptionsRatelimitRateLimitsLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setActions")]
    pub set_actions: Option<Vec<RouteTableRoutesOptionsRatelimitRateLimitsSetActions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<RouteTableRoutesOptionsRatelimitRateLimitsActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<RouteTableRoutesOptionsRatelimitRateLimitsActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<RouteTableRoutesOptionsRatelimitRateLimitsActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<RouteTableRoutesOptionsRatelimitRateLimitsActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<RouteTableRoutesOptionsRatelimitRateLimitsActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<RouteTableRoutesOptionsRatelimitRateLimitsActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<RouteTableRoutesOptionsRatelimitRateLimitsActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteTableRoutesOptionsRatelimitRateLimitsActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<RouteTableRoutesOptionsRatelimitRateLimitsActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<RouteTableRoutesOptionsRatelimitRateLimitsActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<RouteTableRoutesOptionsRatelimitRateLimitsActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadata")]
    pub dynamic_metadata: Option<RouteTableRoutesOptionsRatelimitRateLimitsLimitDynamicMetadata>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsLimitDynamicMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<RouteTableRoutesOptionsRatelimitRateLimitsLimitDynamicMetadataMetadataKey>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsLimitDynamicMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<RouteTableRoutesOptionsRatelimitRateLimitsLimitDynamicMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsLimitDynamicMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsSetActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<RouteTableRoutesOptionsRatelimitRateLimitsSetActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<RouteTableRoutesOptionsRatelimitRateLimitsSetActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<RouteTableRoutesOptionsRatelimitRateLimitsSetActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<RouteTableRoutesOptionsRatelimitRateLimitsSetActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<RouteTableRoutesOptionsRatelimitRateLimitsSetActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<RouteTableRoutesOptionsRatelimitRateLimitsSetActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<RouteTableRoutesOptionsRatelimitRateLimitsSetActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsSetActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsSetActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsSetActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteTableRoutesOptionsRatelimitRateLimitsSetActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsSetActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<RouteTableRoutesOptionsRatelimitRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsSetActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<RouteTableRoutesOptionsRatelimitRateLimitsSetActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsSetActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<RouteTableRoutesOptionsRatelimitRateLimitsSetActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsSetActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsSetActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsSetActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRateLimitsSetActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitBasic {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "anonymousLimits")]
    pub anonymous_limits: Option<RouteTableRoutesOptionsRatelimitBasicAnonymousLimits>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedLimits")]
    pub authorized_limits: Option<RouteTableRoutesOptionsRatelimitBasicAuthorizedLimits>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitBasicAnonymousLimits {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestsPerUnit")]
    pub requests_per_unit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitBasicAuthorizedLimits {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestsPerUnit")]
    pub requests_per_unit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarly {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeVhRateLimits")]
    pub include_vh_rate_limits: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRatelimit")]
    pub local_ratelimit: Option<RouteTableRoutesOptionsRatelimitEarlyLocalRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimits")]
    pub rate_limits: Option<Vec<RouteTableRoutesOptionsRatelimitEarlyRateLimits>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyLocalRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillInterval")]
    pub fill_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokens")]
    pub max_tokens: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokensPerFill")]
    pub tokens_per_fill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimits {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<RouteTableRoutesOptionsRatelimitEarlyRateLimitsActions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setActions")]
    pub set_actions: Option<Vec<RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadata")]
    pub dynamic_metadata: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsLimitDynamicMetadata>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsLimitDynamicMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsLimitDynamicMetadataMetadataKey>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsLimitDynamicMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<RouteTableRoutesOptionsRatelimitEarlyRateLimitsLimitDynamicMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsLimitDynamicMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitEarlyRateLimitsSetActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegular {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeVhRateLimits")]
    pub include_vh_rate_limits: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRatelimit")]
    pub local_ratelimit: Option<RouteTableRoutesOptionsRatelimitRegularLocalRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimits")]
    pub rate_limits: Option<Vec<RouteTableRoutesOptionsRatelimitRegularRateLimits>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularLocalRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillInterval")]
    pub fill_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokens")]
    pub max_tokens: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokensPerFill")]
    pub tokens_per_fill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimits {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<RouteTableRoutesOptionsRatelimitRegularRateLimitsActions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setActions")]
    pub set_actions: Option<Vec<RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadata")]
    pub dynamic_metadata: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsLimitDynamicMetadata>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsLimitDynamicMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsLimitDynamicMetadataMetadataKey>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsLimitDynamicMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<RouteTableRoutesOptionsRatelimitRegularRateLimitsLimitDynamicMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsLimitDynamicMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRatelimitRegularRateLimitsSetActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRbac {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policies: Option<BTreeMap<String, RouteTableRoutesOptionsRbacPolicies>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRbacPolicies {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nestedClaimDelimiter")]
    pub nested_claim_delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<RouteTableRoutesOptionsRbacPoliciesPermissions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub principals: Option<Vec<RouteTableRoutesOptionsRbacPoliciesPrincipals>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRbacPoliciesPermissions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathPrefix")]
    pub path_prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRbacPoliciesPrincipals {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwtPrincipal")]
    pub jwt_principal: Option<RouteTableRoutesOptionsRbacPoliciesPrincipalsJwtPrincipal>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRbacPoliciesPrincipalsJwtPrincipal {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRegexRewrite {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<RouteTableRoutesOptionsRegexRewritePattern>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub substitution: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRegexRewritePattern {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<RouteTableRoutesOptionsRegexRewritePatternGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRegexRewritePatternGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRetries {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numRetries")]
    pub num_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "perTryTimeout")]
    pub per_try_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "previousPriorities")]
    pub previous_priorities: Option<RouteTableRoutesOptionsRetriesPreviousPriorities>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitedRetryBackOff")]
    pub rate_limited_retry_back_off: Option<RouteTableRoutesOptionsRetriesRateLimitedRetryBackOff>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retriableStatusCodes")]
    pub retriable_status_codes: Option<Vec<i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryBackOff")]
    pub retry_back_off: Option<RouteTableRoutesOptionsRetriesRetryBackOff>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryOn")]
    pub retry_on: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRetriesPreviousPriorities {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateFrequency")]
    pub update_frequency: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRetriesRateLimitedRetryBackOff {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInterval")]
    pub max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resetHeaders")]
    pub reset_headers: Option<Vec<RouteTableRoutesOptionsRetriesRateLimitedRetryBackOffResetHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRetriesRateLimitedRetryBackOffResetHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsRetriesRetryBackOff {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseInterval")]
    pub base_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInterval")]
    pub max_interval: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsShadowing {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percentage: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upstream: Option<RouteTableRoutesOptionsShadowingUpstream>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsShadowingUpstream {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub early: Option<RouteTableRoutesOptionsStagedTransformationsEarly>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inheritTransformation")]
    pub inherit_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postRouting")]
    pub post_routing: Option<RouteTableRoutesOptionsStagedTransformationsPostRouting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regular: Option<RouteTableRoutesOptionsStagedTransformationsRegular>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarly {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRouting {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegular {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<RouteTableRoutesOptionsStagedTransformationsRegularResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsStagedTransformationsRegularResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTracing {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub propagate: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeDescriptor")]
    pub route_descriptor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tracePercentages")]
    pub trace_percentages: Option<RouteTableRoutesOptionsTracingTracePercentages>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTracingTracePercentages {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSamplePercentage")]
    pub client_sample_percentage: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overallSamplePercentage")]
    pub overall_sample_percentage: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "randomSamplePercentage")]
    pub random_sample_percentage: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<RouteTableRoutesOptionsTransformationsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteTableRoutesOptionsTransformationsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesOptionsTransformationsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesOptionsTransformationsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesOptionsTransformationsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesOptionsTransformationsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsTransformationsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsUpgrades {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connect: Option<RouteTableRoutesOptionsUpgradesConnect>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub websocket: Option<RouteTableRoutesOptionsUpgradesWebsocket>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsUpgradesConnect {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsUpgradesWebsocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsWaf {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "auditLogging")]
    pub audit_logging: Option<RouteTableRoutesOptionsWafAuditLogging>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRuleSets")]
    pub config_map_rule_sets: Option<Vec<RouteTableRoutesOptionsWafConfigMapRuleSets>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreRuleSet")]
    pub core_rule_set: Option<RouteTableRoutesOptionsWafCoreRuleSet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customInterventionMessage")]
    pub custom_intervention_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersOnly")]
    pub request_headers_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersOnly")]
    pub response_headers_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleSets")]
    pub rule_sets: Option<Vec<RouteTableRoutesOptionsWafRuleSets>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsWafAuditLogging {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsWafConfigMapRuleSets {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<RouteTableRoutesOptionsWafConfigMapRuleSetsConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataMapKeys")]
    pub data_map_keys: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsWafConfigMapRuleSetsConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsWafCoreRuleSet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSettingsFile")]
    pub custom_settings_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSettingsString")]
    pub custom_settings_string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsWafRuleSets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleStr")]
    pub rule_str: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsConfigRefs {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delegateOptions")]
    pub delegate_options: Option<Vec<RouteTableRoutesOptionsConfigRefsDelegateOptions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesOptionsConfigRefsDelegateOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRedirectAction {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostRedirect")]
    pub host_redirect: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpsRedirect")]
    pub https_redirect: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathRedirect")]
    pub path_redirect: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portRedirect")]
    pub port_redirect: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixRewrite")]
    pub prefix_rewrite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexRewrite")]
    pub regex_rewrite: Option<RouteTableRoutesRedirectActionRegexRewrite>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCode")]
    pub response_code: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stripQuery")]
    pub strip_query: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRedirectActionRegexRewrite {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<RouteTableRoutesRedirectActionRegexRewritePattern>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub substitution: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRedirectActionRegexRewritePattern {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<RouteTableRoutesRedirectActionRegexRewritePatternGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRedirectActionRegexRewritePatternGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteAction {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterHeader")]
    pub cluster_header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicForwardProxy")]
    pub dynamic_forward_proxy: Option<RouteTableRoutesRouteActionDynamicForwardProxy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multi: Option<RouteTableRoutesRouteActionMulti>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub single: Option<RouteTableRoutesRouteActionSingle>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamGroup")]
    pub upstream_group: Option<RouteTableRoutesRouteActionUpstreamGroup>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionDynamicForwardProxy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoHostRewriteHeader")]
    pub auto_host_rewrite_header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostRewrite")]
    pub host_rewrite: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMulti {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destinations: Option<Vec<RouteTableRoutesRouteActionMultiDestinations>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<RouteTableRoutesRouteActionMultiDestinationsDestination>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<RouteTableRoutesRouteActionMultiDestinationsOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub consul: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationConsul>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationSpec")]
    pub destination_spec: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpec>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kube: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationKube>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subset: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationSubset>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upstream: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationUpstream>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationConsul {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCenters")]
    pub data_centers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecAws>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecAzure>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rest: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRest>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecAws {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invocationStyle")]
    pub invocation_style: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logicalName")]
    pub logical_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsAlb")]
    pub unwrap_as_alb: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsApiGateway")]
    pub unwrap_as_api_gateway: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wrapAsApiGateway")]
    pub wrap_as_api_gateway: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecAzure {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionName")]
    pub function_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub function: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub package: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecGrpcParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecGrpcParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionName")]
    pub function_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationDestinationSpecRestResponseTransformationSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationKube {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<RouteTableRoutesRouteActionMultiDestinationsDestinationKubeRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationKubeRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationSubset {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsDestinationUpstream {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferPerRoute")]
    pub buffer_per_route: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsBufferPerRoute>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csrf: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsCsrf>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extauth: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsExtauth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extensions: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsExtensions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerManipulation")]
    pub header_manipulation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsHeaderManipulation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stagedTransformations")]
    pub staged_transformations: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformations>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transformations: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformations>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsBufferPerRoute {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsBufferPerRouteBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsBufferPerRouteBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsCsrf {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalOrigins")]
    pub additional_origins: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsCsrfAdditionalOrigins>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterEnabled")]
    pub filter_enabled: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsCsrfFilterEnabled>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowEnabled")]
    pub shadow_enabled: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsCsrfShadowEnabled>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsCsrfAdditionalOrigins {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsCsrfAdditionalOriginsSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsCsrfAdditionalOriginsSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsCsrfFilterEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsCsrfFilterEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsCsrfFilterEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsCsrfShadowEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsCsrfShadowEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsCsrfShadowEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsExtauth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsExtauthConfigRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAuth")]
    pub custom_auth: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsExtauthCustomAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsExtauthConfigRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsExtauthCustomAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contextExtensions")]
    pub context_extensions: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsExtensions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsHeaderManipulation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToAdd")]
    pub request_headers_to_add: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsHeaderManipulationRequestHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToRemove")]
    pub request_headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersToAdd")]
    pub response_headers_to_add: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsHeaderManipulationResponseHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersToRemove")]
    pub response_headers_to_remove: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsHeaderManipulationRequestHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsHeaderManipulationRequestHeadersToAddHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerSecretRef")]
    pub header_secret_ref: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsHeaderManipulationRequestHeadersToAddHeaderSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsHeaderManipulationRequestHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsHeaderManipulationRequestHeadersToAddHeaderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsHeaderManipulationResponseHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsHeaderManipulationResponseHeadersToAddHeader>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsHeaderManipulationResponseHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub early: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarly>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inheritTransformation")]
    pub inherit_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postRouting")]
    pub post_routing: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRouting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regular: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegular>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarly {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRouting {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegular {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionMultiDestinationsOptionsTransformationsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingle {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub consul: Option<RouteTableRoutesRouteActionSingleConsul>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationSpec")]
    pub destination_spec: Option<RouteTableRoutesRouteActionSingleDestinationSpec>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kube: Option<RouteTableRoutesRouteActionSingleKube>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subset: Option<RouteTableRoutesRouteActionSingleSubset>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upstream: Option<RouteTableRoutesRouteActionSingleUpstream>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleConsul {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCenters")]
    pub data_centers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<RouteTableRoutesRouteActionSingleDestinationSpecAws>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<RouteTableRoutesRouteActionSingleDestinationSpecAzure>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<RouteTableRoutesRouteActionSingleDestinationSpecGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rest: Option<RouteTableRoutesRouteActionSingleDestinationSpecRest>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecAws {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invocationStyle")]
    pub invocation_style: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logicalName")]
    pub logical_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsAlb")]
    pub unwrap_as_alb: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsApiGateway")]
    pub unwrap_as_api_gateway: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wrapAsApiGateway")]
    pub wrap_as_api_gateway: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecAzure {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionName")]
    pub function_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub function: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub package: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<RouteTableRoutesRouteActionSingleDestinationSpecGrpcParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecGrpcParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecRest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionName")]
    pub function_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<RouteTableRoutesRouteActionSingleDestinationSpecRestParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecRestParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleDestinationSpecRestResponseTransformationSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleKube {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<RouteTableRoutesRouteActionSingleKubeRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleKubeRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleSubset {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionSingleUpstream {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableRoutesRouteActionUpstreamGroup {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteTableStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, serde_json::Value>>,
}

