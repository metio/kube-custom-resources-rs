// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/solo-io/gloo/gateway.solo.io/v1/httpgateways.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "gateway.solo.io", version = "v1", kind = "MatchableHttpGateway", plural = "httpgateways")]
#[kube(namespaced)]
#[kube(status = "MatchableHttpGatewayStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct MatchableHttpGatewaySpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGateway")]
    pub http_gateway: Option<MatchableHttpGatewayHttpGateway>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<MatchableHttpGatewayMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespacedStatuses")]
    pub namespaced_statuses: Option<MatchableHttpGatewayNamespacedStatuses>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGateway {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<MatchableHttpGatewayHttpGatewayOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceExpressions")]
    pub virtual_service_expressions: Option<MatchableHttpGatewayHttpGatewayVirtualServiceExpressions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceNamespaces")]
    pub virtual_service_namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceSelector")]
    pub virtual_service_selector: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServices")]
    pub virtual_services: Option<Vec<MatchableHttpGatewayHttpGatewayVirtualServices>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<MatchableHttpGatewayHttpGatewayOptionsBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub caching: Option<MatchableHttpGatewayHttpGatewayOptionsCaching>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionLimit")]
    pub connection_limit: Option<MatchableHttpGatewayHttpGatewayOptionsConnectionLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csrf: Option<MatchableHttpGatewayHttpGatewayOptionsCsrf>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableExtProc")]
    pub disable_ext_proc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dlp: Option<MatchableHttpGatewayHttpGatewayOptionsDlp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicForwardProxy")]
    pub dynamic_forward_proxy: Option<MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extProc")]
    pub ext_proc: Option<MatchableHttpGatewayHttpGatewayOptionsExtProc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extauth: Option<MatchableHttpGatewayHttpGatewayOptionsExtauth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extensions: Option<MatchableHttpGatewayHttpGatewayOptionsExtensions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcJsonTranscoder")]
    pub grpc_json_transcoder: Option<MatchableHttpGatewayHttpGatewayOptionsGrpcJsonTranscoder>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcWeb")]
    pub grpc_web: Option<MatchableHttpGatewayHttpGatewayOptionsGrpcWeb>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gzip: Option<MatchableHttpGatewayHttpGatewayOptionsGzip>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValidationSettings")]
    pub header_validation_settings: Option<MatchableHttpGatewayHttpGatewayOptionsHeaderValidationSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheck")]
    pub health_check: Option<MatchableHttpGatewayHttpGatewayOptionsHealthCheck>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConnectionManagerSettings")]
    pub http_connection_manager_settings: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpLocalRatelimit")]
    pub http_local_ratelimit: Option<MatchableHttpGatewayHttpGatewayOptionsHttpLocalRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "leftmostXffAddress")]
    pub leftmost_xff_address: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkLocalRatelimit")]
    pub network_local_ratelimit: Option<MatchableHttpGatewayHttpGatewayOptionsNetworkLocalRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyLatency")]
    pub proxy_latency: Option<MatchableHttpGatewayHttpGatewayOptionsProxyLatency>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ratelimitServer")]
    pub ratelimit_server: Option<MatchableHttpGatewayHttpGatewayOptionsRatelimitServer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub router: Option<MatchableHttpGatewayHttpGatewayOptionsRouter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sanitizeClusterHeader")]
    pub sanitize_cluster_header: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statefulSession")]
    pub stateful_session: Option<MatchableHttpGatewayHttpGatewayOptionsStatefulSession>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tap: Option<MatchableHttpGatewayHttpGatewayOptionsTap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub waf: Option<MatchableHttpGatewayHttpGatewayOptionsWaf>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wasm: Option<MatchableHttpGatewayHttpGatewayOptionsWasm>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsCaching {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedVaryHeaders")]
    pub allowed_vary_headers: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsCachingAllowedVaryHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cachingServiceRef")]
    pub caching_service_ref: Option<MatchableHttpGatewayHttpGatewayOptionsCachingCachingServiceRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPayloadSize")]
    pub max_payload_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsCachingAllowedVaryHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<MatchableHttpGatewayHttpGatewayOptionsCachingAllowedVaryHeadersSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsCachingAllowedVaryHeadersSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<MatchableHttpGatewayHttpGatewayOptionsCachingAllowedVaryHeadersSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsCachingAllowedVaryHeadersSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsCachingCachingServiceRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsConnectionLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delayBeforeClose")]
    pub delay_before_close: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxActiveConnections")]
    pub max_active_connections: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsCsrf {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalOrigins")]
    pub additional_origins: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsCsrfAdditionalOrigins>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterEnabled")]
    pub filter_enabled: Option<MatchableHttpGatewayHttpGatewayOptionsCsrfFilterEnabled>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowEnabled")]
    pub shadow_enabled: Option<MatchableHttpGatewayHttpGatewayOptionsCsrfShadowEnabled>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsCsrfAdditionalOrigins {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<MatchableHttpGatewayHttpGatewayOptionsCsrfAdditionalOriginsSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsCsrfAdditionalOriginsSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<MatchableHttpGatewayHttpGatewayOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsCsrfFilterEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<MatchableHttpGatewayHttpGatewayOptionsCsrfFilterEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsCsrfFilterEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsCsrfShadowEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<MatchableHttpGatewayHttpGatewayOptionsCsrfShadowEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsCsrfShadowEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDlp {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dlpRules")]
    pub dlp_rules: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsDlpDlpRules>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enabledFor")]
    pub enabled_for: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDlpDlpRules {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsDlpDlpRulesActions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<MatchableHttpGatewayHttpGatewayOptionsDlpDlpRulesMatcher>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDlpDlpRulesActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionType")]
    pub action_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAction")]
    pub custom_action: Option<MatchableHttpGatewayHttpGatewayOptionsDlpDlpRulesActionsCustomAction>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyValueAction")]
    pub key_value_action: Option<MatchableHttpGatewayHttpGatewayOptionsDlpDlpRulesActionsKeyValueAction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shadow: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDlpDlpRulesActionsCustomAction {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maskChar")]
    pub mask_char: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<MatchableHttpGatewayHttpGatewayOptionsDlpDlpRulesActionsCustomActionPercent>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexActions")]
    pub regex_actions: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsDlpDlpRulesActionsCustomActionRegexActions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDlpDlpRulesActionsCustomActionPercent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDlpDlpRulesActionsCustomActionRegexActions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDlpDlpRulesActionsKeyValueAction {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyToMask")]
    pub key_to_mask: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maskChar")]
    pub mask_char: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<MatchableHttpGatewayHttpGatewayOptionsDlpDlpRulesActionsKeyValueActionPercent>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDlpDlpRulesActionsKeyValueActionPercent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDlpDlpRulesMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<MatchableHttpGatewayHttpGatewayOptionsDlpDlpRulesMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsDlpDlpRulesMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsDlpDlpRulesMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDlpDlpRulesMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDlpDlpRulesMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDlpDlpRulesMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "circuitBreakers")]
    pub circuit_breakers: Option<MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyCircuitBreakers>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsCacheConfig")]
    pub dns_cache_config: Option<MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "saveUpstreamAddress")]
    pub save_upstream_address: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslConfig")]
    pub ssl_config: Option<MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxySslConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyCircuitBreakers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    pub max_connections: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingRequests")]
    pub max_pending_requests: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequests")]
    pub max_requests: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    pub max_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trackRemaining")]
    pub track_remaining: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appleDns")]
    pub apple_dns: Option<MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigAppleDns>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caresDns")]
    pub cares_dns: Option<MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDns>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsCacheCircuitBreaker")]
    pub dns_cache_circuit_breaker: Option<MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigDnsCacheCircuitBreaker>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsFailureRefreshRate")]
    pub dns_failure_refresh_rate: Option<MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigDnsFailureRefreshRate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsLookupFamily")]
    pub dns_lookup_family: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsQueryTimeout")]
    pub dns_query_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsRefreshRate")]
    pub dns_refresh_rate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostTtl")]
    pub host_ttl: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxHosts")]
    pub max_hosts: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preresolveHostnames")]
    pub preresolve_hostnames: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigPreresolveHostnames>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigAppleDns {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDns {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsResolverOptions")]
    pub dns_resolver_options: Option<MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsDnsResolverOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolvers: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsResolvers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsDnsResolverOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDefaultSearchDomain")]
    pub no_default_search_domain: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTcpForDnsLookups")]
    pub use_tcp_for_dns_lookups: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsResolvers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pipe: Option<MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsResolversPipe>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "socketAddress")]
    pub socket_address: Option<MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsResolversSocketAddress>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsResolversPipe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsResolversSocketAddress {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4Compat")]
    pub ipv4_compat: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namedPort")]
    pub named_port: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portValue")]
    pub port_value: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resolverName")]
    pub resolver_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigDnsCacheCircuitBreaker {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingRequests")]
    pub max_pending_requests: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigDnsFailureRefreshRate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseInterval")]
    pub base_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInterval")]
    pub max_interval: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigPreresolveHostnames {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4Compat")]
    pub ipv4_compat: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namedPort")]
    pub named_port: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portValue")]
    pub port_value: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resolverName")]
    pub resolver_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxySslConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRenegotiation")]
    pub allow_renegotiation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnProtocols")]
    pub alpn_protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oneWayTls")]
    pub one_way_tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxySslConfigParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxySslConfigSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxySslConfigSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslFiles")]
    pub ssl_files: Option<MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxySslConfigSslFiles>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifySubjectAltName")]
    pub verify_subject_alt_name: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxySslConfigParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherSuites")]
    pub cipher_suites: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecdhCurves")]
    pub ecdh_curves: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxySslConfigSds {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callCredentials")]
    pub call_credentials: Option<MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxySslConfigSdsCallCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatesSecretName")]
    pub certificates_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationContextName")]
    pub validation_context_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxySslConfigSdsCallCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileCredentialSource")]
    pub file_credential_source: Option<MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxySslConfigSdsCallCredentialsFileCredentialSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxySslConfigSdsCallCredentialsFileCredentialSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenFileName")]
    pub token_file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxySslConfigSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsDynamicForwardProxySslConfigSslFiles {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaple")]
    pub ocsp_staple: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCa")]
    pub root_ca: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCert")]
    pub tls_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProc {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowModeOverride")]
    pub allow_mode_override: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncMode")]
    pub async_mode: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableClearRouteCache")]
    pub disable_clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureModeAllow")]
    pub failure_mode_allow: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterMetadata")]
    pub filter_metadata: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterStage")]
    pub filter_stage: Option<MatchableHttpGatewayHttpGatewayOptionsExtProcFilterStage>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardRules")]
    pub forward_rules: Option<MatchableHttpGatewayHttpGatewayOptionsExtProcForwardRules>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<MatchableHttpGatewayHttpGatewayOptionsExtProcGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxMessageTimeout")]
    pub max_message_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageTimeout")]
    pub message_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataContextNamespaces")]
    pub metadata_context_namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mutationRules")]
    pub mutation_rules: Option<MatchableHttpGatewayHttpGatewayOptionsExtProcMutationRules>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingMode")]
    pub processing_mode: Option<MatchableHttpGatewayHttpGatewayOptionsExtProcProcessingMode>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestAttributes")]
    pub request_attributes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseAttributes")]
    pub response_attributes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statPrefix")]
    pub stat_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "typedMetadataContextNamespaces")]
    pub typed_metadata_context_namespaces: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcFilterStage {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub predicate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stage: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcForwardRules {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedHeaders")]
    pub allowed_headers: Option<MatchableHttpGatewayHttpGatewayOptionsExtProcForwardRulesAllowedHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowedHeaders")]
    pub disallowed_headers: Option<MatchableHttpGatewayHttpGatewayOptionsExtProcForwardRulesDisallowedHeaders>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcForwardRulesAllowedHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patterns: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsExtProcForwardRulesAllowedHeadersPatterns>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcForwardRulesAllowedHeadersPatterns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<MatchableHttpGatewayHttpGatewayOptionsExtProcForwardRulesAllowedHeadersPatternsSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcForwardRulesAllowedHeadersPatternsSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<MatchableHttpGatewayHttpGatewayOptionsExtProcForwardRulesAllowedHeadersPatternsSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcForwardRulesAllowedHeadersPatternsSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcForwardRulesDisallowedHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patterns: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsExtProcForwardRulesDisallowedHeadersPatterns>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcForwardRulesDisallowedHeadersPatterns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<MatchableHttpGatewayHttpGatewayOptionsExtProcForwardRulesDisallowedHeadersPatternsSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcForwardRulesDisallowedHeadersPatternsSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<MatchableHttpGatewayHttpGatewayOptionsExtProcForwardRulesDisallowedHeadersPatternsSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcForwardRulesDisallowedHeadersPatternsSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extProcServerRef")]
    pub ext_proc_server_ref: Option<MatchableHttpGatewayHttpGatewayOptionsExtProcGrpcServiceExtProcServerRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialMetadata")]
    pub initial_metadata: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsExtProcGrpcServiceInitialMetadata>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryPolicy")]
    pub retry_policy: Option<MatchableHttpGatewayHttpGatewayOptionsExtProcGrpcServiceRetryPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcGrpcServiceExtProcServerRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcGrpcServiceInitialMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcGrpcServiceRetryPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numRetries")]
    pub num_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryBackOff")]
    pub retry_back_off: Option<MatchableHttpGatewayHttpGatewayOptionsExtProcGrpcServiceRetryPolicyRetryBackOff>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcGrpcServiceRetryPolicyRetryBackOff {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseInterval")]
    pub base_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInterval")]
    pub max_interval: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcMutationRules {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowAllRouting")]
    pub allow_all_routing: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEnvoy")]
    pub allow_envoy: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowExpression")]
    pub allow_expression: Option<MatchableHttpGatewayHttpGatewayOptionsExtProcMutationRulesAllowExpression>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowAll")]
    pub disallow_all: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowExpression")]
    pub disallow_expression: Option<MatchableHttpGatewayHttpGatewayOptionsExtProcMutationRulesDisallowExpression>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowIsError")]
    pub disallow_is_error: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowSystem")]
    pub disallow_system: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcMutationRulesAllowExpression {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<MatchableHttpGatewayHttpGatewayOptionsExtProcMutationRulesAllowExpressionGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcMutationRulesAllowExpressionGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcMutationRulesDisallowExpression {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<MatchableHttpGatewayHttpGatewayOptionsExtProcMutationRulesDisallowExpressionGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcMutationRulesDisallowExpressionGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtProcProcessingMode {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestBodyMode")]
    pub request_body_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaderMode")]
    pub request_header_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTrailerMode")]
    pub request_trailer_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseBodyMode")]
    pub response_body_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeaderMode")]
    pub response_header_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTrailerMode")]
    pub response_trailer_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtauth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extauthzServerRef")]
    pub extauthz_server_ref: Option<MatchableHttpGatewayHttpGatewayOptionsExtauthExtauthzServerRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureModeAllow")]
    pub failure_mode_allow: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<MatchableHttpGatewayHttpGatewayOptionsExtauthGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpService")]
    pub http_service: Option<MatchableHttpGatewayHttpGatewayOptionsExtauthHttpService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestBody")]
    pub request_body: Option<MatchableHttpGatewayHttpGatewayOptionsExtauthRequestBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTimeout")]
    pub request_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statPrefix")]
    pub stat_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusOnError")]
    pub status_on_error: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportApiVersion")]
    pub transport_api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userIdHeader")]
    pub user_id_header: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtauthExtauthzServerRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtauthGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtauthHttpService {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathPrefix")]
    pub path_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<MatchableHttpGatewayHttpGatewayOptionsExtauthHttpServiceRequest>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<MatchableHttpGatewayHttpGatewayOptionsExtauthHttpServiceResponse>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtauthHttpServiceRequest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedHeaders")]
    pub allowed_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedHeadersRegex")]
    pub allowed_headers_regex: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAdd")]
    pub headers_to_add: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtauthHttpServiceResponse {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedClientHeaders")]
    pub allowed_client_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedUpstreamHeaders")]
    pub allowed_upstream_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedUpstreamHeadersToAppend")]
    pub allowed_upstream_headers_to_append: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtauthRequestBody {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPartialMessage")]
    pub allow_partial_message: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packAsBytes")]
    pub pack_as_bytes: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsExtensions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsGrpcJsonTranscoder {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMapping")]
    pub auto_mapping: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "convertGrpcStatus")]
    pub convert_grpc_status: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreUnknownQueryParameters")]
    pub ignore_unknown_query_parameters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoredQueryParameters")]
    pub ignored_query_parameters: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchIncomingRequestRoute")]
    pub match_incoming_request_route: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "printOptions")]
    pub print_options: Option<MatchableHttpGatewayHttpGatewayOptionsGrpcJsonTranscoderPrintOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptor")]
    pub proto_descriptor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorBin")]
    pub proto_descriptor_bin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorConfigMap")]
    pub proto_descriptor_config_map: Option<MatchableHttpGatewayHttpGatewayOptionsGrpcJsonTranscoderProtoDescriptorConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsGrpcJsonTranscoderPrintOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addWhitespace")]
    pub add_whitespace: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintEnumsAsInts")]
    pub always_print_enums_as_ints: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintPrimitiveFields")]
    pub always_print_primitive_fields: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveProtoFieldNames")]
    pub preserve_proto_field_names: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsGrpcJsonTranscoderProtoDescriptorConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<MatchableHttpGatewayHttpGatewayOptionsGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsGrpcWeb {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsGzip {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionLevel")]
    pub compression_level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionStrategy")]
    pub compression_strategy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentLength")]
    pub content_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableOnEtagHeader")]
    pub disable_on_etag_header: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryLevel")]
    pub memory_level: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "removeAcceptEncodingHeader")]
    pub remove_accept_encoding_header: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowBits")]
    pub window_bits: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHeaderValidationSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableHttp1MethodValidation")]
    pub disable_http1_method_validation: Option<MatchableHttpGatewayHttpGatewayOptionsHeaderValidationSettingsDisableHttp1MethodValidation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHeaderValidationSettingsDisableHttp1MethodValidation {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHealthCheck {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceptHttp10")]
    pub accept_http10: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowChunkedLength")]
    pub allow_chunked_length: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appendXForwardedPort")]
    pub append_x_forwarded_port: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codecType")]
    pub codec_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultHostForHttp10")]
    pub default_host_for_http10: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delayedCloseTimeout")]
    pub delayed_close_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drainTimeout")]
    pub drain_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "earlyHeaderManipulation")]
    pub early_header_manipulation: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableTrailers")]
    pub enable_trailers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardClientCertDetails")]
    pub forward_client_cert_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generateRequestId")]
    pub generate_request_id: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersWithUnderscoresAction")]
    pub headers_with_underscores_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http2ProtocolOptions")]
    pub http2_protocol_options: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsHttp2ProtocolOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeout")]
    pub idle_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalAddressConfig")]
    pub internal_address_config: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsInternalAddressConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnectionDuration")]
    pub max_connection_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxHeadersCount")]
    pub max_headers_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestHeadersKb")]
    pub max_request_headers_kb: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestsPerConnection")]
    pub max_requests_per_connection: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxStreamDuration")]
    pub max_stream_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeSlashes")]
    pub merge_slashes: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "normalizePath")]
    pub normalize_path: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathWithEscapedSlashesAction")]
    pub path_with_escaped_slashes_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveCaseHeaderKeyFormat")]
    pub preserve_case_header_key_format: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveExternalRequestId")]
    pub preserve_external_request_id: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "properCaseHeaderKeyFormat")]
    pub proper_case_header_key_format: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxy100Continue")]
    pub proxy100_continue: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersTimeout")]
    pub request_headers_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTimeout")]
    pub request_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverHeaderTransformation")]
    pub server_header_transformation: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setCurrentClientCertDetails")]
    pub set_current_client_cert_details: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsSetCurrentClientCertDetails>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipXffAppend")]
    pub skip_xff_append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamIdleTimeout")]
    pub stream_idle_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stripAnyHostPort")]
    pub strip_any_host_port: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracing>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upgrades: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsUpgrades>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useRemoteAddress")]
    pub use_remote_address: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uuidRequestIdConfig")]
    pub uuid_request_id_config: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsUuidRequestIdConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub via: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xffNumTrustedHops")]
    pub xff_num_trusted_hops: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAdd")]
    pub headers_to_add: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAddHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerSecretRef")]
    pub header_secret_ref: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAddHeaderSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAddHeaderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsHttp2ProtocolOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialConnectionWindowSize")]
    pub initial_connection_window_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialStreamWindowSize")]
    pub initial_stream_window_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentStreams")]
    pub max_concurrent_streams: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideStreamErrorOnInvalidHttpMessage")]
    pub override_stream_error_on_invalid_http_message: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsInternalAddressConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrRanges")]
    pub cidr_ranges: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsInternalAddressConfigCidrRanges>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unixSockets")]
    pub unix_sockets: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsInternalAddressConfigCidrRanges {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addressPrefix")]
    pub address_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixLen")]
    pub prefix_len: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsSetCurrentClientCertDetails {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chain: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dns: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracing {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datadogConfig")]
    pub datadog_config: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingDatadogConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentVariablesForTags")]
    pub environment_variables_for_tags: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingEnvironmentVariablesForTags>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "literalsForTags")]
    pub literals_for_tags: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingLiteralsForTags>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataForTags")]
    pub metadata_for_tags: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingMetadataForTags>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openCensusConfig")]
    pub open_census_config: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openTelemetryConfig")]
    pub open_telemetry_config: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenTelemetryConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersForTags")]
    pub request_headers_for_tags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spawnUpstreamSpan")]
    pub spawn_upstream_span: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tracePercentages")]
    pub trace_percentages: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingTracePercentages>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verbose: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "zipkinConfig")]
    pub zipkin_config: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingZipkinConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingDatadogConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorHostname")]
    pub collector_hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorUpstreamRef")]
    pub collector_upstream_ref: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingDatadogConfigCollectorUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteConfig")]
    pub remote_config: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingDatadogConfigRemoteConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingDatadogConfigCollectorUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingDatadogConfigRemoteConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pollingInterval")]
    pub polling_interval: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingEnvironmentVariablesForTags {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingLiteralsForTags {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingMetadataForTags {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingMetadataForTagsValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingMetadataForTagsValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nestedFieldDelimiter")]
    pub nested_field_delimiter: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcAddress")]
    pub grpc_address: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigGrpcAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpAddress")]
    pub http_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "incomingTraceContext")]
    pub incoming_trace_context: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocagentExporterEnabled")]
    pub ocagent_exporter_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outgoingTraceContext")]
    pub outgoing_trace_context: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "traceConfig")]
    pub trace_config: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigGrpcAddress {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statPrefix")]
    pub stat_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "constantSampler")]
    pub constant_sampler: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigConstantSampler>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfAnnotations")]
    pub max_number_of_annotations: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfAttributes")]
    pub max_number_of_attributes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfLinks")]
    pub max_number_of_links: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfMessageEvents")]
    pub max_number_of_message_events: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "probabilitySampler")]
    pub probability_sampler: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigProbabilitySampler>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitingSampler")]
    pub rate_limiting_sampler: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigRateLimitingSampler>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigConstantSampler {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub decision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigProbabilitySampler {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "samplingProbability")]
    pub sampling_probability: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigRateLimitingSampler {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qps: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenTelemetryConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorUpstreamRef")]
    pub collector_upstream_ref: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenTelemetryConfigCollectorUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenTelemetryConfigGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCacheSize")]
    pub max_cache_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenTelemetryConfigCollectorUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenTelemetryConfigGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingTracePercentages {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSamplePercentage")]
    pub client_sample_percentage: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overallSamplePercentage")]
    pub overall_sample_percentage: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "randomSamplePercentage")]
    pub random_sample_percentage: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingZipkinConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorEndpoint")]
    pub collector_endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorEndpointVersion")]
    pub collector_endpoint_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorUpstreamRef")]
    pub collector_upstream_ref: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingZipkinConfigCollectorUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sharedSpanContext")]
    pub shared_span_context: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "traceId128bit")]
    pub trace_id128bit: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingZipkinConfigCollectorUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsUpgrades {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connect: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsUpgradesConnect>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub websocket: Option<MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsUpgradesWebsocket>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsUpgradesConnect {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsUpgradesWebsocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpConnectionManagerSettingsUuidRequestIdConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packTraceReason")]
    pub pack_trace_reason: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useRequestIdForTraceSampling")]
    pub use_request_id_for_trace_sampling: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpLocalRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultLimit")]
    pub default_limit: Option<MatchableHttpGatewayHttpGatewayOptionsHttpLocalRatelimitDefaultLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableXRatelimitHeaders")]
    pub enable_x_ratelimit_headers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRateLimitPerDownstreamConnection")]
    pub local_rate_limit_per_downstream_connection: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsHttpLocalRatelimitDefaultLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillInterval")]
    pub fill_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokens")]
    pub max_tokens: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokensPerFill")]
    pub tokens_per_fill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsNetworkLocalRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillInterval")]
    pub fill_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokens")]
    pub max_tokens: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokensPerFill")]
    pub tokens_per_fill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsProxyLatency {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chargeClusterStat")]
    pub charge_cluster_stat: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chargeListenerStat")]
    pub charge_listener_stat: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emitDynamicMetadata")]
    pub emit_dynamic_metadata: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "measureRequestInternally")]
    pub measure_request_internally: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsRatelimitServer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "denyOnFail")]
    pub deny_on_fail: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableXRatelimitHeaders")]
    pub enable_x_ratelimit_headers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<MatchableHttpGatewayHttpGatewayOptionsRatelimitServerGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitBeforeAuth")]
    pub rate_limit_before_auth: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ratelimitServerRef")]
    pub ratelimit_server_ref: Option<MatchableHttpGatewayHttpGatewayOptionsRatelimitServerRatelimitServerRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTimeout")]
    pub request_timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsRatelimitServerGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsRatelimitServerRatelimitServerRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsRouter {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicStats")]
    pub dynamic_stats: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suppressEnvoyHeaders")]
    pub suppress_envoy_headers: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsStatefulSession {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cookieBased")]
    pub cookie_based: Option<MatchableHttpGatewayHttpGatewayOptionsStatefulSessionCookieBased>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBased")]
    pub header_based: Option<MatchableHttpGatewayHttpGatewayOptionsStatefulSessionHeaderBased>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strict: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsStatefulSessionCookieBased {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cookie: Option<MatchableHttpGatewayHttpGatewayOptionsStatefulSessionCookieBasedCookie>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsStatefulSessionCookieBasedCookie {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsStatefulSessionHeaderBased {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsTap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBufferedRxBytes")]
    pub max_buffered_rx_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBufferedTxBytes")]
    pub max_buffered_tx_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordDownstreamConnection")]
    pub record_downstream_connection: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordHeadersReceivedTime")]
    pub record_headers_received_time: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sinks: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsTapSinks>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsTapSinks {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<MatchableHttpGatewayHttpGatewayOptionsTapSinksGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpService")]
    pub http_service: Option<MatchableHttpGatewayHttpGatewayOptionsTapSinksHttpService>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsTapSinksGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tapServer")]
    pub tap_server: Option<MatchableHttpGatewayHttpGatewayOptionsTapSinksGrpcServiceTapServer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsTapSinksGrpcServiceTapServer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsTapSinksHttpService {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tapServer")]
    pub tap_server: Option<MatchableHttpGatewayHttpGatewayOptionsTapSinksHttpServiceTapServer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsTapSinksHttpServiceTapServer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsWaf {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "auditLogging")]
    pub audit_logging: Option<MatchableHttpGatewayHttpGatewayOptionsWafAuditLogging>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRuleSets")]
    pub config_map_rule_sets: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsWafConfigMapRuleSets>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreRuleSet")]
    pub core_rule_set: Option<MatchableHttpGatewayHttpGatewayOptionsWafCoreRuleSet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customInterventionMessage")]
    pub custom_intervention_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersOnly")]
    pub request_headers_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersOnly")]
    pub response_headers_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleSets")]
    pub rule_sets: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsWafRuleSets>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsWafAuditLogging {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsWafConfigMapRuleSets {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<MatchableHttpGatewayHttpGatewayOptionsWafConfigMapRuleSetsConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataMapKeys")]
    pub data_map_keys: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsWafConfigMapRuleSetsConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsWafCoreRuleSet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSettingsFile")]
    pub custom_settings_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSettingsString")]
    pub custom_settings_string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsWafRuleSets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleStr")]
    pub rule_str: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsWasm {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<MatchableHttpGatewayHttpGatewayOptionsWasmFilters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsWasmFilters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failOpen")]
    pub fail_open: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filePath")]
    pub file_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterStage")]
    pub filter_stage: Option<MatchableHttpGatewayHttpGatewayOptionsWasmFiltersFilterStage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootId")]
    pub root_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmType")]
    pub vm_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayOptionsWasmFiltersFilterStage {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub predicate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stage: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayVirtualServiceExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expressions: Option<Vec<MatchableHttpGatewayHttpGatewayVirtualServiceExpressionsExpressions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayVirtualServiceExpressionsExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayHttpGatewayVirtualServices {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourcePrefixRanges")]
    pub source_prefix_ranges: Option<Vec<MatchableHttpGatewayMatcherSourcePrefixRanges>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslConfig")]
    pub ssl_config: Option<MatchableHttpGatewayMatcherSslConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayMatcherSourcePrefixRanges {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addressPrefix")]
    pub address_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixLen")]
    pub prefix_len: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayMatcherSslConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnProtocols")]
    pub alpn_protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableTlsSessionResumption")]
    pub disable_tls_session_resumption: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaplePolicy")]
    pub ocsp_staple_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oneWayTls")]
    pub one_way_tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<MatchableHttpGatewayMatcherSslConfigParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<MatchableHttpGatewayMatcherSslConfigSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<MatchableHttpGatewayMatcherSslConfigSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sniDomains")]
    pub sni_domains: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslFiles")]
    pub ssl_files: Option<MatchableHttpGatewayMatcherSslConfigSslFiles>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportSocketConnectTimeout")]
    pub transport_socket_connect_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifySubjectAltName")]
    pub verify_subject_alt_name: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayMatcherSslConfigParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherSuites")]
    pub cipher_suites: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecdhCurves")]
    pub ecdh_curves: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayMatcherSslConfigSds {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callCredentials")]
    pub call_credentials: Option<MatchableHttpGatewayMatcherSslConfigSdsCallCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatesSecretName")]
    pub certificates_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationContextName")]
    pub validation_context_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayMatcherSslConfigSdsCallCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileCredentialSource")]
    pub file_credential_source: Option<MatchableHttpGatewayMatcherSslConfigSdsCallCredentialsFileCredentialSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayMatcherSslConfigSdsCallCredentialsFileCredentialSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenFileName")]
    pub token_file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayMatcherSslConfigSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayMatcherSslConfigSslFiles {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaple")]
    pub ocsp_staple: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCa")]
    pub root_ca: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCert")]
    pub tls_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayNamespacedStatuses {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MatchableHttpGatewayStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, serde_json::Value>>,
}

