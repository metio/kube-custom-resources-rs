// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/solo-io/gloo/gateway.solo.io/v1/routeoptions.yaml
// kopium version: 0.22.3

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "gateway.solo.io", version = "v1", kind = "RouteOption", plural = "routeoptions")]
#[kube(namespaced)]
#[kube(status = "RouteOptionStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct RouteOptionSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespacedStatuses")]
    pub namespaced_statuses: Option<RouteOptionNamespacedStatuses>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<RouteOptionOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRefs")]
    pub target_refs: Option<Vec<RouteOptionTargetRefs>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionNamespacedStatuses {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ai: Option<RouteOptionOptionsAi>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appendXForwardedHost")]
    pub append_x_forwarded_host: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoHostRewrite")]
    pub auto_host_rewrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferPerRoute")]
    pub buffer_per_route: Option<RouteOptionOptionsBufferPerRoute>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cors: Option<RouteOptionOptionsCors>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csrf: Option<RouteOptionOptionsCsrf>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dlp: Option<RouteOptionOptionsDlp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envoyMetadata")]
    pub envoy_metadata: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extProc")]
    pub ext_proc: Option<RouteOptionOptionsExtProc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extauth: Option<RouteOptionOptionsExtauth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extensions: Option<RouteOptionOptionsExtensions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub faults: Option<RouteOptionOptionsFaults>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerManipulation")]
    pub header_manipulation: Option<RouteOptionOptionsHeaderManipulation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostRewrite")]
    pub host_rewrite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostRewriteHeader")]
    pub host_rewrite_header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostRewritePathRegex")]
    pub host_rewrite_path_regex: Option<RouteOptionOptionsHostRewritePathRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeout")]
    pub idle_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jwt: Option<RouteOptionOptionsJwt>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwtProvidersStaged")]
    pub jwt_providers_staged: Option<RouteOptionOptionsJwtProvidersStaged>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwtStaged")]
    pub jwt_staged: Option<RouteOptionOptionsJwtStaged>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lbHash")]
    pub lb_hash: Option<RouteOptionOptionsLbHash>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxStreamDuration")]
    pub max_stream_duration: Option<RouteOptionOptionsMaxStreamDuration>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixRewrite")]
    pub prefix_rewrite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitConfigs")]
    pub rate_limit_configs: Option<RouteOptionOptionsRateLimitConfigs>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitEarlyConfigs")]
    pub rate_limit_early_configs: Option<RouteOptionOptionsRateLimitEarlyConfigs>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitRegularConfigs")]
    pub rate_limit_regular_configs: Option<RouteOptionOptionsRateLimitRegularConfigs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ratelimit: Option<RouteOptionOptionsRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ratelimitBasic")]
    pub ratelimit_basic: Option<RouteOptionOptionsRatelimitBasic>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ratelimitEarly")]
    pub ratelimit_early: Option<RouteOptionOptionsRatelimitEarly>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ratelimitRegular")]
    pub ratelimit_regular: Option<RouteOptionOptionsRatelimitRegular>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rbac: Option<RouteOptionOptionsRbac>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexRewrite")]
    pub regex_rewrite: Option<RouteOptionOptionsRegexRewrite>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<RouteOptionOptionsRetries>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shadowing: Option<RouteOptionOptionsShadowing>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stagedTransformations")]
    pub staged_transformations: Option<RouteOptionOptionsStagedTransformations>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing: Option<RouteOptionOptionsTracing>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transformations: Option<RouteOptionOptionsTransformations>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upgrades: Option<Vec<RouteOptionOptionsUpgrades>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub waf: Option<RouteOptionOptionsWaf>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub defaults: Option<Vec<RouteOptionOptionsAiDefaults>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "promptEnrichment")]
    pub prompt_enrichment: Option<RouteOptionOptionsAiPromptEnrichment>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "promptGuard")]
    pub prompt_guard: Option<RouteOptionOptionsAiPromptGuard>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rag: Option<RouteOptionOptionsAiRag>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeType")]
    pub route_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "semanticCache")]
    pub semantic_cache: Option<RouteOptionOptionsAiSemanticCache>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiDefaults {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    pub r#override: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<serde_json::Value>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiPromptEnrichment {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<Vec<RouteOptionOptionsAiPromptEnrichmentAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prepend: Option<Vec<RouteOptionOptionsAiPromptEnrichmentPrepend>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiPromptEnrichmentAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiPromptEnrichmentPrepend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiPromptGuard {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<RouteOptionOptionsAiPromptGuardRequest>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<RouteOptionOptionsAiPromptGuardResponse>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiPromptGuardRequest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customResponse")]
    pub custom_response: Option<RouteOptionOptionsAiPromptGuardRequestCustomResponse>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub moderation: Option<RouteOptionOptionsAiPromptGuardRequestModeration>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<RouteOptionOptionsAiPromptGuardRequestRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<RouteOptionOptionsAiPromptGuardRequestWebhook>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiPromptGuardRequestCustomResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusCode")]
    pub status_code: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiPromptGuardRequestModeration {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openai: Option<RouteOptionOptionsAiPromptGuardRequestModerationOpenai>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiPromptGuardRequestModerationOpenai {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<RouteOptionOptionsAiPromptGuardRequestModerationOpenaiAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiPromptGuardRequestModerationOpenaiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteOptionOptionsAiPromptGuardRequestModerationOpenaiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<RouteOptionOptionsAiPromptGuardRequestModerationOpenaiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiPromptGuardRequestModerationOpenaiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiPromptGuardRequestModerationOpenaiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiPromptGuardRequestRegex {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub builtins: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matches: Option<Vec<RouteOptionOptionsAiPromptGuardRequestRegexMatches>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiPromptGuardRequestRegexMatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiPromptGuardRequestWebhook {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardHeaders")]
    pub forward_headers: Option<Vec<RouteOptionOptionsAiPromptGuardRequestWebhookForwardHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiPromptGuardRequestWebhookForwardHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchType")]
    pub match_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiPromptGuardResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<RouteOptionOptionsAiPromptGuardResponseRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook: Option<RouteOptionOptionsAiPromptGuardResponseWebhook>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiPromptGuardResponseRegex {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub builtins: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matches: Option<Vec<RouteOptionOptionsAiPromptGuardResponseRegexMatches>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiPromptGuardResponseRegexMatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiPromptGuardResponseWebhook {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardHeaders")]
    pub forward_headers: Option<Vec<RouteOptionOptionsAiPromptGuardResponseWebhookForwardHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiPromptGuardResponseWebhookForwardHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchType")]
    pub match_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiRag {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub datastore: Option<RouteOptionOptionsAiRagDatastore>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub embedding: Option<RouteOptionOptionsAiRagEmbedding>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "promptTemplate")]
    pub prompt_template: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiRagDatastore {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub postgres: Option<RouteOptionOptionsAiRagDatastorePostgres>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiRagDatastorePostgres {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectionName")]
    pub collection_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionString")]
    pub connection_string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiRagEmbedding {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureOpenai")]
    pub azure_openai: Option<RouteOptionOptionsAiRagEmbeddingAzureOpenai>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openai: Option<RouteOptionOptionsAiRagEmbeddingOpenai>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiRagEmbeddingAzureOpenai {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<RouteOptionOptionsAiRagEmbeddingAzureOpenaiAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentName")]
    pub deployment_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiRagEmbeddingAzureOpenaiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteOptionOptionsAiRagEmbeddingAzureOpenaiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<RouteOptionOptionsAiRagEmbeddingAzureOpenaiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiRagEmbeddingAzureOpenaiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiRagEmbeddingAzureOpenaiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiRagEmbeddingOpenai {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<RouteOptionOptionsAiRagEmbeddingOpenaiAuthToken>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiRagEmbeddingOpenaiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteOptionOptionsAiRagEmbeddingOpenaiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<RouteOptionOptionsAiRagEmbeddingOpenaiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiRagEmbeddingOpenaiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiRagEmbeddingOpenaiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiSemanticCache {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub datastore: Option<RouteOptionOptionsAiSemanticCacheDatastore>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distanceThreshold")]
    pub distance_threshold: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub embedding: Option<RouteOptionOptionsAiSemanticCacheEmbedding>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiSemanticCacheDatastore {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redis: Option<RouteOptionOptionsAiSemanticCacheDatastoreRedis>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weaviate: Option<RouteOptionOptionsAiSemanticCacheDatastoreWeaviate>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiSemanticCacheDatastoreRedis {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionString")]
    pub connection_string: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scoreThreshold")]
    pub score_threshold: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiSemanticCacheDatastoreWeaviate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcPort")]
    pub grpc_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpPort")]
    pub http_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiSemanticCacheEmbedding {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureOpenai")]
    pub azure_openai: Option<RouteOptionOptionsAiSemanticCacheEmbeddingAzureOpenai>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openai: Option<RouteOptionOptionsAiSemanticCacheEmbeddingOpenai>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiSemanticCacheEmbeddingAzureOpenai {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<RouteOptionOptionsAiSemanticCacheEmbeddingAzureOpenaiAuthToken>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentName")]
    pub deployment_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiSemanticCacheEmbeddingAzureOpenaiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteOptionOptionsAiSemanticCacheEmbeddingAzureOpenaiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<RouteOptionOptionsAiSemanticCacheEmbeddingAzureOpenaiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiSemanticCacheEmbeddingAzureOpenaiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiSemanticCacheEmbeddingAzureOpenaiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiSemanticCacheEmbeddingOpenai {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<RouteOptionOptionsAiSemanticCacheEmbeddingOpenaiAuthToken>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiSemanticCacheEmbeddingOpenaiAuthToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteOptionOptionsAiSemanticCacheEmbeddingOpenaiAuthTokenPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<RouteOptionOptionsAiSemanticCacheEmbeddingOpenaiAuthTokenSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiSemanticCacheEmbeddingOpenaiAuthTokenPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsAiSemanticCacheEmbeddingOpenaiAuthTokenSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsBufferPerRoute {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<RouteOptionOptionsBufferPerRouteBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsBufferPerRouteBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsCors {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowCredentials")]
    pub allow_credentials: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowHeaders")]
    pub allow_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowMethods")]
    pub allow_methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowOrigin")]
    pub allow_origin: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowOriginRegex")]
    pub allow_origin_regex: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableForRoute")]
    pub disable_for_route: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exposeHeaders")]
    pub expose_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAge")]
    pub max_age: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsCsrf {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalOrigins")]
    pub additional_origins: Option<Vec<RouteOptionOptionsCsrfAdditionalOrigins>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterEnabled")]
    pub filter_enabled: Option<RouteOptionOptionsCsrfFilterEnabled>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowEnabled")]
    pub shadow_enabled: Option<RouteOptionOptionsCsrfShadowEnabled>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsCsrfAdditionalOrigins {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<RouteOptionOptionsCsrfAdditionalOriginsSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsCsrfAdditionalOriginsSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<RouteOptionOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsCsrfFilterEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<RouteOptionOptionsCsrfFilterEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsCsrfFilterEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsCsrfShadowEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<RouteOptionOptionsCsrfShadowEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsCsrfShadowEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsDlp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<RouteOptionOptionsDlpActions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enabledFor")]
    pub enabled_for: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsDlpActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionType")]
    pub action_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAction")]
    pub custom_action: Option<RouteOptionOptionsDlpActionsCustomAction>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyValueAction")]
    pub key_value_action: Option<RouteOptionOptionsDlpActionsKeyValueAction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shadow: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsDlpActionsCustomAction {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maskChar")]
    pub mask_char: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<RouteOptionOptionsDlpActionsCustomActionPercent>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexActions")]
    pub regex_actions: Option<Vec<RouteOptionOptionsDlpActionsCustomActionRegexActions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsDlpActionsCustomActionPercent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsDlpActionsCustomActionRegexActions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsDlpActionsKeyValueAction {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyToMask")]
    pub key_to_mask: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maskChar")]
    pub mask_char: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<RouteOptionOptionsDlpActionsKeyValueActionPercent>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsDlpActionsKeyValueActionPercent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsExtProc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overrides: Option<RouteOptionOptionsExtProcOverrides>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsExtProcOverrides {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncMode")]
    pub async_mode: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<RouteOptionOptionsExtProcOverridesGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataContextNamespaces")]
    pub metadata_context_namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingMode")]
    pub processing_mode: Option<RouteOptionOptionsExtProcOverridesProcessingMode>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestAttributes")]
    pub request_attributes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseAttributes")]
    pub response_attributes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "typedMetadataContextNamespaces")]
    pub typed_metadata_context_namespaces: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsExtProcOverridesGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extProcServerRef")]
    pub ext_proc_server_ref: Option<RouteOptionOptionsExtProcOverridesGrpcServiceExtProcServerRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialMetadata")]
    pub initial_metadata: Option<Vec<RouteOptionOptionsExtProcOverridesGrpcServiceInitialMetadata>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryPolicy")]
    pub retry_policy: Option<RouteOptionOptionsExtProcOverridesGrpcServiceRetryPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsExtProcOverridesGrpcServiceExtProcServerRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsExtProcOverridesGrpcServiceInitialMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsExtProcOverridesGrpcServiceRetryPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numRetries")]
    pub num_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryBackOff")]
    pub retry_back_off: Option<RouteOptionOptionsExtProcOverridesGrpcServiceRetryPolicyRetryBackOff>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsExtProcOverridesGrpcServiceRetryPolicyRetryBackOff {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseInterval")]
    pub base_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInterval")]
    pub max_interval: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsExtProcOverridesProcessingMode {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestBodyMode")]
    pub request_body_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaderMode")]
    pub request_header_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTrailerMode")]
    pub request_trailer_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseBodyMode")]
    pub response_body_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeaderMode")]
    pub response_header_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTrailerMode")]
    pub response_trailer_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsExtauth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<RouteOptionOptionsExtauthConfigRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAuth")]
    pub custom_auth: Option<RouteOptionOptionsExtauthCustomAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsExtauthConfigRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsExtauthCustomAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contextExtensions")]
    pub context_extensions: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsExtensions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsFaults {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub abort: Option<RouteOptionOptionsFaultsAbort>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delay: Option<RouteOptionOptionsFaultsDelay>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsFaultsAbort {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpStatus")]
    pub http_status: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percentage: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsFaultsDelay {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fixedDelay")]
    pub fixed_delay: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percentage: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsHeaderManipulation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToAdd")]
    pub request_headers_to_add: Option<Vec<RouteOptionOptionsHeaderManipulationRequestHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToRemove")]
    pub request_headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersToAdd")]
    pub response_headers_to_add: Option<Vec<RouteOptionOptionsHeaderManipulationResponseHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersToRemove")]
    pub response_headers_to_remove: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsHeaderManipulationRequestHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<RouteOptionOptionsHeaderManipulationRequestHeadersToAddHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerSecretRef")]
    pub header_secret_ref: Option<RouteOptionOptionsHeaderManipulationRequestHeadersToAddHeaderSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsHeaderManipulationRequestHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsHeaderManipulationRequestHeadersToAddHeaderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsHeaderManipulationResponseHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<RouteOptionOptionsHeaderManipulationResponseHeadersToAddHeader>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsHeaderManipulationResponseHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsHostRewritePathRegex {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<RouteOptionOptionsHostRewritePathRegexPattern>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub substitution: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsHostRewritePathRegexPattern {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<RouteOptionOptionsHostRewritePathRegexPatternGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsHostRewritePathRegexPatternGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwt {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStaged {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "afterExtAuth")]
    pub after_ext_auth: Option<RouteOptionOptionsJwtProvidersStagedAfterExtAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "beforeExtAuth")]
    pub before_ext_auth: Option<RouteOptionOptionsJwtProvidersStagedBeforeExtAuth>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStagedAfterExtAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowMissingOrFailedJwt")]
    pub allow_missing_or_failed_jwt: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub providers: Option<BTreeMap<String, RouteOptionOptionsJwtProvidersStagedAfterExtAuthProviders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationPolicy")]
    pub validation_policy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStagedAfterExtAuthProviders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachFailedStatusToMetadata")]
    pub attach_failed_status_to_metadata: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimsToHeaders")]
    pub claims_to_headers: Option<Vec<RouteOptionOptionsJwtProvidersStagedAfterExtAuthProvidersClaimsToHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clockSkewSeconds")]
    pub clock_skew_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jwks: Option<RouteOptionOptionsJwtProvidersStagedAfterExtAuthProvidersJwks>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepToken")]
    pub keep_token: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenSource")]
    pub token_source: Option<RouteOptionOptionsJwtProvidersStagedAfterExtAuthProvidersTokenSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStagedAfterExtAuthProvidersClaimsToHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claim: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStagedAfterExtAuthProvidersJwks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub local: Option<RouteOptionOptionsJwtProvidersStagedAfterExtAuthProvidersJwksLocal>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<RouteOptionOptionsJwtProvidersStagedAfterExtAuthProvidersJwksRemote>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStagedAfterExtAuthProvidersJwksLocal {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStagedAfterExtAuthProvidersJwksRemote {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncFetch")]
    pub async_fetch: Option<RouteOptionOptionsJwtProvidersStagedAfterExtAuthProvidersJwksRemoteAsyncFetch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheDuration")]
    pub cache_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamRef")]
    pub upstream_ref: Option<RouteOptionOptionsJwtProvidersStagedAfterExtAuthProvidersJwksRemoteUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStagedAfterExtAuthProvidersJwksRemoteAsyncFetch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fastListener")]
    pub fast_listener: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStagedAfterExtAuthProvidersJwksRemoteUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStagedAfterExtAuthProvidersTokenSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteOptionOptionsJwtProvidersStagedAfterExtAuthProvidersTokenSourceHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParams")]
    pub query_params: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStagedAfterExtAuthProvidersTokenSourceHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStagedBeforeExtAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowMissingOrFailedJwt")]
    pub allow_missing_or_failed_jwt: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub providers: Option<BTreeMap<String, RouteOptionOptionsJwtProvidersStagedBeforeExtAuthProviders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationPolicy")]
    pub validation_policy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStagedBeforeExtAuthProviders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachFailedStatusToMetadata")]
    pub attach_failed_status_to_metadata: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimsToHeaders")]
    pub claims_to_headers: Option<Vec<RouteOptionOptionsJwtProvidersStagedBeforeExtAuthProvidersClaimsToHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clockSkewSeconds")]
    pub clock_skew_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jwks: Option<RouteOptionOptionsJwtProvidersStagedBeforeExtAuthProvidersJwks>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepToken")]
    pub keep_token: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenSource")]
    pub token_source: Option<RouteOptionOptionsJwtProvidersStagedBeforeExtAuthProvidersTokenSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStagedBeforeExtAuthProvidersClaimsToHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claim: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStagedBeforeExtAuthProvidersJwks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub local: Option<RouteOptionOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksLocal>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<RouteOptionOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksRemote>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksLocal {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksRemote {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncFetch")]
    pub async_fetch: Option<RouteOptionOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksRemoteAsyncFetch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheDuration")]
    pub cache_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamRef")]
    pub upstream_ref: Option<RouteOptionOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksRemoteUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksRemoteAsyncFetch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fastListener")]
    pub fast_listener: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStagedBeforeExtAuthProvidersJwksRemoteUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStagedBeforeExtAuthProvidersTokenSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteOptionOptionsJwtProvidersStagedBeforeExtAuthProvidersTokenSourceHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParams")]
    pub query_params: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtProvidersStagedBeforeExtAuthProvidersTokenSourceHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtStaged {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "afterExtAuth")]
    pub after_ext_auth: Option<RouteOptionOptionsJwtStagedAfterExtAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "beforeExtAuth")]
    pub before_ext_auth: Option<RouteOptionOptionsJwtStagedBeforeExtAuth>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtStagedAfterExtAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsJwtStagedBeforeExtAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsLbHash {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hashPolicies")]
    pub hash_policies: Option<Vec<RouteOptionOptionsLbHashHashPolicies>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsLbHashHashPolicies {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cookie: Option<RouteOptionOptionsLbHashHashPoliciesCookie>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceIp")]
    pub source_ip: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub terminal: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsLbHashHashPoliciesCookie {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsMaxStreamDuration {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcTimeoutHeaderMax")]
    pub grpc_timeout_header_max: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcTimeoutHeaderOffset")]
    pub grpc_timeout_header_offset: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxStreamDuration")]
    pub max_stream_duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRateLimitConfigs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub refs: Option<Vec<RouteOptionOptionsRateLimitConfigsRefs>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRateLimitConfigsRefs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRateLimitEarlyConfigs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub refs: Option<Vec<RouteOptionOptionsRateLimitEarlyConfigsRefs>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRateLimitEarlyConfigsRefs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRateLimitRegularConfigs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub refs: Option<Vec<RouteOptionOptionsRateLimitRegularConfigsRefs>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRateLimitRegularConfigsRefs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeVhRateLimits")]
    pub include_vh_rate_limits: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRatelimit")]
    pub local_ratelimit: Option<RouteOptionOptionsRatelimitLocalRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimits")]
    pub rate_limits: Option<Vec<RouteOptionOptionsRatelimitRateLimits>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitLocalRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillInterval")]
    pub fill_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokens")]
    pub max_tokens: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokensPerFill")]
    pub tokens_per_fill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimits {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<RouteOptionOptionsRatelimitRateLimitsActions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<RouteOptionOptionsRatelimitRateLimitsLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setActions")]
    pub set_actions: Option<Vec<RouteOptionOptionsRatelimitRateLimitsSetActions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<RouteOptionOptionsRatelimitRateLimitsActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<RouteOptionOptionsRatelimitRateLimitsActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<RouteOptionOptionsRatelimitRateLimitsActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<RouteOptionOptionsRatelimitRateLimitsActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<RouteOptionOptionsRatelimitRateLimitsActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<RouteOptionOptionsRatelimitRateLimitsActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<RouteOptionOptionsRatelimitRateLimitsActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteOptionOptionsRatelimitRateLimitsActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<RouteOptionOptionsRatelimitRateLimitsActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<RouteOptionOptionsRatelimitRateLimitsActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<RouteOptionOptionsRatelimitRateLimitsActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadata")]
    pub dynamic_metadata: Option<RouteOptionOptionsRatelimitRateLimitsLimitDynamicMetadata>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsLimitDynamicMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<RouteOptionOptionsRatelimitRateLimitsLimitDynamicMetadataMetadataKey>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsLimitDynamicMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<RouteOptionOptionsRatelimitRateLimitsLimitDynamicMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsLimitDynamicMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsSetActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<RouteOptionOptionsRatelimitRateLimitsSetActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<RouteOptionOptionsRatelimitRateLimitsSetActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<RouteOptionOptionsRatelimitRateLimitsSetActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<RouteOptionOptionsRatelimitRateLimitsSetActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<RouteOptionOptionsRatelimitRateLimitsSetActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<RouteOptionOptionsRatelimitRateLimitsSetActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<RouteOptionOptionsRatelimitRateLimitsSetActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsSetActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsSetActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsSetActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteOptionOptionsRatelimitRateLimitsSetActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsSetActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<RouteOptionOptionsRatelimitRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsSetActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<RouteOptionOptionsRatelimitRateLimitsSetActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsSetActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<RouteOptionOptionsRatelimitRateLimitsSetActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsSetActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsSetActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsSetActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRateLimitsSetActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitBasic {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "anonymousLimits")]
    pub anonymous_limits: Option<RouteOptionOptionsRatelimitBasicAnonymousLimits>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedLimits")]
    pub authorized_limits: Option<RouteOptionOptionsRatelimitBasicAuthorizedLimits>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitBasicAnonymousLimits {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestsPerUnit")]
    pub requests_per_unit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitBasicAuthorizedLimits {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestsPerUnit")]
    pub requests_per_unit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarly {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeVhRateLimits")]
    pub include_vh_rate_limits: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRatelimit")]
    pub local_ratelimit: Option<RouteOptionOptionsRatelimitEarlyLocalRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimits")]
    pub rate_limits: Option<Vec<RouteOptionOptionsRatelimitEarlyRateLimits>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyLocalRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillInterval")]
    pub fill_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokens")]
    pub max_tokens: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokensPerFill")]
    pub tokens_per_fill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimits {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<RouteOptionOptionsRatelimitEarlyRateLimitsActions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<RouteOptionOptionsRatelimitEarlyRateLimitsLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setActions")]
    pub set_actions: Option<Vec<RouteOptionOptionsRatelimitEarlyRateLimitsSetActions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<RouteOptionOptionsRatelimitEarlyRateLimitsActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<RouteOptionOptionsRatelimitEarlyRateLimitsActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<RouteOptionOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<RouteOptionOptionsRatelimitEarlyRateLimitsActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<RouteOptionOptionsRatelimitEarlyRateLimitsActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<RouteOptionOptionsRatelimitEarlyRateLimitsActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<RouteOptionOptionsRatelimitEarlyRateLimitsActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteOptionOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<RouteOptionOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<RouteOptionOptionsRatelimitEarlyRateLimitsActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<RouteOptionOptionsRatelimitEarlyRateLimitsActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadata")]
    pub dynamic_metadata: Option<RouteOptionOptionsRatelimitEarlyRateLimitsLimitDynamicMetadata>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsLimitDynamicMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<RouteOptionOptionsRatelimitEarlyRateLimitsLimitDynamicMetadataMetadataKey>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsLimitDynamicMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<RouteOptionOptionsRatelimitEarlyRateLimitsLimitDynamicMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsLimitDynamicMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsSetActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitEarlyRateLimitsSetActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegular {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeVhRateLimits")]
    pub include_vh_rate_limits: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRatelimit")]
    pub local_ratelimit: Option<RouteOptionOptionsRatelimitRegularLocalRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimits")]
    pub rate_limits: Option<Vec<RouteOptionOptionsRatelimitRegularRateLimits>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularLocalRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillInterval")]
    pub fill_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokens")]
    pub max_tokens: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokensPerFill")]
    pub tokens_per_fill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimits {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<RouteOptionOptionsRatelimitRegularRateLimitsActions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<RouteOptionOptionsRatelimitRegularRateLimitsLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setActions")]
    pub set_actions: Option<Vec<RouteOptionOptionsRatelimitRegularRateLimitsSetActions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<RouteOptionOptionsRatelimitRegularRateLimitsActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<RouteOptionOptionsRatelimitRegularRateLimitsActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<RouteOptionOptionsRatelimitRegularRateLimitsActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<RouteOptionOptionsRatelimitRegularRateLimitsActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<RouteOptionOptionsRatelimitRegularRateLimitsActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<RouteOptionOptionsRatelimitRegularRateLimitsActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<RouteOptionOptionsRatelimitRegularRateLimitsActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteOptionOptionsRatelimitRegularRateLimitsActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<RouteOptionOptionsRatelimitRegularRateLimitsActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<RouteOptionOptionsRatelimitRegularRateLimitsActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<RouteOptionOptionsRatelimitRegularRateLimitsActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadata")]
    pub dynamic_metadata: Option<RouteOptionOptionsRatelimitRegularRateLimitsLimitDynamicMetadata>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsLimitDynamicMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<RouteOptionOptionsRatelimitRegularRateLimitsLimitDynamicMetadataMetadataKey>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsLimitDynamicMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<RouteOptionOptionsRatelimitRegularRateLimitsLimitDynamicMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsLimitDynamicMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsSetActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCluster")]
    pub destination_cluster: Option<RouteOptionOptionsRatelimitRegularRateLimitsSetActionsDestinationCluster>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genericKey")]
    pub generic_key: Option<RouteOptionOptionsRatelimitRegularRateLimitsSetActionsGenericKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValueMatch")]
    pub header_value_match: Option<RouteOptionOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<RouteOptionOptionsRatelimitRegularRateLimitsSetActionsMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteAddress")]
    pub remote_address: Option<RouteOptionOptionsRatelimitRegularRateLimitsSetActionsRemoteAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<RouteOptionOptionsRatelimitRegularRateLimitsSetActionsRequestHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceCluster")]
    pub source_cluster: Option<RouteOptionOptionsRatelimitRegularRateLimitsSetActionsSourceCluster>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsSetActionsDestinationCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsSetActionsGenericKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorValue")]
    pub descriptor_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectMatch")]
    pub expect_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteOptionOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatchHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatchHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<RouteOptionOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexMatch")]
    pub regex_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsSetActionsHeaderValueMatchHeadersRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsSetActionsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataKey")]
    pub metadata_key: Option<RouteOptionOptionsRatelimitRegularRateLimitsSetActionsMetadataMetadataKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsSetActionsMetadataMetadataKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<RouteOptionOptionsRatelimitRegularRateLimitsSetActionsMetadataMetadataKeyPath>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsSetActionsMetadataMetadataKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsSetActionsRemoteAddress {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsSetActionsRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "descriptorKey")]
    pub descriptor_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRatelimitRegularRateLimitsSetActionsSourceCluster {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRbac {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policies: Option<BTreeMap<String, RouteOptionOptionsRbacPolicies>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRbacPolicies {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nestedClaimDelimiter")]
    pub nested_claim_delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<RouteOptionOptionsRbacPoliciesPermissions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub principals: Option<Vec<RouteOptionOptionsRbacPoliciesPrincipals>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRbacPoliciesPermissions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathPrefix")]
    pub path_prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRbacPoliciesPrincipals {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwtPrincipal")]
    pub jwt_principal: Option<RouteOptionOptionsRbacPoliciesPrincipalsJwtPrincipal>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRbacPoliciesPrincipalsJwtPrincipal {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRegexRewrite {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<RouteOptionOptionsRegexRewritePattern>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub substitution: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRegexRewritePattern {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<RouteOptionOptionsRegexRewritePatternGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRegexRewritePatternGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRetries {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numRetries")]
    pub num_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "perTryTimeout")]
    pub per_try_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "previousPriorities")]
    pub previous_priorities: Option<RouteOptionOptionsRetriesPreviousPriorities>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitedRetryBackOff")]
    pub rate_limited_retry_back_off: Option<RouteOptionOptionsRetriesRateLimitedRetryBackOff>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retriableStatusCodes")]
    pub retriable_status_codes: Option<Vec<i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryBackOff")]
    pub retry_back_off: Option<RouteOptionOptionsRetriesRetryBackOff>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryOn")]
    pub retry_on: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRetriesPreviousPriorities {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateFrequency")]
    pub update_frequency: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRetriesRateLimitedRetryBackOff {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInterval")]
    pub max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resetHeaders")]
    pub reset_headers: Option<Vec<RouteOptionOptionsRetriesRateLimitedRetryBackOffResetHeaders>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRetriesRateLimitedRetryBackOffResetHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsRetriesRetryBackOff {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseInterval")]
    pub base_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInterval")]
    pub max_interval: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsShadowing {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percentage: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upstream: Option<RouteOptionOptionsShadowingUpstream>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsShadowingUpstream {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub early: Option<RouteOptionOptionsStagedTransformationsEarly>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inheritTransformation")]
    pub inherit_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postRouting")]
    pub post_routing: Option<RouteOptionOptionsStagedTransformationsPostRouting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regular: Option<RouteOptionOptionsStagedTransformationsRegular>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarly {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<RouteOptionOptionsStagedTransformationsEarlyRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<RouteOptionOptionsStagedTransformationsEarlyResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<RouteOptionOptionsStagedTransformationsEarlyResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRouting {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<RouteOptionOptionsStagedTransformationsPostRoutingResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegular {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<RouteOptionOptionsStagedTransformationsRegularRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<RouteOptionOptionsStagedTransformationsRegularResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<RouteOptionOptionsStagedTransformationsRegularRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<RouteOptionOptionsStagedTransformationsRegularRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<RouteOptionOptionsStagedTransformationsRegularResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsStagedTransformationsRegularResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTracing {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub propagate: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeDescriptor")]
    pub route_descriptor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tracePercentages")]
    pub trace_percentages: Option<RouteOptionOptionsTracingTracePercentages>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTracingTracePercentages {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSamplePercentage")]
    pub client_sample_percentage: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overallSamplePercentage")]
    pub overall_sample_percentage: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "randomSamplePercentage")]
    pub random_sample_percentage: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<RouteOptionOptionsTransformationsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<RouteOptionOptionsTransformationsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteOptionOptionsTransformationsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteOptionOptionsTransformationsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteOptionOptionsTransformationsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteOptionOptionsTransformationsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<RouteOptionOptionsTransformationsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<RouteOptionOptionsTransformationsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<RouteOptionOptionsTransformationsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<RouteOptionOptionsTransformationsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsTransformationsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsUpgrades {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connect: Option<RouteOptionOptionsUpgradesConnect>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub websocket: Option<RouteOptionOptionsUpgradesWebsocket>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsUpgradesConnect {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsUpgradesWebsocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsWaf {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "auditLogging")]
    pub audit_logging: Option<RouteOptionOptionsWafAuditLogging>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRuleSets")]
    pub config_map_rule_sets: Option<Vec<RouteOptionOptionsWafConfigMapRuleSets>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreRuleSet")]
    pub core_rule_set: Option<RouteOptionOptionsWafCoreRuleSet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customInterventionMessage")]
    pub custom_intervention_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersOnly")]
    pub request_headers_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersOnly")]
    pub response_headers_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleSets")]
    pub rule_sets: Option<Vec<RouteOptionOptionsWafRuleSets>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsWafAuditLogging {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsWafConfigMapRuleSets {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<RouteOptionOptionsWafConfigMapRuleSetsConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataMapKeys")]
    pub data_map_keys: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsWafConfigMapRuleSetsConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsWafCoreRuleSet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSettingsFile")]
    pub custom_settings_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSettingsString")]
    pub custom_settings_string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionOptionsWafRuleSets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleStr")]
    pub rule_str: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionTargetRefs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RouteOptionStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, serde_json::Value>>,
}

