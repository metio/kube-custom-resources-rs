// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/solo-io/gloo/gateway.solo.io/v1/gateways.yaml
// kopium version: 0.22.3

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "gateway.solo.io", version = "v1", kind = "Gateway", plural = "gateways")]
#[kube(namespaced)]
#[kube(status = "GatewayStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct GatewaySpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bindAddress")]
    pub bind_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bindPort")]
    pub bind_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGateway")]
    pub http_gateway: Option<GatewayHttpGateway>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hybridGateway")]
    pub hybrid_gateway: Option<GatewayHybridGateway>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespacedStatuses")]
    pub namespaced_statuses: Option<GatewayNamespacedStatuses>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<GatewayOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyNames")]
    pub proxy_names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeOptions")]
    pub route_options: Option<GatewayRouteOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpGateway")]
    pub tcp_gateway: Option<GatewayTcpGateway>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useProxyProto")]
    pub use_proxy_proto: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGateway {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<GatewayHttpGatewayOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceExpressions")]
    pub virtual_service_expressions: Option<GatewayHttpGatewayVirtualServiceExpressions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceNamespaces")]
    pub virtual_service_namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceSelector")]
    pub virtual_service_selector: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServices")]
    pub virtual_services: Option<Vec<GatewayHttpGatewayVirtualServices>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<GatewayHttpGatewayOptionsBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub caching: Option<GatewayHttpGatewayOptionsCaching>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionLimit")]
    pub connection_limit: Option<GatewayHttpGatewayOptionsConnectionLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csrf: Option<GatewayHttpGatewayOptionsCsrf>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableExtProc")]
    pub disable_ext_proc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dlp: Option<GatewayHttpGatewayOptionsDlp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicForwardProxy")]
    pub dynamic_forward_proxy: Option<GatewayHttpGatewayOptionsDynamicForwardProxy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extProc")]
    pub ext_proc: Option<GatewayHttpGatewayOptionsExtProc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extauth: Option<GatewayHttpGatewayOptionsExtauth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extensions: Option<GatewayHttpGatewayOptionsExtensions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcJsonTranscoder")]
    pub grpc_json_transcoder: Option<GatewayHttpGatewayOptionsGrpcJsonTranscoder>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcWeb")]
    pub grpc_web: Option<GatewayHttpGatewayOptionsGrpcWeb>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gzip: Option<GatewayHttpGatewayOptionsGzip>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValidationSettings")]
    pub header_validation_settings: Option<GatewayHttpGatewayOptionsHeaderValidationSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheck")]
    pub health_check: Option<GatewayHttpGatewayOptionsHealthCheck>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConnectionManagerSettings")]
    pub http_connection_manager_settings: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpLocalRatelimit")]
    pub http_local_ratelimit: Option<GatewayHttpGatewayOptionsHttpLocalRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "leftmostXffAddress")]
    pub leftmost_xff_address: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkLocalRatelimit")]
    pub network_local_ratelimit: Option<GatewayHttpGatewayOptionsNetworkLocalRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyLatency")]
    pub proxy_latency: Option<GatewayHttpGatewayOptionsProxyLatency>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ratelimitServer")]
    pub ratelimit_server: Option<GatewayHttpGatewayOptionsRatelimitServer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub router: Option<GatewayHttpGatewayOptionsRouter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sanitizeClusterHeader")]
    pub sanitize_cluster_header: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statefulSession")]
    pub stateful_session: Option<GatewayHttpGatewayOptionsStatefulSession>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tap: Option<GatewayHttpGatewayOptionsTap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub waf: Option<GatewayHttpGatewayOptionsWaf>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wasm: Option<GatewayHttpGatewayOptionsWasm>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsCaching {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedVaryHeaders")]
    pub allowed_vary_headers: Option<Vec<GatewayHttpGatewayOptionsCachingAllowedVaryHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cachingServiceRef")]
    pub caching_service_ref: Option<GatewayHttpGatewayOptionsCachingCachingServiceRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPayloadSize")]
    pub max_payload_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsCachingAllowedVaryHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<GatewayHttpGatewayOptionsCachingAllowedVaryHeadersSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsCachingAllowedVaryHeadersSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<GatewayHttpGatewayOptionsCachingAllowedVaryHeadersSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsCachingAllowedVaryHeadersSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsCachingCachingServiceRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsConnectionLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delayBeforeClose")]
    pub delay_before_close: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxActiveConnections")]
    pub max_active_connections: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsCsrf {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalOrigins")]
    pub additional_origins: Option<Vec<GatewayHttpGatewayOptionsCsrfAdditionalOrigins>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterEnabled")]
    pub filter_enabled: Option<GatewayHttpGatewayOptionsCsrfFilterEnabled>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowEnabled")]
    pub shadow_enabled: Option<GatewayHttpGatewayOptionsCsrfShadowEnabled>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsCsrfAdditionalOrigins {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<GatewayHttpGatewayOptionsCsrfAdditionalOriginsSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsCsrfAdditionalOriginsSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<GatewayHttpGatewayOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsCsrfFilterEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<GatewayHttpGatewayOptionsCsrfFilterEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsCsrfFilterEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsCsrfShadowEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<GatewayHttpGatewayOptionsCsrfShadowEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsCsrfShadowEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDlp {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dlpRules")]
    pub dlp_rules: Option<Vec<GatewayHttpGatewayOptionsDlpDlpRules>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enabledFor")]
    pub enabled_for: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDlpDlpRules {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<GatewayHttpGatewayOptionsDlpDlpRulesActions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<GatewayHttpGatewayOptionsDlpDlpRulesMatcher>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDlpDlpRulesActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionType")]
    pub action_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAction")]
    pub custom_action: Option<GatewayHttpGatewayOptionsDlpDlpRulesActionsCustomAction>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyValueAction")]
    pub key_value_action: Option<GatewayHttpGatewayOptionsDlpDlpRulesActionsKeyValueAction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shadow: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDlpDlpRulesActionsCustomAction {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maskChar")]
    pub mask_char: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<GatewayHttpGatewayOptionsDlpDlpRulesActionsCustomActionPercent>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexActions")]
    pub regex_actions: Option<Vec<GatewayHttpGatewayOptionsDlpDlpRulesActionsCustomActionRegexActions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDlpDlpRulesActionsCustomActionPercent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDlpDlpRulesActionsCustomActionRegexActions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDlpDlpRulesActionsKeyValueAction {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyToMask")]
    pub key_to_mask: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maskChar")]
    pub mask_char: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<GatewayHttpGatewayOptionsDlpDlpRulesActionsKeyValueActionPercent>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDlpDlpRulesActionsKeyValueActionPercent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDlpDlpRulesMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<GatewayHttpGatewayOptionsDlpDlpRulesMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<GatewayHttpGatewayOptionsDlpDlpRulesMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<GatewayHttpGatewayOptionsDlpDlpRulesMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDlpDlpRulesMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDlpDlpRulesMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDlpDlpRulesMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDynamicForwardProxy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "circuitBreakers")]
    pub circuit_breakers: Option<GatewayHttpGatewayOptionsDynamicForwardProxyCircuitBreakers>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsCacheConfig")]
    pub dns_cache_config: Option<GatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "saveUpstreamAddress")]
    pub save_upstream_address: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslConfig")]
    pub ssl_config: Option<GatewayHttpGatewayOptionsDynamicForwardProxySslConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDynamicForwardProxyCircuitBreakers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    pub max_connections: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingRequests")]
    pub max_pending_requests: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequests")]
    pub max_requests: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    pub max_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trackRemaining")]
    pub track_remaining: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appleDns")]
    pub apple_dns: Option<GatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigAppleDns>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caresDns")]
    pub cares_dns: Option<GatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDns>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsCacheCircuitBreaker")]
    pub dns_cache_circuit_breaker: Option<GatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigDnsCacheCircuitBreaker>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsFailureRefreshRate")]
    pub dns_failure_refresh_rate: Option<GatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigDnsFailureRefreshRate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsLookupFamily")]
    pub dns_lookup_family: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsQueryTimeout")]
    pub dns_query_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsRefreshRate")]
    pub dns_refresh_rate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostTtl")]
    pub host_ttl: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxHosts")]
    pub max_hosts: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preresolveHostnames")]
    pub preresolve_hostnames: Option<Vec<GatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigPreresolveHostnames>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigAppleDns {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDns {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsResolverOptions")]
    pub dns_resolver_options: Option<GatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsDnsResolverOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolvers: Option<Vec<GatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsResolvers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsDnsResolverOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDefaultSearchDomain")]
    pub no_default_search_domain: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTcpForDnsLookups")]
    pub use_tcp_for_dns_lookups: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsResolvers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pipe: Option<GatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsResolversPipe>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "socketAddress")]
    pub socket_address: Option<GatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsResolversSocketAddress>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsResolversPipe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsResolversSocketAddress {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4Compat")]
    pub ipv4_compat: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namedPort")]
    pub named_port: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portValue")]
    pub port_value: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resolverName")]
    pub resolver_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigDnsCacheCircuitBreaker {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingRequests")]
    pub max_pending_requests: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigDnsFailureRefreshRate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseInterval")]
    pub base_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInterval")]
    pub max_interval: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigPreresolveHostnames {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4Compat")]
    pub ipv4_compat: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namedPort")]
    pub named_port: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portValue")]
    pub port_value: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resolverName")]
    pub resolver_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDynamicForwardProxySslConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRenegotiation")]
    pub allow_renegotiation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnProtocols")]
    pub alpn_protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oneWayTls")]
    pub one_way_tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<GatewayHttpGatewayOptionsDynamicForwardProxySslConfigParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<GatewayHttpGatewayOptionsDynamicForwardProxySslConfigSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<GatewayHttpGatewayOptionsDynamicForwardProxySslConfigSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslFiles")]
    pub ssl_files: Option<GatewayHttpGatewayOptionsDynamicForwardProxySslConfigSslFiles>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifySubjectAltName")]
    pub verify_subject_alt_name: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDynamicForwardProxySslConfigParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherSuites")]
    pub cipher_suites: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecdhCurves")]
    pub ecdh_curves: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDynamicForwardProxySslConfigSds {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callCredentials")]
    pub call_credentials: Option<GatewayHttpGatewayOptionsDynamicForwardProxySslConfigSdsCallCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatesSecretName")]
    pub certificates_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationContextName")]
    pub validation_context_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDynamicForwardProxySslConfigSdsCallCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileCredentialSource")]
    pub file_credential_source: Option<GatewayHttpGatewayOptionsDynamicForwardProxySslConfigSdsCallCredentialsFileCredentialSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDynamicForwardProxySslConfigSdsCallCredentialsFileCredentialSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenFileName")]
    pub token_file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDynamicForwardProxySslConfigSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsDynamicForwardProxySslConfigSslFiles {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaple")]
    pub ocsp_staple: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCa")]
    pub root_ca: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCert")]
    pub tls_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProc {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowModeOverride")]
    pub allow_mode_override: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncMode")]
    pub async_mode: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableClearRouteCache")]
    pub disable_clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureModeAllow")]
    pub failure_mode_allow: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterMetadata")]
    pub filter_metadata: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterStage")]
    pub filter_stage: Option<GatewayHttpGatewayOptionsExtProcFilterStage>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardRules")]
    pub forward_rules: Option<GatewayHttpGatewayOptionsExtProcForwardRules>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<GatewayHttpGatewayOptionsExtProcGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxMessageTimeout")]
    pub max_message_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageTimeout")]
    pub message_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataContextNamespaces")]
    pub metadata_context_namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mutationRules")]
    pub mutation_rules: Option<GatewayHttpGatewayOptionsExtProcMutationRules>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingMode")]
    pub processing_mode: Option<GatewayHttpGatewayOptionsExtProcProcessingMode>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestAttributes")]
    pub request_attributes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseAttributes")]
    pub response_attributes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statPrefix")]
    pub stat_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "typedMetadataContextNamespaces")]
    pub typed_metadata_context_namespaces: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcFilterStage {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub predicate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stage: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcForwardRules {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedHeaders")]
    pub allowed_headers: Option<GatewayHttpGatewayOptionsExtProcForwardRulesAllowedHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowedHeaders")]
    pub disallowed_headers: Option<GatewayHttpGatewayOptionsExtProcForwardRulesDisallowedHeaders>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcForwardRulesAllowedHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patterns: Option<Vec<GatewayHttpGatewayOptionsExtProcForwardRulesAllowedHeadersPatterns>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcForwardRulesAllowedHeadersPatterns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<GatewayHttpGatewayOptionsExtProcForwardRulesAllowedHeadersPatternsSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcForwardRulesAllowedHeadersPatternsSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<GatewayHttpGatewayOptionsExtProcForwardRulesAllowedHeadersPatternsSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcForwardRulesAllowedHeadersPatternsSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcForwardRulesDisallowedHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patterns: Option<Vec<GatewayHttpGatewayOptionsExtProcForwardRulesDisallowedHeadersPatterns>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcForwardRulesDisallowedHeadersPatterns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<GatewayHttpGatewayOptionsExtProcForwardRulesDisallowedHeadersPatternsSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcForwardRulesDisallowedHeadersPatternsSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<GatewayHttpGatewayOptionsExtProcForwardRulesDisallowedHeadersPatternsSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcForwardRulesDisallowedHeadersPatternsSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extProcServerRef")]
    pub ext_proc_server_ref: Option<GatewayHttpGatewayOptionsExtProcGrpcServiceExtProcServerRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialMetadata")]
    pub initial_metadata: Option<Vec<GatewayHttpGatewayOptionsExtProcGrpcServiceInitialMetadata>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryPolicy")]
    pub retry_policy: Option<GatewayHttpGatewayOptionsExtProcGrpcServiceRetryPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcGrpcServiceExtProcServerRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcGrpcServiceInitialMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcGrpcServiceRetryPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numRetries")]
    pub num_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryBackOff")]
    pub retry_back_off: Option<GatewayHttpGatewayOptionsExtProcGrpcServiceRetryPolicyRetryBackOff>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcGrpcServiceRetryPolicyRetryBackOff {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseInterval")]
    pub base_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInterval")]
    pub max_interval: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcMutationRules {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowAllRouting")]
    pub allow_all_routing: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEnvoy")]
    pub allow_envoy: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowExpression")]
    pub allow_expression: Option<GatewayHttpGatewayOptionsExtProcMutationRulesAllowExpression>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowAll")]
    pub disallow_all: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowExpression")]
    pub disallow_expression: Option<GatewayHttpGatewayOptionsExtProcMutationRulesDisallowExpression>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowIsError")]
    pub disallow_is_error: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowSystem")]
    pub disallow_system: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcMutationRulesAllowExpression {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<GatewayHttpGatewayOptionsExtProcMutationRulesAllowExpressionGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcMutationRulesAllowExpressionGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcMutationRulesDisallowExpression {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<GatewayHttpGatewayOptionsExtProcMutationRulesDisallowExpressionGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcMutationRulesDisallowExpressionGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtProcProcessingMode {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestBodyMode")]
    pub request_body_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaderMode")]
    pub request_header_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTrailerMode")]
    pub request_trailer_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseBodyMode")]
    pub response_body_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeaderMode")]
    pub response_header_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTrailerMode")]
    pub response_trailer_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtauth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extauthzServerRef")]
    pub extauthz_server_ref: Option<GatewayHttpGatewayOptionsExtauthExtauthzServerRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureModeAllow")]
    pub failure_mode_allow: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<GatewayHttpGatewayOptionsExtauthGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpService")]
    pub http_service: Option<GatewayHttpGatewayOptionsExtauthHttpService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestBody")]
    pub request_body: Option<GatewayHttpGatewayOptionsExtauthRequestBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTimeout")]
    pub request_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statPrefix")]
    pub stat_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusOnError")]
    pub status_on_error: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportApiVersion")]
    pub transport_api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userIdHeader")]
    pub user_id_header: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtauthExtauthzServerRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtauthGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtauthHttpService {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathPrefix")]
    pub path_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<GatewayHttpGatewayOptionsExtauthHttpServiceRequest>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<GatewayHttpGatewayOptionsExtauthHttpServiceResponse>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtauthHttpServiceRequest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedHeaders")]
    pub allowed_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedHeadersRegex")]
    pub allowed_headers_regex: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAdd")]
    pub headers_to_add: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtauthHttpServiceResponse {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedClientHeaders")]
    pub allowed_client_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedUpstreamHeaders")]
    pub allowed_upstream_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedUpstreamHeadersToAppend")]
    pub allowed_upstream_headers_to_append: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtauthRequestBody {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPartialMessage")]
    pub allow_partial_message: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packAsBytes")]
    pub pack_as_bytes: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsExtensions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsGrpcJsonTranscoder {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMapping")]
    pub auto_mapping: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "convertGrpcStatus")]
    pub convert_grpc_status: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreUnknownQueryParameters")]
    pub ignore_unknown_query_parameters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoredQueryParameters")]
    pub ignored_query_parameters: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchIncomingRequestRoute")]
    pub match_incoming_request_route: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "printOptions")]
    pub print_options: Option<GatewayHttpGatewayOptionsGrpcJsonTranscoderPrintOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptor")]
    pub proto_descriptor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorBin")]
    pub proto_descriptor_bin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorConfigMap")]
    pub proto_descriptor_config_map: Option<GatewayHttpGatewayOptionsGrpcJsonTranscoderProtoDescriptorConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsGrpcJsonTranscoderPrintOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addWhitespace")]
    pub add_whitespace: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintEnumsAsInts")]
    pub always_print_enums_as_ints: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintPrimitiveFields")]
    pub always_print_primitive_fields: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveProtoFieldNames")]
    pub preserve_proto_field_names: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsGrpcJsonTranscoderProtoDescriptorConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<GatewayHttpGatewayOptionsGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsGrpcWeb {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsGzip {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionLevel")]
    pub compression_level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionStrategy")]
    pub compression_strategy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentLength")]
    pub content_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableOnEtagHeader")]
    pub disable_on_etag_header: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryLevel")]
    pub memory_level: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "removeAcceptEncodingHeader")]
    pub remove_accept_encoding_header: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowBits")]
    pub window_bits: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHeaderValidationSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableHttp1MethodValidation")]
    pub disable_http1_method_validation: Option<GatewayHttpGatewayOptionsHeaderValidationSettingsDisableHttp1MethodValidation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHeaderValidationSettingsDisableHttp1MethodValidation {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHealthCheck {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceptHttp10")]
    pub accept_http10: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowChunkedLength")]
    pub allow_chunked_length: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appendXForwardedPort")]
    pub append_x_forwarded_port: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codecType")]
    pub codec_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultHostForHttp10")]
    pub default_host_for_http10: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delayedCloseTimeout")]
    pub delayed_close_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drainTimeout")]
    pub drain_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "earlyHeaderManipulation")]
    pub early_header_manipulation: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableTrailers")]
    pub enable_trailers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardClientCertDetails")]
    pub forward_client_cert_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generateRequestId")]
    pub generate_request_id: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersWithUnderscoresAction")]
    pub headers_with_underscores_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http2ProtocolOptions")]
    pub http2_protocol_options: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsHttp2ProtocolOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeout")]
    pub idle_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalAddressConfig")]
    pub internal_address_config: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsInternalAddressConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnectionDuration")]
    pub max_connection_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxHeadersCount")]
    pub max_headers_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestHeadersKb")]
    pub max_request_headers_kb: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestsPerConnection")]
    pub max_requests_per_connection: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxStreamDuration")]
    pub max_stream_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeSlashes")]
    pub merge_slashes: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "normalizePath")]
    pub normalize_path: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathWithEscapedSlashesAction")]
    pub path_with_escaped_slashes_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveCaseHeaderKeyFormat")]
    pub preserve_case_header_key_format: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveExternalRequestId")]
    pub preserve_external_request_id: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "properCaseHeaderKeyFormat")]
    pub proper_case_header_key_format: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxy100Continue")]
    pub proxy100_continue: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersTimeout")]
    pub request_headers_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTimeout")]
    pub request_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverHeaderTransformation")]
    pub server_header_transformation: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setCurrentClientCertDetails")]
    pub set_current_client_cert_details: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsSetCurrentClientCertDetails>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipXffAppend")]
    pub skip_xff_append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamIdleTimeout")]
    pub stream_idle_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stripAnyHostPort")]
    pub strip_any_host_port: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracing>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upgrades: Option<Vec<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsUpgrades>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useRemoteAddress")]
    pub use_remote_address: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uuidRequestIdConfig")]
    pub uuid_request_id_config: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsUuidRequestIdConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub via: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xffNumTrustedHops")]
    pub xff_num_trusted_hops: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAdd")]
    pub headers_to_add: Option<Vec<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAddHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerSecretRef")]
    pub header_secret_ref: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAddHeaderSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAddHeaderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsHttp2ProtocolOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialConnectionWindowSize")]
    pub initial_connection_window_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialStreamWindowSize")]
    pub initial_stream_window_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentStreams")]
    pub max_concurrent_streams: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideStreamErrorOnInvalidHttpMessage")]
    pub override_stream_error_on_invalid_http_message: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsInternalAddressConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrRanges")]
    pub cidr_ranges: Option<Vec<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsInternalAddressConfigCidrRanges>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unixSockets")]
    pub unix_sockets: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsInternalAddressConfigCidrRanges {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addressPrefix")]
    pub address_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixLen")]
    pub prefix_len: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsSetCurrentClientCertDetails {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chain: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dns: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracing {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datadogConfig")]
    pub datadog_config: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingDatadogConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentVariablesForTags")]
    pub environment_variables_for_tags: Option<Vec<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingEnvironmentVariablesForTags>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "literalsForTags")]
    pub literals_for_tags: Option<Vec<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingLiteralsForTags>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataForTags")]
    pub metadata_for_tags: Option<Vec<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingMetadataForTags>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openCensusConfig")]
    pub open_census_config: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openTelemetryConfig")]
    pub open_telemetry_config: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenTelemetryConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersForTags")]
    pub request_headers_for_tags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spawnUpstreamSpan")]
    pub spawn_upstream_span: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tracePercentages")]
    pub trace_percentages: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingTracePercentages>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verbose: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "zipkinConfig")]
    pub zipkin_config: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingZipkinConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingDatadogConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorHostname")]
    pub collector_hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorUpstreamRef")]
    pub collector_upstream_ref: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingDatadogConfigCollectorUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteConfig")]
    pub remote_config: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingDatadogConfigRemoteConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingDatadogConfigCollectorUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingDatadogConfigRemoteConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pollingInterval")]
    pub polling_interval: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingEnvironmentVariablesForTags {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingLiteralsForTags {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingMetadataForTags {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingMetadataForTagsValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingMetadataForTagsValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nestedFieldDelimiter")]
    pub nested_field_delimiter: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcAddress")]
    pub grpc_address: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigGrpcAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpAddress")]
    pub http_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "incomingTraceContext")]
    pub incoming_trace_context: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocagentExporterEnabled")]
    pub ocagent_exporter_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outgoingTraceContext")]
    pub outgoing_trace_context: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "traceConfig")]
    pub trace_config: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigGrpcAddress {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statPrefix")]
    pub stat_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "constantSampler")]
    pub constant_sampler: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigConstantSampler>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfAnnotations")]
    pub max_number_of_annotations: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfAttributes")]
    pub max_number_of_attributes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfLinks")]
    pub max_number_of_links: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfMessageEvents")]
    pub max_number_of_message_events: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "probabilitySampler")]
    pub probability_sampler: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigProbabilitySampler>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitingSampler")]
    pub rate_limiting_sampler: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigRateLimitingSampler>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigConstantSampler {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub decision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigProbabilitySampler {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "samplingProbability")]
    pub sampling_probability: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigRateLimitingSampler {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qps: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenTelemetryConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorUpstreamRef")]
    pub collector_upstream_ref: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenTelemetryConfigCollectorUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenTelemetryConfigGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCacheSize")]
    pub max_cache_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenTelemetryConfigCollectorUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenTelemetryConfigGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingTracePercentages {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSamplePercentage")]
    pub client_sample_percentage: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overallSamplePercentage")]
    pub overall_sample_percentage: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "randomSamplePercentage")]
    pub random_sample_percentage: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingZipkinConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorEndpoint")]
    pub collector_endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorEndpointVersion")]
    pub collector_endpoint_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorUpstreamRef")]
    pub collector_upstream_ref: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingZipkinConfigCollectorUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sharedSpanContext")]
    pub shared_span_context: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "traceId128bit")]
    pub trace_id128bit: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsTracingZipkinConfigCollectorUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsUpgrades {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connect: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsUpgradesConnect>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub websocket: Option<GatewayHttpGatewayOptionsHttpConnectionManagerSettingsUpgradesWebsocket>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsUpgradesConnect {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsUpgradesWebsocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpConnectionManagerSettingsUuidRequestIdConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packTraceReason")]
    pub pack_trace_reason: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useRequestIdForTraceSampling")]
    pub use_request_id_for_trace_sampling: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpLocalRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultLimit")]
    pub default_limit: Option<GatewayHttpGatewayOptionsHttpLocalRatelimitDefaultLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableXRatelimitHeaders")]
    pub enable_x_ratelimit_headers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRateLimitPerDownstreamConnection")]
    pub local_rate_limit_per_downstream_connection: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsHttpLocalRatelimitDefaultLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillInterval")]
    pub fill_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokens")]
    pub max_tokens: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokensPerFill")]
    pub tokens_per_fill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsNetworkLocalRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillInterval")]
    pub fill_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokens")]
    pub max_tokens: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokensPerFill")]
    pub tokens_per_fill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsProxyLatency {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chargeClusterStat")]
    pub charge_cluster_stat: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chargeListenerStat")]
    pub charge_listener_stat: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emitDynamicMetadata")]
    pub emit_dynamic_metadata: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "measureRequestInternally")]
    pub measure_request_internally: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsRatelimitServer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "denyOnFail")]
    pub deny_on_fail: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableXRatelimitHeaders")]
    pub enable_x_ratelimit_headers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<GatewayHttpGatewayOptionsRatelimitServerGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitBeforeAuth")]
    pub rate_limit_before_auth: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ratelimitServerRef")]
    pub ratelimit_server_ref: Option<GatewayHttpGatewayOptionsRatelimitServerRatelimitServerRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTimeout")]
    pub request_timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsRatelimitServerGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsRatelimitServerRatelimitServerRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsRouter {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicStats")]
    pub dynamic_stats: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suppressEnvoyHeaders")]
    pub suppress_envoy_headers: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsStatefulSession {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cookieBased")]
    pub cookie_based: Option<GatewayHttpGatewayOptionsStatefulSessionCookieBased>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBased")]
    pub header_based: Option<GatewayHttpGatewayOptionsStatefulSessionHeaderBased>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strict: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsStatefulSessionCookieBased {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cookie: Option<GatewayHttpGatewayOptionsStatefulSessionCookieBasedCookie>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsStatefulSessionCookieBasedCookie {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsStatefulSessionHeaderBased {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsTap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBufferedRxBytes")]
    pub max_buffered_rx_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBufferedTxBytes")]
    pub max_buffered_tx_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordDownstreamConnection")]
    pub record_downstream_connection: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordHeadersReceivedTime")]
    pub record_headers_received_time: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sinks: Option<Vec<GatewayHttpGatewayOptionsTapSinks>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsTapSinks {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<GatewayHttpGatewayOptionsTapSinksGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpService")]
    pub http_service: Option<GatewayHttpGatewayOptionsTapSinksHttpService>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsTapSinksGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tapServer")]
    pub tap_server: Option<GatewayHttpGatewayOptionsTapSinksGrpcServiceTapServer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsTapSinksGrpcServiceTapServer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsTapSinksHttpService {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tapServer")]
    pub tap_server: Option<GatewayHttpGatewayOptionsTapSinksHttpServiceTapServer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsTapSinksHttpServiceTapServer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsWaf {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "auditLogging")]
    pub audit_logging: Option<GatewayHttpGatewayOptionsWafAuditLogging>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRuleSets")]
    pub config_map_rule_sets: Option<Vec<GatewayHttpGatewayOptionsWafConfigMapRuleSets>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreRuleSet")]
    pub core_rule_set: Option<GatewayHttpGatewayOptionsWafCoreRuleSet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customInterventionMessage")]
    pub custom_intervention_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersOnly")]
    pub request_headers_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersOnly")]
    pub response_headers_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleSets")]
    pub rule_sets: Option<Vec<GatewayHttpGatewayOptionsWafRuleSets>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsWafAuditLogging {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsWafConfigMapRuleSets {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<GatewayHttpGatewayOptionsWafConfigMapRuleSetsConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataMapKeys")]
    pub data_map_keys: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsWafConfigMapRuleSetsConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsWafCoreRuleSet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSettingsFile")]
    pub custom_settings_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSettingsString")]
    pub custom_settings_string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsWafRuleSets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleStr")]
    pub rule_str: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsWasm {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<GatewayHttpGatewayOptionsWasmFilters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsWasmFilters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failOpen")]
    pub fail_open: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filePath")]
    pub file_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterStage")]
    pub filter_stage: Option<GatewayHttpGatewayOptionsWasmFiltersFilterStage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootId")]
    pub root_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmType")]
    pub vm_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayOptionsWasmFiltersFilterStage {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub predicate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stage: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayVirtualServiceExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expressions: Option<Vec<GatewayHttpGatewayVirtualServiceExpressionsExpressions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayVirtualServiceExpressionsExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHttpGatewayVirtualServices {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGateway {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delegatedHttpGateways")]
    pub delegated_http_gateways: Option<GatewayHybridGatewayDelegatedHttpGateways>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delegatedTcpGateways")]
    pub delegated_tcp_gateways: Option<GatewayHybridGatewayDelegatedTcpGateways>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchedGateways")]
    pub matched_gateways: Option<Vec<GatewayHybridGatewayMatchedGateways>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGateways {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConnectionManagerSettings")]
    pub http_connection_manager_settings: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preventChildOverrides")]
    pub prevent_child_overrides: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<GatewayHybridGatewayDelegatedHttpGatewaysRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<GatewayHybridGatewayDelegatedHttpGatewaysSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslConfig")]
    pub ssl_config: Option<GatewayHybridGatewayDelegatedHttpGatewaysSslConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceptHttp10")]
    pub accept_http10: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowChunkedLength")]
    pub allow_chunked_length: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appendXForwardedPort")]
    pub append_x_forwarded_port: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codecType")]
    pub codec_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultHostForHttp10")]
    pub default_host_for_http10: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delayedCloseTimeout")]
    pub delayed_close_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drainTimeout")]
    pub drain_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "earlyHeaderManipulation")]
    pub early_header_manipulation: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsEarlyHeaderManipulation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableTrailers")]
    pub enable_trailers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardClientCertDetails")]
    pub forward_client_cert_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generateRequestId")]
    pub generate_request_id: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersWithUnderscoresAction")]
    pub headers_with_underscores_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http2ProtocolOptions")]
    pub http2_protocol_options: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsHttp2ProtocolOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeout")]
    pub idle_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalAddressConfig")]
    pub internal_address_config: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsInternalAddressConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnectionDuration")]
    pub max_connection_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxHeadersCount")]
    pub max_headers_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestHeadersKb")]
    pub max_request_headers_kb: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestsPerConnection")]
    pub max_requests_per_connection: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxStreamDuration")]
    pub max_stream_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeSlashes")]
    pub merge_slashes: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "normalizePath")]
    pub normalize_path: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathWithEscapedSlashesAction")]
    pub path_with_escaped_slashes_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveCaseHeaderKeyFormat")]
    pub preserve_case_header_key_format: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveExternalRequestId")]
    pub preserve_external_request_id: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "properCaseHeaderKeyFormat")]
    pub proper_case_header_key_format: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxy100Continue")]
    pub proxy100_continue: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersTimeout")]
    pub request_headers_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTimeout")]
    pub request_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverHeaderTransformation")]
    pub server_header_transformation: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setCurrentClientCertDetails")]
    pub set_current_client_cert_details: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsSetCurrentClientCertDetails>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipXffAppend")]
    pub skip_xff_append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamIdleTimeout")]
    pub stream_idle_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stripAnyHostPort")]
    pub strip_any_host_port: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracing>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upgrades: Option<Vec<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsUpgrades>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useRemoteAddress")]
    pub use_remote_address: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uuidRequestIdConfig")]
    pub uuid_request_id_config: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsUuidRequestIdConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub via: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xffNumTrustedHops")]
    pub xff_num_trusted_hops: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsEarlyHeaderManipulation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAdd")]
    pub headers_to_add: Option<Vec<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAddHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerSecretRef")]
    pub header_secret_ref: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAddHeaderSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAddHeaderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsHttp2ProtocolOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialConnectionWindowSize")]
    pub initial_connection_window_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialStreamWindowSize")]
    pub initial_stream_window_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentStreams")]
    pub max_concurrent_streams: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideStreamErrorOnInvalidHttpMessage")]
    pub override_stream_error_on_invalid_http_message: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsInternalAddressConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrRanges")]
    pub cidr_ranges: Option<Vec<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsInternalAddressConfigCidrRanges>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unixSockets")]
    pub unix_sockets: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsInternalAddressConfigCidrRanges {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addressPrefix")]
    pub address_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixLen")]
    pub prefix_len: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsSetCurrentClientCertDetails {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chain: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dns: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracing {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datadogConfig")]
    pub datadog_config: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingDatadogConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentVariablesForTags")]
    pub environment_variables_for_tags: Option<Vec<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingEnvironmentVariablesForTags>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "literalsForTags")]
    pub literals_for_tags: Option<Vec<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingLiteralsForTags>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataForTags")]
    pub metadata_for_tags: Option<Vec<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingMetadataForTags>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openCensusConfig")]
    pub open_census_config: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingOpenCensusConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openTelemetryConfig")]
    pub open_telemetry_config: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingOpenTelemetryConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersForTags")]
    pub request_headers_for_tags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spawnUpstreamSpan")]
    pub spawn_upstream_span: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tracePercentages")]
    pub trace_percentages: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingTracePercentages>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verbose: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "zipkinConfig")]
    pub zipkin_config: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingZipkinConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingDatadogConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorHostname")]
    pub collector_hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorUpstreamRef")]
    pub collector_upstream_ref: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingDatadogConfigCollectorUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteConfig")]
    pub remote_config: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingDatadogConfigRemoteConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingDatadogConfigCollectorUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingDatadogConfigRemoteConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pollingInterval")]
    pub polling_interval: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingEnvironmentVariablesForTags {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingLiteralsForTags {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingMetadataForTags {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingMetadataForTagsValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingMetadataForTagsValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nestedFieldDelimiter")]
    pub nested_field_delimiter: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingOpenCensusConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcAddress")]
    pub grpc_address: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingOpenCensusConfigGrpcAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpAddress")]
    pub http_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "incomingTraceContext")]
    pub incoming_trace_context: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocagentExporterEnabled")]
    pub ocagent_exporter_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outgoingTraceContext")]
    pub outgoing_trace_context: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "traceConfig")]
    pub trace_config: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingOpenCensusConfigGrpcAddress {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statPrefix")]
    pub stat_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "constantSampler")]
    pub constant_sampler: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigConstantSampler>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfAnnotations")]
    pub max_number_of_annotations: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfAttributes")]
    pub max_number_of_attributes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfLinks")]
    pub max_number_of_links: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfMessageEvents")]
    pub max_number_of_message_events: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "probabilitySampler")]
    pub probability_sampler: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigProbabilitySampler>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitingSampler")]
    pub rate_limiting_sampler: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigRateLimitingSampler>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigConstantSampler {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub decision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigProbabilitySampler {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "samplingProbability")]
    pub sampling_probability: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigRateLimitingSampler {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qps: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingOpenTelemetryConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorUpstreamRef")]
    pub collector_upstream_ref: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingOpenTelemetryConfigCollectorUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingOpenTelemetryConfigGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCacheSize")]
    pub max_cache_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingOpenTelemetryConfigCollectorUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingOpenTelemetryConfigGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingTracePercentages {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSamplePercentage")]
    pub client_sample_percentage: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overallSamplePercentage")]
    pub overall_sample_percentage: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "randomSamplePercentage")]
    pub random_sample_percentage: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingZipkinConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorEndpoint")]
    pub collector_endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorEndpointVersion")]
    pub collector_endpoint_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorUpstreamRef")]
    pub collector_upstream_ref: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingZipkinConfigCollectorUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sharedSpanContext")]
    pub shared_span_context: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "traceId128bit")]
    pub trace_id128bit: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsTracingZipkinConfigCollectorUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsUpgrades {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connect: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsUpgradesConnect>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub websocket: Option<GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsUpgradesWebsocket>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsUpgradesConnect {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsUpgradesWebsocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysHttpConnectionManagerSettingsUuidRequestIdConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packTraceReason")]
    pub pack_trace_reason: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useRequestIdForTraceSampling")]
    pub use_request_id_for_trace_sampling: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysSelector {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expressions: Option<Vec<GatewayHybridGatewayDelegatedHttpGatewaysSelectorExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysSelectorExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysSslConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnProtocols")]
    pub alpn_protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableTlsSessionResumption")]
    pub disable_tls_session_resumption: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaplePolicy")]
    pub ocsp_staple_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oneWayTls")]
    pub one_way_tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<GatewayHybridGatewayDelegatedHttpGatewaysSslConfigParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<GatewayHybridGatewayDelegatedHttpGatewaysSslConfigSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<GatewayHybridGatewayDelegatedHttpGatewaysSslConfigSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sniDomains")]
    pub sni_domains: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslFiles")]
    pub ssl_files: Option<GatewayHybridGatewayDelegatedHttpGatewaysSslConfigSslFiles>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportSocketConnectTimeout")]
    pub transport_socket_connect_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifySubjectAltName")]
    pub verify_subject_alt_name: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysSslConfigParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherSuites")]
    pub cipher_suites: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecdhCurves")]
    pub ecdh_curves: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysSslConfigSds {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callCredentials")]
    pub call_credentials: Option<GatewayHybridGatewayDelegatedHttpGatewaysSslConfigSdsCallCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatesSecretName")]
    pub certificates_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationContextName")]
    pub validation_context_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysSslConfigSdsCallCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileCredentialSource")]
    pub file_credential_source: Option<GatewayHybridGatewayDelegatedHttpGatewaysSslConfigSdsCallCredentialsFileCredentialSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysSslConfigSdsCallCredentialsFileCredentialSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenFileName")]
    pub token_file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysSslConfigSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedHttpGatewaysSslConfigSslFiles {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaple")]
    pub ocsp_staple: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCa")]
    pub root_ca: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCert")]
    pub tls_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedTcpGateways {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<GatewayHybridGatewayDelegatedTcpGatewaysRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<GatewayHybridGatewayDelegatedTcpGatewaysSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedTcpGatewaysRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedTcpGatewaysSelector {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expressions: Option<Vec<GatewayHybridGatewayDelegatedTcpGatewaysSelectorExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayDelegatedTcpGatewaysSelectorExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGateways {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGateway")]
    pub http_gateway: Option<GatewayHybridGatewayMatchedGatewaysHttpGateway>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<GatewayHybridGatewayMatchedGatewaysMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpGateway")]
    pub tcp_gateway: Option<GatewayHybridGatewayMatchedGatewaysTcpGateway>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGateway {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceExpressions")]
    pub virtual_service_expressions: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayVirtualServiceExpressions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceNamespaces")]
    pub virtual_service_namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceSelector")]
    pub virtual_service_selector: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServices")]
    pub virtual_services: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayVirtualServices>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub caching: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCaching>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionLimit")]
    pub connection_limit: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsConnectionLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csrf: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCsrf>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableExtProc")]
    pub disable_ext_proc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dlp: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicForwardProxy")]
    pub dynamic_forward_proxy: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extProc")]
    pub ext_proc: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extauth: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtauth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extensions: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtensions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcJsonTranscoder")]
    pub grpc_json_transcoder: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsGrpcJsonTranscoder>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcWeb")]
    pub grpc_web: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsGrpcWeb>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gzip: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsGzip>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerValidationSettings")]
    pub header_validation_settings: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHeaderValidationSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheck")]
    pub health_check: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHealthCheck>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConnectionManagerSettings")]
    pub http_connection_manager_settings: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpLocalRatelimit")]
    pub http_local_ratelimit: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpLocalRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "leftmostXffAddress")]
    pub leftmost_xff_address: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkLocalRatelimit")]
    pub network_local_ratelimit: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsNetworkLocalRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyLatency")]
    pub proxy_latency: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsProxyLatency>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ratelimitServer")]
    pub ratelimit_server: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsRatelimitServer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub router: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsRouter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sanitizeClusterHeader")]
    pub sanitize_cluster_header: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statefulSession")]
    pub stateful_session: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsStatefulSession>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tap: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsTap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub waf: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsWaf>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wasm: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsWasm>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCaching {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedVaryHeaders")]
    pub allowed_vary_headers: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCachingAllowedVaryHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cachingServiceRef")]
    pub caching_service_ref: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCachingCachingServiceRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPayloadSize")]
    pub max_payload_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCachingAllowedVaryHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCachingAllowedVaryHeadersSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCachingAllowedVaryHeadersSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCachingAllowedVaryHeadersSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCachingAllowedVaryHeadersSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCachingCachingServiceRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsConnectionLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delayBeforeClose")]
    pub delay_before_close: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxActiveConnections")]
    pub max_active_connections: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCsrf {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalOrigins")]
    pub additional_origins: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCsrfAdditionalOrigins>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterEnabled")]
    pub filter_enabled: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCsrfFilterEnabled>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowEnabled")]
    pub shadow_enabled: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCsrfShadowEnabled>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCsrfAdditionalOrigins {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCsrfAdditionalOriginsSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCsrfAdditionalOriginsSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCsrfFilterEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCsrfFilterEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCsrfFilterEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCsrfShadowEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCsrfShadowEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsCsrfShadowEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlp {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dlpRules")]
    pub dlp_rules: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRules>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enabledFor")]
    pub enabled_for: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRules {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRulesActions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRulesMatcher>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRulesActions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionType")]
    pub action_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAction")]
    pub custom_action: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRulesActionsCustomAction>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyValueAction")]
    pub key_value_action: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRulesActionsKeyValueAction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shadow: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRulesActionsCustomAction {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maskChar")]
    pub mask_char: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRulesActionsCustomActionPercent>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regexActions")]
    pub regex_actions: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRulesActionsCustomActionRegexActions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRulesActionsCustomActionPercent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRulesActionsCustomActionRegexActions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRulesActionsKeyValueAction {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyToMask")]
    pub key_to_mask: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maskChar")]
    pub mask_char: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRulesActionsKeyValueActionPercent>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRulesActionsKeyValueActionPercent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRulesMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRulesMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRulesMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRulesMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRulesMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRulesMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDlpDlpRulesMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "circuitBreakers")]
    pub circuit_breakers: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyCircuitBreakers>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsCacheConfig")]
    pub dns_cache_config: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyDnsCacheConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "saveUpstreamAddress")]
    pub save_upstream_address: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslConfig")]
    pub ssl_config: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxySslConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyCircuitBreakers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    pub max_connections: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingRequests")]
    pub max_pending_requests: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequests")]
    pub max_requests: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    pub max_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trackRemaining")]
    pub track_remaining: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyDnsCacheConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appleDns")]
    pub apple_dns: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigAppleDns>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caresDns")]
    pub cares_dns: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDns>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsCacheCircuitBreaker")]
    pub dns_cache_circuit_breaker: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigDnsCacheCircuitBreaker>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsFailureRefreshRate")]
    pub dns_failure_refresh_rate: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigDnsFailureRefreshRate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsLookupFamily")]
    pub dns_lookup_family: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsQueryTimeout")]
    pub dns_query_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsRefreshRate")]
    pub dns_refresh_rate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostTtl")]
    pub host_ttl: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxHosts")]
    pub max_hosts: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preresolveHostnames")]
    pub preresolve_hostnames: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigPreresolveHostnames>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigAppleDns {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDns {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsResolverOptions")]
    pub dns_resolver_options: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsDnsResolverOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolvers: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsResolvers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsDnsResolverOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDefaultSearchDomain")]
    pub no_default_search_domain: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTcpForDnsLookups")]
    pub use_tcp_for_dns_lookups: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsResolvers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pipe: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsResolversPipe>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "socketAddress")]
    pub socket_address: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsResolversSocketAddress>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsResolversPipe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigCaresDnsResolversSocketAddress {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4Compat")]
    pub ipv4_compat: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namedPort")]
    pub named_port: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portValue")]
    pub port_value: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resolverName")]
    pub resolver_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigDnsCacheCircuitBreaker {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingRequests")]
    pub max_pending_requests: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigDnsFailureRefreshRate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseInterval")]
    pub base_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInterval")]
    pub max_interval: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxyDnsCacheConfigPreresolveHostnames {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4Compat")]
    pub ipv4_compat: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namedPort")]
    pub named_port: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portValue")]
    pub port_value: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resolverName")]
    pub resolver_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxySslConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRenegotiation")]
    pub allow_renegotiation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnProtocols")]
    pub alpn_protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oneWayTls")]
    pub one_way_tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxySslConfigParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxySslConfigSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxySslConfigSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslFiles")]
    pub ssl_files: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxySslConfigSslFiles>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifySubjectAltName")]
    pub verify_subject_alt_name: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxySslConfigParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherSuites")]
    pub cipher_suites: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecdhCurves")]
    pub ecdh_curves: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxySslConfigSds {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callCredentials")]
    pub call_credentials: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxySslConfigSdsCallCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatesSecretName")]
    pub certificates_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationContextName")]
    pub validation_context_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxySslConfigSdsCallCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileCredentialSource")]
    pub file_credential_source: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxySslConfigSdsCallCredentialsFileCredentialSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxySslConfigSdsCallCredentialsFileCredentialSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenFileName")]
    pub token_file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxySslConfigSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsDynamicForwardProxySslConfigSslFiles {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaple")]
    pub ocsp_staple: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCa")]
    pub root_ca: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCert")]
    pub tls_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProc {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowModeOverride")]
    pub allow_mode_override: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncMode")]
    pub async_mode: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableClearRouteCache")]
    pub disable_clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureModeAllow")]
    pub failure_mode_allow: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterMetadata")]
    pub filter_metadata: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterStage")]
    pub filter_stage: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcFilterStage>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardRules")]
    pub forward_rules: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcForwardRules>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxMessageTimeout")]
    pub max_message_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageTimeout")]
    pub message_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataContextNamespaces")]
    pub metadata_context_namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mutationRules")]
    pub mutation_rules: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcMutationRules>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingMode")]
    pub processing_mode: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcProcessingMode>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestAttributes")]
    pub request_attributes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseAttributes")]
    pub response_attributes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statPrefix")]
    pub stat_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "typedMetadataContextNamespaces")]
    pub typed_metadata_context_namespaces: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcFilterStage {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub predicate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stage: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcForwardRules {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedHeaders")]
    pub allowed_headers: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcForwardRulesAllowedHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowedHeaders")]
    pub disallowed_headers: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcForwardRulesDisallowedHeaders>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcForwardRulesAllowedHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patterns: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcForwardRulesAllowedHeadersPatterns>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcForwardRulesAllowedHeadersPatterns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcForwardRulesAllowedHeadersPatternsSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcForwardRulesAllowedHeadersPatternsSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcForwardRulesAllowedHeadersPatternsSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcForwardRulesAllowedHeadersPatternsSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcForwardRulesDisallowedHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patterns: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcForwardRulesDisallowedHeadersPatterns>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcForwardRulesDisallowedHeadersPatterns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcForwardRulesDisallowedHeadersPatternsSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcForwardRulesDisallowedHeadersPatternsSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcForwardRulesDisallowedHeadersPatternsSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcForwardRulesDisallowedHeadersPatternsSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extProcServerRef")]
    pub ext_proc_server_ref: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcGrpcServiceExtProcServerRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialMetadata")]
    pub initial_metadata: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcGrpcServiceInitialMetadata>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryPolicy")]
    pub retry_policy: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcGrpcServiceRetryPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcGrpcServiceExtProcServerRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcGrpcServiceInitialMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcGrpcServiceRetryPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numRetries")]
    pub num_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryBackOff")]
    pub retry_back_off: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcGrpcServiceRetryPolicyRetryBackOff>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcGrpcServiceRetryPolicyRetryBackOff {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseInterval")]
    pub base_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInterval")]
    pub max_interval: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcMutationRules {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowAllRouting")]
    pub allow_all_routing: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEnvoy")]
    pub allow_envoy: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowExpression")]
    pub allow_expression: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcMutationRulesAllowExpression>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowAll")]
    pub disallow_all: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowExpression")]
    pub disallow_expression: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcMutationRulesDisallowExpression>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowIsError")]
    pub disallow_is_error: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowSystem")]
    pub disallow_system: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcMutationRulesAllowExpression {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcMutationRulesAllowExpressionGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcMutationRulesAllowExpressionGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcMutationRulesDisallowExpression {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcMutationRulesDisallowExpressionGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcMutationRulesDisallowExpressionGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtProcProcessingMode {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestBodyMode")]
    pub request_body_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaderMode")]
    pub request_header_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTrailerMode")]
    pub request_trailer_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseBodyMode")]
    pub response_body_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeaderMode")]
    pub response_header_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTrailerMode")]
    pub response_trailer_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtauth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extauthzServerRef")]
    pub extauthz_server_ref: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtauthExtauthzServerRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureModeAllow")]
    pub failure_mode_allow: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtauthGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpService")]
    pub http_service: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtauthHttpService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestBody")]
    pub request_body: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtauthRequestBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTimeout")]
    pub request_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statPrefix")]
    pub stat_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusOnError")]
    pub status_on_error: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportApiVersion")]
    pub transport_api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userIdHeader")]
    pub user_id_header: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtauthExtauthzServerRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtauthGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtauthHttpService {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathPrefix")]
    pub path_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtauthHttpServiceRequest>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtauthHttpServiceResponse>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtauthHttpServiceRequest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedHeaders")]
    pub allowed_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedHeadersRegex")]
    pub allowed_headers_regex: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAdd")]
    pub headers_to_add: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtauthHttpServiceResponse {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedClientHeaders")]
    pub allowed_client_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedUpstreamHeaders")]
    pub allowed_upstream_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedUpstreamHeadersToAppend")]
    pub allowed_upstream_headers_to_append: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtauthRequestBody {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPartialMessage")]
    pub allow_partial_message: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packAsBytes")]
    pub pack_as_bytes: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsExtensions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsGrpcJsonTranscoder {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMapping")]
    pub auto_mapping: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "convertGrpcStatus")]
    pub convert_grpc_status: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreUnknownQueryParameters")]
    pub ignore_unknown_query_parameters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoredQueryParameters")]
    pub ignored_query_parameters: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchIncomingRequestRoute")]
    pub match_incoming_request_route: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "printOptions")]
    pub print_options: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsGrpcJsonTranscoderPrintOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptor")]
    pub proto_descriptor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorBin")]
    pub proto_descriptor_bin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protoDescriptorConfigMap")]
    pub proto_descriptor_config_map: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsGrpcJsonTranscoderProtoDescriptorConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsGrpcJsonTranscoderPrintOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addWhitespace")]
    pub add_whitespace: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintEnumsAsInts")]
    pub always_print_enums_as_ints: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alwaysPrintPrimitiveFields")]
    pub always_print_primitive_fields: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveProtoFieldNames")]
    pub preserve_proto_field_names: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsGrpcJsonTranscoderProtoDescriptorConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsGrpcJsonTranscoderProtoDescriptorConfigMapConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsGrpcWeb {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsGzip {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionLevel")]
    pub compression_level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionStrategy")]
    pub compression_strategy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentLength")]
    pub content_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableOnEtagHeader")]
    pub disable_on_etag_header: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryLevel")]
    pub memory_level: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "removeAcceptEncodingHeader")]
    pub remove_accept_encoding_header: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowBits")]
    pub window_bits: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHeaderValidationSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableHttp1MethodValidation")]
    pub disable_http1_method_validation: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHeaderValidationSettingsDisableHttp1MethodValidation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHeaderValidationSettingsDisableHttp1MethodValidation {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHealthCheck {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceptHttp10")]
    pub accept_http10: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowChunkedLength")]
    pub allow_chunked_length: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appendXForwardedPort")]
    pub append_x_forwarded_port: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codecType")]
    pub codec_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultHostForHttp10")]
    pub default_host_for_http10: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delayedCloseTimeout")]
    pub delayed_close_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drainTimeout")]
    pub drain_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "earlyHeaderManipulation")]
    pub early_header_manipulation: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableTrailers")]
    pub enable_trailers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardClientCertDetails")]
    pub forward_client_cert_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generateRequestId")]
    pub generate_request_id: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersWithUnderscoresAction")]
    pub headers_with_underscores_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http2ProtocolOptions")]
    pub http2_protocol_options: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsHttp2ProtocolOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeout")]
    pub idle_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalAddressConfig")]
    pub internal_address_config: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsInternalAddressConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnectionDuration")]
    pub max_connection_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxHeadersCount")]
    pub max_headers_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestHeadersKb")]
    pub max_request_headers_kb: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestsPerConnection")]
    pub max_requests_per_connection: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxStreamDuration")]
    pub max_stream_duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeSlashes")]
    pub merge_slashes: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "normalizePath")]
    pub normalize_path: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathWithEscapedSlashesAction")]
    pub path_with_escaped_slashes_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveCaseHeaderKeyFormat")]
    pub preserve_case_header_key_format: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveExternalRequestId")]
    pub preserve_external_request_id: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "properCaseHeaderKeyFormat")]
    pub proper_case_header_key_format: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxy100Continue")]
    pub proxy100_continue: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersTimeout")]
    pub request_headers_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTimeout")]
    pub request_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverHeaderTransformation")]
    pub server_header_transformation: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setCurrentClientCertDetails")]
    pub set_current_client_cert_details: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsSetCurrentClientCertDetails>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipXffAppend")]
    pub skip_xff_append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamIdleTimeout")]
    pub stream_idle_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stripAnyHostPort")]
    pub strip_any_host_port: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracing>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upgrades: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsUpgrades>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useRemoteAddress")]
    pub use_remote_address: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uuidRequestIdConfig")]
    pub uuid_request_id_config: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsUuidRequestIdConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub via: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xffNumTrustedHops")]
    pub xff_num_trusted_hops: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAdd")]
    pub headers_to_add: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAddHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerSecretRef")]
    pub header_secret_ref: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAddHeaderSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsEarlyHeaderManipulationHeadersToAddHeaderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsHttp2ProtocolOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialConnectionWindowSize")]
    pub initial_connection_window_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialStreamWindowSize")]
    pub initial_stream_window_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentStreams")]
    pub max_concurrent_streams: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideStreamErrorOnInvalidHttpMessage")]
    pub override_stream_error_on_invalid_http_message: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsInternalAddressConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrRanges")]
    pub cidr_ranges: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsInternalAddressConfigCidrRanges>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unixSockets")]
    pub unix_sockets: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsInternalAddressConfigCidrRanges {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addressPrefix")]
    pub address_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixLen")]
    pub prefix_len: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsSetCurrentClientCertDetails {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chain: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dns: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subject: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracing {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datadogConfig")]
    pub datadog_config: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingDatadogConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentVariablesForTags")]
    pub environment_variables_for_tags: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingEnvironmentVariablesForTags>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "literalsForTags")]
    pub literals_for_tags: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingLiteralsForTags>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataForTags")]
    pub metadata_for_tags: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingMetadataForTags>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openCensusConfig")]
    pub open_census_config: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openTelemetryConfig")]
    pub open_telemetry_config: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenTelemetryConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersForTags")]
    pub request_headers_for_tags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spawnUpstreamSpan")]
    pub spawn_upstream_span: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tracePercentages")]
    pub trace_percentages: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingTracePercentages>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verbose: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "zipkinConfig")]
    pub zipkin_config: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingZipkinConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingDatadogConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorHostname")]
    pub collector_hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorUpstreamRef")]
    pub collector_upstream_ref: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingDatadogConfigCollectorUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteConfig")]
    pub remote_config: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingDatadogConfigRemoteConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingDatadogConfigCollectorUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingDatadogConfigRemoteConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pollingInterval")]
    pub polling_interval: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingEnvironmentVariablesForTags {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingLiteralsForTags {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingMetadataForTags {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingMetadataForTagsValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingMetadataForTagsValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nestedFieldDelimiter")]
    pub nested_field_delimiter: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcAddress")]
    pub grpc_address: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigGrpcAddress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpAddress")]
    pub http_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "incomingTraceContext")]
    pub incoming_trace_context: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocagentExporterEnabled")]
    pub ocagent_exporter_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outgoingTraceContext")]
    pub outgoing_trace_context: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "traceConfig")]
    pub trace_config: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigGrpcAddress {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statPrefix")]
    pub stat_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "constantSampler")]
    pub constant_sampler: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigConstantSampler>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfAnnotations")]
    pub max_number_of_annotations: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfAttributes")]
    pub max_number_of_attributes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfLinks")]
    pub max_number_of_links: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNumberOfMessageEvents")]
    pub max_number_of_message_events: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "probabilitySampler")]
    pub probability_sampler: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigProbabilitySampler>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitingSampler")]
    pub rate_limiting_sampler: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigRateLimitingSampler>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigConstantSampler {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub decision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigProbabilitySampler {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "samplingProbability")]
    pub sampling_probability: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenCensusConfigTraceConfigRateLimitingSampler {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qps: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenTelemetryConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorUpstreamRef")]
    pub collector_upstream_ref: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenTelemetryConfigCollectorUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenTelemetryConfigGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCacheSize")]
    pub max_cache_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenTelemetryConfigCollectorUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingOpenTelemetryConfigGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingTracePercentages {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSamplePercentage")]
    pub client_sample_percentage: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overallSamplePercentage")]
    pub overall_sample_percentage: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "randomSamplePercentage")]
    pub random_sample_percentage: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingZipkinConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorEndpoint")]
    pub collector_endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorEndpointVersion")]
    pub collector_endpoint_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorUpstreamRef")]
    pub collector_upstream_ref: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingZipkinConfigCollectorUpstreamRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sharedSpanContext")]
    pub shared_span_context: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "traceId128bit")]
    pub trace_id128bit: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsTracingZipkinConfigCollectorUpstreamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsUpgrades {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connect: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsUpgradesConnect>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub websocket: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsUpgradesWebsocket>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsUpgradesConnect {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsUpgradesWebsocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpConnectionManagerSettingsUuidRequestIdConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packTraceReason")]
    pub pack_trace_reason: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useRequestIdForTraceSampling")]
    pub use_request_id_for_trace_sampling: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpLocalRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultLimit")]
    pub default_limit: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpLocalRatelimitDefaultLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableXRatelimitHeaders")]
    pub enable_x_ratelimit_headers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRateLimitPerDownstreamConnection")]
    pub local_rate_limit_per_downstream_connection: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsHttpLocalRatelimitDefaultLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillInterval")]
    pub fill_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokens")]
    pub max_tokens: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokensPerFill")]
    pub tokens_per_fill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsNetworkLocalRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillInterval")]
    pub fill_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokens")]
    pub max_tokens: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokensPerFill")]
    pub tokens_per_fill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsProxyLatency {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chargeClusterStat")]
    pub charge_cluster_stat: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chargeListenerStat")]
    pub charge_listener_stat: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emitDynamicMetadata")]
    pub emit_dynamic_metadata: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "measureRequestInternally")]
    pub measure_request_internally: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsRatelimitServer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "denyOnFail")]
    pub deny_on_fail: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableXRatelimitHeaders")]
    pub enable_x_ratelimit_headers: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsRatelimitServerGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimitBeforeAuth")]
    pub rate_limit_before_auth: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ratelimitServerRef")]
    pub ratelimit_server_ref: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsRatelimitServerRatelimitServerRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTimeout")]
    pub request_timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsRatelimitServerGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsRatelimitServerRatelimitServerRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsRouter {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicStats")]
    pub dynamic_stats: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suppressEnvoyHeaders")]
    pub suppress_envoy_headers: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsStatefulSession {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cookieBased")]
    pub cookie_based: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsStatefulSessionCookieBased>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBased")]
    pub header_based: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsStatefulSessionHeaderBased>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strict: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsStatefulSessionCookieBased {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cookie: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsStatefulSessionCookieBasedCookie>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsStatefulSessionCookieBasedCookie {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsStatefulSessionHeaderBased {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsTap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBufferedRxBytes")]
    pub max_buffered_rx_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBufferedTxBytes")]
    pub max_buffered_tx_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordDownstreamConnection")]
    pub record_downstream_connection: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordHeadersReceivedTime")]
    pub record_headers_received_time: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sinks: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsTapSinks>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsTapSinks {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsTapSinksGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpService")]
    pub http_service: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsTapSinksHttpService>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsTapSinksGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tapServer")]
    pub tap_server: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsTapSinksGrpcServiceTapServer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsTapSinksGrpcServiceTapServer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsTapSinksHttpService {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tapServer")]
    pub tap_server: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsTapSinksHttpServiceTapServer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsTapSinksHttpServiceTapServer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsWaf {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "auditLogging")]
    pub audit_logging: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsWafAuditLogging>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRuleSets")]
    pub config_map_rule_sets: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsWafConfigMapRuleSets>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreRuleSet")]
    pub core_rule_set: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsWafCoreRuleSet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customInterventionMessage")]
    pub custom_intervention_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersOnly")]
    pub request_headers_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersOnly")]
    pub response_headers_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleSets")]
    pub rule_sets: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsWafRuleSets>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsWafAuditLogging {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsWafConfigMapRuleSets {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsWafConfigMapRuleSetsConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataMapKeys")]
    pub data_map_keys: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsWafConfigMapRuleSetsConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsWafCoreRuleSet {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSettingsFile")]
    pub custom_settings_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customSettingsString")]
    pub custom_settings_string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsWafRuleSets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub files: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleStr")]
    pub rule_str: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsWasm {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsWasmFilters>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsWasmFilters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failOpen")]
    pub fail_open: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filePath")]
    pub file_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterStage")]
    pub filter_stage: Option<GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsWasmFiltersFilterStage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootId")]
    pub root_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmType")]
    pub vm_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayOptionsWasmFiltersFilterStage {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub predicate: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stage: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayVirtualServiceExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expressions: Option<Vec<GatewayHybridGatewayMatchedGatewaysHttpGatewayVirtualServiceExpressionsExpressions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayVirtualServiceExpressionsExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysHttpGatewayVirtualServices {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passthroughCipherSuites")]
    pub passthrough_cipher_suites: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourcePrefixRanges")]
    pub source_prefix_ranges: Option<Vec<GatewayHybridGatewayMatchedGatewaysMatcherSourcePrefixRanges>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslConfig")]
    pub ssl_config: Option<GatewayHybridGatewayMatchedGatewaysMatcherSslConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysMatcherSourcePrefixRanges {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addressPrefix")]
    pub address_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixLen")]
    pub prefix_len: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysMatcherSslConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnProtocols")]
    pub alpn_protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableTlsSessionResumption")]
    pub disable_tls_session_resumption: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaplePolicy")]
    pub ocsp_staple_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oneWayTls")]
    pub one_way_tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<GatewayHybridGatewayMatchedGatewaysMatcherSslConfigParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<GatewayHybridGatewayMatchedGatewaysMatcherSslConfigSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<GatewayHybridGatewayMatchedGatewaysMatcherSslConfigSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sniDomains")]
    pub sni_domains: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslFiles")]
    pub ssl_files: Option<GatewayHybridGatewayMatchedGatewaysMatcherSslConfigSslFiles>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportSocketConnectTimeout")]
    pub transport_socket_connect_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifySubjectAltName")]
    pub verify_subject_alt_name: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysMatcherSslConfigParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherSuites")]
    pub cipher_suites: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecdhCurves")]
    pub ecdh_curves: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysMatcherSslConfigSds {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callCredentials")]
    pub call_credentials: Option<GatewayHybridGatewayMatchedGatewaysMatcherSslConfigSdsCallCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatesSecretName")]
    pub certificates_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationContextName")]
    pub validation_context_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysMatcherSslConfigSdsCallCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileCredentialSource")]
    pub file_credential_source: Option<GatewayHybridGatewayMatchedGatewaysMatcherSslConfigSdsCallCredentialsFileCredentialSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysMatcherSslConfigSdsCallCredentialsFileCredentialSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenFileName")]
    pub token_file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysMatcherSslConfigSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysMatcherSslConfigSslFiles {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaple")]
    pub ocsp_staple: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCa")]
    pub root_ca: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCert")]
    pub tls_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGateway {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpHosts")]
    pub tcp_hosts: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHosts>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionLimit")]
    pub connection_limit: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayOptionsConnectionLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRatelimit")]
    pub local_ratelimit: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayOptionsLocalRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpProxySettings")]
    pub tcp_proxy_settings: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayOptionsTcpProxySettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayOptionsConnectionLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delayBeforeClose")]
    pub delay_before_close: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxActiveConnections")]
    pub max_active_connections: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayOptionsLocalRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillInterval")]
    pub fill_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokens")]
    pub max_tokens: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokensPerFill")]
    pub tokens_per_fill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayOptionsTcpProxySettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLogFlushInterval")]
    pub access_log_flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeout")]
    pub idle_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnectAttempts")]
    pub max_connect_attempts: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tunnelingConfig")]
    pub tunneling_config: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayOptionsTcpProxySettingsTunnelingConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayOptionsTcpProxySettingsTunnelingConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAdd")]
    pub headers_to_add: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayOptionsTcpProxySettingsTunnelingConfigHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayOptionsTcpProxySettingsTunnelingConfigHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayOptionsTcpProxySettingsTunnelingConfigHeadersToAddHeader>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayOptionsTcpProxySettingsTunnelingConfigHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHosts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestination>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslConfig")]
    pub ssl_config: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsSslConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestination {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardSniClusterName")]
    pub forward_sni_cluster_name: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationForwardSniClusterName>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multi: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMulti>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub single: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingle>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamGroup")]
    pub upstream_group: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationUpstreamGroup>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationForwardSniClusterName {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMulti {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destinations: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinations>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestination>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub consul: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationConsul>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationSpec")]
    pub destination_spec: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpec>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kube: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationKube>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subset: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationSubset>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upstream: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationUpstream>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationConsul {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCenters")]
    pub data_centers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecAws>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecAzure>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rest: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRest>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecAws {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invocationStyle")]
    pub invocation_style: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logicalName")]
    pub logical_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsAlb")]
    pub unwrap_as_alb: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsApiGateway")]
    pub unwrap_as_api_gateway: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wrapAsApiGateway")]
    pub wrap_as_api_gateway: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecAzure {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionName")]
    pub function_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub function: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub package: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecGrpcParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecGrpcParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionName")]
    pub function_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationKube {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationKubeRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationKubeRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationSubset {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsDestinationUpstream {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferPerRoute")]
    pub buffer_per_route: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsBufferPerRoute>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csrf: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrf>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extauth: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsExtauth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extensions: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsExtensions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerManipulation")]
    pub header_manipulation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stagedTransformations")]
    pub staged_transformations: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformations>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transformations: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformations>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsBufferPerRoute {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsBufferPerRouteBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsBufferPerRouteBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrf {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalOrigins")]
    pub additional_origins: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfAdditionalOrigins>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterEnabled")]
    pub filter_enabled: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfFilterEnabled>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowEnabled")]
    pub shadow_enabled: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfShadowEnabled>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfAdditionalOrigins {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfAdditionalOriginsSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfAdditionalOriginsSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfFilterEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfFilterEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfFilterEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfShadowEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfShadowEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfShadowEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsExtauth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsExtauthConfigRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAuth")]
    pub custom_auth: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsExtauthCustomAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsExtauthConfigRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsExtauthCustomAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contextExtensions")]
    pub context_extensions: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsExtensions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToAdd")]
    pub request_headers_to_add: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulationRequestHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToRemove")]
    pub request_headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersToAdd")]
    pub response_headers_to_add: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulationResponseHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersToRemove")]
    pub response_headers_to_remove: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulationRequestHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulationRequestHeadersToAddHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerSecretRef")]
    pub header_secret_ref: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulationRequestHeadersToAddHeaderSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulationRequestHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulationRequestHeadersToAddHeaderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulationResponseHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulationResponseHeadersToAddHeader>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulationResponseHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub early: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarly>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inheritTransformation")]
    pub inherit_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postRouting")]
    pub post_routing: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRouting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regular: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegular>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarly {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRouting {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegular {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingle {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub consul: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleConsul>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationSpec")]
    pub destination_spec: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpec>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kube: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleKube>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subset: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleSubset>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upstream: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleUpstream>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleConsul {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCenters")]
    pub data_centers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecAws>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecAzure>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rest: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRest>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecAws {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invocationStyle")]
    pub invocation_style: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logicalName")]
    pub logical_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsAlb")]
    pub unwrap_as_alb: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsApiGateway")]
    pub unwrap_as_api_gateway: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wrapAsApiGateway")]
    pub wrap_as_api_gateway: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecAzure {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionName")]
    pub function_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub function: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub package: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecGrpcParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecGrpcParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionName")]
    pub function_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleKube {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleKubeRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleKubeRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleSubset {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationSingleUpstream {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsDestinationUpstreamGroup {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsSslConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnProtocols")]
    pub alpn_protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableTlsSessionResumption")]
    pub disable_tls_session_resumption: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaplePolicy")]
    pub ocsp_staple_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oneWayTls")]
    pub one_way_tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsSslConfigParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsSslConfigSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsSslConfigSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sniDomains")]
    pub sni_domains: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslFiles")]
    pub ssl_files: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsSslConfigSslFiles>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportSocketConnectTimeout")]
    pub transport_socket_connect_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifySubjectAltName")]
    pub verify_subject_alt_name: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsSslConfigParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherSuites")]
    pub cipher_suites: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecdhCurves")]
    pub ecdh_curves: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsSslConfigSds {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callCredentials")]
    pub call_credentials: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsSslConfigSdsCallCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatesSecretName")]
    pub certificates_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationContextName")]
    pub validation_context_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsSslConfigSdsCallCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileCredentialSource")]
    pub file_credential_source: Option<GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsSslConfigSdsCallCredentialsFileCredentialSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsSslConfigSdsCallCredentialsFileCredentialSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenFileName")]
    pub token_file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsSslConfigSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayHybridGatewayMatchedGatewaysTcpGatewayTcpHostsSslConfigSslFiles {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaple")]
    pub ocsp_staple: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCa")]
    pub root_ca: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCert")]
    pub tls_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayNamespacedStatuses {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLoggingService")]
    pub access_logging_service: Option<GatewayOptionsAccessLoggingService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionBalanceConfig")]
    pub connection_balance_config: Option<GatewayOptionsConnectionBalanceConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extensions: Option<GatewayOptionsExtensions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerAccessLoggingService")]
    pub listener_access_logging_service: Option<GatewayOptionsListenerAccessLoggingService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "perConnectionBufferLimitBytes")]
    pub per_connection_buffer_limit_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyProtocol")]
    pub proxy_protocol: Option<GatewayOptionsProxyProtocol>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "socketOptions")]
    pub socket_options: Option<Vec<GatewayOptionsSocketOptions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpStats")]
    pub tcp_stats: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingService {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLog")]
    pub access_log: Option<Vec<GatewayOptionsAccessLoggingServiceAccessLog>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLog {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSink")]
    pub file_sink: Option<GatewayOptionsAccessLoggingServiceAccessLogFileSink>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<GatewayOptionsAccessLoggingServiceAccessLogFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<GatewayOptionsAccessLoggingServiceAccessLogGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openTelemetryService")]
    pub open_telemetry_service: Option<GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryService>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogFileSink {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonFormat")]
    pub json_format: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stringFormat")]
    pub string_format: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogFilter {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "andFilter")]
    pub and_filter: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "durationFilter")]
    pub duration_filter: Option<GatewayOptionsAccessLoggingServiceAccessLogFilterDurationFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcStatusFilter")]
    pub grpc_status_filter: Option<GatewayOptionsAccessLoggingServiceAccessLogFilterGrpcStatusFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerFilter")]
    pub header_filter: Option<GatewayOptionsAccessLoggingServiceAccessLogFilterHeaderFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notHealthCheckFilter")]
    pub not_health_check_filter: Option<GatewayOptionsAccessLoggingServiceAccessLogFilterNotHealthCheckFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orFilter")]
    pub or_filter: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseFlagFilter")]
    pub response_flag_filter: Option<GatewayOptionsAccessLoggingServiceAccessLogFilterResponseFlagFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeFilter")]
    pub runtime_filter: Option<GatewayOptionsAccessLoggingServiceAccessLogFilterRuntimeFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusCodeFilter")]
    pub status_code_filter: Option<GatewayOptionsAccessLoggingServiceAccessLogFilterStatusCodeFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "traceableFilter")]
    pub traceable_filter: Option<GatewayOptionsAccessLoggingServiceAccessLogFilterTraceableFilter>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogFilterDurationFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comparison: Option<GatewayOptionsAccessLoggingServiceAccessLogFilterDurationFilterComparison>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogFilterDurationFilterComparison {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub op: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayOptionsAccessLoggingServiceAccessLogFilterDurationFilterComparisonValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogFilterDurationFilterComparisonValue {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogFilterGrpcStatusFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogFilterHeaderFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<GatewayOptionsAccessLoggingServiceAccessLogFilterHeaderFilterHeader>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogFilterHeaderFilterHeader {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<GatewayOptionsAccessLoggingServiceAccessLogFilterHeaderFilterHeaderRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegexMatch")]
    pub safe_regex_match: Option<GatewayOptionsAccessLoggingServiceAccessLogFilterHeaderFilterHeaderSafeRegexMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogFilterHeaderFilterHeaderRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogFilterHeaderFilterHeaderSafeRegexMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<GatewayOptionsAccessLoggingServiceAccessLogFilterHeaderFilterHeaderSafeRegexMatchGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogFilterHeaderFilterHeaderSafeRegexMatchGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogFilterNotHealthCheckFilter {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogFilterResponseFlagFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogFilterRuntimeFilter {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "percentSampled")]
    pub percent_sampled: Option<GatewayOptionsAccessLoggingServiceAccessLogFilterRuntimeFilterPercentSampled>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useIndependentRandomness")]
    pub use_independent_randomness: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogFilterRuntimeFilterPercentSampled {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogFilterStatusCodeFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comparison: Option<GatewayOptionsAccessLoggingServiceAccessLogFilterStatusCodeFilterComparison>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogFilterStatusCodeFilterComparison {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub op: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayOptionsAccessLoggingServiceAccessLogFilterStatusCodeFilterComparisonValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogFilterStatusCodeFilterComparisonValue {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogFilterTraceableFilter {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalRequestHeadersToLog")]
    pub additional_request_headers_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalResponseHeadersToLog")]
    pub additional_response_headers_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalResponseTrailersToLog")]
    pub additional_response_trailers_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterStateObjectsToLog")]
    pub filter_state_objects_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logName")]
    pub log_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "staticClusterName")]
    pub static_cluster_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryServiceAttributes>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collector: Option<GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryServiceCollector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableBuiltinLabels")]
    pub disable_builtin_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterStateObjectsToLog")]
    pub filter_state_objects_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logName")]
    pub log_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryServiceAttributes {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryServiceAttributesValues>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryServiceAttributesValues {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryServiceCollector {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslConfig")]
    pub ssl_config: Option<GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRenegotiation")]
    pub allow_renegotiation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnProtocols")]
    pub alpn_protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oneWayTls")]
    pub one_way_tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslFiles")]
    pub ssl_files: Option<GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigSslFiles>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifySubjectAltName")]
    pub verify_subject_alt_name: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherSuites")]
    pub cipher_suites: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecdhCurves")]
    pub ecdh_curves: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigSds {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callCredentials")]
    pub call_credentials: Option<GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigSdsCallCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatesSecretName")]
    pub certificates_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationContextName")]
    pub validation_context_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigSdsCallCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileCredentialSource")]
    pub file_credential_source: Option<GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigSdsCallCredentialsFileCredentialSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigSdsCallCredentialsFileCredentialSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenFileName")]
    pub token_file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigSslFiles {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaple")]
    pub ocsp_staple: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCa")]
    pub root_ca: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCert")]
    pub tls_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsConnectionBalanceConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactBalance")]
    pub exact_balance: Option<GatewayOptionsConnectionBalanceConfigExactBalance>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsConnectionBalanceConfigExactBalance {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsExtensions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingService {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLog")]
    pub access_log: Option<Vec<GatewayOptionsListenerAccessLoggingServiceAccessLog>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLog {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSink")]
    pub file_sink: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogFileSink>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogGrpcService>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openTelemetryService")]
    pub open_telemetry_service: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryService>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogFileSink {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonFormat")]
    pub json_format: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stringFormat")]
    pub string_format: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogFilter {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "andFilter")]
    pub and_filter: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "durationFilter")]
    pub duration_filter: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogFilterDurationFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcStatusFilter")]
    pub grpc_status_filter: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogFilterGrpcStatusFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerFilter")]
    pub header_filter: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogFilterHeaderFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notHealthCheckFilter")]
    pub not_health_check_filter: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogFilterNotHealthCheckFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orFilter")]
    pub or_filter: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseFlagFilter")]
    pub response_flag_filter: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogFilterResponseFlagFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeFilter")]
    pub runtime_filter: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogFilterRuntimeFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusCodeFilter")]
    pub status_code_filter: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogFilterStatusCodeFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "traceableFilter")]
    pub traceable_filter: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogFilterTraceableFilter>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogFilterDurationFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comparison: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogFilterDurationFilterComparison>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogFilterDurationFilterComparison {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub op: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogFilterDurationFilterComparisonValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogFilterDurationFilterComparisonValue {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogFilterGrpcStatusFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogFilterHeaderFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogFilterHeaderFilterHeader>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogFilterHeaderFilterHeader {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exactMatch")]
    pub exact_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixMatch")]
    pub prefix_match: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "presentMatch")]
    pub present_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rangeMatch")]
    pub range_match: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogFilterHeaderFilterHeaderRangeMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegexMatch")]
    pub safe_regex_match: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogFilterHeaderFilterHeaderSafeRegexMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "suffixMatch")]
    pub suffix_match: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogFilterHeaderFilterHeaderRangeMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogFilterHeaderFilterHeaderSafeRegexMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogFilterHeaderFilterHeaderSafeRegexMatchGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogFilterHeaderFilterHeaderSafeRegexMatchGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogFilterNotHealthCheckFilter {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogFilterResponseFlagFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogFilterRuntimeFilter {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "percentSampled")]
    pub percent_sampled: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogFilterRuntimeFilterPercentSampled>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useIndependentRandomness")]
    pub use_independent_randomness: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogFilterRuntimeFilterPercentSampled {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogFilterStatusCodeFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comparison: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogFilterStatusCodeFilterComparison>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogFilterStatusCodeFilterComparison {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub op: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogFilterStatusCodeFilterComparisonValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogFilterStatusCodeFilterComparisonValue {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogFilterTraceableFilter {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogGrpcService {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalRequestHeadersToLog")]
    pub additional_request_headers_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalResponseHeadersToLog")]
    pub additional_response_headers_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalResponseTrailersToLog")]
    pub additional_response_trailers_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterStateObjectsToLog")]
    pub filter_state_objects_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logName")]
    pub log_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "staticClusterName")]
    pub static_cluster_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryService {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryServiceAttributes>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collector: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryServiceCollector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableBuiltinLabels")]
    pub disable_builtin_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterStateObjectsToLog")]
    pub filter_state_objects_to_log: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logName")]
    pub log_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryServiceAttributes {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryServiceAttributesValues>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryServiceAttributesValues {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryServiceCollector {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslConfig")]
    pub ssl_config: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRenegotiation")]
    pub allow_renegotiation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnProtocols")]
    pub alpn_protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oneWayTls")]
    pub one_way_tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslFiles")]
    pub ssl_files: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigSslFiles>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifySubjectAltName")]
    pub verify_subject_alt_name: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherSuites")]
    pub cipher_suites: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecdhCurves")]
    pub ecdh_curves: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigSds {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callCredentials")]
    pub call_credentials: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigSdsCallCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatesSecretName")]
    pub certificates_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationContextName")]
    pub validation_context_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigSdsCallCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileCredentialSource")]
    pub file_credential_source: Option<GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigSdsCallCredentialsFileCredentialSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigSdsCallCredentialsFileCredentialSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenFileName")]
    pub token_file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsListenerAccessLoggingServiceAccessLogOpenTelemetryServiceCollectorSslConfigSslFiles {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaple")]
    pub ocsp_staple: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCa")]
    pub root_ca: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCert")]
    pub tls_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsProxyProtocol {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowRequestsWithoutProxyProtocol")]
    pub allow_requests_without_proxy_protocol: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rules: Option<Vec<GatewayOptionsProxyProtocolRules>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsProxyProtocolRules {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onTlvPresent")]
    pub on_tlv_present: Option<GatewayOptionsProxyProtocolRulesOnTlvPresent>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlvType")]
    pub tlv_type: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsProxyProtocolRulesOnTlvPresent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayOptionsSocketOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufValue")]
    pub buf_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intValue")]
    pub int_value: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayRouteOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDirectResponseBodySizeBytes")]
    pub max_direct_response_body_size_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mostSpecificHeaderMutationsWins")]
    pub most_specific_header_mutations_wins: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGateway {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<GatewayTcpGatewayOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpHosts")]
    pub tcp_hosts: Option<Vec<GatewayTcpGatewayTcpHosts>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionLimit")]
    pub connection_limit: Option<GatewayTcpGatewayOptionsConnectionLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRatelimit")]
    pub local_ratelimit: Option<GatewayTcpGatewayOptionsLocalRatelimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpProxySettings")]
    pub tcp_proxy_settings: Option<GatewayTcpGatewayOptionsTcpProxySettings>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayOptionsConnectionLimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delayBeforeClose")]
    pub delay_before_close: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxActiveConnections")]
    pub max_active_connections: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayOptionsLocalRatelimit {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fillInterval")]
    pub fill_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokens")]
    pub max_tokens: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokensPerFill")]
    pub tokens_per_fill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayOptionsTcpProxySettings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLogFlushInterval")]
    pub access_log_flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeout")]
    pub idle_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnectAttempts")]
    pub max_connect_attempts: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tunnelingConfig")]
    pub tunneling_config: Option<GatewayTcpGatewayOptionsTcpProxySettingsTunnelingConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayOptionsTcpProxySettingsTunnelingConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAdd")]
    pub headers_to_add: Option<Vec<GatewayTcpGatewayOptionsTcpProxySettingsTunnelingConfigHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayOptionsTcpProxySettingsTunnelingConfigHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<GatewayTcpGatewayOptionsTcpProxySettingsTunnelingConfigHeadersToAddHeader>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayOptionsTcpProxySettingsTunnelingConfigHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHosts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<GatewayTcpGatewayTcpHostsDestination>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslConfig")]
    pub ssl_config: Option<GatewayTcpGatewayTcpHostsSslConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestination {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardSniClusterName")]
    pub forward_sni_cluster_name: Option<GatewayTcpGatewayTcpHostsDestinationForwardSniClusterName>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multi: Option<GatewayTcpGatewayTcpHostsDestinationMulti>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub single: Option<GatewayTcpGatewayTcpHostsDestinationSingle>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upstreamGroup")]
    pub upstream_group: Option<GatewayTcpGatewayTcpHostsDestinationUpstreamGroup>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationForwardSniClusterName {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMulti {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destinations: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinations>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestination>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestination {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub consul: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationConsul>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationSpec")]
    pub destination_spec: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpec>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kube: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationKube>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subset: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationSubset>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upstream: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationUpstream>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationConsul {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCenters")]
    pub data_centers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecAws>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecAzure>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rest: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRest>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecAws {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invocationStyle")]
    pub invocation_style: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logicalName")]
    pub logical_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsAlb")]
    pub unwrap_as_alb: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsApiGateway")]
    pub unwrap_as_api_gateway: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wrapAsApiGateway")]
    pub wrap_as_api_gateway: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecAzure {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionName")]
    pub function_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub function: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub package: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecGrpcParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecGrpcParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionName")]
    pub function_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationDestinationSpecRestResponseTransformationSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationKube {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationKubeRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationKubeRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationSubset {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsDestinationUpstream {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferPerRoute")]
    pub buffer_per_route: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsBufferPerRoute>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csrf: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrf>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extauth: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsExtauth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extensions: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsExtensions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerManipulation")]
    pub header_manipulation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stagedTransformations")]
    pub staged_transformations: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformations>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transformations: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformations>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsBufferPerRoute {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsBufferPerRouteBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsBufferPerRouteBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestBytes")]
    pub max_request_bytes: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrf {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalOrigins")]
    pub additional_origins: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfAdditionalOrigins>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterEnabled")]
    pub filter_enabled: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfFilterEnabled>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shadowEnabled")]
    pub shadow_enabled: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfShadowEnabled>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfAdditionalOrigins {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeRegex")]
    pub safe_regex: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfAdditionalOriginsSafeRegex>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfAdditionalOriginsSafeRegex {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "googleRe2")]
    pub google_re2: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfAdditionalOriginsSafeRegexGoogleRe2 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProgramSize")]
    pub max_program_size: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfFilterEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfFilterEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfFilterEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfShadowEnabled {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfShadowEnabledDefaultValue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeKey")]
    pub runtime_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsCsrfShadowEnabledDefaultValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub denominator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numerator: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsExtauth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsExtauthConfigRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customAuth")]
    pub custom_auth: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsExtauthCustomAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsExtauthConfigRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsExtauthCustomAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contextExtensions")]
    pub context_extensions: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsExtensions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<BTreeMap<String, BTreeMap<String, serde_json::Value>>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToAdd")]
    pub request_headers_to_add: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulationRequestHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeadersToRemove")]
    pub request_headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersToAdd")]
    pub response_headers_to_add: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulationResponseHeadersToAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeadersToRemove")]
    pub response_headers_to_remove: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulationRequestHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulationRequestHeadersToAddHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerSecretRef")]
    pub header_secret_ref: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulationRequestHeadersToAddHeaderSecretRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulationRequestHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulationRequestHeadersToAddHeaderSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulationResponseHeadersToAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulationResponseHeadersToAddHeader>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsHeaderManipulationResponseHeadersToAddHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub early: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarly>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inheritTransformation")]
    pub inherit_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postRouting")]
    pub post_routing: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRouting>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regular: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegular>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarly {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsEarlyResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRouting {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsPostRoutingResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegular {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransforms")]
    pub request_transforms: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransforms>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransforms")]
    pub response_transforms: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransforms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcher {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseSensitive")]
    pub case_sensitive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMatcher")]
    pub connect_matcher: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherConnectMatcher>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameters")]
    pub query_parameters: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherQueryParameters>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherConnectMatcher {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsMatcherQueryParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularRequestTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransforms {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matchers: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsMatchers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseCodeDetails")]
    pub response_code_details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsMatchers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertMatch")]
    pub invert_match: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsStagedTransformationsRegularResponseTransformsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformations {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clearRouteCache")]
    pub clear_route_cache: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsRequestTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerBodyTransform")]
    pub header_body_transform: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationHeaderBodyTransform>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestResponseInfo")]
    pub log_request_response_info: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformationTemplate")]
    pub transformation_template: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xsltTransformation")]
    pub xslt_transformation: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationXsltTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationHeaderBodyTransform {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addRequestMetadata")]
    pub add_request_metadata: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplatePassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplatePassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationTransformationTemplateSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationMultiDestinationsOptionsTransformationsResponseTransformationXsltTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonXmlTransform")]
    pub non_xml_transform: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "setContentType")]
    pub set_content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub xslt: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingle {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub consul: Option<GatewayTcpGatewayTcpHostsDestinationSingleConsul>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationSpec")]
    pub destination_spec: Option<GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpec>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kube: Option<GatewayTcpGatewayTcpHostsDestinationSingleKube>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subset: Option<GatewayTcpGatewayTcpHostsDestinationSingleSubset>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upstream: Option<GatewayTcpGatewayTcpHostsDestinationSingleUpstream>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleConsul {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCenters")]
    pub data_centers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecAws>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecAzure>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecGrpc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rest: Option<GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRest>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecAws {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invocationStyle")]
    pub invocation_style: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logicalName")]
    pub logical_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTransformation")]
    pub request_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsAlb")]
    pub unwrap_as_alb: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unwrapAsApiGateway")]
    pub unwrap_as_api_gateway: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wrapAsApiGateway")]
    pub wrap_as_api_gateway: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecAzure {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionName")]
    pub function_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecGrpc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub function: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub package: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecGrpcParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecGrpcParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRest {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionName")]
    pub function_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseTransformation")]
    pub response_transformation: Option<GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformation>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformation {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedTemplates")]
    pub advanced_templates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicMetadataValues")]
    pub dynamic_metadata_values: Option<Vec<GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationDynamicMetadataValues>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "escapeCharacters")]
    pub escape_characters: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extractors: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationExtractors>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToAppend")]
    pub headers_to_append: Option<Vec<GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationHeadersToAppend>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headersToRemove")]
    pub headers_to_remove: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreErrorOnParse")]
    pub ignore_error_on_parse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeExtractorsToBody")]
    pub merge_extractors_to_body: Option<GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationMergeExtractorsToBody>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mergeJsonKeys")]
    pub merge_json_keys: Option<GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationMergeJsonKeys>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parseBodyBehavior")]
    pub parse_body_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passthrough: Option<GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spanTransformer")]
    pub span_transformer: Option<GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationSpanTransformer>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationBody {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationDynamicMetadataValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonToProto")]
    pub json_to_proto: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataNamespace")]
    pub metadata_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationDynamicMetadataValuesValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationDynamicMetadataValuesValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationExtractors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationExtractorsBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replacementText")]
    pub replacement_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subgroup: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationExtractorsBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationHeadersToAppend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationHeadersToAppendValue>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationHeadersToAppendValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationMergeExtractorsToBody {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationMergeJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonKeys")]
    pub json_keys: Option<BTreeMap<String, GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeys>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeys {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideEmpty")]
    pub override_empty: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tmpl: Option<GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeysTmpl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationMergeJsonKeysJsonKeysTmpl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationPassthrough {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationSpanTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationSpanTransformerName>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleDestinationSpecRestResponseTransformationSpanTransformerName {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleKube {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<GatewayTcpGatewayTcpHostsDestinationSingleKubeRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleKubeRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleSubset {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationSingleUpstream {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsDestinationUpstreamGroup {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsSslConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnProtocols")]
    pub alpn_protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableTlsSessionResumption")]
    pub disable_tls_session_resumption: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaplePolicy")]
    pub ocsp_staple_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oneWayTls")]
    pub one_way_tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<GatewayTcpGatewayTcpHostsSslConfigParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<GatewayTcpGatewayTcpHostsSslConfigSds>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<GatewayTcpGatewayTcpHostsSslConfigSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sniDomains")]
    pub sni_domains: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslFiles")]
    pub ssl_files: Option<GatewayTcpGatewayTcpHostsSslConfigSslFiles>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportSocketConnectTimeout")]
    pub transport_socket_connect_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifySubjectAltName")]
    pub verify_subject_alt_name: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsSslConfigParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipherSuites")]
    pub cipher_suites: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecdhCurves")]
    pub ecdh_curves: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumProtocolVersion")]
    pub maximum_protocol_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumProtocolVersion")]
    pub minimum_protocol_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsSslConfigSds {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callCredentials")]
    pub call_credentials: Option<GatewayTcpGatewayTcpHostsSslConfigSdsCallCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatesSecretName")]
    pub certificates_secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetUri")]
    pub target_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationContextName")]
    pub validation_context_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsSslConfigSdsCallCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileCredentialSource")]
    pub file_credential_source: Option<GatewayTcpGatewayTcpHostsSslConfigSdsCallCredentialsFileCredentialSource>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsSslConfigSdsCallCredentialsFileCredentialSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenFileName")]
    pub token_file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsSslConfigSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayTcpGatewayTcpHostsSslConfigSslFiles {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspStaple")]
    pub ocsp_staple: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootCa")]
    pub root_ca: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCert")]
    pub tls_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GatewayStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<BTreeMap<String, serde_json::Value>>,
}

