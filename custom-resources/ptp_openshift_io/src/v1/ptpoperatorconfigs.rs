// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/openshift/ptp-operator/ptp.openshift.io/v1/ptpoperatorconfigs.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// PtpOperatorConfigSpec defines the desired state of PtpOperatorConfig.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "ptp.openshift.io", version = "v1", kind = "PtpOperatorConfig", plural = "ptpoperatorconfigs")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct PtpOperatorConfigSpec {
    /// DaemonNodeSelector specifies the node selector for the linuxptp daemon.
    /// This is a map of key-value pairs used to select the nodes where the
    /// linuxptp daemon will run.
    /// If empty {}, the linuxptp daemon will be deployed on each node of the cluster.
    #[serde(rename = "daemonNodeSelector")]
    pub daemon_node_selector: BTreeMap<String, String>,
    /// EnabledPlugins is a map of plugin names to their configuration settings.
    /// Each entry in the map specifies the configuration for a specific plugin.
    /// This field is optional and can be omitted if no plugins are enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugins: Option<BTreeMap<String, serde_json::Value>>,
    /// EventConfig contains the configuration settings for the PTP event sidecar.
    /// This field is optional and can be omitted if event sidecar configuration is not required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ptpEventConfig")]
    pub ptp_event_config: Option<PtpOperatorConfigPtpEventConfig>,
}

/// EventConfig contains the configuration settings for the PTP event sidecar.
/// This field is optional and can be omitted if event sidecar configuration is not required.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PtpOperatorConfigPtpEventConfig {
    /// ApiVersion is used to determine which API is used for the event service
    /// 1.0: default version. event service is mapped to internal REST-API.
    /// 2.x: event service is mapped to O-RAN v3.0 Compliant O-Cloud Notification REST-API.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// EnableEventPublisher will deploy event proxy as a sidecar
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableEventPublisher")]
    pub enable_event_publisher: Option<bool>,
    /// StorageType is the type of storage to store subscription data
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageType")]
    pub storage_type: Option<String>,
    /// TransportHost format is <protocol>://<transport-service>.<namespace>.svc.cluster.local:<transport-port>
    /// Example HTTP transport: "<http://ptp-event-publisher-service-NODE_NAME.openshift-ptp.svc.cluster.local:9043">
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportHost")]
    pub transport_host: Option<String>,
}

/// PtpOperatorConfigStatus defines the observed state of PtpOperatorConfig
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PtpOperatorConfigStatus {
}

