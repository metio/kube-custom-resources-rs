// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/openshift/ptp-operator/ptp.openshift.io/v1/ptpconfigs.yaml
// kopium version: 0.22.5

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// PtpConfigSpec defines the desired state of PtpConfig
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "ptp.openshift.io", version = "v1", kind = "PtpConfig", plural = "ptpconfigs")]
#[kube(namespaced)]
#[kube(status = "PtpConfigStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct PtpConfigSpec {
    pub profile: Vec<PtpConfigProfile>,
    pub recommend: Vec<PtpConfigRecommend>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PtpConfigProfile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chronydConf")]
    pub chronyd_conf: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chronydOpts")]
    pub chronyd_opts: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interface: Option<String>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phc2sysConf")]
    pub phc2sys_conf: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phc2sysOpts")]
    pub phc2sys_opts: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugins: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ptp4lConf")]
    pub ptp4l_conf: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ptp4lOpts")]
    pub ptp4l_opts: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ptpClockThreshold")]
    pub ptp_clock_threshold: Option<PtpConfigProfilePtpClockThreshold>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ptpSchedulingPolicy")]
    pub ptp_scheduling_policy: Option<PtpConfigProfilePtpSchedulingPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ptpSchedulingPriority")]
    pub ptp_scheduling_priority: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ptpSettings")]
    pub ptp_settings: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "synce4lConf")]
    pub synce4l_conf: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "synce4lOpts")]
    pub synce4l_opts: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ts2phcConf")]
    pub ts2phc_conf: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ts2phcOpts")]
    pub ts2phc_opts: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PtpConfigProfilePtpClockThreshold {
    /// clock state to stay in holdover state in secs
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "holdOverTimeout")]
    pub hold_over_timeout: Option<i64>,
    /// max offset in nano secs
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxOffsetThreshold")]
    pub max_offset_threshold: Option<i64>,
    /// min offset in nano secs
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minOffsetThreshold")]
    pub min_offset_threshold: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PtpConfigProfilePtpSchedulingPolicy {
    #[serde(rename = "SCHED_OTHER")]
    SchedOther,
    #[serde(rename = "SCHED_FIFO")]
    SchedFifo,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PtpConfigRecommend {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<Vec<PtpConfigRecommendMatch>>,
    pub priority: i64,
    pub profile: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PtpConfigRecommendMatch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeLabel")]
    pub node_label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeName")]
    pub node_name: Option<String>,
}

/// PtpConfigStatus defines the observed state of PtpConfig
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PtpConfigStatus {
    /// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
    /// Important: Run "make" to regenerate code after modifying this file
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchList")]
    pub match_list: Option<Vec<PtpConfigStatusMatchList>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PtpConfigStatusMatchList {
    #[serde(rename = "nodeName")]
    pub node_name: String,
    pub profile: String,
}

