// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/mariadb-operator/mariadb-operator/k8s.mariadb.com/v1alpha1/connections.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ConnectionSpec defines the desired state of Connection
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "k8s.mariadb.com", version = "v1alpha1", kind = "Connection", plural = "connections")]
#[kube(namespaced)]
#[kube(status = "ConnectionStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ConnectionSpec {
    /// Database to use when configuring the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub database: Option<String>,
    /// HealthCheck to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheck")]
    pub health_check: Option<ConnectionHealthCheck>,
    /// Host to connect to. If not provided, it defaults to the MariaDB host or to the MaxScale host.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// MariaDBRef is a reference to the MariaDB to connect to. Either MariaDBRef or MaxScaleRef must be provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mariaDbRef")]
    pub maria_db_ref: Option<ConnectionMariaDbRef>,
    /// MaxScaleRef is a reference to the MaxScale to connect to. Either MariaDBRef or MaxScaleRef must be provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxScaleRef")]
    pub max_scale_ref: Option<ConnectionMaxScaleRef>,
    /// Params to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub params: Option<BTreeMap<String, String>>,
    /// PasswordSecretKeyRef is a reference to the password to use for configuring the Connection.
    /// Either passwordSecretKeyRef or tlsClientCertSecretRef must be provided as client credentials.
    /// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretKeyRef")]
    pub password_secret_key_ref: Option<ConnectionPasswordSecretKeyRef>,
    /// Port to connect to. If not provided, it defaults to the MariaDB port or to the first MaxScale listener.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// SecretName to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    /// SecretTemplate to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretTemplate")]
    pub secret_template: Option<ConnectionSecretTemplate>,
    /// ServiceName to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
    /// TLSClientCertSecretRef is a reference to a Kubernetes TLS Secret used as authentication when checking the connection health.
    /// Either passwordSecretKeyRef or tlsClientCertSecretRef must be provided as client credentials.
    /// If not provided, the client certificate provided by the referred MariaDB is used if TLS is enabled.
    /// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the client certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsClientCertSecretRef")]
    pub tls_client_cert_secret_ref: Option<ConnectionTlsClientCertSecretRef>,
    /// Username to use for configuring the Connection.
    pub username: String,
}

/// HealthCheck to be used in the Connection.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ConnectionHealthCheck {
    /// Interval used to perform health checks.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    /// RetryInterval is the interval used to perform health check retries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryInterval")]
    pub retry_interval: Option<String>,
}

/// MariaDBRef is a reference to the MariaDB to connect to. Either MariaDBRef or MaxScaleRef must be provided.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ConnectionMariaDbRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// WaitForIt indicates whether the controller using this reference should wait for MariaDB to be ready.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "waitForIt")]
    pub wait_for_it: Option<bool>,
}

/// MaxScaleRef is a reference to the MaxScale to connect to. Either MariaDBRef or MaxScaleRef must be provided.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ConnectionMaxScaleRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// PasswordSecretKeyRef is a reference to the password to use for configuring the Connection.
/// Either passwordSecretKeyRef or tlsClientCertSecretRef must be provided as client credentials.
/// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ConnectionPasswordSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// SecretTemplate to be used in the Connection.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ConnectionSecretTemplate {
    /// DatabaseKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseKey")]
    pub database_key: Option<String>,
    /// Format to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// HostKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostKey")]
    pub host_key: Option<String>,
    /// Key to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Metadata to be added to the Secret object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ConnectionSecretTemplateMetadata>,
    /// PasswordKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordKey")]
    pub password_key: Option<String>,
    /// PortKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portKey")]
    pub port_key: Option<String>,
    /// UsernameKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usernameKey")]
    pub username_key: Option<String>,
}

/// Metadata to be added to the Secret object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ConnectionSecretTemplateMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// TLSClientCertSecretRef is a reference to a Kubernetes TLS Secret used as authentication when checking the connection health.
/// Either passwordSecretKeyRef or tlsClientCertSecretRef must be provided as client credentials.
/// If not provided, the client certificate provided by the referred MariaDB is used if TLS is enabled.
/// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the client certificate.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ConnectionTlsClientCertSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ConnectionStatus defines the observed state of Connection
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ConnectionStatus {
    /// Conditions for the Connection object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
}

