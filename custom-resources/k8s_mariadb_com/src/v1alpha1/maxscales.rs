// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/mariadb-operator/mariadb-operator/k8s.mariadb.com/v1alpha1/maxscales.yaml
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
    pub use kube::CustomResource;
    pub use serde::{Deserialize, Serialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// MaxScaleSpec defines the desired state of MaxScale.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(
    group = "k8s.mariadb.com",
    version = "v1alpha1",
    kind = "MaxScale",
    plural = "maxscales"
)]
#[kube(namespaced)]
#[kube(status = "MaxScaleStatus")]
#[kube(schema = "disabled")]
#[kube(derive = "Default")]
#[kube(derive = "PartialEq")]
pub struct MaxScaleSpec {
    /// Admin configures the admin REST API and GUI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub admin: Option<MaxScaleAdmin>,
    /// Affinity to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<MaxScaleAffinity>,
    /// Args to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Auth defines the credentials required for MaxScale to connect to MariaDB.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<MaxScaleAuth>,
    /// Command to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// Config defines the MaxScale configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<MaxScaleConfig>,
    /// Connection provides a template to define the Connection for MaxScale.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<MaxScaleConnection>,
    /// Env represents the environment variables to be injected in a container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<MaxScaleEnv>>,
    /// EnvFrom represents the references (via ConfigMap and Secrets) to environment variables to be injected in the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envFrom")]
    pub env_from: Option<Vec<MaxScaleEnvFrom>>,
    /// GuiKubernetesService defines a template for a Kubernetes Service object to connect to MaxScale's GUI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "guiKubernetesService"
    )]
    pub gui_kubernetes_service: Option<MaxScaleGuiKubernetesService>,
    /// Image name to be used by the MaxScale instances. The supported format is `<image>:<tag>`.
    /// Only MaxScale official images are supported.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imagePullPolicy"
    )]
    pub image_pull_policy: Option<MaxScaleImagePullPolicy>,
    /// ImagePullSecrets is the list of pull Secrets to be used to pull the image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imagePullSecrets"
    )]
    pub image_pull_secrets: Option<Vec<MaxScaleImagePullSecrets>>,
    /// InheritMetadata defines the metadata to be inherited by children resources.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inheritMetadata"
    )]
    pub inherit_metadata: Option<MaxScaleInheritMetadata>,
    /// KubernetesService defines a template for a Kubernetes Service object to connect to MaxScale.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kubernetesService"
    )]
    pub kubernetes_service: Option<MaxScaleKubernetesService>,
    /// LivenessProbe to be used in the Container.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "livenessProbe"
    )]
    pub liveness_probe: Option<MaxScaleLivenessProbe>,
    /// MariaDBRef is a reference to the MariaDB that MaxScale points to. It is used to initialize the servers field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mariaDbRef"
    )]
    pub maria_db_ref: Option<MaxScaleMariaDbRef>,
    /// Metrics configures metrics and how to scrape them.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics: Option<MaxScaleMetrics>,
    /// Monitor monitors MariaDB server instances. It is required if 'spec.mariaDbRef' is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub monitor: Option<MaxScaleMonitor>,
    /// NodeSelector to be used in the Pod.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nodeSelector"
    )]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// PodDisruptionBudget defines the budget for replica availability.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "podDisruptionBudget"
    )]
    pub pod_disruption_budget: Option<MaxScalePodDisruptionBudget>,
    /// PodMetadata defines extra metadata for the Pod.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "podMetadata"
    )]
    pub pod_metadata: Option<MaxScalePodMetadata>,
    /// SecurityContext holds pod-level security attributes and common container settings.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "podSecurityContext"
    )]
    pub pod_security_context: Option<MaxScalePodSecurityContext>,
    /// PriorityClassName to be used in the Pod.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "priorityClassName"
    )]
    pub priority_class_name: Option<String>,
    /// ReadinessProbe to be used in the Container.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "readinessProbe"
    )]
    pub readiness_probe: Option<MaxScaleReadinessProbe>,
    /// Replicas indicates the number of desired instances.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i32>,
    /// RequeueInterval is used to perform requeue reconciliations. If not defined, it defaults to 10s.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requeueInterval"
    )]
    pub requeue_interval: Option<String>,
    /// Resouces describes the compute resource requirements.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<MaxScaleResources>,
    /// SecurityContext holds security configuration that will be applied to a container.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityContext"
    )]
    pub security_context: Option<MaxScaleSecurityContext>,
    /// Servers are the MariaDB servers to forward traffic to. It is required if 'spec.mariaDbRef' is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub servers: Option<Vec<MaxScaleServers>>,
    /// ServiceAccountName is the name of the ServiceAccount to be used by the Pods.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceAccountName"
    )]
    pub service_account_name: Option<String>,
    /// Services define how the traffic is forwarded to the MariaDB servers. It is defaulted if not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<MaxScaleServices>>,
    /// Suspend indicates whether the current resource should be suspended or not.
    /// This can be useful for maintenance, as disabling the reconciliation prevents the operator from interfering with user operations during maintenance activities.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suspend: Option<bool>,
    /// Tolerations to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<MaxScaleTolerations>>,
    /// TopologySpreadConstraints to be used in the Pod.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "topologySpreadConstraints"
    )]
    pub topology_spread_constraints: Option<Vec<MaxScaleTopologySpreadConstraints>>,
    /// UpdateStrategy defines the update strategy for the StatefulSet object.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "updateStrategy"
    )]
    pub update_strategy: Option<MaxScaleUpdateStrategy>,
    /// VolumeMounts to be used in the Container.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeMounts"
    )]
    pub volume_mounts: Option<Vec<MaxScaleVolumeMounts>>,
}

/// Admin configures the admin REST API and GUI.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAdmin {
    /// GuiEnabled indicates whether the admin GUI should be enabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "guiEnabled"
    )]
    pub gui_enabled: Option<bool>,
    /// Port where the admin REST API and GUI will be exposed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
}

/// Affinity to be used in the Pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAffinity {
    /// AntiAffinityEnabled configures PodAntiAffinity so each Pod is scheduled in a different Node, enabling HA.
    /// Make sure you have at least as many Nodes available as the replicas to not end up with unscheduled Pods.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "antiAffinityEnabled"
    )]
    pub anti_affinity_enabled: Option<bool>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeaffinity-v1-core
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nodeAffinity"
    )]
    pub node_affinity: Option<MaxScaleAffinityNodeAffinity>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podantiaffinity-v1-core.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "podAntiAffinity"
    )]
    pub pod_anti_affinity: Option<MaxScaleAffinityPodAntiAffinity>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeaffinity-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAffinityNodeAffinity {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredDuringSchedulingIgnoredDuringExecution"
    )]
    pub preferred_during_scheduling_ignored_during_execution:
        Option<Vec<MaxScaleAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselector-v1-core
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredDuringSchedulingIgnoredDuringExecution"
    )]
    pub required_during_scheduling_ignored_during_execution:
        Option<MaxScaleAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#preferredschedulingterm-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorterm-v1-core
    pub preference:
        MaxScaleAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference,
    pub weight: i32,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorterm-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MaxScaleAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<MaxScaleAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions
{
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields
{
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselector-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(rename = "nodeSelectorTerms")]
    pub node_selector_terms: Vec<
        MaxScaleAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms,
    >,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorterm-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MaxScaleAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<MaxScaleAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions
{
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields
{
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podantiaffinity-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAffinityPodAntiAffinity {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredDuringSchedulingIgnoredDuringExecution"
    )]
    pub preferred_during_scheduling_ignored_during_execution:
        Option<Vec<MaxScaleAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredDuringSchedulingIgnoredDuringExecution"
    )]
    pub required_during_scheduling_ignored_during_execution:
        Option<Vec<MaxScaleAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#weightedpodaffinityterm-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podaffinityterm-v1-core.
    #[serde(rename = "podAffinityTerm")]
    pub pod_affinity_term: MaxScaleAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm,
    pub weight: i32,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podaffinityterm-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<MaxScaleAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MaxScaleAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselectorrequirement-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
{
    pub key: String,
    /// A label selector operator is the set of operators that can be used in a selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podaffinityterm-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "labelSelector"
    )]
    pub label_selector: Option<
        MaxScaleAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector,
    >,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MaxScaleAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselectorrequirement-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
{
    pub key: String,
    /// A label selector operator is the set of operators that can be used in a selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Auth defines the credentials required for MaxScale to connect to MariaDB.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAuth {
    /// AdminPasswordSecretKeyRef is Secret key reference to the admin password to call the admin REST API. It is defaulted if not provided.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adminPasswordSecretKeyRef"
    )]
    pub admin_password_secret_key_ref: Option<MaxScaleAuthAdminPasswordSecretKeyRef>,
    /// AdminUsername is an admin username to call the admin REST API. It is defaulted if not provided.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adminUsername"
    )]
    pub admin_username: Option<String>,
    /// ClientMaxConnections defines the maximum number of connections that the client can establish.
    /// If HA is enabled, make sure to increase this value, as more MaxScale replicas implies more connections.
    /// It defaults to 30 times the number of MaxScale replicas.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientMaxConnections"
    )]
    pub client_max_connections: Option<i32>,
    /// ClientPasswordSecretKeyRef is Secret key reference to the password to connect to MaxScale. It is defaulted if not provided.
    /// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientPasswordSecretKeyRef"
    )]
    pub client_password_secret_key_ref: Option<MaxScaleAuthClientPasswordSecretKeyRef>,
    /// ClientUsername is the user to connect to MaxScale. It is defaulted if not provided.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientUsername"
    )]
    pub client_username: Option<String>,
    /// DeleteDefaultAdmin determines whether the default admin user should be deleted after the initial configuration. If not provided, it defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteDefaultAdmin"
    )]
    pub delete_default_admin: Option<bool>,
    /// Generate  defies whether the operator should generate users and grants for MaxScale to work.
    /// It only supports MariaDBs specified via spec.mariaDbRef.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generate: Option<bool>,
    /// MetricsPasswordSecretKeyRef is Secret key reference to the metrics password to call the admib REST API. It is defaulted if metrics are enabled.
    /// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metricsPasswordSecretKeyRef"
    )]
    pub metrics_password_secret_key_ref: Option<MaxScaleAuthMetricsPasswordSecretKeyRef>,
    /// MetricsUsername is an metrics username to call the REST API. It is defaulted if metrics are enabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metricsUsername"
    )]
    pub metrics_username: Option<String>,
    /// MonitorMaxConnections defines the maximum number of connections that the monitor can establish.
    /// If HA is enabled, make sure to increase this value, as more MaxScale replicas implies more connections.
    /// It defaults to 30 times the number of MaxScale replicas.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "monitorMaxConnections"
    )]
    pub monitor_max_connections: Option<i32>,
    /// MonitorPasswordSecretKeyRef is Secret key reference to the password used by MaxScale monitor to connect to MariaDB server. It is defaulted if not provided.
    /// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "monitorPasswordSecretKeyRef"
    )]
    pub monitor_password_secret_key_ref: Option<MaxScaleAuthMonitorPasswordSecretKeyRef>,
    /// MonitorUsername is the user used by MaxScale monitor to connect to MariaDB server. It is defaulted if not provided.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "monitorUsername"
    )]
    pub monitor_username: Option<String>,
    /// ServerMaxConnections defines the maximum number of connections that the server can establish.
    /// If HA is enabled, make sure to increase this value, as more MaxScale replicas implies more connections.
    /// It defaults to 30 times the number of MaxScale replicas.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serverMaxConnections"
    )]
    pub server_max_connections: Option<i32>,
    /// ServerPasswordSecretKeyRef is Secret key reference to the password used by MaxScale to connect to MariaDB server. It is defaulted if not provided.
    /// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serverPasswordSecretKeyRef"
    )]
    pub server_password_secret_key_ref: Option<MaxScaleAuthServerPasswordSecretKeyRef>,
    /// ServerUsername is the user used by MaxScale to connect to MariaDB server. It is defaulted if not provided.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serverUsername"
    )]
    pub server_username: Option<String>,
    /// SyncMaxConnections defines the maximum number of connections that the sync can establish.
    /// If HA is enabled, make sure to increase this value, as more MaxScale replicas implies more connections.
    /// It defaults to 30 times the number of MaxScale replicas.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "syncMaxConnections"
    )]
    pub sync_max_connections: Option<i32>,
    /// SyncPasswordSecretKeyRef is Secret key reference to the password used by MaxScale config to connect to MariaDB server. It is defaulted when HA is enabled.
    /// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "syncPasswordSecretKeyRef"
    )]
    pub sync_password_secret_key_ref: Option<MaxScaleAuthSyncPasswordSecretKeyRef>,
    /// MonitoSyncUsernamerUsername is the user used by MaxScale config sync to connect to MariaDB server. It is defaulted when HA is enabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "syncUsername"
    )]
    pub sync_username: Option<String>,
}

/// AdminPasswordSecretKeyRef is Secret key reference to the admin password to call the admin REST API. It is defaulted if not provided.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAuthAdminPasswordSecretKeyRef {
    /// Generate indicates whether the Secret should be generated if the Secret referenced is not present.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generate: Option<bool>,
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ClientPasswordSecretKeyRef is Secret key reference to the password to connect to MaxScale. It is defaulted if not provided.
/// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAuthClientPasswordSecretKeyRef {
    /// Generate indicates whether the Secret should be generated if the Secret referenced is not present.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generate: Option<bool>,
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// MetricsPasswordSecretKeyRef is Secret key reference to the metrics password to call the admib REST API. It is defaulted if metrics are enabled.
/// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAuthMetricsPasswordSecretKeyRef {
    /// Generate indicates whether the Secret should be generated if the Secret referenced is not present.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generate: Option<bool>,
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// MonitorPasswordSecretKeyRef is Secret key reference to the password used by MaxScale monitor to connect to MariaDB server. It is defaulted if not provided.
/// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAuthMonitorPasswordSecretKeyRef {
    /// Generate indicates whether the Secret should be generated if the Secret referenced is not present.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generate: Option<bool>,
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ServerPasswordSecretKeyRef is Secret key reference to the password used by MaxScale to connect to MariaDB server. It is defaulted if not provided.
/// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAuthServerPasswordSecretKeyRef {
    /// Generate indicates whether the Secret should be generated if the Secret referenced is not present.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generate: Option<bool>,
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// SyncPasswordSecretKeyRef is Secret key reference to the password used by MaxScale config to connect to MariaDB server. It is defaulted when HA is enabled.
/// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleAuthSyncPasswordSecretKeyRef {
    /// Generate indicates whether the Secret should be generated if the Secret referenced is not present.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generate: Option<bool>,
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Config defines the MaxScale configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleConfig {
    /// Params is a key value pair of parameters to be used in the MaxScale static configuration file.
    /// Any parameter supported by MaxScale may be specified here. See reference:
    /// https://mariadb.com/kb/en/mariadb-maxscale-2308-mariadb-maxscale-configuration-guide/#global-settings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub params: Option<BTreeMap<String, String>>,
    /// Sync defines how to replicate configuration across MaxScale replicas. It is defaulted when HA is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sync: Option<MaxScaleConfigSync>,
    /// VolumeClaimTemplate provides a template to define the PVCs for storing MaxScale runtime configuration files. It is defaulted if not provided.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeClaimTemplate"
    )]
    pub volume_claim_template: Option<MaxScaleConfigVolumeClaimTemplate>,
}

/// Sync defines how to replicate configuration across MaxScale replicas. It is defaulted when HA is enabled.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleConfigSync {
    /// Database is the MariaDB logical database where the 'maxscale_config' table will be created in order to persist and synchronize config changes. If not provided, it defaults to 'mysql'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub database: Option<String>,
    /// Interval defines the config synchronization interval. It is defaulted if not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    /// Interval defines the config synchronization timeout. It is defaulted if not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// VolumeClaimTemplate provides a template to define the PVCs for storing MaxScale runtime configuration files. It is defaulted if not provided.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleConfigVolumeClaimTemplate {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessModes"
    )]
    pub access_modes: Option<Vec<String>>,
    /// Metadata to be added to the PVC metadata.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MaxScaleConfigVolumeClaimTemplateMetadata>,
    /// VolumeResourceRequirements describes the storage resource requirements for a volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<MaxScaleConfigVolumeClaimTemplateResources>,
    /// A label selector is a label query over a set of resources. The result of matchLabels and
    /// matchExpressions are ANDed. An empty label selector matches all objects. A null
    /// label selector matches no objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<MaxScaleConfigVolumeClaimTemplateSelector>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageClassName"
    )]
    pub storage_class_name: Option<String>,
}

/// Metadata to be added to the PVC metadata.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleConfigVolumeClaimTemplateMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// VolumeResourceRequirements describes the storage resource requirements for a volume.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleConfigVolumeClaimTemplateResources {
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// A label selector is a label query over a set of resources. The result of matchLabels and
/// matchExpressions are ANDed. An empty label selector matches all objects. A null
/// label selector matches no objects.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleConfigVolumeClaimTemplateSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchExpressions"
    )]
    pub match_expressions: Option<Vec<MaxScaleConfigVolumeClaimTemplateSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleConfigVolumeClaimTemplateSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Connection provides a template to define the Connection for MaxScale.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleConnection {
    /// HealthCheck to be used in the Connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "healthCheck"
    )]
    pub health_check: Option<MaxScaleConnectionHealthCheck>,
    /// Params to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub params: Option<BTreeMap<String, String>>,
    /// Port to connect to. If not provided, it defaults to the MariaDB port or to the first MaxScale listener.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// SecretName to be used in the Connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secretName"
    )]
    pub secret_name: Option<String>,
    /// SecretTemplate to be used in the Connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secretTemplate"
    )]
    pub secret_template: Option<MaxScaleConnectionSecretTemplate>,
    /// ServiceName to be used in the Connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceName"
    )]
    pub service_name: Option<String>,
}

/// HealthCheck to be used in the Connection.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleConnectionHealthCheck {
    /// Interval used to perform health checks.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    /// RetryInterval is the interval used to perform health check retries.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retryInterval"
    )]
    pub retry_interval: Option<String>,
}

/// SecretTemplate to be used in the Connection.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleConnectionSecretTemplate {
    /// DatabaseKey to be used in the Secret.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseKey"
    )]
    pub database_key: Option<String>,
    /// Format to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// HostKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostKey")]
    pub host_key: Option<String>,
    /// Key to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Metadata to be added to the Secret object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MaxScaleConnectionSecretTemplateMetadata>,
    /// PasswordKey to be used in the Secret.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordKey"
    )]
    pub password_key: Option<String>,
    /// PortKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portKey")]
    pub port_key: Option<String>,
    /// UsernameKey to be used in the Secret.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "usernameKey"
    )]
    pub username_key: Option<String>,
}

/// Metadata to be added to the Secret object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleConnectionSecretTemplateMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envvarsource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleEnv {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envvarsource-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<MaxScaleEnvValueFrom>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envvarsource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleEnvValueFrom {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#configmapkeyselector-v1-core.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "configMapKeyRef"
    )]
    pub config_map_key_ref: Option<MaxScaleEnvValueFromConfigMapKeyRef>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#objectfieldselector-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<MaxScaleEnvValueFromFieldRef>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#secretkeyselector-v1-core.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secretKeyRef"
    )]
    pub secret_key_ref: Option<MaxScaleEnvValueFromSecretKeyRef>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#configmapkeyselector-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleEnvValueFromConfigMapKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#objectfieldselector-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleEnvValueFromFieldRef {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "apiVersion"
    )]
    pub api_version: Option<String>,
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#secretkeyselector-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleEnvValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envfromsource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleEnvFrom {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "configMapRef"
    )]
    pub config_map_ref: Option<MaxScaleEnvFromConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<MaxScaleEnvFromSecretRef>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleEnvFromConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleEnvFromSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// GuiKubernetesService defines a template for a Kubernetes Service object to connect to MaxScale's GUI.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleGuiKubernetesService {
    /// AllocateLoadBalancerNodePorts Service field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allocateLoadBalancerNodePorts"
    )]
    pub allocate_load_balancer_node_ports: Option<bool>,
    /// ExternalTrafficPolicy Service field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "externalTrafficPolicy"
    )]
    pub external_traffic_policy: Option<String>,
    /// LoadBalancerIP Service field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loadBalancerIP"
    )]
    pub load_balancer_ip: Option<String>,
    /// LoadBalancerSourceRanges Service field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loadBalancerSourceRanges"
    )]
    pub load_balancer_source_ranges: Option<Vec<String>>,
    /// Metadata to be added to the Service metadata.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MaxScaleGuiKubernetesServiceMetadata>,
    /// SessionAffinity Service field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sessionAffinity"
    )]
    pub session_affinity: Option<String>,
    /// Type is the Service type. One of `ClusterIP`, `NodePort` or `LoadBalancer`. If not defined, it defaults to `ClusterIP`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<MaxScaleGuiKubernetesServiceType>,
}

/// Metadata to be added to the Service metadata.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleGuiKubernetesServiceMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// GuiKubernetesService defines a template for a Kubernetes Service object to connect to MaxScale's GUI.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MaxScaleGuiKubernetesServiceType {
    #[serde(rename = "ClusterIP")]
    ClusterIp,
    NodePort,
    LoadBalancer,
}

/// MaxScaleSpec defines the desired state of MaxScale.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MaxScaleImagePullPolicy {
    Always,
    Never,
    IfNotPresent,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleImagePullSecrets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// InheritMetadata defines the metadata to be inherited by children resources.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleInheritMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// KubernetesService defines a template for a Kubernetes Service object to connect to MaxScale.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleKubernetesService {
    /// AllocateLoadBalancerNodePorts Service field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allocateLoadBalancerNodePorts"
    )]
    pub allocate_load_balancer_node_ports: Option<bool>,
    /// ExternalTrafficPolicy Service field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "externalTrafficPolicy"
    )]
    pub external_traffic_policy: Option<String>,
    /// LoadBalancerIP Service field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loadBalancerIP"
    )]
    pub load_balancer_ip: Option<String>,
    /// LoadBalancerSourceRanges Service field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loadBalancerSourceRanges"
    )]
    pub load_balancer_source_ranges: Option<Vec<String>>,
    /// Metadata to be added to the Service metadata.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MaxScaleKubernetesServiceMetadata>,
    /// SessionAffinity Service field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sessionAffinity"
    )]
    pub session_affinity: Option<String>,
    /// Type is the Service type. One of `ClusterIP`, `NodePort` or `LoadBalancer`. If not defined, it defaults to `ClusterIP`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<MaxScaleKubernetesServiceType>,
}

/// Metadata to be added to the Service metadata.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleKubernetesServiceMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// KubernetesService defines a template for a Kubernetes Service object to connect to MaxScale.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MaxScaleKubernetesServiceType {
    #[serde(rename = "ClusterIP")]
    ClusterIp,
    NodePort,
    LoadBalancer,
}

/// LivenessProbe to be used in the Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleLivenessProbe {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<MaxScaleLivenessProbeExec>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "failureThreshold"
    )]
    pub failure_threshold: Option<i32>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<MaxScaleLivenessProbeHttpGet>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialDelaySeconds"
    )]
    pub initial_delay_seconds: Option<i32>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "periodSeconds"
    )]
    pub period_seconds: Option<i32>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "successThreshold"
    )]
    pub success_threshold: Option<i32>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timeoutSeconds"
    )]
    pub timeout_seconds: Option<i32>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleLivenessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleLivenessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub port: IntOrString,
    /// URIScheme identifies the scheme used for connection to a host for Get actions
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// MariaDBRef is a reference to the MariaDB that MaxScale points to. It is used to initialize the servers field.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMariaDbRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// WaitForIt indicates whether the controller using this reference should wait for MariaDB to be ready.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "waitForIt")]
    pub wait_for_it: Option<bool>,
}

/// Metrics configures metrics and how to scrape them.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetrics {
    /// Enabled is a flag to enable Metrics
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Exporter defines the metrics exporter container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exporter: Option<MaxScaleMetricsExporter>,
    /// ServiceMonitor defines the ServiceMonior object.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceMonitor"
    )]
    pub service_monitor: Option<MaxScaleMetricsServiceMonitor>,
}

/// Exporter defines the metrics exporter container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporter {
    /// Affinity to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<MaxScaleMetricsExporterAffinity>,
    /// Image name to be used as metrics exporter. The supported format is `<image>:<tag>`.
    /// Only mysqld-exporter >= v0.15.0 is supported: https://github.com/prometheus/mysqld_exporter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imagePullPolicy"
    )]
    pub image_pull_policy: Option<MaxScaleMetricsExporterImagePullPolicy>,
    /// ImagePullSecrets is the list of pull Secrets to be used to pull the image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imagePullSecrets"
    )]
    pub image_pull_secrets: Option<Vec<MaxScaleMetricsExporterImagePullSecrets>>,
    /// NodeSelector to be used in the Pod.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nodeSelector"
    )]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// PodMetadata defines extra metadata for the Pod.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "podMetadata"
    )]
    pub pod_metadata: Option<MaxScaleMetricsExporterPodMetadata>,
    /// SecurityContext holds pod-level security attributes and common container settings.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "podSecurityContext"
    )]
    pub pod_security_context: Option<MaxScaleMetricsExporterPodSecurityContext>,
    /// Port where the exporter will be listening for connections.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// PriorityClassName to be used in the Pod.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "priorityClassName"
    )]
    pub priority_class_name: Option<String>,
    /// Resouces describes the compute resource requirements.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<MaxScaleMetricsExporterResources>,
    /// SecurityContext holds container-level security attributes.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityContext"
    )]
    pub security_context: Option<MaxScaleMetricsExporterSecurityContext>,
    /// Tolerations to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<MaxScaleMetricsExporterTolerations>>,
}

/// Affinity to be used in the Pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterAffinity {
    /// AntiAffinityEnabled configures PodAntiAffinity so each Pod is scheduled in a different Node, enabling HA.
    /// Make sure you have at least as many Nodes available as the replicas to not end up with unscheduled Pods.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "antiAffinityEnabled"
    )]
    pub anti_affinity_enabled: Option<bool>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeaffinity-v1-core
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nodeAffinity"
    )]
    pub node_affinity: Option<MaxScaleMetricsExporterAffinityNodeAffinity>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podantiaffinity-v1-core.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "podAntiAffinity"
    )]
    pub pod_anti_affinity: Option<MaxScaleMetricsExporterAffinityPodAntiAffinity>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeaffinity-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterAffinityNodeAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<MaxScaleMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselector-v1-core
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<MaxScaleMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#preferredschedulingterm-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorterm-v1-core
    pub preference: MaxScaleMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference,
    pub weight: i32,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorterm-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MaxScaleMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<MaxScaleMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions
{
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields
{
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselector-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(rename = "nodeSelectorTerms")]
    pub node_selector_terms: Vec<MaxScaleMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorterm-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MaxScaleMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<MaxScaleMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions
{
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields
{
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podantiaffinity-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterAffinityPodAntiAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<MaxScaleMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<MaxScaleMetricsExporterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#weightedpodaffinityterm-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podaffinityterm-v1-core.
    #[serde(rename = "podAffinityTerm")]
    pub pod_affinity_term: MaxScaleMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm,
    pub weight: i32,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podaffinityterm-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<MaxScaleMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MaxScaleMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselectorrequirement-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
{
    pub key: String,
    /// A label selector operator is the set of operators that can be used in a selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podaffinityterm-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<MaxScaleMetricsExporterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MaxScaleMetricsExporterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselectorrequirement-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
{
    pub key: String,
    /// A label selector operator is the set of operators that can be used in a selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Exporter defines the metrics exporter container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MaxScaleMetricsExporterImagePullPolicy {
    Always,
    Never,
    IfNotPresent,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterImagePullSecrets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PodMetadata defines extra metadata for the Pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterPodMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// SecurityContext holds pod-level security attributes and common container settings.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterPodSecurityContext {
    /// AppArmorProfile defines a pod or container's AppArmor settings.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appArmorProfile"
    )]
    pub app_armor_profile: Option<MaxScaleMetricsExporterPodSecurityContextAppArmorProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroup")]
    pub fs_group: Option<i64>,
    /// PodFSGroupChangePolicy holds policies that will be used for applying fsGroup to a volume
    /// when volume is mounted.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fsGroupChangePolicy"
    )]
    pub fs_group_change_policy: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runAsGroup"
    )]
    pub run_as_group: Option<i64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runAsNonRoot"
    )]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// SELinuxOptions are the labels to be applied to the container
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "seLinuxOptions"
    )]
    pub se_linux_options: Option<MaxScaleMetricsExporterPodSecurityContextSeLinuxOptions>,
    /// SeccompProfile defines a pod/container's seccomp profile settings.
    /// Only one profile source may be set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "seccompProfile"
    )]
    pub seccomp_profile: Option<MaxScaleMetricsExporterPodSecurityContextSeccompProfile>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supplementalGroups"
    )]
    pub supplemental_groups: Option<Vec<i64>>,
}

/// AppArmorProfile defines a pod or container's AppArmor settings.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterPodSecurityContextAppArmorProfile {
    /// localhostProfile indicates a profile loaded on the node that should be used.
    /// The profile must be preconfigured on the node to work.
    /// Must match the loaded name of the profile.
    /// Must be set if and only if type is "Localhost".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localhostProfile"
    )]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of AppArmor profile will be applied.
    /// Valid options are:
    ///   Localhost - a profile pre-loaded on the node.
    ///   RuntimeDefault - the container runtime's default profile.
    ///   Unconfined - no AppArmor enforcement.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// SELinuxOptions are the labels to be applied to the container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterPodSecurityContextSeLinuxOptions {
    /// Level is SELinux level label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// Role is a SELinux role label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Type is a SELinux type label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// User is a SELinux user label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// SeccompProfile defines a pod/container's seccomp profile settings.
/// Only one profile source may be set.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterPodSecurityContextSeccompProfile {
    /// localhostProfile indicates a profile defined in a file on the node should be used.
    /// The profile must be preconfigured on the node to work.
    /// Must be a descending path, relative to the kubelet's configured seccomp profile location.
    /// Must be set if type is "Localhost". Must NOT be set for any other type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localhostProfile"
    )]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of seccomp profile will be applied.
    /// Valid options are:
    ///
    /// Localhost - a profile defined in a file on the node should be used.
    /// RuntimeDefault - the container runtime default profile should be used.
    /// Unconfined - no profile should be applied.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Resouces describes the compute resource requirements.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterResources {
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// SecurityContext holds container-level security attributes.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterSecurityContext {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowPrivilegeEscalation"
    )]
    pub allow_privilege_escalation: Option<bool>,
    /// Adds and removes POSIX capabilities from running containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<MaxScaleMetricsExporterSecurityContextCapabilities>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "readOnlyRootFilesystem"
    )]
    pub read_only_root_filesystem: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runAsGroup"
    )]
    pub run_as_group: Option<i64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runAsNonRoot"
    )]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
}

/// Adds and removes POSIX capabilities from running containers.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterSecurityContextCapabilities {
    /// Added capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<String>>,
    /// Removed capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<Vec<String>>,
}

/// The pod this Toleration is attached to tolerates any taint that matches
/// the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsExporterTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects.
    /// When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys.
    /// If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value.
    /// Valid operators are Exists and Equal. Defaults to Equal.
    /// Exists is equivalent to wildcard for value, so that a pod can
    /// tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be
    /// of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
    /// it is not set, which means tolerate the taint forever (do not evict). Zero and
    /// negative values will be treated as 0 (evict immediately) by the system.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tolerationSeconds"
    )]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to.
    /// If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ServiceMonitor defines the ServiceMonior object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMetricsServiceMonitor {
    /// Interval for scraping metrics.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    /// JobLabel to add to the ServiceMonitor object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobLabel")]
    pub job_label: Option<String>,
    /// PrometheusRelease is the release label to add to the ServiceMonitor object.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "prometheusRelease"
    )]
    pub prometheus_release: Option<String>,
    /// ScrapeTimeout defines the timeout for scraping metrics.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scrapeTimeout"
    )]
    pub scrape_timeout: Option<String>,
}

/// Monitor monitors MariaDB server instances. It is required if 'spec.mariaDbRef' is not provided.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleMonitor {
    /// CooperativeMonitoring enables coordination between multiple MaxScale instances running monitors. It is defaulted when HA is enabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cooperativeMonitoring"
    )]
    pub cooperative_monitoring: Option<MaxScaleMonitorCooperativeMonitoring>,
    /// Interval used to monitor MariaDB servers. It is defaulted if not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    /// Module is the module to use to monitor MariaDB servers. It is mandatory when no MariaDB reference is provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub module: Option<String>,
    /// Name is the identifier of the monitor. It is defaulted if not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Params defines extra parameters to pass to the monitor.
    /// Any parameter supported by MaxScale may be specified here. See reference:
    /// https://mariadb.com/kb/en/mariadb-maxscale-2308-common-monitor-parameters/.
    /// Monitor specific parameter are also suported:
    /// https://mariadb.com/kb/en/mariadb-maxscale-2308-galera-monitor/#galera-monitor-optional-parameters.
    /// https://mariadb.com/kb/en/mariadb-maxscale-2308-mariadb-monitor/#configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub params: Option<BTreeMap<String, String>>,
    /// Suspend indicates whether the current resource should be suspended or not.
    /// This can be useful for maintenance, as disabling the reconciliation prevents the operator from interfering with user operations during maintenance activities.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suspend: Option<bool>,
}

/// Monitor monitors MariaDB server instances. It is required if 'spec.mariaDbRef' is not provided.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MaxScaleMonitorCooperativeMonitoring {
    #[serde(rename = "majority_of_all")]
    MajorityOfAll,
    #[serde(rename = "majority_of_running")]
    MajorityOfRunning,
}

/// PodDisruptionBudget defines the budget for replica availability.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScalePodDisruptionBudget {
    /// MaxUnavailable defines the number of maximum unavailable Pods.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxUnavailable"
    )]
    pub max_unavailable: Option<IntOrString>,
    /// MinAvailable defines the number of minimum available Pods.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minAvailable"
    )]
    pub min_available: Option<IntOrString>,
}

/// PodMetadata defines extra metadata for the Pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScalePodMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// SecurityContext holds pod-level security attributes and common container settings.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScalePodSecurityContext {
    /// AppArmorProfile defines a pod or container's AppArmor settings.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appArmorProfile"
    )]
    pub app_armor_profile: Option<MaxScalePodSecurityContextAppArmorProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroup")]
    pub fs_group: Option<i64>,
    /// PodFSGroupChangePolicy holds policies that will be used for applying fsGroup to a volume
    /// when volume is mounted.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fsGroupChangePolicy"
    )]
    pub fs_group_change_policy: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runAsGroup"
    )]
    pub run_as_group: Option<i64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runAsNonRoot"
    )]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// SELinuxOptions are the labels to be applied to the container
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "seLinuxOptions"
    )]
    pub se_linux_options: Option<MaxScalePodSecurityContextSeLinuxOptions>,
    /// SeccompProfile defines a pod/container's seccomp profile settings.
    /// Only one profile source may be set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "seccompProfile"
    )]
    pub seccomp_profile: Option<MaxScalePodSecurityContextSeccompProfile>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supplementalGroups"
    )]
    pub supplemental_groups: Option<Vec<i64>>,
}

/// AppArmorProfile defines a pod or container's AppArmor settings.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScalePodSecurityContextAppArmorProfile {
    /// localhostProfile indicates a profile loaded on the node that should be used.
    /// The profile must be preconfigured on the node to work.
    /// Must match the loaded name of the profile.
    /// Must be set if and only if type is "Localhost".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localhostProfile"
    )]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of AppArmor profile will be applied.
    /// Valid options are:
    ///   Localhost - a profile pre-loaded on the node.
    ///   RuntimeDefault - the container runtime's default profile.
    ///   Unconfined - no AppArmor enforcement.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// SELinuxOptions are the labels to be applied to the container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScalePodSecurityContextSeLinuxOptions {
    /// Level is SELinux level label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// Role is a SELinux role label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Type is a SELinux type label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// User is a SELinux user label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// SeccompProfile defines a pod/container's seccomp profile settings.
/// Only one profile source may be set.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScalePodSecurityContextSeccompProfile {
    /// localhostProfile indicates a profile defined in a file on the node should be used.
    /// The profile must be preconfigured on the node to work.
    /// Must be a descending path, relative to the kubelet's configured seccomp profile location.
    /// Must be set if type is "Localhost". Must NOT be set for any other type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localhostProfile"
    )]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of seccomp profile will be applied.
    /// Valid options are:
    ///
    /// Localhost - a profile defined in a file on the node should be used.
    /// RuntimeDefault - the container runtime default profile should be used.
    /// Unconfined - no profile should be applied.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// ReadinessProbe to be used in the Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleReadinessProbe {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<MaxScaleReadinessProbeExec>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "failureThreshold"
    )]
    pub failure_threshold: Option<i32>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<MaxScaleReadinessProbeHttpGet>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialDelaySeconds"
    )]
    pub initial_delay_seconds: Option<i32>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "periodSeconds"
    )]
    pub period_seconds: Option<i32>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "successThreshold"
    )]
    pub success_threshold: Option<i32>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timeoutSeconds"
    )]
    pub timeout_seconds: Option<i32>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleReadinessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleReadinessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub port: IntOrString,
    /// URIScheme identifies the scheme used for connection to a host for Get actions
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// Resouces describes the compute resource requirements.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleResources {
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// SecurityContext holds security configuration that will be applied to a container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleSecurityContext {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowPrivilegeEscalation"
    )]
    pub allow_privilege_escalation: Option<bool>,
    /// Adds and removes POSIX capabilities from running containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<MaxScaleSecurityContextCapabilities>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "readOnlyRootFilesystem"
    )]
    pub read_only_root_filesystem: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runAsGroup"
    )]
    pub run_as_group: Option<i64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runAsNonRoot"
    )]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
}

/// Adds and removes POSIX capabilities from running containers.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleSecurityContextCapabilities {
    /// Added capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<String>>,
    /// Removed capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<Vec<String>>,
}

/// MaxScaleServer defines a MariaDB server to forward traffic to.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleServers {
    /// Address is the network address of the MariaDB server.
    pub address: String,
    /// Maintenance indicates whether the server is in maintenance mode.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maintenance: Option<bool>,
    /// Name is the identifier of the MariaDB server.
    pub name: String,
    /// Params defines extra parameters to pass to the server.
    /// Any parameter supported by MaxScale may be specified here. See reference:
    /// https://mariadb.com/kb/en/mariadb-maxscale-2308-mariadb-maxscale-configuration-guide/#server_1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub params: Option<BTreeMap<String, String>>,
    /// Port is the network port of the MariaDB server. If not provided, it defaults to 3306.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// Protocol is the MaxScale protocol to use when communicating with this MariaDB server. If not provided, it defaults to MariaDBBackend.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
}

/// Services define how the traffic is forwarded to the MariaDB servers.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MaxScaleServices {
    /// MaxScaleListener defines how the MaxScale server will listen for connections.
    pub listener: MaxScaleServicesListener,
    /// Name is the identifier of the MaxScale service.
    pub name: String,
    /// Params defines extra parameters to pass to the service.
    /// Any parameter supported by MaxScale may be specified here. See reference:
    /// https://mariadb.com/kb/en/mariadb-maxscale-2308-mariadb-maxscale-configuration-guide/#service_1.
    /// Router specific parameter are also suported:
    /// https://mariadb.com/kb/en/mariadb-maxscale-2308-readwritesplit/#configuration.
    /// https://mariadb.com/kb/en/mariadb-maxscale-2308-readconnroute/#configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub params: Option<BTreeMap<String, String>>,
    /// Router is the type of router to use.
    pub router: MaxScaleServicesRouter,
    /// Suspend indicates whether the current resource should be suspended or not.
    /// This can be useful for maintenance, as disabling the reconciliation prevents the operator from interfering with user operations during maintenance activities.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suspend: Option<bool>,
}

/// MaxScaleListener defines how the MaxScale server will listen for connections.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleServicesListener {
    /// Name is the identifier of the listener. It is defaulted if not provided
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Params defines extra parameters to pass to the listener.
    /// Any parameter supported by MaxScale may be specified here. See reference:
    /// https://mariadb.com/kb/en/mariadb-maxscale-2308-mariadb-maxscale-configuration-guide/#listener_1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub params: Option<BTreeMap<String, String>>,
    /// Port is the network port where the MaxScale server will listen.
    pub port: i32,
    /// Protocol is the MaxScale protocol to use when communicating with the client. If not provided, it defaults to MariaDBProtocol.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Suspend indicates whether the current resource should be suspended or not.
    /// This can be useful for maintenance, as disabling the reconciliation prevents the operator from interfering with user operations during maintenance activities.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suspend: Option<bool>,
}

/// Services define how the traffic is forwarded to the MariaDB servers.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MaxScaleServicesRouter {
    #[serde(rename = "readwritesplit")]
    Readwritesplit,
    #[serde(rename = "readconnroute")]
    Readconnroute,
}

/// The pod this Toleration is attached to tolerates any taint that matches
/// the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects.
    /// When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys.
    /// If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value.
    /// Valid operators are Exists and Equal. Defaults to Equal.
    /// Exists is equivalent to wildcard for value, so that a pod can
    /// tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be
    /// of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
    /// it is not set, which means tolerate the taint forever (do not evict). Zero and
    /// negative values will be treated as 0 (evict immediately) by the system.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tolerationSeconds"
    )]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to.
    /// If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#topologyspreadconstraint-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleTopologySpreadConstraints {
    /// A label selector is a label query over a set of resources. The result of matchLabels and
    /// matchExpressions are ANDed. An empty label selector matches all objects. A null
    /// label selector matches no objects.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "labelSelector"
    )]
    pub label_selector: Option<MaxScaleTopologySpreadConstraintsLabelSelector>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabelKeys"
    )]
    pub match_label_keys: Option<Vec<String>>,
    #[serde(rename = "maxSkew")]
    pub max_skew: i32,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minDomains"
    )]
    pub min_domains: Option<i32>,
    /// NodeInclusionPolicy defines the type of node inclusion policy
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nodeAffinityPolicy"
    )]
    pub node_affinity_policy: Option<String>,
    /// NodeInclusionPolicy defines the type of node inclusion policy
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nodeTaintsPolicy"
    )]
    pub node_taints_policy: Option<String>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
    #[serde(rename = "whenUnsatisfiable")]
    pub when_unsatisfiable: String,
}

/// A label selector is a label query over a set of resources. The result of matchLabels and
/// matchExpressions are ANDed. An empty label selector matches all objects. A null
/// label selector matches no objects.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleTopologySpreadConstraintsLabelSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchExpressions"
    )]
    pub match_expressions:
        Option<Vec<MaxScaleTopologySpreadConstraintsLabelSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleTopologySpreadConstraintsLabelSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// UpdateStrategy defines the update strategy for the StatefulSet object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleUpdateStrategy {
    /// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rollingUpdate"
    )]
    pub rolling_update: Option<MaxScaleUpdateStrategyRollingUpdate>,
    /// Type indicates the type of the StatefulSetUpdateStrategy.
    /// Default is RollingUpdate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleUpdateStrategyRollingUpdate {
    /// The maximum number of pods that can be unavailable during the update.
    /// Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
    /// Absolute number is calculated from percentage by rounding up. This can not be 0.
    /// Defaults to 1. This field is alpha-level and is only honored by servers that enable the
    /// MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to
    /// Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it
    /// will be counted towards MaxUnavailable.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxUnavailable"
    )]
    pub max_unavailable: Option<IntOrString>,
    /// Partition indicates the ordinal at which the StatefulSet should be partitioned
    /// for updates. During a rolling update, all pods from ordinal Replicas-1 to
    /// Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched.
    /// This is helpful in being able to do a canary based deployment. The default value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition: Option<i32>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#volumemount-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleVolumeMounts {
    #[serde(rename = "mountPath")]
    pub mount_path: String,
    /// This must match the Name of a Volume.
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPath")]
    pub sub_path: Option<String>,
}

/// MaxScaleStatus defines the observed state of MaxScale
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleStatus {
    /// Conditions for the MaxScale object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ConfigSync is the state of config sync.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "configSync"
    )]
    pub config_sync: Option<MaxScaleStatusConfigSync>,
    /// Listeners is the state of the listeners in the MaxScale API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub listeners: Option<Vec<MaxScaleStatusListeners>>,
    /// Monitor is the state of the monitor in the MaxScale API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub monitor: Option<MaxScaleStatusMonitor>,
    /// PrimaryServer is the primary server in the MaxScale API.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "primaryServer"
    )]
    pub primary_server: Option<String>,
    /// Replicas indicates the number of current instances.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i32>,
    /// Servers is the state of the servers in the MaxScale API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub servers: Option<Vec<MaxScaleStatusServers>>,
    /// Services is the state of the services in the MaxScale API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<MaxScaleStatusServices>>,
}

/// ConfigSync is the state of config sync.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleStatusConfigSync {
    #[serde(rename = "databaseVersion")]
    pub database_version: i64,
    #[serde(rename = "maxScaleVersion")]
    pub max_scale_version: i64,
}

/// MaxScaleResourceStatus indicates whether the resource is in a given state.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleStatusListeners {
    pub name: String,
    pub state: String,
}

/// Monitor is the state of the monitor in the MaxScale API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleStatusMonitor {
    pub name: String,
    pub state: String,
}

/// MaxScaleAPIStatus is the state of the servers in the MaxScale API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleStatusServers {
    pub name: String,
    pub state: String,
}

/// MaxScaleResourceStatus indicates whether the resource is in a given state.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MaxScaleStatusServices {
    pub name: String,
    pub state: String,
}
