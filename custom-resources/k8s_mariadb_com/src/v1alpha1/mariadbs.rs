// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/mariadb-operator/mariadb-operator/k8s.mariadb.com/v1alpha1/mariadbs.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// MariaDBSpec defines the desired state of MariaDB
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "k8s.mariadb.com", version = "v1alpha1", kind = "MariaDB", plural = "mariadbs")]
#[kube(namespaced)]
#[kube(status = "MariaDBStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct MariaDBSpec {
    /// Affinity to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<MariaDBAffinity>,
    /// Args to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// BootstrapFrom defines a source to bootstrap from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootstrapFrom")]
    pub bootstrap_from: Option<MariaDBBootstrapFrom>,
    /// Command to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// Connection defines a template to configure the general Connection object.
    /// This Connection provides the initial User access to the initial Database.
    /// It will make use of the Service to route network traffic to all Pods.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<MariaDBConnection>,
    /// Database is the name of the initial Database.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub database: Option<String>,
    /// Env represents the environment variables to be injected in a container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<MariaDBEnv>>,
    /// EnvFrom represents the references (via ConfigMap and Secrets) to environment variables to be injected in the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envFrom")]
    pub env_from: Option<Vec<MariaDBEnvFrom>>,
    /// Replication configures high availability via Galera.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub galera: Option<MariaDBGalera>,
    /// Image name to be used by the MariaDB instances. The supported format is `<image>:<tag>`.
    /// Only MariaDB official images are supported.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<MariaDBImagePullPolicy>,
    /// ImagePullSecrets is the list of pull Secrets to be used to pull the image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<MariaDBImagePullSecrets>>,
    /// InheritMetadata defines the metadata to be inherited by children resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inheritMetadata")]
    pub inherit_metadata: Option<MariaDBInheritMetadata>,
    /// InitContainers to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initContainers")]
    pub init_containers: Option<Vec<MariaDBInitContainers>>,
    /// LivenessProbe to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<MariaDBLivenessProbe>,
    /// MaxScale is the MaxScale specification that defines the MaxScale resource to be used with the current MariaDB.
    /// When enabling this field, MaxScaleRef is automatically set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxScale")]
    pub max_scale: Option<MariaDBMaxScale>,
    /// MaxScaleRef is a reference to a MaxScale resource to be used with the current MariaDB.
    /// Providing this field implies delegating high availability tasks such as primary failover to MaxScale.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxScaleRef")]
    pub max_scale_ref: Option<MariaDBMaxScaleRef>,
    /// Metrics configures metrics and how to scrape them.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics: Option<MariaDBMetrics>,
    /// MyCnf allows to specify the my.cnf file mounted by Mariadb.
    /// Updating this field will trigger an update to the Mariadb resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "myCnf")]
    pub my_cnf: Option<String>,
    /// MyCnfConfigMapKeyRef is a reference to the my.cnf config file provided via a ConfigMap.
    /// If not provided, it will be defaulted with a reference to a ConfigMap containing the MyCnf field.
    /// If the referred ConfigMap is labeled with "k8s.mariadb.com/watch", an update to the Mariadb resource will be triggered when the ConfigMap is updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "myCnfConfigMapKeyRef")]
    pub my_cnf_config_map_key_ref: Option<MariaDBMyCnfConfigMapKeyRef>,
    /// NodeSelector to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// PasswordHashSecretKeyRef is a reference to the password hash to be used by the initial User.
    /// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password hash.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordHashSecretKeyRef")]
    pub password_hash_secret_key_ref: Option<MariaDBPasswordHashSecretKeyRef>,
    /// PasswordPlugin is a reference to the password plugin and arguments to be used by the initial User.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordPlugin")]
    pub password_plugin: Option<MariaDBPasswordPlugin>,
    /// PasswordSecretKeyRef is a reference to a Secret that contains the password to be used by the initial User.
    /// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretKeyRef")]
    pub password_secret_key_ref: Option<MariaDBPasswordSecretKeyRef>,
    /// PodDisruptionBudget defines the budget for replica availability.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podDisruptionBudget")]
    pub pod_disruption_budget: Option<MariaDBPodDisruptionBudget>,
    /// PodMetadata defines extra metadata for the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podMetadata")]
    pub pod_metadata: Option<MariaDBPodMetadata>,
    /// SecurityContext holds pod-level security attributes and common container settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podSecurityContext")]
    pub pod_security_context: Option<MariaDBPodSecurityContext>,
    /// Port where the instances will be listening for connections.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// PrimaryConnection defines a template to configure the primary Connection object.
    /// This Connection provides the initial User access to the initial Database.
    /// It will make use of the PrimaryService to route network traffic to the primary Pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primaryConnection")]
    pub primary_connection: Option<MariaDBPrimaryConnection>,
    /// PrimaryService defines a template to configure the primary Service object.
    /// The network traffic of this Service will be routed to the primary Pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primaryService")]
    pub primary_service: Option<MariaDBPrimaryService>,
    /// PriorityClassName to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityClassName")]
    pub priority_class_name: Option<String>,
    /// ReadinessProbe to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<MariaDBReadinessProbe>,
    /// Replicas indicates the number of desired instances.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i32>,
    /// disables the validation check for an odd number of replicas.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicasAllowEvenNumber")]
    pub replicas_allow_even_number: Option<bool>,
    /// Replication configures high availability via replication. This feature is still in alpha, use Galera if you are looking for a more production-ready HA.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replication: Option<MariaDBReplication>,
    /// Resouces describes the compute resource requirements.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<MariaDBResources>,
    /// RootEmptyPassword indicates if the root password should be empty. Don't use this feature in production, it is only intended for development and test environments.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootEmptyPassword")]
    pub root_empty_password: Option<bool>,
    /// RootPasswordSecretKeyRef is a reference to a Secret key containing the root password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootPasswordSecretKeyRef")]
    pub root_password_secret_key_ref: Option<MariaDBRootPasswordSecretKeyRef>,
    /// SecondaryConnection defines a template to configure the secondary Connection object.
    /// This Connection provides the initial User access to the initial Database.
    /// It will make use of the SecondaryService to route network traffic to the secondary Pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondaryConnection")]
    pub secondary_connection: Option<MariaDBSecondaryConnection>,
    /// SecondaryService defines a template to configure the secondary Service object.
    /// The network traffic of this Service will be routed to the secondary Pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondaryService")]
    pub secondary_service: Option<MariaDBSecondaryService>,
    /// SecurityContext holds security configuration that will be applied to a container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<MariaDBSecurityContext>,
    /// Service defines a template to configure the general Service object.
    /// The network traffic of this Service will be routed to all Pods.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<MariaDBService>,
    /// ServiceAccountName is the name of the ServiceAccount to be used by the Pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountName")]
    pub service_account_name: Option<String>,
    /// ServicePorts is the list of additional named ports to be added to the Services created by the operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servicePorts")]
    pub service_ports: Option<Vec<MariaDBServicePorts>>,
    /// SidecarContainers to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sidecarContainers")]
    pub sidecar_containers: Option<Vec<MariaDBSidecarContainers>>,
    /// StartupProbe to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbe")]
    pub startup_probe: Option<MariaDBStartupProbe>,
    /// Storage defines the storage options to be used for provisioning the PVCs mounted by MariaDB.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<MariaDBStorage>,
    /// Suspend indicates whether the current resource should be suspended or not.
    /// This can be useful for maintenance, as disabling the reconciliation prevents the operator from interfering with user operations during maintenance activities.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suspend: Option<bool>,
    /// TimeZone sets the default timezone. If not provided, it defaults to SYSTEM and the timezone data is not loaded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    pub time_zone: Option<String>,
    /// TLS defines the PKI to be used with MariaDB.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<MariaDBTls>,
    /// Tolerations to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<MariaDBTolerations>>,
    /// TopologySpreadConstraints to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologySpreadConstraints")]
    pub topology_spread_constraints: Option<Vec<MariaDBTopologySpreadConstraints>>,
    /// UpdateStrategy defines how a MariaDB resource is updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateStrategy")]
    pub update_strategy: Option<MariaDBUpdateStrategy>,
    /// Username is the initial username to be created by the operator once MariaDB is ready.
    /// The initial User will have ALL PRIVILEGES in the initial Database.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    /// VolumeMounts to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<MariaDBVolumeMounts>>,
    /// Volumes to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<MariaDBVolumes>>,
}

/// Affinity to be used in the Pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBAffinity {
    /// AntiAffinityEnabled configures PodAntiAffinity so each Pod is scheduled in a different Node, enabling HA.
    /// Make sure you have at least as many Nodes available as the replicas to not end up with unscheduled Pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "antiAffinityEnabled")]
    pub anti_affinity_enabled: Option<bool>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeaffinity-v1-core
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinity")]
    pub node_affinity: Option<MariaDBAffinityNodeAffinity>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podantiaffinity-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinity")]
    pub pod_anti_affinity: Option<MariaDBAffinityPodAntiAffinity>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeaffinity-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBAffinityNodeAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<MariaDBAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselector-v1-core
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<MariaDBAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#preferredschedulingterm-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorterm-v1-core
    pub preference: MariaDBAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference,
    pub weight: i32,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorterm-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<MariaDBAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselector-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(rename = "nodeSelectorTerms")]
    pub node_selector_terms: Vec<MariaDBAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorterm-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<MariaDBAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podantiaffinity-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBAffinityPodAntiAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<MariaDBAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<MariaDBAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#weightedpodaffinityterm-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podaffinityterm-v1-core.
    #[serde(rename = "podAffinityTerm")]
    pub pod_affinity_term: MariaDBAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm,
    pub weight: i32,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podaffinityterm-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<MariaDBAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselectorrequirement-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    pub key: String,
    /// A label selector operator is the set of operators that can be used in a selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podaffinityterm-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<MariaDBAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselectorrequirement-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    pub key: String,
    /// A label selector operator is the set of operators that can be used in a selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// BootstrapFrom defines a source to bootstrap from.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFrom {
    /// BackupRef is a reference to a Backup object. It has priority over S3 and Volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupRef")]
    pub backup_ref: Option<MariaDBBootstrapFromBackupRef>,
    /// RestoreJob defines additional properties for the Job used to perform the Restore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restoreJob")]
    pub restore_job: Option<MariaDBBootstrapFromRestoreJob>,
    /// S3 defines the configuration to restore backups from a S3 compatible storage. It has priority over Volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3: Option<MariaDBBootstrapFromS3>,
    /// StagingStorage defines the temporary storage used to keep external backups (i.e. S3) while they are being processed.
    /// It defaults to an emptyDir volume, meaning that the backups will be temporarily stored in the node where the Restore Job is scheduled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stagingStorage")]
    pub staging_storage: Option<MariaDBBootstrapFromStagingStorage>,
    /// TargetRecoveryTime is a RFC3339 (1970-01-01T00:00:00Z) date and time that defines the point in time recovery objective.
    /// It is used to determine the closest restoration source in time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRecoveryTime")]
    pub target_recovery_time: Option<String>,
    /// Volume is a Kubernetes Volume object that contains a backup.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volume: Option<MariaDBBootstrapFromVolume>,
}

/// BackupRef is a reference to a Backup object. It has priority over S3 and Volume.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromBackupRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// RestoreJob defines additional properties for the Job used to perform the Restore.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJob {
    /// Affinity to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<MariaDBBootstrapFromRestoreJobAffinity>,
    /// Args to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Metadata defines additional metadata for the bootstrap Jobs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MariaDBBootstrapFromRestoreJobMetadata>,
    /// Resouces describes the compute resource requirements.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<MariaDBBootstrapFromRestoreJobResources>,
}

/// Affinity to be used in the Pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJobAffinity {
    /// AntiAffinityEnabled configures PodAntiAffinity so each Pod is scheduled in a different Node, enabling HA.
    /// Make sure you have at least as many Nodes available as the replicas to not end up with unscheduled Pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "antiAffinityEnabled")]
    pub anti_affinity_enabled: Option<bool>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeaffinity-v1-core
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinity")]
    pub node_affinity: Option<MariaDBBootstrapFromRestoreJobAffinityNodeAffinity>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podantiaffinity-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinity")]
    pub pod_anti_affinity: Option<MariaDBBootstrapFromRestoreJobAffinityPodAntiAffinity>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeaffinity-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJobAffinityNodeAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<MariaDBBootstrapFromRestoreJobAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselector-v1-core
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<MariaDBBootstrapFromRestoreJobAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#preferredschedulingterm-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJobAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorterm-v1-core
    pub preference: MariaDBBootstrapFromRestoreJobAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference,
    pub weight: i32,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorterm-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJobAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBBootstrapFromRestoreJobAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<MariaDBBootstrapFromRestoreJobAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJobAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJobAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselector-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJobAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(rename = "nodeSelectorTerms")]
    pub node_selector_terms: Vec<MariaDBBootstrapFromRestoreJobAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorterm-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJobAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBBootstrapFromRestoreJobAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<MariaDBBootstrapFromRestoreJobAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJobAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJobAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podantiaffinity-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJobAffinityPodAntiAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<MariaDBBootstrapFromRestoreJobAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<MariaDBBootstrapFromRestoreJobAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#weightedpodaffinityterm-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJobAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podaffinityterm-v1-core.
    #[serde(rename = "podAffinityTerm")]
    pub pod_affinity_term: MariaDBBootstrapFromRestoreJobAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm,
    pub weight: i32,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podaffinityterm-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJobAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<MariaDBBootstrapFromRestoreJobAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJobAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBBootstrapFromRestoreJobAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselectorrequirement-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJobAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    pub key: String,
    /// A label selector operator is the set of operators that can be used in a selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podaffinityterm-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJobAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<MariaDBBootstrapFromRestoreJobAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJobAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBBootstrapFromRestoreJobAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselectorrequirement-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJobAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    pub key: String,
    /// A label selector operator is the set of operators that can be used in a selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Metadata defines additional metadata for the bootstrap Jobs.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJobMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// Resouces describes the compute resource requirements.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromRestoreJobResources {
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// S3 defines the configuration to restore backups from a S3 compatible storage. It has priority over Volume.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromS3 {
    /// AccessKeyIdSecretKeyRef is a reference to a Secret key containing the S3 access key id.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyIdSecretKeyRef")]
    pub access_key_id_secret_key_ref: Option<MariaDBBootstrapFromS3AccessKeyIdSecretKeyRef>,
    /// Bucket is the name Name of the bucket to store backups.
    pub bucket: String,
    /// Endpoint is the S3 API endpoint without scheme.
    pub endpoint: String,
    /// Prefix indicates a folder/subfolder in the bucket. For example: mariadb/ or mariadb/backups. A trailing slash '/' is added if not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Region is the S3 region name to use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// AccessKeyIdSecretKeyRef is a reference to a Secret key containing the S3 secret key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretAccessKeySecretKeyRef")]
    pub secret_access_key_secret_key_ref: Option<MariaDBBootstrapFromS3SecretAccessKeySecretKeyRef>,
    /// SessionTokenSecretKeyRef is a reference to a Secret key containing the S3 session token.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionTokenSecretKeyRef")]
    pub session_token_secret_key_ref: Option<MariaDBBootstrapFromS3SessionTokenSecretKeyRef>,
    /// TLS provides the configuration required to establish TLS connections with S3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<MariaDBBootstrapFromS3Tls>,
}

/// AccessKeyIdSecretKeyRef is a reference to a Secret key containing the S3 access key id.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromS3AccessKeyIdSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// AccessKeyIdSecretKeyRef is a reference to a Secret key containing the S3 secret key.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromS3SecretAccessKeySecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// SessionTokenSecretKeyRef is a reference to a Secret key containing the S3 session token.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromS3SessionTokenSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// TLS provides the configuration required to establish TLS connections with S3.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromS3Tls {
    /// CASecretKeyRef is a reference to a Secret key containing a CA bundle in PEM format used to establish TLS connections with S3.
    /// By default, the system trust chain will be used, but you can use this field to add more CAs to the bundle.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caSecretKeyRef")]
    pub ca_secret_key_ref: Option<MariaDBBootstrapFromS3TlsCaSecretKeyRef>,
    /// Enabled is a flag to enable TLS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// CASecretKeyRef is a reference to a Secret key containing a CA bundle in PEM format used to establish TLS connections with S3.
/// By default, the system trust chain will be used, but you can use this field to add more CAs to the bundle.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromS3TlsCaSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// StagingStorage defines the temporary storage used to keep external backups (i.e. S3) while they are being processed.
/// It defaults to an emptyDir volume, meaning that the backups will be temporarily stored in the node where the Restore Job is scheduled.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromStagingStorage {
    /// PersistentVolumeClaim is a Kubernetes PVC specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeClaim")]
    pub persistent_volume_claim: Option<MariaDBBootstrapFromStagingStoragePersistentVolumeClaim>,
    /// Volume is a Kubernetes volume specification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volume: Option<MariaDBBootstrapFromStagingStorageVolume>,
}

/// PersistentVolumeClaim is a Kubernetes PVC specification.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromStagingStoragePersistentVolumeClaim {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    /// VolumeResourceRequirements describes the storage resource requirements for a volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<MariaDBBootstrapFromStagingStoragePersistentVolumeClaimResources>,
    /// A label selector is a label query over a set of resources. The result of matchLabels and
    /// matchExpressions are ANDed. An empty label selector matches all objects. A null
    /// label selector matches no objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<MariaDBBootstrapFromStagingStoragePersistentVolumeClaimSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
}

/// VolumeResourceRequirements describes the storage resource requirements for a volume.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromStagingStoragePersistentVolumeClaimResources {
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// A label selector is a label query over a set of resources. The result of matchLabels and
/// matchExpressions are ANDed. An empty label selector matches all objects. A null
/// label selector matches no objects.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromStagingStoragePersistentVolumeClaimSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBBootstrapFromStagingStoragePersistentVolumeClaimSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromStagingStoragePersistentVolumeClaimSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Volume is a Kubernetes volume specification.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromStagingStorageVolume {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#csivolumesource-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csi: Option<MariaDBBootstrapFromStagingStorageVolumeCsi>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#emptydirvolumesource-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emptyDir")]
    pub empty_dir: Option<MariaDBBootstrapFromStagingStorageVolumeEmptyDir>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#hostpathvolumesource-v1-core
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPath")]
    pub host_path: Option<MariaDBBootstrapFromStagingStorageVolumeHostPath>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nfsvolumesource-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nfs: Option<MariaDBBootstrapFromStagingStorageVolumeNfs>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#persistentvolumeclaimvolumesource-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeClaim")]
    pub persistent_volume_claim: Option<MariaDBBootstrapFromStagingStorageVolumePersistentVolumeClaim>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#csivolumesource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromStagingStorageVolumeCsi {
    pub driver: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePublishSecretRef")]
    pub node_publish_secret_ref: Option<MariaDBBootstrapFromStagingStorageVolumeCsiNodePublishSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeAttributes")]
    pub volume_attributes: Option<BTreeMap<String, String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromStagingStorageVolumeCsiNodePublishSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#emptydirvolumesource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromStagingStorageVolumeEmptyDir {
    /// StorageMedium defines ways that storage can be allocated to a volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub medium: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeLimit")]
    pub size_limit: Option<IntOrString>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#hostpathvolumesource-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromStagingStorageVolumeHostPath {
    pub path: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nfsvolumesource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromStagingStorageVolumeNfs {
    pub path: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    pub server: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#persistentvolumeclaimvolumesource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromStagingStorageVolumePersistentVolumeClaim {
    #[serde(rename = "claimName")]
    pub claim_name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

/// Volume is a Kubernetes Volume object that contains a backup.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromVolume {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#csivolumesource-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csi: Option<MariaDBBootstrapFromVolumeCsi>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#emptydirvolumesource-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emptyDir")]
    pub empty_dir: Option<MariaDBBootstrapFromVolumeEmptyDir>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#hostpathvolumesource-v1-core
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPath")]
    pub host_path: Option<MariaDBBootstrapFromVolumeHostPath>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nfsvolumesource-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nfs: Option<MariaDBBootstrapFromVolumeNfs>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#persistentvolumeclaimvolumesource-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeClaim")]
    pub persistent_volume_claim: Option<MariaDBBootstrapFromVolumePersistentVolumeClaim>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#csivolumesource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromVolumeCsi {
    pub driver: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePublishSecretRef")]
    pub node_publish_secret_ref: Option<MariaDBBootstrapFromVolumeCsiNodePublishSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeAttributes")]
    pub volume_attributes: Option<BTreeMap<String, String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromVolumeCsiNodePublishSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#emptydirvolumesource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromVolumeEmptyDir {
    /// StorageMedium defines ways that storage can be allocated to a volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub medium: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeLimit")]
    pub size_limit: Option<IntOrString>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#hostpathvolumesource-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromVolumeHostPath {
    pub path: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nfsvolumesource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromVolumeNfs {
    pub path: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    pub server: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#persistentvolumeclaimvolumesource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBBootstrapFromVolumePersistentVolumeClaim {
    #[serde(rename = "claimName")]
    pub claim_name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

/// Connection defines a template to configure the general Connection object.
/// This Connection provides the initial User access to the initial Database.
/// It will make use of the Service to route network traffic to all Pods.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBConnection {
    /// HealthCheck to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheck")]
    pub health_check: Option<MariaDBConnectionHealthCheck>,
    /// Params to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub params: Option<BTreeMap<String, String>>,
    /// Port to connect to. If not provided, it defaults to the MariaDB port or to the first MaxScale listener.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// SecretName to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    /// SecretTemplate to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretTemplate")]
    pub secret_template: Option<MariaDBConnectionSecretTemplate>,
    /// ServiceName to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

/// HealthCheck to be used in the Connection.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBConnectionHealthCheck {
    /// Interval used to perform health checks.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    /// RetryInterval is the interval used to perform health check retries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryInterval")]
    pub retry_interval: Option<String>,
}

/// SecretTemplate to be used in the Connection.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBConnectionSecretTemplate {
    /// DatabaseKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseKey")]
    pub database_key: Option<String>,
    /// Format to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// HostKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostKey")]
    pub host_key: Option<String>,
    /// Key to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Metadata to be added to the Secret object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MariaDBConnectionSecretTemplateMetadata>,
    /// PasswordKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordKey")]
    pub password_key: Option<String>,
    /// PortKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portKey")]
    pub port_key: Option<String>,
    /// UsernameKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usernameKey")]
    pub username_key: Option<String>,
}

/// Metadata to be added to the Secret object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBConnectionSecretTemplateMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envvarsource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBEnv {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envvarsource-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<MariaDBEnvValueFrom>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envvarsource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBEnvValueFrom {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#configmapkeyselector-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<MariaDBEnvValueFromConfigMapKeyRef>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#objectfieldselector-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<MariaDBEnvValueFromFieldRef>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#secretkeyselector-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<MariaDBEnvValueFromSecretKeyRef>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#configmapkeyselector-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBEnvValueFromConfigMapKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#objectfieldselector-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBEnvValueFromFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#secretkeyselector-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBEnvValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envfromsource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBEnvFrom {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<MariaDBEnvFromConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<MariaDBEnvFromSecretRef>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBEnvFromConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBEnvFromSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Replication configures high availability via Galera.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGalera {
    /// GaleraAgent is a sidecar agent that co-operates with mariadb-operator.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agent: Option<MariaDBGaleraAgent>,
    /// AvailableWhenDonor indicates whether a donor node should be responding to queries. It defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availableWhenDonor")]
    pub available_when_donor: Option<bool>,
    /// GaleraConfig defines storage options for the Galera configuration files.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<MariaDBGaleraConfig>,
    /// Enabled is a flag to enable Galera.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// GaleraLibPath is a path inside the MariaDB image to the wsrep provider plugin. It is defaulted if not provided.
    /// More info: https://galeracluster.com/library/documentation/mysql-wsrep-options.html#wsrep-provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "galeraLibPath")]
    pub galera_lib_path: Option<String>,
    /// InitContainer is an init container that runs in the MariaDB Pod and co-operates with mariadb-operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initContainer")]
    pub init_container: Option<MariaDBGaleraInitContainer>,
    /// InitJob defines a Job that co-operates with mariadb-operator by performing initialization tasks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initJob")]
    pub init_job: Option<MariaDBGaleraInitJob>,
    /// Primary is the Galera configuration for the primary node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub primary: Option<MariaDBGaleraPrimary>,
    /// ProviderOptions is map of Galera configuration parameters.
    /// More info: https://mariadb.com/kb/en/galera-cluster-system-variables/#wsrep_provider_options.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerOptions")]
    pub provider_options: Option<BTreeMap<String, String>>,
    /// GaleraRecovery is the recovery process performed by the operator whenever the Galera cluster is not healthy.
    /// More info: https://galeracluster.com/library/documentation/crash-recovery.html.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recovery: Option<MariaDBGaleraRecovery>,
    /// ReplicaThreads is the number of replica threads used to apply Galera write sets in parallel.
    /// More info: https://mariadb.com/kb/en/galera-cluster-system-variables/#wsrep_slave_threads.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaThreads")]
    pub replica_threads: Option<i64>,
    /// SST is the Snapshot State Transfer used when new Pods join the cluster.
    /// More info: https://galeracluster.com/library/documentation/sst.html.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sst: Option<MariaDBGaleraSst>,
}

/// GaleraAgent is a sidecar agent that co-operates with mariadb-operator.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgent {
    /// Args to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// BasicAuth to be used by the agent container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuth")]
    pub basic_auth: Option<MariaDBGaleraAgentBasicAuth>,
    /// Command to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// Env represents the environment variables to be injected in a container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<MariaDBGaleraAgentEnv>>,
    /// EnvFrom represents the references (via ConfigMap and Secrets) to environment variables to be injected in the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envFrom")]
    pub env_from: Option<Vec<MariaDBGaleraAgentEnvFrom>>,
    /// GracefulShutdownTimeout is the time we give to the agent container in order to gracefully terminate in-flight requests.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gracefulShutdownTimeout")]
    pub graceful_shutdown_timeout: Option<String>,
    /// Image name to be used by the MariaDB instances. The supported format is `<image>:<tag>`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<MariaDBGaleraAgentImagePullPolicy>,
    /// KubernetesAuth to be used by the agent container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAuth")]
    pub kubernetes_auth: Option<MariaDBGaleraAgentKubernetesAuth>,
    /// LivenessProbe to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<MariaDBGaleraAgentLivenessProbe>,
    /// Port where the agent will be listening for API connections.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// Port where the agent will be listening for probe connections.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "probePort")]
    pub probe_port: Option<i32>,
    /// ReadinessProbe to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<MariaDBGaleraAgentReadinessProbe>,
    /// Resouces describes the compute resource requirements.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<MariaDBGaleraAgentResources>,
    /// SecurityContext holds security configuration that will be applied to a container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<MariaDBGaleraAgentSecurityContext>,
    /// StartupProbe to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbe")]
    pub startup_probe: Option<MariaDBGaleraAgentStartupProbe>,
    /// VolumeMounts to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<MariaDBGaleraAgentVolumeMounts>>,
}

/// BasicAuth to be used by the agent container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentBasicAuth {
    /// Enabled is a flag to enable BasicAuth
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// PasswordSecretKeyRef to be used for basic authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretKeyRef")]
    pub password_secret_key_ref: Option<MariaDBGaleraAgentBasicAuthPasswordSecretKeyRef>,
    /// Username to be used for basic authentication
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// PasswordSecretKeyRef to be used for basic authentication
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentBasicAuthPasswordSecretKeyRef {
    /// Generate indicates whether the Secret should be generated if the Secret referenced is not present.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generate: Option<bool>,
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envvarsource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentEnv {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envvarsource-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<MariaDBGaleraAgentEnvValueFrom>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envvarsource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentEnvValueFrom {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#configmapkeyselector-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<MariaDBGaleraAgentEnvValueFromConfigMapKeyRef>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#objectfieldselector-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<MariaDBGaleraAgentEnvValueFromFieldRef>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#secretkeyselector-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<MariaDBGaleraAgentEnvValueFromSecretKeyRef>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#configmapkeyselector-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentEnvValueFromConfigMapKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#objectfieldselector-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentEnvValueFromFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#secretkeyselector-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentEnvValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envfromsource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentEnvFrom {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<MariaDBGaleraAgentEnvFromConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<MariaDBGaleraAgentEnvFromSecretRef>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentEnvFromConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentEnvFromSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// GaleraAgent is a sidecar agent that co-operates with mariadb-operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MariaDBGaleraAgentImagePullPolicy {
    Always,
    Never,
    IfNotPresent,
}

/// KubernetesAuth to be used by the agent container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentKubernetesAuth {
    /// AuthDelegatorRoleName is the name of the ClusterRoleBinding that is associated with the "system:auth-delegator" ClusterRole.
    /// It is necessary for creating TokenReview objects in order for the agent to validate the service account token.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authDelegatorRoleName")]
    pub auth_delegator_role_name: Option<String>,
    /// Enabled is a flag to enable KubernetesAuth
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// LivenessProbe to be used in the Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentLivenessProbe {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<MariaDBGaleraAgentLivenessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<MariaDBGaleraAgentLivenessProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#tcpsocketaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<MariaDBGaleraAgentLivenessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentLivenessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentLivenessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub port: IntOrString,
    /// URIScheme identifies the scheme used for connection to a host for Get actions
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#tcpsocketaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentLivenessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    pub port: IntOrString,
}

/// ReadinessProbe to be used in the Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentReadinessProbe {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<MariaDBGaleraAgentReadinessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<MariaDBGaleraAgentReadinessProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#tcpsocketaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<MariaDBGaleraAgentReadinessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentReadinessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentReadinessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub port: IntOrString,
    /// URIScheme identifies the scheme used for connection to a host for Get actions
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#tcpsocketaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentReadinessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    pub port: IntOrString,
}

/// Resouces describes the compute resource requirements.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentResources {
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// SecurityContext holds security configuration that will be applied to a container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPrivilegeEscalation")]
    pub allow_privilege_escalation: Option<bool>,
    /// Adds and removes POSIX capabilities from running containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<MariaDBGaleraAgentSecurityContextCapabilities>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFilesystem")]
    pub read_only_root_filesystem: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
}

/// Adds and removes POSIX capabilities from running containers.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentSecurityContextCapabilities {
    /// Added capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<String>>,
    /// Removed capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<Vec<String>>,
}

/// StartupProbe to be used in the Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentStartupProbe {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<MariaDBGaleraAgentStartupProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<MariaDBGaleraAgentStartupProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#tcpsocketaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<MariaDBGaleraAgentStartupProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentStartupProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentStartupProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub port: IntOrString,
    /// URIScheme identifies the scheme used for connection to a host for Get actions
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#tcpsocketaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentStartupProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    pub port: IntOrString,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#volumemount-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraAgentVolumeMounts {
    #[serde(rename = "mountPath")]
    pub mount_path: String,
    /// This must match the Name of a Volume.
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPath")]
    pub sub_path: Option<String>,
}

/// GaleraConfig defines storage options for the Galera configuration files.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraConfig {
    /// ReuseStorageVolume indicates that storage volume used by MariaDB should be reused to store the Galera configuration files.
    /// It defaults to false, which implies that a dedicated volume for the Galera configuration files is provisioned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reuseStorageVolume")]
    pub reuse_storage_volume: Option<bool>,
    /// VolumeClaimTemplate is a template for the PVC that will contain the Galera configuration files shared between the InitContainer, Agent and MariaDB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeClaimTemplate")]
    pub volume_claim_template: Option<MariaDBGaleraConfigVolumeClaimTemplate>,
}

/// VolumeClaimTemplate is a template for the PVC that will contain the Galera configuration files shared between the InitContainer, Agent and MariaDB.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraConfigVolumeClaimTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    /// Metadata to be added to the PVC metadata.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MariaDBGaleraConfigVolumeClaimTemplateMetadata>,
    /// VolumeResourceRequirements describes the storage resource requirements for a volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<MariaDBGaleraConfigVolumeClaimTemplateResources>,
    /// A label selector is a label query over a set of resources. The result of matchLabels and
    /// matchExpressions are ANDed. An empty label selector matches all objects. A null
    /// label selector matches no objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<MariaDBGaleraConfigVolumeClaimTemplateSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
}

/// Metadata to be added to the PVC metadata.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraConfigVolumeClaimTemplateMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// VolumeResourceRequirements describes the storage resource requirements for a volume.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraConfigVolumeClaimTemplateResources {
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// A label selector is a label query over a set of resources. The result of matchLabels and
/// matchExpressions are ANDed. An empty label selector matches all objects. A null
/// label selector matches no objects.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraConfigVolumeClaimTemplateSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBGaleraConfigVolumeClaimTemplateSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraConfigVolumeClaimTemplateSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// InitContainer is an init container that runs in the MariaDB Pod and co-operates with mariadb-operator.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainer {
    /// Args to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Command to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// Env represents the environment variables to be injected in a container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<MariaDBGaleraInitContainerEnv>>,
    /// EnvFrom represents the references (via ConfigMap and Secrets) to environment variables to be injected in the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envFrom")]
    pub env_from: Option<Vec<MariaDBGaleraInitContainerEnvFrom>>,
    /// Image name to be used by the MariaDB instances. The supported format is `<image>:<tag>`.
    pub image: String,
    /// ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<MariaDBGaleraInitContainerImagePullPolicy>,
    /// LivenessProbe to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<MariaDBGaleraInitContainerLivenessProbe>,
    /// ReadinessProbe to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<MariaDBGaleraInitContainerReadinessProbe>,
    /// Resouces describes the compute resource requirements.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<MariaDBGaleraInitContainerResources>,
    /// SecurityContext holds security configuration that will be applied to a container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<MariaDBGaleraInitContainerSecurityContext>,
    /// StartupProbe to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbe")]
    pub startup_probe: Option<MariaDBGaleraInitContainerStartupProbe>,
    /// VolumeMounts to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<MariaDBGaleraInitContainerVolumeMounts>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envvarsource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerEnv {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envvarsource-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<MariaDBGaleraInitContainerEnvValueFrom>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envvarsource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerEnvValueFrom {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#configmapkeyselector-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<MariaDBGaleraInitContainerEnvValueFromConfigMapKeyRef>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#objectfieldselector-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<MariaDBGaleraInitContainerEnvValueFromFieldRef>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#secretkeyselector-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<MariaDBGaleraInitContainerEnvValueFromSecretKeyRef>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#configmapkeyselector-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerEnvValueFromConfigMapKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#objectfieldselector-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerEnvValueFromFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#secretkeyselector-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerEnvValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envfromsource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerEnvFrom {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<MariaDBGaleraInitContainerEnvFromConfigMapRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<MariaDBGaleraInitContainerEnvFromSecretRef>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerEnvFromConfigMapRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerEnvFromSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// InitContainer is an init container that runs in the MariaDB Pod and co-operates with mariadb-operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MariaDBGaleraInitContainerImagePullPolicy {
    Always,
    Never,
    IfNotPresent,
}

/// LivenessProbe to be used in the Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerLivenessProbe {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<MariaDBGaleraInitContainerLivenessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<MariaDBGaleraInitContainerLivenessProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#tcpsocketaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<MariaDBGaleraInitContainerLivenessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerLivenessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerLivenessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub port: IntOrString,
    /// URIScheme identifies the scheme used for connection to a host for Get actions
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#tcpsocketaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerLivenessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    pub port: IntOrString,
}

/// ReadinessProbe to be used in the Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerReadinessProbe {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<MariaDBGaleraInitContainerReadinessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<MariaDBGaleraInitContainerReadinessProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#tcpsocketaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<MariaDBGaleraInitContainerReadinessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerReadinessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerReadinessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub port: IntOrString,
    /// URIScheme identifies the scheme used for connection to a host for Get actions
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#tcpsocketaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerReadinessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    pub port: IntOrString,
}

/// Resouces describes the compute resource requirements.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerResources {
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// SecurityContext holds security configuration that will be applied to a container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPrivilegeEscalation")]
    pub allow_privilege_escalation: Option<bool>,
    /// Adds and removes POSIX capabilities from running containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<MariaDBGaleraInitContainerSecurityContextCapabilities>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFilesystem")]
    pub read_only_root_filesystem: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
}

/// Adds and removes POSIX capabilities from running containers.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerSecurityContextCapabilities {
    /// Added capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<String>>,
    /// Removed capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<Vec<String>>,
}

/// StartupProbe to be used in the Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerStartupProbe {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<MariaDBGaleraInitContainerStartupProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<MariaDBGaleraInitContainerStartupProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#tcpsocketaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<MariaDBGaleraInitContainerStartupProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerStartupProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerStartupProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub port: IntOrString,
    /// URIScheme identifies the scheme used for connection to a host for Get actions
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#tcpsocketaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerStartupProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    pub port: IntOrString,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#volumemount-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitContainerVolumeMounts {
    #[serde(rename = "mountPath")]
    pub mount_path: String,
    /// This must match the Name of a Volume.
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPath")]
    pub sub_path: Option<String>,
}

/// InitJob defines a Job that co-operates with mariadb-operator by performing initialization tasks.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitJob {
    /// Metadata defines additional metadata for the Galera init Job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MariaDBGaleraInitJobMetadata>,
    /// Resouces describes the compute resource requirements.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<MariaDBGaleraInitJobResources>,
}

/// Metadata defines additional metadata for the Galera init Job.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitJobMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// Resouces describes the compute resource requirements.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraInitJobResources {
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// Primary is the Galera configuration for the primary node.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraPrimary {
    /// AutomaticFailover indicates whether the operator should automatically update PodIndex to perform an automatic primary failover.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "automaticFailover")]
    pub automatic_failover: Option<bool>,
    /// PodIndex is the StatefulSet index of the primary node. The user may change this field to perform a manual switchover.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podIndex")]
    pub pod_index: Option<i64>,
}

/// GaleraRecovery is the recovery process performed by the operator whenever the Galera cluster is not healthy.
/// More info: https://galeracluster.com/library/documentation/crash-recovery.html.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraRecovery {
    /// ClusterBootstrapTimeout is the time limit for bootstrapping a cluster.
    /// Once this timeout is reached, the Galera recovery state is reset and a new cluster bootstrap will be attempted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterBootstrapTimeout")]
    pub cluster_bootstrap_timeout: Option<String>,
    /// ClusterDownscaleTimeout represents the maximum duration for downscaling the cluster's StatefulSet during the recovery process.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterDownscaleTimeout")]
    pub cluster_downscale_timeout: Option<String>,
    /// ClusterHealthyTimeout represents the duration at which a Galera cluster, that consistently failed health checks,
    /// is considered unhealthy, and consequently the Galera recovery process will be initiated by the operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterHealthyTimeout")]
    pub cluster_healthy_timeout: Option<String>,
    /// ClusterMonitorInterval represents the interval used to monitor the Galera cluster health.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterMonitorInterval")]
    pub cluster_monitor_interval: Option<String>,
    /// ClusterUpscaleTimeout represents the maximum duration for upscaling the cluster's StatefulSet during the recovery process.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterUpscaleTimeout")]
    pub cluster_upscale_timeout: Option<String>,
    /// Enabled is a flag to enable GaleraRecovery.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// ForceClusterBootstrapInPod allows you to manually initiate the bootstrap process in a specific Pod.
    /// IMPORTANT: Use this option only in exceptional circumstances. Not selecting the Pod with the highest sequence number may result in data loss.
    /// IMPORTANT: Ensure you unset this field after completing the bootstrap to allow the operator to choose the appropriate Pod to bootstrap from in an event of cluster recovery.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceClusterBootstrapInPod")]
    pub force_cluster_bootstrap_in_pod: Option<String>,
    /// Job defines a Job that co-operates with mariadb-operator by performing the Galera cluster recovery .
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub job: Option<MariaDBGaleraRecoveryJob>,
    /// MinClusterSize is the minimum number of replicas to consider the cluster healthy. It can be either a number of replicas (1) or a percentage (50%).
    /// If Galera consistently reports less replicas than this value for the given 'ClusterHealthyTimeout' interval, a cluster recovery is iniated.
    /// It defaults to '1' replica, and it is highly recommendeded to keep this value at '1' in most cases.
    /// If set to more than one replica, the cluster recovery process may restart the healthy replicas as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minClusterSize")]
    pub min_cluster_size: Option<IntOrString>,
    /// PodRecoveryTimeout is the time limit for recevorying the sequence of a Pod during the cluster recovery.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podRecoveryTimeout")]
    pub pod_recovery_timeout: Option<String>,
    /// PodSyncTimeout is the time limit for a Pod to join the cluster after having performed a cluster bootstrap during the cluster recovery.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podSyncTimeout")]
    pub pod_sync_timeout: Option<String>,
}

/// Job defines a Job that co-operates with mariadb-operator by performing the Galera cluster recovery .
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraRecoveryJob {
    /// Metadata defines additional metadata for the Galera recovery Jobs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MariaDBGaleraRecoveryJobMetadata>,
    /// PodAffinity indicates whether the recovery Jobs should run in the same Node as the MariaDB Pods. It defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinity")]
    pub pod_affinity: Option<bool>,
    /// Resouces describes the compute resource requirements.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<MariaDBGaleraRecoveryJobResources>,
}

/// Metadata defines additional metadata for the Galera recovery Jobs.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraRecoveryJobMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// Resouces describes the compute resource requirements.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBGaleraRecoveryJobResources {
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// Replication configures high availability via Galera.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MariaDBGaleraSst {
    #[serde(rename = "rsync")]
    Rsync,
    #[serde(rename = "mariabackup")]
    Mariabackup,
    #[serde(rename = "mysqldump")]
    Mysqldump,
}

/// MariaDBSpec defines the desired state of MariaDB
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MariaDBImagePullPolicy {
    Always,
    Never,
    IfNotPresent,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBImagePullSecrets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// InheritMetadata defines the metadata to be inherited by children resources.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBInheritMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// Container object definition.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBInitContainers {
    /// Args to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Command to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// Env represents the environment variables to be injected in a container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<MariaDBInitContainersEnv>>,
    /// Image name to be used by the container. The supported format is `<image>:<tag>`.
    pub image: String,
    /// ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<MariaDBInitContainersImagePullPolicy>,
    /// Name to be given to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Resouces describes the compute resource requirements.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<MariaDBInitContainersResources>,
    /// VolumeMounts to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<MariaDBInitContainersVolumeMounts>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envvarsource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBInitContainersEnv {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envvarsource-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<MariaDBInitContainersEnvValueFrom>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envvarsource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBInitContainersEnvValueFrom {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#configmapkeyselector-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<MariaDBInitContainersEnvValueFromConfigMapKeyRef>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#objectfieldselector-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<MariaDBInitContainersEnvValueFromFieldRef>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#secretkeyselector-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<MariaDBInitContainersEnvValueFromSecretKeyRef>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#configmapkeyselector-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBInitContainersEnvValueFromConfigMapKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#objectfieldselector-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBInitContainersEnvValueFromFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#secretkeyselector-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBInitContainersEnvValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Container object definition.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MariaDBInitContainersImagePullPolicy {
    Always,
    Never,
    IfNotPresent,
}

/// Resouces describes the compute resource requirements.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBInitContainersResources {
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#volumemount-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBInitContainersVolumeMounts {
    #[serde(rename = "mountPath")]
    pub mount_path: String,
    /// This must match the Name of a Volume.
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPath")]
    pub sub_path: Option<String>,
}

/// LivenessProbe to be used in the Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBLivenessProbe {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<MariaDBLivenessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<MariaDBLivenessProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#tcpsocketaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<MariaDBLivenessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBLivenessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBLivenessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub port: IntOrString,
    /// URIScheme identifies the scheme used for connection to a host for Get actions
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#tcpsocketaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBLivenessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    pub port: IntOrString,
}

/// MaxScale is the MaxScale specification that defines the MaxScale resource to be used with the current MariaDB.
/// When enabling this field, MaxScaleRef is automatically set.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScale {
    /// Admin configures the admin REST API and GUI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub admin: Option<MariaDBMaxScaleAdmin>,
    /// Auth defines the credentials required for MaxScale to connect to MariaDB.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<MariaDBMaxScaleAuth>,
    /// Config defines the MaxScale configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<MariaDBMaxScaleConfig>,
    /// Connection provides a template to define the Connection for MaxScale.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<MariaDBMaxScaleConnection>,
    /// Enabled is a flag to enable a MaxScale instance to be used with the current MariaDB.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// GuiKubernetesService define a template for a Kubernetes Service object to connect to MaxScale's GUI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guiKubernetesService")]
    pub gui_kubernetes_service: Option<MariaDBMaxScaleGuiKubernetesService>,
    /// Image name to be used by the MaxScale instances. The supported format is `<image>:<tag>`.
    /// Only MariaDB official images are supported.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<MariaDBMaxScaleImagePullPolicy>,
    /// KubernetesService defines a template for a Kubernetes Service object to connect to MaxScale.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesService")]
    pub kubernetes_service: Option<MariaDBMaxScaleKubernetesService>,
    /// Metrics configures metrics and how to scrape them.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics: Option<MariaDBMaxScaleMetrics>,
    /// Monitor monitors MariaDB server instances.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub monitor: Option<MariaDBMaxScaleMonitor>,
    /// PodDisruptionBudget defines the budget for replica availability.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podDisruptionBudget")]
    pub pod_disruption_budget: Option<MariaDBMaxScalePodDisruptionBudget>,
    /// Replicas indicates the number of desired instances.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i32>,
    /// RequeueInterval is used to perform requeue reconciliations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requeueInterval")]
    pub requeue_interval: Option<String>,
    /// Services define how the traffic is forwarded to the MariaDB servers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<MariaDBMaxScaleServices>>,
    /// TLS defines the PKI to be used with MaxScale.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<MariaDBMaxScaleTls>,
    /// UpdateStrategy defines the update strategy for the StatefulSet object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateStrategy")]
    pub update_strategy: Option<MariaDBMaxScaleUpdateStrategy>,
}

/// Admin configures the admin REST API and GUI.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleAdmin {
    /// GuiEnabled indicates whether the admin GUI should be enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guiEnabled")]
    pub gui_enabled: Option<bool>,
    /// Port where the admin REST API and GUI will be exposed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
}

/// Auth defines the credentials required for MaxScale to connect to MariaDB.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleAuth {
    /// AdminPasswordSecretKeyRef is Secret key reference to the admin password to call the admin REST API. It is defaulted if not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPasswordSecretKeyRef")]
    pub admin_password_secret_key_ref: Option<MariaDBMaxScaleAuthAdminPasswordSecretKeyRef>,
    /// AdminUsername is an admin username to call the admin REST API. It is defaulted if not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminUsername")]
    pub admin_username: Option<String>,
    /// ClientMaxConnections defines the maximum number of connections that the client can establish.
    /// If HA is enabled, make sure to increase this value, as more MaxScale replicas implies more connections.
    /// It defaults to 30 times the number of MaxScale replicas.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientMaxConnections")]
    pub client_max_connections: Option<i32>,
    /// ClientPasswordSecretKeyRef is Secret key reference to the password to connect to MaxScale. It is defaulted if not provided.
    /// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientPasswordSecretKeyRef")]
    pub client_password_secret_key_ref: Option<MariaDBMaxScaleAuthClientPasswordSecretKeyRef>,
    /// ClientUsername is the user to connect to MaxScale. It is defaulted if not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientUsername")]
    pub client_username: Option<String>,
    /// DeleteDefaultAdmin determines whether the default admin user should be deleted after the initial configuration. If not provided, it defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteDefaultAdmin")]
    pub delete_default_admin: Option<bool>,
    /// Generate  defies whether the operator should generate users and grants for MaxScale to work.
    /// It only supports MariaDBs specified via spec.mariaDbRef.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generate: Option<bool>,
    /// MetricsPasswordSecretKeyRef is Secret key reference to the metrics password to call the admib REST API. It is defaulted if metrics are enabled.
    /// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricsPasswordSecretKeyRef")]
    pub metrics_password_secret_key_ref: Option<MariaDBMaxScaleAuthMetricsPasswordSecretKeyRef>,
    /// MetricsUsername is an metrics username to call the REST API. It is defaulted if metrics are enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricsUsername")]
    pub metrics_username: Option<String>,
    /// MonitorMaxConnections defines the maximum number of connections that the monitor can establish.
    /// If HA is enabled, make sure to increase this value, as more MaxScale replicas implies more connections.
    /// It defaults to 30 times the number of MaxScale replicas.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitorMaxConnections")]
    pub monitor_max_connections: Option<i32>,
    /// MonitorPasswordSecretKeyRef is Secret key reference to the password used by MaxScale monitor to connect to MariaDB server. It is defaulted if not provided.
    /// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitorPasswordSecretKeyRef")]
    pub monitor_password_secret_key_ref: Option<MariaDBMaxScaleAuthMonitorPasswordSecretKeyRef>,
    /// MonitorUsername is the user used by MaxScale monitor to connect to MariaDB server. It is defaulted if not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitorUsername")]
    pub monitor_username: Option<String>,
    /// ServerMaxConnections defines the maximum number of connections that the server can establish.
    /// If HA is enabled, make sure to increase this value, as more MaxScale replicas implies more connections.
    /// It defaults to 30 times the number of MaxScale replicas.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverMaxConnections")]
    pub server_max_connections: Option<i32>,
    /// ServerPasswordSecretKeyRef is Secret key reference to the password used by MaxScale to connect to MariaDB server. It is defaulted if not provided.
    /// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverPasswordSecretKeyRef")]
    pub server_password_secret_key_ref: Option<MariaDBMaxScaleAuthServerPasswordSecretKeyRef>,
    /// ServerUsername is the user used by MaxScale to connect to MariaDB server. It is defaulted if not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverUsername")]
    pub server_username: Option<String>,
    /// SyncMaxConnections defines the maximum number of connections that the sync can establish.
    /// If HA is enabled, make sure to increase this value, as more MaxScale replicas implies more connections.
    /// It defaults to 30 times the number of MaxScale replicas.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncMaxConnections")]
    pub sync_max_connections: Option<i32>,
    /// SyncPasswordSecretKeyRef is Secret key reference to the password used by MaxScale config to connect to MariaDB server. It is defaulted when HA is enabled.
    /// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPasswordSecretKeyRef")]
    pub sync_password_secret_key_ref: Option<MariaDBMaxScaleAuthSyncPasswordSecretKeyRef>,
    /// MonitoSyncUsernamerUsername is the user used by MaxScale config sync to connect to MariaDB server. It is defaulted when HA is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncUsername")]
    pub sync_username: Option<String>,
}

/// AdminPasswordSecretKeyRef is Secret key reference to the admin password to call the admin REST API. It is defaulted if not provided.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleAuthAdminPasswordSecretKeyRef {
    /// Generate indicates whether the Secret should be generated if the Secret referenced is not present.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generate: Option<bool>,
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ClientPasswordSecretKeyRef is Secret key reference to the password to connect to MaxScale. It is defaulted if not provided.
/// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleAuthClientPasswordSecretKeyRef {
    /// Generate indicates whether the Secret should be generated if the Secret referenced is not present.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generate: Option<bool>,
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// MetricsPasswordSecretKeyRef is Secret key reference to the metrics password to call the admib REST API. It is defaulted if metrics are enabled.
/// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleAuthMetricsPasswordSecretKeyRef {
    /// Generate indicates whether the Secret should be generated if the Secret referenced is not present.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generate: Option<bool>,
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// MonitorPasswordSecretKeyRef is Secret key reference to the password used by MaxScale monitor to connect to MariaDB server. It is defaulted if not provided.
/// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleAuthMonitorPasswordSecretKeyRef {
    /// Generate indicates whether the Secret should be generated if the Secret referenced is not present.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generate: Option<bool>,
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ServerPasswordSecretKeyRef is Secret key reference to the password used by MaxScale to connect to MariaDB server. It is defaulted if not provided.
/// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleAuthServerPasswordSecretKeyRef {
    /// Generate indicates whether the Secret should be generated if the Secret referenced is not present.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generate: Option<bool>,
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// SyncPasswordSecretKeyRef is Secret key reference to the password used by MaxScale config to connect to MariaDB server. It is defaulted when HA is enabled.
/// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleAuthSyncPasswordSecretKeyRef {
    /// Generate indicates whether the Secret should be generated if the Secret referenced is not present.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generate: Option<bool>,
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Config defines the MaxScale configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleConfig {
    /// Params is a key value pair of parameters to be used in the MaxScale static configuration file.
    /// Any parameter supported by MaxScale may be specified here. See reference:
    /// https://mariadb.com/kb/en/mariadb-maxscale-2308-mariadb-maxscale-configuration-guide/#global-settings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub params: Option<BTreeMap<String, String>>,
    /// Sync defines how to replicate configuration across MaxScale replicas. It is defaulted when HA is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sync: Option<MariaDBMaxScaleConfigSync>,
    /// VolumeClaimTemplate provides a template to define the PVCs for storing MaxScale runtime configuration files. It is defaulted if not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeClaimTemplate")]
    pub volume_claim_template: Option<MariaDBMaxScaleConfigVolumeClaimTemplate>,
}

/// Sync defines how to replicate configuration across MaxScale replicas. It is defaulted when HA is enabled.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleConfigSync {
    /// Database is the MariaDB logical database where the 'maxscale_config' table will be created in order to persist and synchronize config changes. If not provided, it defaults to 'mysql'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub database: Option<String>,
    /// Interval defines the config synchronization interval. It is defaulted if not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    /// Interval defines the config synchronization timeout. It is defaulted if not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// VolumeClaimTemplate provides a template to define the PVCs for storing MaxScale runtime configuration files. It is defaulted if not provided.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleConfigVolumeClaimTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    /// Metadata to be added to the PVC metadata.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MariaDBMaxScaleConfigVolumeClaimTemplateMetadata>,
    /// VolumeResourceRequirements describes the storage resource requirements for a volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<MariaDBMaxScaleConfigVolumeClaimTemplateResources>,
    /// A label selector is a label query over a set of resources. The result of matchLabels and
    /// matchExpressions are ANDed. An empty label selector matches all objects. A null
    /// label selector matches no objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<MariaDBMaxScaleConfigVolumeClaimTemplateSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
}

/// Metadata to be added to the PVC metadata.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleConfigVolumeClaimTemplateMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// VolumeResourceRequirements describes the storage resource requirements for a volume.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleConfigVolumeClaimTemplateResources {
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// A label selector is a label query over a set of resources. The result of matchLabels and
/// matchExpressions are ANDed. An empty label selector matches all objects. A null
/// label selector matches no objects.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleConfigVolumeClaimTemplateSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBMaxScaleConfigVolumeClaimTemplateSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleConfigVolumeClaimTemplateSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Connection provides a template to define the Connection for MaxScale.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleConnection {
    /// HealthCheck to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheck")]
    pub health_check: Option<MariaDBMaxScaleConnectionHealthCheck>,
    /// Params to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub params: Option<BTreeMap<String, String>>,
    /// Port to connect to. If not provided, it defaults to the MariaDB port or to the first MaxScale listener.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// SecretName to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    /// SecretTemplate to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretTemplate")]
    pub secret_template: Option<MariaDBMaxScaleConnectionSecretTemplate>,
    /// ServiceName to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

/// HealthCheck to be used in the Connection.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleConnectionHealthCheck {
    /// Interval used to perform health checks.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    /// RetryInterval is the interval used to perform health check retries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryInterval")]
    pub retry_interval: Option<String>,
}

/// SecretTemplate to be used in the Connection.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleConnectionSecretTemplate {
    /// DatabaseKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseKey")]
    pub database_key: Option<String>,
    /// Format to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// HostKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostKey")]
    pub host_key: Option<String>,
    /// Key to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Metadata to be added to the Secret object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MariaDBMaxScaleConnectionSecretTemplateMetadata>,
    /// PasswordKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordKey")]
    pub password_key: Option<String>,
    /// PortKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portKey")]
    pub port_key: Option<String>,
    /// UsernameKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usernameKey")]
    pub username_key: Option<String>,
}

/// Metadata to be added to the Secret object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleConnectionSecretTemplateMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// GuiKubernetesService define a template for a Kubernetes Service object to connect to MaxScale's GUI.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleGuiKubernetesService {
    /// AllocateLoadBalancerNodePorts Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocateLoadBalancerNodePorts")]
    pub allocate_load_balancer_node_ports: Option<bool>,
    /// ExternalTrafficPolicy Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalTrafficPolicy")]
    pub external_traffic_policy: Option<String>,
    /// LoadBalancerIP Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerIP")]
    pub load_balancer_ip: Option<String>,
    /// LoadBalancerSourceRanges Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerSourceRanges")]
    pub load_balancer_source_ranges: Option<Vec<String>>,
    /// Metadata to be added to the Service metadata.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MariaDBMaxScaleGuiKubernetesServiceMetadata>,
    /// SessionAffinity Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionAffinity")]
    pub session_affinity: Option<String>,
    /// Type is the Service type. One of `ClusterIP`, `NodePort` or `LoadBalancer`. If not defined, it defaults to `ClusterIP`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<MariaDBMaxScaleGuiKubernetesServiceType>,
}

/// Metadata to be added to the Service metadata.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleGuiKubernetesServiceMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// GuiKubernetesService define a template for a Kubernetes Service object to connect to MaxScale's GUI.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MariaDBMaxScaleGuiKubernetesServiceType {
    #[serde(rename = "ClusterIP")]
    ClusterIp,
    NodePort,
    LoadBalancer,
}

/// MaxScale is the MaxScale specification that defines the MaxScale resource to be used with the current MariaDB.
/// When enabling this field, MaxScaleRef is automatically set.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MariaDBMaxScaleImagePullPolicy {
    Always,
    Never,
    IfNotPresent,
}

/// KubernetesService defines a template for a Kubernetes Service object to connect to MaxScale.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleKubernetesService {
    /// AllocateLoadBalancerNodePorts Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocateLoadBalancerNodePorts")]
    pub allocate_load_balancer_node_ports: Option<bool>,
    /// ExternalTrafficPolicy Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalTrafficPolicy")]
    pub external_traffic_policy: Option<String>,
    /// LoadBalancerIP Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerIP")]
    pub load_balancer_ip: Option<String>,
    /// LoadBalancerSourceRanges Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerSourceRanges")]
    pub load_balancer_source_ranges: Option<Vec<String>>,
    /// Metadata to be added to the Service metadata.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MariaDBMaxScaleKubernetesServiceMetadata>,
    /// SessionAffinity Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionAffinity")]
    pub session_affinity: Option<String>,
    /// Type is the Service type. One of `ClusterIP`, `NodePort` or `LoadBalancer`. If not defined, it defaults to `ClusterIP`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<MariaDBMaxScaleKubernetesServiceType>,
}

/// Metadata to be added to the Service metadata.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleKubernetesServiceMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// KubernetesService defines a template for a Kubernetes Service object to connect to MaxScale.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MariaDBMaxScaleKubernetesServiceType {
    #[serde(rename = "ClusterIP")]
    ClusterIp,
    NodePort,
    LoadBalancer,
}

/// Metrics configures metrics and how to scrape them.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetrics {
    /// Enabled is a flag to enable Metrics
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Exporter defines the metrics exporter container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exporter: Option<MariaDBMaxScaleMetricsExporter>,
    /// ServiceMonitor defines the ServiceMonior object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceMonitor")]
    pub service_monitor: Option<MariaDBMaxScaleMetricsServiceMonitor>,
}

/// Exporter defines the metrics exporter container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporter {
    /// Affinity to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<MariaDBMaxScaleMetricsExporterAffinity>,
    /// Args to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Image name to be used as metrics exporter. The supported format is `<image>:<tag>`.
    /// Only mysqld-exporter >= v0.15.0 is supported: https://github.com/prometheus/mysqld_exporter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<MariaDBMaxScaleMetricsExporterImagePullPolicy>,
    /// ImagePullSecrets is the list of pull Secrets to be used to pull the image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<MariaDBMaxScaleMetricsExporterImagePullSecrets>>,
    /// NodeSelector to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// PodMetadata defines extra metadata for the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podMetadata")]
    pub pod_metadata: Option<MariaDBMaxScaleMetricsExporterPodMetadata>,
    /// SecurityContext holds pod-level security attributes and common container settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podSecurityContext")]
    pub pod_security_context: Option<MariaDBMaxScaleMetricsExporterPodSecurityContext>,
    /// Port where the exporter will be listening for connections.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// PriorityClassName to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityClassName")]
    pub priority_class_name: Option<String>,
    /// Resouces describes the compute resource requirements.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<MariaDBMaxScaleMetricsExporterResources>,
    /// SecurityContext holds container-level security attributes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<MariaDBMaxScaleMetricsExporterSecurityContext>,
    /// Tolerations to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<MariaDBMaxScaleMetricsExporterTolerations>>,
}

/// Affinity to be used in the Pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterAffinity {
    /// AntiAffinityEnabled configures PodAntiAffinity so each Pod is scheduled in a different Node, enabling HA.
    /// Make sure you have at least as many Nodes available as the replicas to not end up with unscheduled Pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "antiAffinityEnabled")]
    pub anti_affinity_enabled: Option<bool>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeaffinity-v1-core
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinity")]
    pub node_affinity: Option<MariaDBMaxScaleMetricsExporterAffinityNodeAffinity>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podantiaffinity-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinity")]
    pub pod_anti_affinity: Option<MariaDBMaxScaleMetricsExporterAffinityPodAntiAffinity>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeaffinity-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterAffinityNodeAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<MariaDBMaxScaleMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselector-v1-core
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<MariaDBMaxScaleMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#preferredschedulingterm-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorterm-v1-core
    pub preference: MariaDBMaxScaleMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference,
    pub weight: i32,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorterm-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBMaxScaleMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<MariaDBMaxScaleMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselector-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(rename = "nodeSelectorTerms")]
    pub node_selector_terms: Vec<MariaDBMaxScaleMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorterm-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBMaxScaleMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<MariaDBMaxScaleMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podantiaffinity-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterAffinityPodAntiAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<MariaDBMaxScaleMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<MariaDBMaxScaleMetricsExporterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#weightedpodaffinityterm-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podaffinityterm-v1-core.
    #[serde(rename = "podAffinityTerm")]
    pub pod_affinity_term: MariaDBMaxScaleMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm,
    pub weight: i32,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podaffinityterm-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<MariaDBMaxScaleMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBMaxScaleMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselectorrequirement-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    pub key: String,
    /// A label selector operator is the set of operators that can be used in a selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podaffinityterm-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<MariaDBMaxScaleMetricsExporterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBMaxScaleMetricsExporterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselectorrequirement-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    pub key: String,
    /// A label selector operator is the set of operators that can be used in a selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Exporter defines the metrics exporter container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MariaDBMaxScaleMetricsExporterImagePullPolicy {
    Always,
    Never,
    IfNotPresent,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterImagePullSecrets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PodMetadata defines extra metadata for the Pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterPodMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// SecurityContext holds pod-level security attributes and common container settings.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterPodSecurityContext {
    /// AppArmorProfile defines a pod or container's AppArmor settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appArmorProfile")]
    pub app_armor_profile: Option<MariaDBMaxScaleMetricsExporterPodSecurityContextAppArmorProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroup")]
    pub fs_group: Option<i64>,
    /// PodFSGroupChangePolicy holds policies that will be used for applying fsGroup to a volume
    /// when volume is mounted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroupChangePolicy")]
    pub fs_group_change_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// SELinuxOptions are the labels to be applied to the container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<MariaDBMaxScaleMetricsExporterPodSecurityContextSeLinuxOptions>,
    /// SeccompProfile defines a pod/container's seccomp profile settings.
    /// Only one profile source may be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<MariaDBMaxScaleMetricsExporterPodSecurityContextSeccompProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supplementalGroups")]
    pub supplemental_groups: Option<Vec<i64>>,
}

/// AppArmorProfile defines a pod or container's AppArmor settings.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterPodSecurityContextAppArmorProfile {
    /// localhostProfile indicates a profile loaded on the node that should be used.
    /// The profile must be preconfigured on the node to work.
    /// Must match the loaded name of the profile.
    /// Must be set if and only if type is "Localhost".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of AppArmor profile will be applied.
    /// Valid options are:
    ///   Localhost - a profile pre-loaded on the node.
    ///   RuntimeDefault - the container runtime's default profile.
    ///   Unconfined - no AppArmor enforcement.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// SELinuxOptions are the labels to be applied to the container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterPodSecurityContextSeLinuxOptions {
    /// Level is SELinux level label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// Role is a SELinux role label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Type is a SELinux type label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// User is a SELinux user label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// SeccompProfile defines a pod/container's seccomp profile settings.
/// Only one profile source may be set.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterPodSecurityContextSeccompProfile {
    /// localhostProfile indicates a profile defined in a file on the node should be used.
    /// The profile must be preconfigured on the node to work.
    /// Must be a descending path, relative to the kubelet's configured seccomp profile location.
    /// Must be set if type is "Localhost". Must NOT be set for any other type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of seccomp profile will be applied.
    /// Valid options are:
    /// 
    /// Localhost - a profile defined in a file on the node should be used.
    /// RuntimeDefault - the container runtime default profile should be used.
    /// Unconfined - no profile should be applied.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Resouces describes the compute resource requirements.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterResources {
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// SecurityContext holds container-level security attributes.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPrivilegeEscalation")]
    pub allow_privilege_escalation: Option<bool>,
    /// Adds and removes POSIX capabilities from running containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<MariaDBMaxScaleMetricsExporterSecurityContextCapabilities>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFilesystem")]
    pub read_only_root_filesystem: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
}

/// Adds and removes POSIX capabilities from running containers.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterSecurityContextCapabilities {
    /// Added capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<String>>,
    /// Removed capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<Vec<String>>,
}

/// The pod this Toleration is attached to tolerates any taint that matches
/// the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsExporterTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects.
    /// When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys.
    /// If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value.
    /// Valid operators are Exists and Equal. Defaults to Equal.
    /// Exists is equivalent to wildcard for value, so that a pod can
    /// tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be
    /// of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
    /// it is not set, which means tolerate the taint forever (do not evict). Zero and
    /// negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to.
    /// If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ServiceMonitor defines the ServiceMonior object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMetricsServiceMonitor {
    /// Interval for scraping metrics.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    /// JobLabel to add to the ServiceMonitor object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobLabel")]
    pub job_label: Option<String>,
    /// PrometheusRelease is the release label to add to the ServiceMonitor object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prometheusRelease")]
    pub prometheus_release: Option<String>,
    /// ScrapeTimeout defines the timeout for scraping metrics.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scrapeTimeout")]
    pub scrape_timeout: Option<String>,
}

/// Monitor monitors MariaDB server instances.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleMonitor {
    /// CooperativeMonitoring enables coordination between multiple MaxScale instances running monitors. It is defaulted when HA is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cooperativeMonitoring")]
    pub cooperative_monitoring: Option<MariaDBMaxScaleMonitorCooperativeMonitoring>,
    /// Interval used to monitor MariaDB servers. It is defaulted if not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    /// Module is the module to use to monitor MariaDB servers. It is mandatory when no MariaDB reference is provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub module: Option<String>,
    /// Name is the identifier of the monitor. It is defaulted if not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Params defines extra parameters to pass to the monitor.
    /// Any parameter supported by MaxScale may be specified here. See reference:
    /// https://mariadb.com/kb/en/mariadb-maxscale-2308-common-monitor-parameters/.
    /// Monitor specific parameter are also suported:
    /// https://mariadb.com/kb/en/mariadb-maxscale-2308-galera-monitor/#galera-monitor-optional-parameters.
    /// https://mariadb.com/kb/en/mariadb-maxscale-2308-mariadb-monitor/#configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub params: Option<BTreeMap<String, String>>,
    /// Suspend indicates whether the current resource should be suspended or not.
    /// This can be useful for maintenance, as disabling the reconciliation prevents the operator from interfering with user operations during maintenance activities.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suspend: Option<bool>,
}

/// Monitor monitors MariaDB server instances.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MariaDBMaxScaleMonitorCooperativeMonitoring {
    #[serde(rename = "majority_of_all")]
    MajorityOfAll,
    #[serde(rename = "majority_of_running")]
    MajorityOfRunning,
}

/// PodDisruptionBudget defines the budget for replica availability.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScalePodDisruptionBudget {
    /// MaxUnavailable defines the number of maximum unavailable Pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
    /// MinAvailable defines the number of minimum available Pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minAvailable")]
    pub min_available: Option<IntOrString>,
}

/// Services define how the traffic is forwarded to the MariaDB servers.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MariaDBMaxScaleServices {
    /// MaxScaleListener defines how the MaxScale server will listen for connections.
    pub listener: MariaDBMaxScaleServicesListener,
    /// Name is the identifier of the MaxScale service.
    pub name: String,
    /// Params defines extra parameters to pass to the service.
    /// Any parameter supported by MaxScale may be specified here. See reference:
    /// https://mariadb.com/kb/en/mariadb-maxscale-2308-mariadb-maxscale-configuration-guide/#service_1.
    /// Router specific parameter are also suported:
    /// https://mariadb.com/kb/en/mariadb-maxscale-2308-readwritesplit/#configuration.
    /// https://mariadb.com/kb/en/mariadb-maxscale-2308-readconnroute/#configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub params: Option<BTreeMap<String, String>>,
    /// Router is the type of router to use.
    pub router: MariaDBMaxScaleServicesRouter,
    /// Suspend indicates whether the current resource should be suspended or not.
    /// This can be useful for maintenance, as disabling the reconciliation prevents the operator from interfering with user operations during maintenance activities.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suspend: Option<bool>,
}

/// MaxScaleListener defines how the MaxScale server will listen for connections.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleServicesListener {
    /// Name is the identifier of the listener. It is defaulted if not provided
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Params defines extra parameters to pass to the listener.
    /// Any parameter supported by MaxScale may be specified here. See reference:
    /// https://mariadb.com/kb/en/mariadb-maxscale-2308-mariadb-maxscale-configuration-guide/#listener_1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub params: Option<BTreeMap<String, String>>,
    /// Port is the network port where the MaxScale server will listen.
    pub port: i32,
    /// Protocol is the MaxScale protocol to use when communicating with the client. If not provided, it defaults to MariaDBProtocol.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Suspend indicates whether the current resource should be suspended or not.
    /// This can be useful for maintenance, as disabling the reconciliation prevents the operator from interfering with user operations during maintenance activities.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suspend: Option<bool>,
}

/// Services define how the traffic is forwarded to the MariaDB servers.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MariaDBMaxScaleServicesRouter {
    #[serde(rename = "readwritesplit")]
    Readwritesplit,
    #[serde(rename = "readconnroute")]
    Readconnroute,
}

/// TLS defines the PKI to be used with MaxScale.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleTls {
    /// AdminCASecretRef is a reference to a Secret containing the admin certificate authority keypair. It is used to establish trust and issue certificates for the MaxScale's administrative REST API and GUI.
    /// One of:
    /// - Secret containing both the 'ca.crt' and 'ca.key' keys. This allows you to bring your own CA to Kubernetes to issue certificates.
    /// - Secret containing only the 'ca.crt' in order to establish trust. In this case, either adminCertSecretRef or adminCertIssuerRef fields must be provided.
    /// If not provided, a self-signed CA will be provisioned to issue the server certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminCASecretRef")]
    pub admin_ca_secret_ref: Option<MariaDBMaxScaleTlsAdminCaSecretRef>,
    /// AdminCertIssuerRef is a reference to a cert-manager issuer object used to issue the MaxScale's administrative REST API and GUI certificate. cert-manager must be installed previously in the cluster.
    /// It is mutually exclusive with adminCertSecretRef.
    /// By default, the Secret field 'ca.crt' provisioned by cert-manager will be added to the trust chain. A custom trust bundle may be specified via adminCASecretRef.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminCertIssuerRef")]
    pub admin_cert_issuer_ref: Option<MariaDBMaxScaleTlsAdminCertIssuerRef>,
    /// AdminCertSecretRef is a reference to a TLS Secret used by the MaxScale's administrative REST API and GUI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminCertSecretRef")]
    pub admin_cert_secret_ref: Option<MariaDBMaxScaleTlsAdminCertSecretRef>,
    /// Enabled indicates whether TLS is enabled, determining if certificates should be issued and mounted to the MaxScale instance.
    /// It is enabled by default when the referred MariaDB instance (via mariaDbRef) has TLS enabled and enforced.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// ListenerCASecretRef is a reference to a Secret containing the listener certificate authority keypair. It is used to establish trust and issue certificates for the MaxScale's listeners.
    /// One of:
    /// - Secret containing both the 'ca.crt' and 'ca.key' keys. This allows you to bring your own CA to Kubernetes to issue certificates.
    /// - Secret containing only the 'ca.crt' in order to establish trust. In this case, either listenerCertSecretRef or listenerCertIssuerRef fields must be provided.
    /// If not provided, a self-signed CA will be provisioned to issue the listener certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerCASecretRef")]
    pub listener_ca_secret_ref: Option<MariaDBMaxScaleTlsListenerCaSecretRef>,
    /// ListenerCertIssuerRef is a reference to a cert-manager issuer object used to issue the MaxScale's listeners certificate. cert-manager must be installed previously in the cluster.
    /// It is mutually exclusive with listenerCertSecretRef.
    /// By default, the Secret field 'ca.crt' provisioned by cert-manager will be added to the trust chain. A custom trust bundle may be specified via listenerCASecretRef.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerCertIssuerRef")]
    pub listener_cert_issuer_ref: Option<MariaDBMaxScaleTlsListenerCertIssuerRef>,
    /// ListenerCertSecretRef is a reference to a TLS Secret used by the MaxScale's listeners.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerCertSecretRef")]
    pub listener_cert_secret_ref: Option<MariaDBMaxScaleTlsListenerCertSecretRef>,
    /// ReplicationSSLEnabled specifies whether the replication SSL is enabled. If enabled, the SSL options will be added to the server configuration.
    /// It is enabled by default when the referred MariaDB instance (via mariaDbRef) has replication enabled.
    /// If the MariaDB servers are manually provided by the user via the 'servers' field, this must be set by the user as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicationSSLEnabled")]
    pub replication_ssl_enabled: Option<bool>,
    /// ServerCASecretRef is a reference to a Secret containing the MariaDB server CA certificates. It is used to establish trust with MariaDB servers.
    /// The Secret should contain a 'ca.crt' key in order to establish trust.
    /// If not provided, and the reference to a MariaDB resource is set (mariaDbRef), it will be defaulted to the referred MariaDB CA bundle.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverCASecretRef")]
    pub server_ca_secret_ref: Option<MariaDBMaxScaleTlsServerCaSecretRef>,
    /// ServerCertSecretRef is a reference to a TLS Secret used by MaxScale to connect to the MariaDB servers.
    /// If not provided, and the reference to a MariaDB resource is set (mariaDbRef), it will be defaulted to the referred MariaDB client certificate (clientCertSecretRef).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverCertSecretRef")]
    pub server_cert_secret_ref: Option<MariaDBMaxScaleTlsServerCertSecretRef>,
    /// VerifyPeerCertificate specifies whether the peer certificate's signature should be validated against the CA.
    /// It is disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifyPeerCertificate")]
    pub verify_peer_certificate: Option<bool>,
    /// VerifyPeerHost specifies whether the peer certificate's SANs should match the peer host.
    /// It is disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifyPeerHost")]
    pub verify_peer_host: Option<bool>,
}

/// AdminCASecretRef is a reference to a Secret containing the admin certificate authority keypair. It is used to establish trust and issue certificates for the MaxScale's administrative REST API and GUI.
/// One of:
/// - Secret containing both the 'ca.crt' and 'ca.key' keys. This allows you to bring your own CA to Kubernetes to issue certificates.
/// - Secret containing only the 'ca.crt' in order to establish trust. In this case, either adminCertSecretRef or adminCertIssuerRef fields must be provided.
/// If not provided, a self-signed CA will be provisioned to issue the server certificate.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleTlsAdminCaSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// AdminCertIssuerRef is a reference to a cert-manager issuer object used to issue the MaxScale's administrative REST API and GUI certificate. cert-manager must be installed previously in the cluster.
/// It is mutually exclusive with adminCertSecretRef.
/// By default, the Secret field 'ca.crt' provisioned by cert-manager will be added to the trust chain. A custom trust bundle may be specified via adminCASecretRef.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleTlsAdminCertIssuerRef {
    /// Group of the resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// Kind of the resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the resource being referred to.
    pub name: String,
}

/// AdminCertSecretRef is a reference to a TLS Secret used by the MaxScale's administrative REST API and GUI.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleTlsAdminCertSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ListenerCASecretRef is a reference to a Secret containing the listener certificate authority keypair. It is used to establish trust and issue certificates for the MaxScale's listeners.
/// One of:
/// - Secret containing both the 'ca.crt' and 'ca.key' keys. This allows you to bring your own CA to Kubernetes to issue certificates.
/// - Secret containing only the 'ca.crt' in order to establish trust. In this case, either listenerCertSecretRef or listenerCertIssuerRef fields must be provided.
/// If not provided, a self-signed CA will be provisioned to issue the listener certificate.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleTlsListenerCaSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ListenerCertIssuerRef is a reference to a cert-manager issuer object used to issue the MaxScale's listeners certificate. cert-manager must be installed previously in the cluster.
/// It is mutually exclusive with listenerCertSecretRef.
/// By default, the Secret field 'ca.crt' provisioned by cert-manager will be added to the trust chain. A custom trust bundle may be specified via listenerCASecretRef.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleTlsListenerCertIssuerRef {
    /// Group of the resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// Kind of the resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the resource being referred to.
    pub name: String,
}

/// ListenerCertSecretRef is a reference to a TLS Secret used by the MaxScale's listeners.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleTlsListenerCertSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ServerCASecretRef is a reference to a Secret containing the MariaDB server CA certificates. It is used to establish trust with MariaDB servers.
/// The Secret should contain a 'ca.crt' key in order to establish trust.
/// If not provided, and the reference to a MariaDB resource is set (mariaDbRef), it will be defaulted to the referred MariaDB CA bundle.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleTlsServerCaSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ServerCertSecretRef is a reference to a TLS Secret used by MaxScale to connect to the MariaDB servers.
/// If not provided, and the reference to a MariaDB resource is set (mariaDbRef), it will be defaulted to the referred MariaDB client certificate (clientCertSecretRef).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleTlsServerCertSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// UpdateStrategy defines the update strategy for the StatefulSet object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleUpdateStrategy {
    /// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdate")]
    pub rolling_update: Option<MariaDBMaxScaleUpdateStrategyRollingUpdate>,
    /// Type indicates the type of the StatefulSetUpdateStrategy.
    /// Default is RollingUpdate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleUpdateStrategyRollingUpdate {
    /// The maximum number of pods that can be unavailable during the update.
    /// Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
    /// Absolute number is calculated from percentage by rounding up. This can not be 0.
    /// Defaults to 1. This field is alpha-level and is only honored by servers that enable the
    /// MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to
    /// Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it
    /// will be counted towards MaxUnavailable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
    /// Partition indicates the ordinal at which the StatefulSet should be partitioned
    /// for updates. During a rolling update, all pods from ordinal Replicas-1 to
    /// Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched.
    /// This is helpful in being able to do a canary based deployment. The default value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition: Option<i32>,
}

/// MaxScaleRef is a reference to a MaxScale resource to be used with the current MariaDB.
/// Providing this field implies delegating high availability tasks such as primary failover to MaxScale.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMaxScaleRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Metrics configures metrics and how to scrape them.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetrics {
    /// Enabled is a flag to enable Metrics
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Exporter defines the metrics exporter container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exporter: Option<MariaDBMetricsExporter>,
    /// PasswordSecretKeyRef is a reference to the password of the monitoring user used by the exporter.
    /// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretKeyRef")]
    pub password_secret_key_ref: Option<MariaDBMetricsPasswordSecretKeyRef>,
    /// ServiceMonitor defines the ServiceMonior object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceMonitor")]
    pub service_monitor: Option<MariaDBMetricsServiceMonitor>,
    /// Username is the username of the monitoring user used by the exporter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// Exporter defines the metrics exporter container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporter {
    /// Affinity to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<MariaDBMetricsExporterAffinity>,
    /// Args to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Image name to be used as metrics exporter. The supported format is `<image>:<tag>`.
    /// Only mysqld-exporter >= v0.15.0 is supported: https://github.com/prometheus/mysqld_exporter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<MariaDBMetricsExporterImagePullPolicy>,
    /// ImagePullSecrets is the list of pull Secrets to be used to pull the image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<MariaDBMetricsExporterImagePullSecrets>>,
    /// NodeSelector to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// PodMetadata defines extra metadata for the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podMetadata")]
    pub pod_metadata: Option<MariaDBMetricsExporterPodMetadata>,
    /// SecurityContext holds pod-level security attributes and common container settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podSecurityContext")]
    pub pod_security_context: Option<MariaDBMetricsExporterPodSecurityContext>,
    /// Port where the exporter will be listening for connections.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// PriorityClassName to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityClassName")]
    pub priority_class_name: Option<String>,
    /// Resouces describes the compute resource requirements.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<MariaDBMetricsExporterResources>,
    /// SecurityContext holds container-level security attributes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<MariaDBMetricsExporterSecurityContext>,
    /// Tolerations to be used in the Pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<MariaDBMetricsExporterTolerations>>,
}

/// Affinity to be used in the Pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterAffinity {
    /// AntiAffinityEnabled configures PodAntiAffinity so each Pod is scheduled in a different Node, enabling HA.
    /// Make sure you have at least as many Nodes available as the replicas to not end up with unscheduled Pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "antiAffinityEnabled")]
    pub anti_affinity_enabled: Option<bool>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeaffinity-v1-core
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinity")]
    pub node_affinity: Option<MariaDBMetricsExporterAffinityNodeAffinity>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podantiaffinity-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinity")]
    pub pod_anti_affinity: Option<MariaDBMetricsExporterAffinityPodAntiAffinity>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeaffinity-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterAffinityNodeAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<MariaDBMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselector-v1-core
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<MariaDBMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#preferredschedulingterm-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorterm-v1-core
    pub preference: MariaDBMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference,
    pub weight: i32,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorterm-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<MariaDBMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselector-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(rename = "nodeSelectorTerms")]
    pub node_selector_terms: Vec<MariaDBMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorterm-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<MariaDBMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nodeselectorrequirement-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
    pub key: String,
    /// A node selector operator is the set of operators that can be used in
    /// a node selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podantiaffinity-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterAffinityPodAntiAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<MariaDBMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<MariaDBMetricsExporterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#weightedpodaffinityterm-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podaffinityterm-v1-core.
    #[serde(rename = "podAffinityTerm")]
    pub pod_affinity_term: MariaDBMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm,
    pub weight: i32,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podaffinityterm-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<MariaDBMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselectorrequirement-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    pub key: String,
    /// A label selector operator is the set of operators that can be used in a selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#podaffinityterm-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<MariaDBMetricsExporterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselector-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBMetricsExporterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#labelselectorrequirement-v1-meta
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    pub key: String,
    /// A label selector operator is the set of operators that can be used in a selector requirement.
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Exporter defines the metrics exporter container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MariaDBMetricsExporterImagePullPolicy {
    Always,
    Never,
    IfNotPresent,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterImagePullSecrets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PodMetadata defines extra metadata for the Pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterPodMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// SecurityContext holds pod-level security attributes and common container settings.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterPodSecurityContext {
    /// AppArmorProfile defines a pod or container's AppArmor settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appArmorProfile")]
    pub app_armor_profile: Option<MariaDBMetricsExporterPodSecurityContextAppArmorProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroup")]
    pub fs_group: Option<i64>,
    /// PodFSGroupChangePolicy holds policies that will be used for applying fsGroup to a volume
    /// when volume is mounted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroupChangePolicy")]
    pub fs_group_change_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// SELinuxOptions are the labels to be applied to the container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<MariaDBMetricsExporterPodSecurityContextSeLinuxOptions>,
    /// SeccompProfile defines a pod/container's seccomp profile settings.
    /// Only one profile source may be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<MariaDBMetricsExporterPodSecurityContextSeccompProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supplementalGroups")]
    pub supplemental_groups: Option<Vec<i64>>,
}

/// AppArmorProfile defines a pod or container's AppArmor settings.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterPodSecurityContextAppArmorProfile {
    /// localhostProfile indicates a profile loaded on the node that should be used.
    /// The profile must be preconfigured on the node to work.
    /// Must match the loaded name of the profile.
    /// Must be set if and only if type is "Localhost".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of AppArmor profile will be applied.
    /// Valid options are:
    ///   Localhost - a profile pre-loaded on the node.
    ///   RuntimeDefault - the container runtime's default profile.
    ///   Unconfined - no AppArmor enforcement.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// SELinuxOptions are the labels to be applied to the container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterPodSecurityContextSeLinuxOptions {
    /// Level is SELinux level label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// Role is a SELinux role label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Type is a SELinux type label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// User is a SELinux user label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// SeccompProfile defines a pod/container's seccomp profile settings.
/// Only one profile source may be set.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterPodSecurityContextSeccompProfile {
    /// localhostProfile indicates a profile defined in a file on the node should be used.
    /// The profile must be preconfigured on the node to work.
    /// Must be a descending path, relative to the kubelet's configured seccomp profile location.
    /// Must be set if type is "Localhost". Must NOT be set for any other type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of seccomp profile will be applied.
    /// Valid options are:
    /// 
    /// Localhost - a profile defined in a file on the node should be used.
    /// RuntimeDefault - the container runtime default profile should be used.
    /// Unconfined - no profile should be applied.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Resouces describes the compute resource requirements.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterResources {
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// SecurityContext holds container-level security attributes.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPrivilegeEscalation")]
    pub allow_privilege_escalation: Option<bool>,
    /// Adds and removes POSIX capabilities from running containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<MariaDBMetricsExporterSecurityContextCapabilities>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFilesystem")]
    pub read_only_root_filesystem: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
}

/// Adds and removes POSIX capabilities from running containers.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterSecurityContextCapabilities {
    /// Added capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<String>>,
    /// Removed capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<Vec<String>>,
}

/// The pod this Toleration is attached to tolerates any taint that matches
/// the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsExporterTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects.
    /// When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys.
    /// If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value.
    /// Valid operators are Exists and Equal. Defaults to Equal.
    /// Exists is equivalent to wildcard for value, so that a pod can
    /// tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be
    /// of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
    /// it is not set, which means tolerate the taint forever (do not evict). Zero and
    /// negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to.
    /// If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// PasswordSecretKeyRef is a reference to the password of the monitoring user used by the exporter.
/// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsPasswordSecretKeyRef {
    /// Generate indicates whether the Secret should be generated if the Secret referenced is not present.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generate: Option<bool>,
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ServiceMonitor defines the ServiceMonior object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMetricsServiceMonitor {
    /// Interval for scraping metrics.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    /// JobLabel to add to the ServiceMonitor object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobLabel")]
    pub job_label: Option<String>,
    /// PrometheusRelease is the release label to add to the ServiceMonitor object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prometheusRelease")]
    pub prometheus_release: Option<String>,
    /// ScrapeTimeout defines the timeout for scraping metrics.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scrapeTimeout")]
    pub scrape_timeout: Option<String>,
}

/// MyCnfConfigMapKeyRef is a reference to the my.cnf config file provided via a ConfigMap.
/// If not provided, it will be defaulted with a reference to a ConfigMap containing the MyCnf field.
/// If the referred ConfigMap is labeled with "k8s.mariadb.com/watch", an update to the Mariadb resource will be triggered when the ConfigMap is updated.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBMyCnfConfigMapKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PasswordHashSecretKeyRef is a reference to the password hash to be used by the initial User.
/// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password hash.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBPasswordHashSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PasswordPlugin is a reference to the password plugin and arguments to be used by the initial User.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBPasswordPlugin {
    /// PluginArgSecretKeyRef is a reference to the arguments to be provided to the authentication plugin for the User.
    /// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the authentication plugin arguments.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pluginArgSecretKeyRef")]
    pub plugin_arg_secret_key_ref: Option<MariaDBPasswordPluginPluginArgSecretKeyRef>,
    /// PluginNameSecretKeyRef is a reference to the authentication plugin to be used by the User.
    /// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the authentication plugin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pluginNameSecretKeyRef")]
    pub plugin_name_secret_key_ref: Option<MariaDBPasswordPluginPluginNameSecretKeyRef>,
}

/// PluginArgSecretKeyRef is a reference to the arguments to be provided to the authentication plugin for the User.
/// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the authentication plugin arguments.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBPasswordPluginPluginArgSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PluginNameSecretKeyRef is a reference to the authentication plugin to be used by the User.
/// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the authentication plugin.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBPasswordPluginPluginNameSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PasswordSecretKeyRef is a reference to a Secret that contains the password to be used by the initial User.
/// If the referred Secret is labeled with "k8s.mariadb.com/watch", updates may be performed to the Secret in order to update the password.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBPasswordSecretKeyRef {
    /// Generate indicates whether the Secret should be generated if the Secret referenced is not present.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generate: Option<bool>,
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PodDisruptionBudget defines the budget for replica availability.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBPodDisruptionBudget {
    /// MaxUnavailable defines the number of maximum unavailable Pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
    /// MinAvailable defines the number of minimum available Pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minAvailable")]
    pub min_available: Option<IntOrString>,
}

/// PodMetadata defines extra metadata for the Pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBPodMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// SecurityContext holds pod-level security attributes and common container settings.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBPodSecurityContext {
    /// AppArmorProfile defines a pod or container's AppArmor settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appArmorProfile")]
    pub app_armor_profile: Option<MariaDBPodSecurityContextAppArmorProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroup")]
    pub fs_group: Option<i64>,
    /// PodFSGroupChangePolicy holds policies that will be used for applying fsGroup to a volume
    /// when volume is mounted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroupChangePolicy")]
    pub fs_group_change_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// SELinuxOptions are the labels to be applied to the container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<MariaDBPodSecurityContextSeLinuxOptions>,
    /// SeccompProfile defines a pod/container's seccomp profile settings.
    /// Only one profile source may be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<MariaDBPodSecurityContextSeccompProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supplementalGroups")]
    pub supplemental_groups: Option<Vec<i64>>,
}

/// AppArmorProfile defines a pod or container's AppArmor settings.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBPodSecurityContextAppArmorProfile {
    /// localhostProfile indicates a profile loaded on the node that should be used.
    /// The profile must be preconfigured on the node to work.
    /// Must match the loaded name of the profile.
    /// Must be set if and only if type is "Localhost".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of AppArmor profile will be applied.
    /// Valid options are:
    ///   Localhost - a profile pre-loaded on the node.
    ///   RuntimeDefault - the container runtime's default profile.
    ///   Unconfined - no AppArmor enforcement.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// SELinuxOptions are the labels to be applied to the container
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBPodSecurityContextSeLinuxOptions {
    /// Level is SELinux level label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// Role is a SELinux role label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Type is a SELinux type label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// User is a SELinux user label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// SeccompProfile defines a pod/container's seccomp profile settings.
/// Only one profile source may be set.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBPodSecurityContextSeccompProfile {
    /// localhostProfile indicates a profile defined in a file on the node should be used.
    /// The profile must be preconfigured on the node to work.
    /// Must be a descending path, relative to the kubelet's configured seccomp profile location.
    /// Must be set if type is "Localhost". Must NOT be set for any other type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of seccomp profile will be applied.
    /// Valid options are:
    /// 
    /// Localhost - a profile defined in a file on the node should be used.
    /// RuntimeDefault - the container runtime default profile should be used.
    /// Unconfined - no profile should be applied.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// PrimaryConnection defines a template to configure the primary Connection object.
/// This Connection provides the initial User access to the initial Database.
/// It will make use of the PrimaryService to route network traffic to the primary Pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBPrimaryConnection {
    /// HealthCheck to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheck")]
    pub health_check: Option<MariaDBPrimaryConnectionHealthCheck>,
    /// Params to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub params: Option<BTreeMap<String, String>>,
    /// Port to connect to. If not provided, it defaults to the MariaDB port or to the first MaxScale listener.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// SecretName to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    /// SecretTemplate to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretTemplate")]
    pub secret_template: Option<MariaDBPrimaryConnectionSecretTemplate>,
    /// ServiceName to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

/// HealthCheck to be used in the Connection.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBPrimaryConnectionHealthCheck {
    /// Interval used to perform health checks.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    /// RetryInterval is the interval used to perform health check retries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryInterval")]
    pub retry_interval: Option<String>,
}

/// SecretTemplate to be used in the Connection.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBPrimaryConnectionSecretTemplate {
    /// DatabaseKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseKey")]
    pub database_key: Option<String>,
    /// Format to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// HostKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostKey")]
    pub host_key: Option<String>,
    /// Key to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Metadata to be added to the Secret object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MariaDBPrimaryConnectionSecretTemplateMetadata>,
    /// PasswordKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordKey")]
    pub password_key: Option<String>,
    /// PortKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portKey")]
    pub port_key: Option<String>,
    /// UsernameKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usernameKey")]
    pub username_key: Option<String>,
}

/// Metadata to be added to the Secret object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBPrimaryConnectionSecretTemplateMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// PrimaryService defines a template to configure the primary Service object.
/// The network traffic of this Service will be routed to the primary Pod.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBPrimaryService {
    /// AllocateLoadBalancerNodePorts Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocateLoadBalancerNodePorts")]
    pub allocate_load_balancer_node_ports: Option<bool>,
    /// ExternalTrafficPolicy Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalTrafficPolicy")]
    pub external_traffic_policy: Option<String>,
    /// LoadBalancerIP Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerIP")]
    pub load_balancer_ip: Option<String>,
    /// LoadBalancerSourceRanges Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerSourceRanges")]
    pub load_balancer_source_ranges: Option<Vec<String>>,
    /// Metadata to be added to the Service metadata.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MariaDBPrimaryServiceMetadata>,
    /// SessionAffinity Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionAffinity")]
    pub session_affinity: Option<String>,
    /// Type is the Service type. One of `ClusterIP`, `NodePort` or `LoadBalancer`. If not defined, it defaults to `ClusterIP`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<MariaDBPrimaryServiceType>,
}

/// Metadata to be added to the Service metadata.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBPrimaryServiceMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// PrimaryService defines a template to configure the primary Service object.
/// The network traffic of this Service will be routed to the primary Pod.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MariaDBPrimaryServiceType {
    #[serde(rename = "ClusterIP")]
    ClusterIp,
    NodePort,
    LoadBalancer,
}

/// ReadinessProbe to be used in the Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBReadinessProbe {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<MariaDBReadinessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<MariaDBReadinessProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#tcpsocketaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<MariaDBReadinessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBReadinessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBReadinessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub port: IntOrString,
    /// URIScheme identifies the scheme used for connection to a host for Get actions
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#tcpsocketaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBReadinessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    pub port: IntOrString,
}

/// Replication configures high availability via replication. This feature is still in alpha, use Galera if you are looking for a more production-ready HA.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBReplication {
    /// Enabled is a flag to enable Replication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Primary is the replication configuration for the primary node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub primary: Option<MariaDBReplicationPrimary>,
    /// ProbesEnabled indicates to use replication specific liveness and readiness probes.
    /// This probes check that the primary can receive queries and that the replica has the replication thread running.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "probesEnabled")]
    pub probes_enabled: Option<bool>,
    /// ReplicaReplication is the replication configuration for the replica nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replica: Option<MariaDBReplicationReplica>,
    /// SyncBinlog indicates whether the binary log should be synchronized to the disk after every event.
    /// It trades off performance for consistency.
    /// See: https://mariadb.com/kb/en/replication-and-binary-log-system-variables/#sync_binlog.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncBinlog")]
    pub sync_binlog: Option<bool>,
}

/// Primary is the replication configuration for the primary node.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBReplicationPrimary {
    /// AutomaticFailover indicates whether the operator should automatically update PodIndex to perform an automatic primary failover.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "automaticFailover")]
    pub automatic_failover: Option<bool>,
    /// PodIndex is the StatefulSet index of the primary node. The user may change this field to perform a manual switchover.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podIndex")]
    pub pod_index: Option<i64>,
}

/// ReplicaReplication is the replication configuration for the replica nodes.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBReplicationReplica {
    /// ConnectionRetries to be used when the replica connects to the primary.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionRetries")]
    pub connection_retries: Option<i64>,
    /// ConnectionTimeout to be used when the replica connects to the primary.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionTimeout")]
    pub connection_timeout: Option<String>,
    /// Gtid indicates which Global Transaction ID should be used when connecting a replica to the master.
    /// See: https://mariadb.com/kb/en/gtid/#using-current_pos-vs-slave_pos.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gtid: Option<MariaDBReplicationReplicaGtid>,
    /// ReplPasswordSecretKeyRef provides a reference to the Secret to use as password for the replication user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replPasswordSecretKeyRef")]
    pub repl_password_secret_key_ref: Option<MariaDBReplicationReplicaReplPasswordSecretKeyRef>,
    /// SyncTimeout defines the timeout for a replica to be synced with the primary when performing a primary switchover.
    /// If the timeout is reached, the replica GTID will be reset and the switchover will continue.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncTimeout")]
    pub sync_timeout: Option<String>,
    /// WaitPoint defines whether the transaction should wait for ACK before committing to the storage engine.
    /// More info: https://mariadb.com/kb/en/semisynchronous-replication/#rpl_semi_sync_master_wait_point.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "waitPoint")]
    pub wait_point: Option<MariaDBReplicationReplicaWaitPoint>,
}

/// ReplicaReplication is the replication configuration for the replica nodes.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MariaDBReplicationReplicaGtid {
    CurrentPos,
    SlavePos,
}

/// ReplPasswordSecretKeyRef provides a reference to the Secret to use as password for the replication user.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBReplicationReplicaReplPasswordSecretKeyRef {
    /// Generate indicates whether the Secret should be generated if the Secret referenced is not present.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generate: Option<bool>,
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ReplicaReplication is the replication configuration for the replica nodes.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MariaDBReplicationReplicaWaitPoint {
    AfterSync,
    AfterCommit,
}

/// Resouces describes the compute resource requirements.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBResources {
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// RootPasswordSecretKeyRef is a reference to a Secret key containing the root password.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBRootPasswordSecretKeyRef {
    /// Generate indicates whether the Secret should be generated if the Secret referenced is not present.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generate: Option<bool>,
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// SecondaryConnection defines a template to configure the secondary Connection object.
/// This Connection provides the initial User access to the initial Database.
/// It will make use of the SecondaryService to route network traffic to the secondary Pods.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBSecondaryConnection {
    /// HealthCheck to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheck")]
    pub health_check: Option<MariaDBSecondaryConnectionHealthCheck>,
    /// Params to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub params: Option<BTreeMap<String, String>>,
    /// Port to connect to. If not provided, it defaults to the MariaDB port or to the first MaxScale listener.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// SecretName to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    /// SecretTemplate to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretTemplate")]
    pub secret_template: Option<MariaDBSecondaryConnectionSecretTemplate>,
    /// ServiceName to be used in the Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

/// HealthCheck to be used in the Connection.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBSecondaryConnectionHealthCheck {
    /// Interval used to perform health checks.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    /// RetryInterval is the interval used to perform health check retries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryInterval")]
    pub retry_interval: Option<String>,
}

/// SecretTemplate to be used in the Connection.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBSecondaryConnectionSecretTemplate {
    /// DatabaseKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseKey")]
    pub database_key: Option<String>,
    /// Format to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// HostKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostKey")]
    pub host_key: Option<String>,
    /// Key to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Metadata to be added to the Secret object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MariaDBSecondaryConnectionSecretTemplateMetadata>,
    /// PasswordKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordKey")]
    pub password_key: Option<String>,
    /// PortKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portKey")]
    pub port_key: Option<String>,
    /// UsernameKey to be used in the Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usernameKey")]
    pub username_key: Option<String>,
}

/// Metadata to be added to the Secret object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBSecondaryConnectionSecretTemplateMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// SecondaryService defines a template to configure the secondary Service object.
/// The network traffic of this Service will be routed to the secondary Pods.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBSecondaryService {
    /// AllocateLoadBalancerNodePorts Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocateLoadBalancerNodePorts")]
    pub allocate_load_balancer_node_ports: Option<bool>,
    /// ExternalTrafficPolicy Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalTrafficPolicy")]
    pub external_traffic_policy: Option<String>,
    /// LoadBalancerIP Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerIP")]
    pub load_balancer_ip: Option<String>,
    /// LoadBalancerSourceRanges Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerSourceRanges")]
    pub load_balancer_source_ranges: Option<Vec<String>>,
    /// Metadata to be added to the Service metadata.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MariaDBSecondaryServiceMetadata>,
    /// SessionAffinity Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionAffinity")]
    pub session_affinity: Option<String>,
    /// Type is the Service type. One of `ClusterIP`, `NodePort` or `LoadBalancer`. If not defined, it defaults to `ClusterIP`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<MariaDBSecondaryServiceType>,
}

/// Metadata to be added to the Service metadata.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBSecondaryServiceMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// SecondaryService defines a template to configure the secondary Service object.
/// The network traffic of this Service will be routed to the secondary Pods.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MariaDBSecondaryServiceType {
    #[serde(rename = "ClusterIP")]
    ClusterIp,
    NodePort,
    LoadBalancer,
}

/// SecurityContext holds security configuration that will be applied to a container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPrivilegeEscalation")]
    pub allow_privilege_escalation: Option<bool>,
    /// Adds and removes POSIX capabilities from running containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<MariaDBSecurityContextCapabilities>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFilesystem")]
    pub read_only_root_filesystem: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
}

/// Adds and removes POSIX capabilities from running containers.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBSecurityContextCapabilities {
    /// Added capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<String>>,
    /// Removed capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<Vec<String>>,
}

/// Service defines a template to configure the general Service object.
/// The network traffic of this Service will be routed to all Pods.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBService {
    /// AllocateLoadBalancerNodePorts Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocateLoadBalancerNodePorts")]
    pub allocate_load_balancer_node_ports: Option<bool>,
    /// ExternalTrafficPolicy Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalTrafficPolicy")]
    pub external_traffic_policy: Option<String>,
    /// LoadBalancerIP Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerIP")]
    pub load_balancer_ip: Option<String>,
    /// LoadBalancerSourceRanges Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerSourceRanges")]
    pub load_balancer_source_ranges: Option<Vec<String>>,
    /// Metadata to be added to the Service metadata.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MariaDBServiceMetadata>,
    /// SessionAffinity Service field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionAffinity")]
    pub session_affinity: Option<String>,
    /// Type is the Service type. One of `ClusterIP`, `NodePort` or `LoadBalancer`. If not defined, it defaults to `ClusterIP`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<MariaDBServiceType>,
}

/// Metadata to be added to the Service metadata.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBServiceMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// Service defines a template to configure the general Service object.
/// The network traffic of this Service will be routed to all Pods.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MariaDBServiceType {
    #[serde(rename = "ClusterIP")]
    ClusterIp,
    NodePort,
    LoadBalancer,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#serviceport-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBServicePorts {
    pub name: String,
    pub port: i32,
}

/// Container object definition.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBSidecarContainers {
    /// Args to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Command to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// Env represents the environment variables to be injected in a container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<MariaDBSidecarContainersEnv>>,
    /// Image name to be used by the container. The supported format is `<image>:<tag>`.
    pub image: String,
    /// ImagePullPolicy is the image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<MariaDBSidecarContainersImagePullPolicy>,
    /// Name to be given to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Resouces describes the compute resource requirements.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<MariaDBSidecarContainersResources>,
    /// VolumeMounts to be used in the Container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<MariaDBSidecarContainersVolumeMounts>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envvarsource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBSidecarContainersEnv {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envvarsource-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<MariaDBSidecarContainersEnvValueFrom>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#envvarsource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBSidecarContainersEnvValueFrom {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#configmapkeyselector-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<MariaDBSidecarContainersEnvValueFromConfigMapKeyRef>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#objectfieldselector-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<MariaDBSidecarContainersEnvValueFromFieldRef>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#secretkeyselector-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<MariaDBSidecarContainersEnvValueFromSecretKeyRef>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#configmapkeyselector-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBSidecarContainersEnvValueFromConfigMapKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#objectfieldselector-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBSidecarContainersEnvValueFromFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#secretkeyselector-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBSidecarContainersEnvValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Container object definition.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MariaDBSidecarContainersImagePullPolicy {
    Always,
    Never,
    IfNotPresent,
}

/// Resouces describes the compute resource requirements.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBSidecarContainersResources {
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// ResourceList is a set of (resource name, quantity) pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#volumemount-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBSidecarContainersVolumeMounts {
    #[serde(rename = "mountPath")]
    pub mount_path: String,
    /// This must match the Name of a Volume.
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPath")]
    pub sub_path: Option<String>,
}

/// StartupProbe to be used in the Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBStartupProbe {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<MariaDBStartupProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<MariaDBStartupProbeHttpGet>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#tcpsocketaction-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<MariaDBStartupProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#execaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBStartupProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#httpgetaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBStartupProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub port: IntOrString,
    /// URIScheme identifies the scheme used for connection to a host for Get actions
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#tcpsocketaction-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBStartupProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    pub port: IntOrString,
}

/// Storage defines the storage options to be used for provisioning the PVCs mounted by MariaDB.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBStorage {
    /// Ephemeral indicates whether to use ephemeral storage in the PVCs. It is only compatible with non HA MariaDBs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ephemeral: Option<bool>,
    /// ResizeInUseVolumes indicates whether the PVCs can be resized. The 'StorageClassName' used should have 'allowVolumeExpansion' set to 'true' to allow resizing.
    /// It defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resizeInUseVolumes")]
    pub resize_in_use_volumes: Option<bool>,
    /// Size of the PVCs to be mounted by MariaDB. Required if not provided in 'VolumeClaimTemplate'. It supersedes the storage size specified in 'VolumeClaimTemplate'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<IntOrString>,
    /// StorageClassName to be used to provision the PVCS. It supersedes the 'StorageClassName' specified in 'VolumeClaimTemplate'.
    /// If not provided, the default 'StorageClass' configured in the cluster is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    /// VolumeClaimTemplate provides a template to define the PVCs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeClaimTemplate")]
    pub volume_claim_template: Option<MariaDBStorageVolumeClaimTemplate>,
    /// WaitForVolumeResize indicates whether to wait for the PVCs to be resized before marking the MariaDB object as ready. This will block other operations such as cluster recovery while the resize is in progress.
    /// It defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "waitForVolumeResize")]
    pub wait_for_volume_resize: Option<bool>,
}

/// VolumeClaimTemplate provides a template to define the PVCs.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBStorageVolumeClaimTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    /// Metadata to be added to the PVC metadata.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MariaDBStorageVolumeClaimTemplateMetadata>,
    /// VolumeResourceRequirements describes the storage resource requirements for a volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<MariaDBStorageVolumeClaimTemplateResources>,
    /// A label selector is a label query over a set of resources. The result of matchLabels and
    /// matchExpressions are ANDed. An empty label selector matches all objects. A null
    /// label selector matches no objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<MariaDBStorageVolumeClaimTemplateSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
}

/// Metadata to be added to the PVC metadata.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBStorageVolumeClaimTemplateMetadata {
    /// Annotations to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels to be added to children resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// VolumeResourceRequirements describes the storage resource requirements for a volume.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBStorageVolumeClaimTemplateResources {
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// A label selector is a label query over a set of resources. The result of matchLabels and
/// matchExpressions are ANDed. An empty label selector matches all objects. A null
/// label selector matches no objects.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBStorageVolumeClaimTemplateSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBStorageVolumeClaimTemplateSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBStorageVolumeClaimTemplateSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// TLS defines the PKI to be used with MariaDB.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBTls {
    /// ClientCASecretRef is a reference to a Secret containing the client certificate authority keypair. It is used to establish trust and issue client certificates.
    /// One of:
    /// - Secret containing both the 'ca.crt' and 'ca.key' keys. This allows you to bring your own CA to Kubernetes to issue certificates.
    /// - Secret containing only the 'ca.crt' in order to establish trust. In this case, either clientCertSecretRef or clientCertIssuerRef fields must be provided.
    /// If not provided, a self-signed CA will be provisioned to issue the client certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCASecretRef")]
    pub client_ca_secret_ref: Option<MariaDBTlsClientCaSecretRef>,
    /// ClientCertIssuerRef is a reference to a cert-manager issuer object used to issue the client certificate. cert-manager must be installed previously in the cluster.
    /// It is mutually exclusive with clientCertSecretRef.
    /// By default, the Secret field 'ca.crt' provisioned by cert-manager will be added to the trust chain. A custom trust bundle may be specified via clientCASecretRef.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertIssuerRef")]
    pub client_cert_issuer_ref: Option<MariaDBTlsClientCertIssuerRef>,
    /// ClientCertSecretRef is a reference to a TLS Secret containing the client certificate.
    /// It is mutually exclusive with clientCertIssuerRef.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertSecretRef")]
    pub client_cert_secret_ref: Option<MariaDBTlsClientCertSecretRef>,
    /// Enabled indicates whether TLS is enabled, determining if certificates should be issued and mounted to the MariaDB instance.
    /// It is enabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// GaleraSSTEnabled determines whether Galera SST connections should use TLS.
    /// It disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "galeraSSTEnabled")]
    pub galera_sst_enabled: Option<bool>,
    /// Required specifies whether TLS must be enforced for all connections.
    /// User TLS requirements take precedence over this.
    /// It disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    /// ServerCASecretRef is a reference to a Secret containing the server certificate authority keypair. It is used to establish trust and issue server certificates.
    /// One of:
    /// - Secret containing both the 'ca.crt' and 'ca.key' keys. This allows you to bring your own CA to Kubernetes to issue certificates.
    /// - Secret containing only the 'ca.crt' in order to establish trust. In this case, either serverCertSecretRef or serverCertIssuerRef must be provided.
    /// If not provided, a self-signed CA will be provisioned to issue the server certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverCASecretRef")]
    pub server_ca_secret_ref: Option<MariaDBTlsServerCaSecretRef>,
    /// ServerCertIssuerRef is a reference to a cert-manager issuer object used to issue the server certificate. cert-manager must be installed previously in the cluster.
    /// It is mutually exclusive with serverCertSecretRef.
    /// By default, the Secret field 'ca.crt' provisioned by cert-manager will be added to the trust chain. A custom trust bundle may be specified via serverCASecretRef.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverCertIssuerRef")]
    pub server_cert_issuer_ref: Option<MariaDBTlsServerCertIssuerRef>,
    /// ServerCertSecretRef is a reference to a TLS Secret containing the server certificate.
    /// It is mutually exclusive with serverCertIssuerRef.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverCertSecretRef")]
    pub server_cert_secret_ref: Option<MariaDBTlsServerCertSecretRef>,
}

/// ClientCASecretRef is a reference to a Secret containing the client certificate authority keypair. It is used to establish trust and issue client certificates.
/// One of:
/// - Secret containing both the 'ca.crt' and 'ca.key' keys. This allows you to bring your own CA to Kubernetes to issue certificates.
/// - Secret containing only the 'ca.crt' in order to establish trust. In this case, either clientCertSecretRef or clientCertIssuerRef fields must be provided.
/// If not provided, a self-signed CA will be provisioned to issue the client certificate.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBTlsClientCaSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ClientCertIssuerRef is a reference to a cert-manager issuer object used to issue the client certificate. cert-manager must be installed previously in the cluster.
/// It is mutually exclusive with clientCertSecretRef.
/// By default, the Secret field 'ca.crt' provisioned by cert-manager will be added to the trust chain. A custom trust bundle may be specified via clientCASecretRef.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBTlsClientCertIssuerRef {
    /// Group of the resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// Kind of the resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the resource being referred to.
    pub name: String,
}

/// ClientCertSecretRef is a reference to a TLS Secret containing the client certificate.
/// It is mutually exclusive with clientCertIssuerRef.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBTlsClientCertSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ServerCASecretRef is a reference to a Secret containing the server certificate authority keypair. It is used to establish trust and issue server certificates.
/// One of:
/// - Secret containing both the 'ca.crt' and 'ca.key' keys. This allows you to bring your own CA to Kubernetes to issue certificates.
/// - Secret containing only the 'ca.crt' in order to establish trust. In this case, either serverCertSecretRef or serverCertIssuerRef must be provided.
/// If not provided, a self-signed CA will be provisioned to issue the server certificate.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBTlsServerCaSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ServerCertIssuerRef is a reference to a cert-manager issuer object used to issue the server certificate. cert-manager must be installed previously in the cluster.
/// It is mutually exclusive with serverCertSecretRef.
/// By default, the Secret field 'ca.crt' provisioned by cert-manager will be added to the trust chain. A custom trust bundle may be specified via serverCASecretRef.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBTlsServerCertIssuerRef {
    /// Group of the resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// Kind of the resource being referred to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the resource being referred to.
    pub name: String,
}

/// ServerCertSecretRef is a reference to a TLS Secret containing the server certificate.
/// It is mutually exclusive with serverCertIssuerRef.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBTlsServerCertSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// The pod this Toleration is attached to tolerates any taint that matches
/// the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects.
    /// When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys.
    /// If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value.
    /// Valid operators are Exists and Equal. Defaults to Equal.
    /// Exists is equivalent to wildcard for value, so that a pod can
    /// tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be
    /// of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
    /// it is not set, which means tolerate the taint forever (do not evict). Zero and
    /// negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to.
    /// If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#topologyspreadconstraint-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBTopologySpreadConstraints {
    /// A label selector is a label query over a set of resources. The result of matchLabels and
    /// matchExpressions are ANDed. An empty label selector matches all objects. A null
    /// label selector matches no objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<MariaDBTopologySpreadConstraintsLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabelKeys")]
    pub match_label_keys: Option<Vec<String>>,
    #[serde(rename = "maxSkew")]
    pub max_skew: i32,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minDomains")]
    pub min_domains: Option<i32>,
    /// NodeInclusionPolicy defines the type of node inclusion policy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinityPolicy")]
    pub node_affinity_policy: Option<String>,
    /// NodeInclusionPolicy defines the type of node inclusion policy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeTaintsPolicy")]
    pub node_taints_policy: Option<String>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
    #[serde(rename = "whenUnsatisfiable")]
    pub when_unsatisfiable: String,
}

/// A label selector is a label query over a set of resources. The result of matchLabels and
/// matchExpressions are ANDed. An empty label selector matches all objects. A null
/// label selector matches no objects.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBTopologySpreadConstraintsLabelSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<MariaDBTopologySpreadConstraintsLabelSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBTopologySpreadConstraintsLabelSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// UpdateStrategy defines how a MariaDB resource is updated.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBUpdateStrategy {
    /// AutoUpdateDataPlane indicates whether the Galera data-plane version (agent and init containers) should be automatically updated based on the operator version. It defaults to false.
    /// Updating the operator will trigger updates on all the MariaDB instances that have this flag set to true. Thus, it is recommended to progressively set this flag after having updated the operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoUpdateDataPlane")]
    pub auto_update_data_plane: Option<bool>,
    /// RollingUpdate defines parameters for the RollingUpdate type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdate")]
    pub rolling_update: Option<MariaDBUpdateStrategyRollingUpdate>,
    /// Type defines the type of updates. One of `ReplicasFirstPrimaryLast`, `RollingUpdate` or `OnDelete`. If not defined, it defaults to `ReplicasFirstPrimaryLast`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<MariaDBUpdateStrategyType>,
}

/// RollingUpdate defines parameters for the RollingUpdate type.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBUpdateStrategyRollingUpdate {
    /// The maximum number of pods that can be unavailable during the update.
    /// Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
    /// Absolute number is calculated from percentage by rounding up. This can not be 0.
    /// Defaults to 1. This field is alpha-level and is only honored by servers that enable the
    /// MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to
    /// Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it
    /// will be counted towards MaxUnavailable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<IntOrString>,
    /// Partition indicates the ordinal at which the StatefulSet should be partitioned
    /// for updates. During a rolling update, all pods from ordinal Replicas-1 to
    /// Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched.
    /// This is helpful in being able to do a canary based deployment. The default value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition: Option<i32>,
}

/// UpdateStrategy defines how a MariaDB resource is updated.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MariaDBUpdateStrategyType {
    ReplicasFirstPrimaryLast,
    RollingUpdate,
    OnDelete,
    Never,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#volumemount-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBVolumeMounts {
    #[serde(rename = "mountPath")]
    pub mount_path: String,
    /// This must match the Name of a Volume.
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPath")]
    pub sub_path: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#volume-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBVolumes {
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#configmapvolumesource-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<MariaDBVolumesConfigMap>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#csivolumesource-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csi: Option<MariaDBVolumesCsi>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#emptydirvolumesource-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emptyDir")]
    pub empty_dir: Option<MariaDBVolumesEmptyDir>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#hostpathvolumesource-v1-core
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPath")]
    pub host_path: Option<MariaDBVolumesHostPath>,
    pub name: String,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nfsvolumesource-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nfs: Option<MariaDBVolumesNfs>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#persistentvolumeclaimvolumesource-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeClaim")]
    pub persistent_volume_claim: Option<MariaDBVolumesPersistentVolumeClaim>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#secretvolumesource-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<MariaDBVolumesSecret>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#configmapvolumesource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBVolumesConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#csivolumesource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBVolumesCsi {
    pub driver: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePublishSecretRef")]
    pub node_publish_secret_ref: Option<MariaDBVolumesCsiNodePublishSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeAttributes")]
    pub volume_attributes: Option<BTreeMap<String, String>>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#localobjectreference-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBVolumesCsiNodePublishSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#emptydirvolumesource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBVolumesEmptyDir {
    /// StorageMedium defines ways that storage can be allocated to a volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub medium: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeLimit")]
    pub size_limit: Option<IntOrString>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#hostpathvolumesource-v1-core
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBVolumesHostPath {
    pub path: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#nfsvolumesource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBVolumesNfs {
    pub path: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    pub server: String,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#persistentvolumeclaimvolumesource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBVolumesPersistentVolumeClaim {
    #[serde(rename = "claimName")]
    pub claim_name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

/// Refer to the Kubernetes docs: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#secretvolumesource-v1-core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBVolumesSecret {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// MariaDBStatus defines the observed state of MariaDB
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBStatus {
    /// Conditions for the Mariadb object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// CurrentPrimary is the primary Pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "currentPrimary")]
    pub current_primary: Option<String>,
    /// CurrentPrimaryPodIndex is the primary Pod index.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "currentPrimaryPodIndex")]
    pub current_primary_pod_index: Option<i64>,
    /// DefaultVersion is the MariaDB version used by the operator when it cannot infer the version
    /// from spec.image. This can happen if the image uses a digest (e.g. sha256) instead
    /// of a version tag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultVersion")]
    pub default_version: Option<String>,
    /// GaleraRecovery is the Galera recovery current state.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "galeraRecovery")]
    pub galera_recovery: Option<MariaDBStatusGaleraRecovery>,
    /// Replicas indicates the number of current instances.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i32>,
    /// ReplicationStatus is the replication current state for each Pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicationStatus")]
    pub replication_status: Option<BTreeMap<String, String>>,
    /// TLS aggregates the status of the certificates used by the MariaDB instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<MariaDBStatusTls>,
}

/// GaleraRecovery is the Galera recovery current state.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBStatusGaleraRecovery {
    /// Bootstrap indicates when and in which Pod the cluster bootstrap process has been performed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bootstrap: Option<MariaDBStatusGaleraRecoveryBootstrap>,
    /// PodsRestarted that the Pods have been restarted after the cluster bootstrap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podsRestarted")]
    pub pods_restarted: Option<bool>,
    /// State is a per Pod representation of the sequence recovery process.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recovered: Option<BTreeMap<String, MariaDBStatusGaleraRecoveryRecovered>>,
    /// State is a per Pod representation of the Galera state file (grastate.dat).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<BTreeMap<String, MariaDBStatusGaleraRecoveryState>>,
}

/// Bootstrap indicates when and in which Pod the cluster bootstrap process has been performed.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBStatusGaleraRecoveryBootstrap {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
}

/// State is a per Pod representation of the sequence recovery process.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBStatusGaleraRecoveryRecovered {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seqno: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
}

/// State is a per Pod representation of the Galera state file (grastate.dat).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBStatusGaleraRecoveryState {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "safeToBootstrap")]
    pub safe_to_bootstrap: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seqno: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// TLS aggregates the status of the certificates used by the MariaDB instance.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBStatusTls {
    /// CABundle is the status of the Certificate Authority bundle.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caBundle")]
    pub ca_bundle: Option<Vec<MariaDBStatusTlsCaBundle>>,
    /// ClientCert is the status of the client certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCert")]
    pub client_cert: Option<MariaDBStatusTlsClientCert>,
    /// ServerCert is the status of the server certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverCert")]
    pub server_cert: Option<MariaDBStatusTlsServerCert>,
}

/// CertificateStatus represents the current status of a TLS certificate.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBStatusTlsCaBundle {
    /// Issuer is the issuer of the current certificate.
    pub issuer: String,
    /// NotAfter indicates that the certificate is not valid after the given date.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notAfter")]
    pub not_after: Option<String>,
    /// NotBefore indicates that the certificate is not valid before the given date.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notBefore")]
    pub not_before: Option<String>,
    /// Subject is the subject of the current certificate.
    pub subject: String,
}

/// ClientCert is the status of the client certificate.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBStatusTlsClientCert {
    /// Issuer is the issuer of the current certificate.
    pub issuer: String,
    /// NotAfter indicates that the certificate is not valid after the given date.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notAfter")]
    pub not_after: Option<String>,
    /// NotBefore indicates that the certificate is not valid before the given date.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notBefore")]
    pub not_before: Option<String>,
    /// Subject is the subject of the current certificate.
    pub subject: String,
}

/// ServerCert is the status of the server certificate.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MariaDBStatusTlsServerCert {
    /// Issuer is the issuer of the current certificate.
    pub issuer: String,
    /// NotAfter indicates that the certificate is not valid after the given date.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notAfter")]
    pub not_after: Option<String>,
    /// NotBefore indicates that the certificate is not valid before the given date.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notBefore")]
    pub not_before: Option<String>,
    /// Subject is the subject of the current certificate.
    pub subject: String,
}

