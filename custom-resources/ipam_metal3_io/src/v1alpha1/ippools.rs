// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/metal3-io/ip-address-manager/ipam.metal3.io/v1alpha1/ippools.yaml
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// IPPoolSpec defines the desired state of IPPool.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "ipam.metal3.io", version = "v1alpha1", kind = "IPPool", plural = "ippools")]
#[kube(namespaced)]
#[kube(status = "IPPoolStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct IPPoolSpec {
    /// ClusterName is the name of the Cluster this object belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    /// DNSServers is the list of dns servers
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsServers")]
    pub dns_servers: Option<Vec<String>>,
    /// Gateway is the gateway ip address
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gateway: Option<String>,
    /// namePrefix is the prefix used to generate the IPAddress object names
    #[serde(rename = "namePrefix")]
    pub name_prefix: String,
    /// Pools contains the list of IP addresses pools
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pools: Option<Vec<IPPoolPools>>,
    /// PreAllocations contains the preallocated IP addresses
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preAllocations")]
    pub pre_allocations: Option<BTreeMap<String, String>>,
    /// Prefix is the mask of the network as integer (max 128)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<i64>,
}

/// MetaDataIPAddress contains the info to render th ip address. It is IP-version
/// agnostic.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IPPoolPools {
    /// DNSServers is the list of dns servers
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsServers")]
    pub dns_servers: Option<Vec<String>>,
    /// End is the last IP address that can be rendered. It is used as a validation
    /// that the rendered IP is in bound.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<String>,
    /// Gateway is the gateway ip address
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gateway: Option<String>,
    /// Prefix is the mask of the network as integer (max 128)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<i64>,
    /// Start is the first ip address that can be rendered
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<String>,
    /// Subnet is used to validate that the rendered IP is in bounds. In case the
    /// Start value is not given, it is derived from the subnet ip incremented by 1
    /// (`192.168.0.1` for `192.168.0.0/24`)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnet: Option<String>,
}

/// IPPoolStatus defines the observed state of IPPool.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IPPoolStatus {
    /// Allocations contains the map of objects and IP addresses they have
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub indexes: Option<BTreeMap<String, String>>,
    /// LastUpdated identifies when this status was last observed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastUpdated")]
    pub last_updated: Option<String>,
}

