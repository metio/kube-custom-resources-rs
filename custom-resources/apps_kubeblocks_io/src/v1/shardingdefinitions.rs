// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/apecloud/kubeblocks/apps.kubeblocks.io/v1/shardingdefinitions.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
}
use self::prelude::*;

/// ShardingDefinitionSpec defines the desired state of ShardingDefinition
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "apps.kubeblocks.io", version = "v1", kind = "ShardingDefinition", plural = "shardingdefinitions")]
#[kube(status = "ShardingDefinitionStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ShardingDefinitionSpec {
    /// Defines a set of hooks and procedures that customize the behavior of a sharding throughout its lifecycle.
    /// 
    /// 
    /// This field is immutable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleActions")]
    pub lifecycle_actions: Option<ShardingDefinitionLifecycleActions>,
    /// Specifies the strategy for provisioning shards of the sharding. Only `Serial` and `Parallel` are supported.
    /// 
    /// 
    /// This field is immutable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "provisionStrategy")]
    pub provision_strategy: Option<ShardingDefinitionProvisionStrategy>,
    /// Defines the upper limit of the number of shards supported by the sharding.
    /// 
    /// 
    /// This field is immutable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shardsLimit")]
    pub shards_limit: Option<ShardingDefinitionShardsLimit>,
    /// Defines the system accounts for the sharding.
    /// 
    /// 
    /// This field is immutable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "systemAccounts")]
    pub system_accounts: Option<Vec<ShardingDefinitionSystemAccounts>>,
    /// This field is immutable.
    pub template: ShardingDefinitionTemplate,
    /// Defines the TLS for the sharding.
    /// 
    /// 
    /// This field is immutable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<ShardingDefinitionTls>,
    /// Specifies the strategy for updating shards of the sharding. Only `Serial` and `Parallel` are supported.
    /// 
    /// 
    /// This field is immutable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateStrategy")]
    pub update_strategy: Option<ShardingDefinitionUpdateStrategy>,
}

/// Defines a set of hooks and procedures that customize the behavior of a sharding throughout its lifecycle.
/// 
/// 
/// This field is immutable.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActions {
    /// Specifies the hook to be executed after a sharding's creation.
    /// 
    /// 
    /// By setting `postProvision.preCondition`, you can determine the specific lifecycle stage at which
    /// the action should trigger, available conditions for sharding include: `Immediately`, `ComponentReady`,
    /// and `ClusterReady`. For sharding, the `ComponentReady` condition means all components of the sharding are ready.
    /// 
    /// 
    /// With `ComponentReady` being the default.
    /// 
    /// 
    /// The PostProvision Action is intended to run only once.
    /// 
    /// 
    /// Note: This field is immutable once it has been set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postProvision")]
    pub post_provision: Option<ShardingDefinitionLifecycleActionsPostProvision>,
    /// Specifies the hook to be executed prior to terminating a sharding.
    /// 
    /// 
    /// The PreTerminate Action is intended to run only once.
    /// 
    /// 
    /// This action is executed immediately when a terminate operation for the sharding is initiated.
    /// The actual termination and cleanup of the sharding and its associated resources will not proceed
    /// until the PreTerminate action has completed successfully.
    /// 
    /// 
    /// Note: This field is immutable once it has been set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preTerminate")]
    pub pre_terminate: Option<ShardingDefinitionLifecycleActionsPreTerminate>,
    /// Specifies the hook to be executed after a shard added.
    /// 
    /// 
    /// Note: This field is immutable once it has been set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shardAdd")]
    pub shard_add: Option<ShardingDefinitionLifecycleActionsShardAdd>,
    /// Specifies the hook to be executed prior to remove a shard.
    /// 
    /// 
    /// Note: This field is immutable once it has been set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shardRemove")]
    pub shard_remove: Option<ShardingDefinitionLifecycleActionsShardRemove>,
}

/// Specifies the hook to be executed after a sharding's creation.
/// 
/// 
/// By setting `postProvision.preCondition`, you can determine the specific lifecycle stage at which
/// the action should trigger, available conditions for sharding include: `Immediately`, `ComponentReady`,
/// and `ClusterReady`. For sharding, the `ComponentReady` condition means all components of the sharding are ready.
/// 
/// 
/// With `ComponentReady` being the default.
/// 
/// 
/// The PostProvision Action is intended to run only once.
/// 
/// 
/// Note: This field is immutable once it has been set.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsPostProvision {
    /// Defines the command to run.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<ShardingDefinitionLifecycleActionsPostProvisionExec>,
    /// Specifies the state that the cluster must reach before the Action is executed.
    /// Currently, this is only applicable to the `postProvision` action.
    /// 
    /// 
    /// The conditions are as follows:
    /// 
    /// 
    /// - `Immediately`: Executed right after the Component object is created.
    ///   The readiness of the Component and its resources is not guaranteed at this stage.
    /// - `RuntimeReady`: The Action is triggered after the Component object has been created and all associated
    ///   runtime resources (e.g. Pods) are in a ready state.
    /// - `ComponentReady`: The Action is triggered after the Component itself is in a ready state.
    ///   This process does not affect the readiness state of the Component or the Cluster.
    /// - `ClusterReady`: The Action is executed after the Cluster is in a ready state.
    ///   This execution does not alter the Component or the Cluster's state of readiness.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preCondition")]
    pub pre_condition: Option<String>,
    /// Defines the strategy to be taken when retrying the Action after a failure.
    /// 
    /// 
    /// It specifies the conditions under which the Action should be retried and the limits to apply,
    /// such as the maximum number of retries and backoff strategy.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryPolicy")]
    pub retry_policy: Option<ShardingDefinitionLifecycleActionsPostProvisionRetryPolicy>,
    /// Specifies the maximum duration in seconds that the Action is allowed to run.
    /// 
    /// 
    /// If the Action does not complete within this time frame, it will be terminated.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Defines the command to run.
/// 
/// 
/// This field cannot be updated.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsPostProvisionExec {
    /// Args represents the arguments that are passed to the `command` for execution.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Specifies the command to be executed inside the container.
    /// The working directory for this command is the container's root directory('/').
    /// Commands are executed directly without a shell environment, meaning shell-specific syntax ('|', etc.) is not supported.
    /// If the shell is required, it must be explicitly invoked in the command.
    /// 
    /// 
    /// A successful execution is indicated by an exit status of 0; any non-zero status signifies a failure.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// Specifies the name of the container within the same pod whose resources will be shared with the action.
    /// This allows the action to utilize the specified container's resources without executing within it.
    /// 
    /// 
    /// The name must match one of the containers defined in `componentDefinition.spec.runtime`.
    /// 
    /// 
    /// The resources that can be shared are included:
    /// 
    /// 
    /// - volume mounts
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    /// Represents a list of environment variables that will be injected into the container.
    /// These variables enable the container to adapt its behavior based on the environment it's running in.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ShardingDefinitionLifecycleActionsPostProvisionExecEnv>>,
    /// Specifies the container image to be used for running the Action.
    /// 
    /// 
    /// When specified, a dedicated container will be created using this image to execute the Action.
    /// All actions with same image will share the same container.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// Used in conjunction with the `targetPodSelector` field to refine the selection of target pod(s) for Action execution.
    /// The impact of this field depends on the `targetPodSelector` value:
    /// 
    /// 
    /// - When `targetPodSelector` is set to `Any` or `All`, this field will be ignored.
    /// - When `targetPodSelector` is set to `Role`, only those replicas whose role matches the `matchingKey`
    ///   will be selected for the Action.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchingKey")]
    pub matching_key: Option<String>,
    /// Defines the criteria used to select the target Pod(s) for executing the Action.
    /// This is useful when there is no default target replica identified.
    /// It allows for precise control over which Pod(s) the Action should run in.
    /// 
    /// 
    /// If not specified, the Action will be executed in the pod where the Action is triggered, such as the pod
    /// to be removed or added; or a random pod if the Action is triggered at the component level, such as
    /// post-provision or pre-terminate of the component.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPodSelector")]
    pub target_pod_selector: Option<ShardingDefinitionLifecycleActionsPostProvisionExecTargetPodSelector>,
}

/// EnvVar represents an environment variable present in a Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsPostProvisionExecEnv {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    /// Variable references $(VAR_NAME) are expanded
    /// using the previously defined environment variables in the container and
    /// any service environment variables. If a variable cannot be resolved,
    /// the reference in the input string will be unchanged. Double $$ are reduced
    /// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
    /// "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
    /// Escaped references will never be expanded, regardless of whether the variable
    /// exists or not.
    /// Defaults to "".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// Source for the environment variable's value. Cannot be used if value is not empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ShardingDefinitionLifecycleActionsPostProvisionExecEnvValueFrom>,
}

/// Source for the environment variable's value. Cannot be used if value is not empty.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsPostProvisionExecEnvValueFrom {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<ShardingDefinitionLifecycleActionsPostProvisionExecEnvValueFromConfigMapKeyRef>,
    /// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
    /// spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<ShardingDefinitionLifecycleActionsPostProvisionExecEnvValueFromFieldRef>,
    /// Selects a resource of the container: only resources limits and requests
    /// (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<ShardingDefinitionLifecycleActionsPostProvisionExecEnvValueFromResourceFieldRef>,
    /// Selects a key of a secret in the pod's namespace
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ShardingDefinitionLifecycleActionsPostProvisionExecEnvValueFromSecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsPostProvisionExecEnvValueFromConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
/// spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsPostProvisionExecEnvValueFromFieldRef {
    /// Version of the schema the FieldPath is written in terms of, defaults to "v1".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Path of the field to select in the specified API version.
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Selects a resource of the container: only resources limits and requests
/// (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsPostProvisionExecEnvValueFromResourceFieldRef {
    /// Container name: required for volumes, optional for env vars
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    /// Specifies the output format of the exposed resources, defaults to "1"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    /// Required: resource to select
    pub resource: String,
}

/// Selects a key of a secret in the pod's namespace
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsPostProvisionExecEnvValueFromSecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Defines the command to run.
/// 
/// 
/// This field cannot be updated.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ShardingDefinitionLifecycleActionsPostProvisionExecTargetPodSelector {
    Any,
    All,
    Role,
    Ordinal,
}

/// Defines the strategy to be taken when retrying the Action after a failure.
/// 
/// 
/// It specifies the conditions under which the Action should be retried and the limits to apply,
/// such as the maximum number of retries and backoff strategy.
/// 
/// 
/// This field cannot be updated.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsPostProvisionRetryPolicy {
    /// Defines the maximum number of retry attempts that should be made for a given Action.
    /// This value is set to 0 by default, indicating that no retries will be made.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    pub max_retries: Option<i64>,
    /// Indicates the duration of time to wait between each retry attempt.
    /// This value is set to 0 by default, indicating that there will be no delay between retry attempts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryInterval")]
    pub retry_interval: Option<i64>,
}

/// Specifies the hook to be executed prior to terminating a sharding.
/// 
/// 
/// The PreTerminate Action is intended to run only once.
/// 
/// 
/// This action is executed immediately when a terminate operation for the sharding is initiated.
/// The actual termination and cleanup of the sharding and its associated resources will not proceed
/// until the PreTerminate action has completed successfully.
/// 
/// 
/// Note: This field is immutable once it has been set.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsPreTerminate {
    /// Defines the command to run.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<ShardingDefinitionLifecycleActionsPreTerminateExec>,
    /// Specifies the state that the cluster must reach before the Action is executed.
    /// Currently, this is only applicable to the `postProvision` action.
    /// 
    /// 
    /// The conditions are as follows:
    /// 
    /// 
    /// - `Immediately`: Executed right after the Component object is created.
    ///   The readiness of the Component and its resources is not guaranteed at this stage.
    /// - `RuntimeReady`: The Action is triggered after the Component object has been created and all associated
    ///   runtime resources (e.g. Pods) are in a ready state.
    /// - `ComponentReady`: The Action is triggered after the Component itself is in a ready state.
    ///   This process does not affect the readiness state of the Component or the Cluster.
    /// - `ClusterReady`: The Action is executed after the Cluster is in a ready state.
    ///   This execution does not alter the Component or the Cluster's state of readiness.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preCondition")]
    pub pre_condition: Option<String>,
    /// Defines the strategy to be taken when retrying the Action after a failure.
    /// 
    /// 
    /// It specifies the conditions under which the Action should be retried and the limits to apply,
    /// such as the maximum number of retries and backoff strategy.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryPolicy")]
    pub retry_policy: Option<ShardingDefinitionLifecycleActionsPreTerminateRetryPolicy>,
    /// Specifies the maximum duration in seconds that the Action is allowed to run.
    /// 
    /// 
    /// If the Action does not complete within this time frame, it will be terminated.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Defines the command to run.
/// 
/// 
/// This field cannot be updated.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsPreTerminateExec {
    /// Args represents the arguments that are passed to the `command` for execution.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Specifies the command to be executed inside the container.
    /// The working directory for this command is the container's root directory('/').
    /// Commands are executed directly without a shell environment, meaning shell-specific syntax ('|', etc.) is not supported.
    /// If the shell is required, it must be explicitly invoked in the command.
    /// 
    /// 
    /// A successful execution is indicated by an exit status of 0; any non-zero status signifies a failure.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// Specifies the name of the container within the same pod whose resources will be shared with the action.
    /// This allows the action to utilize the specified container's resources without executing within it.
    /// 
    /// 
    /// The name must match one of the containers defined in `componentDefinition.spec.runtime`.
    /// 
    /// 
    /// The resources that can be shared are included:
    /// 
    /// 
    /// - volume mounts
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    /// Represents a list of environment variables that will be injected into the container.
    /// These variables enable the container to adapt its behavior based on the environment it's running in.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ShardingDefinitionLifecycleActionsPreTerminateExecEnv>>,
    /// Specifies the container image to be used for running the Action.
    /// 
    /// 
    /// When specified, a dedicated container will be created using this image to execute the Action.
    /// All actions with same image will share the same container.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// Used in conjunction with the `targetPodSelector` field to refine the selection of target pod(s) for Action execution.
    /// The impact of this field depends on the `targetPodSelector` value:
    /// 
    /// 
    /// - When `targetPodSelector` is set to `Any` or `All`, this field will be ignored.
    /// - When `targetPodSelector` is set to `Role`, only those replicas whose role matches the `matchingKey`
    ///   will be selected for the Action.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchingKey")]
    pub matching_key: Option<String>,
    /// Defines the criteria used to select the target Pod(s) for executing the Action.
    /// This is useful when there is no default target replica identified.
    /// It allows for precise control over which Pod(s) the Action should run in.
    /// 
    /// 
    /// If not specified, the Action will be executed in the pod where the Action is triggered, such as the pod
    /// to be removed or added; or a random pod if the Action is triggered at the component level, such as
    /// post-provision or pre-terminate of the component.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPodSelector")]
    pub target_pod_selector: Option<ShardingDefinitionLifecycleActionsPreTerminateExecTargetPodSelector>,
}

/// EnvVar represents an environment variable present in a Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsPreTerminateExecEnv {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    /// Variable references $(VAR_NAME) are expanded
    /// using the previously defined environment variables in the container and
    /// any service environment variables. If a variable cannot be resolved,
    /// the reference in the input string will be unchanged. Double $$ are reduced
    /// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
    /// "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
    /// Escaped references will never be expanded, regardless of whether the variable
    /// exists or not.
    /// Defaults to "".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// Source for the environment variable's value. Cannot be used if value is not empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ShardingDefinitionLifecycleActionsPreTerminateExecEnvValueFrom>,
}

/// Source for the environment variable's value. Cannot be used if value is not empty.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsPreTerminateExecEnvValueFrom {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<ShardingDefinitionLifecycleActionsPreTerminateExecEnvValueFromConfigMapKeyRef>,
    /// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
    /// spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<ShardingDefinitionLifecycleActionsPreTerminateExecEnvValueFromFieldRef>,
    /// Selects a resource of the container: only resources limits and requests
    /// (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<ShardingDefinitionLifecycleActionsPreTerminateExecEnvValueFromResourceFieldRef>,
    /// Selects a key of a secret in the pod's namespace
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ShardingDefinitionLifecycleActionsPreTerminateExecEnvValueFromSecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsPreTerminateExecEnvValueFromConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
/// spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsPreTerminateExecEnvValueFromFieldRef {
    /// Version of the schema the FieldPath is written in terms of, defaults to "v1".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Path of the field to select in the specified API version.
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Selects a resource of the container: only resources limits and requests
/// (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsPreTerminateExecEnvValueFromResourceFieldRef {
    /// Container name: required for volumes, optional for env vars
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    /// Specifies the output format of the exposed resources, defaults to "1"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    /// Required: resource to select
    pub resource: String,
}

/// Selects a key of a secret in the pod's namespace
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsPreTerminateExecEnvValueFromSecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Defines the command to run.
/// 
/// 
/// This field cannot be updated.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ShardingDefinitionLifecycleActionsPreTerminateExecTargetPodSelector {
    Any,
    All,
    Role,
    Ordinal,
}

/// Defines the strategy to be taken when retrying the Action after a failure.
/// 
/// 
/// It specifies the conditions under which the Action should be retried and the limits to apply,
/// such as the maximum number of retries and backoff strategy.
/// 
/// 
/// This field cannot be updated.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsPreTerminateRetryPolicy {
    /// Defines the maximum number of retry attempts that should be made for a given Action.
    /// This value is set to 0 by default, indicating that no retries will be made.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    pub max_retries: Option<i64>,
    /// Indicates the duration of time to wait between each retry attempt.
    /// This value is set to 0 by default, indicating that there will be no delay between retry attempts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryInterval")]
    pub retry_interval: Option<i64>,
}

/// Specifies the hook to be executed after a shard added.
/// 
/// 
/// Note: This field is immutable once it has been set.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsShardAdd {
    /// Defines the command to run.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<ShardingDefinitionLifecycleActionsShardAddExec>,
    /// Specifies the state that the cluster must reach before the Action is executed.
    /// Currently, this is only applicable to the `postProvision` action.
    /// 
    /// 
    /// The conditions are as follows:
    /// 
    /// 
    /// - `Immediately`: Executed right after the Component object is created.
    ///   The readiness of the Component and its resources is not guaranteed at this stage.
    /// - `RuntimeReady`: The Action is triggered after the Component object has been created and all associated
    ///   runtime resources (e.g. Pods) are in a ready state.
    /// - `ComponentReady`: The Action is triggered after the Component itself is in a ready state.
    ///   This process does not affect the readiness state of the Component or the Cluster.
    /// - `ClusterReady`: The Action is executed after the Cluster is in a ready state.
    ///   This execution does not alter the Component or the Cluster's state of readiness.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preCondition")]
    pub pre_condition: Option<String>,
    /// Defines the strategy to be taken when retrying the Action after a failure.
    /// 
    /// 
    /// It specifies the conditions under which the Action should be retried and the limits to apply,
    /// such as the maximum number of retries and backoff strategy.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryPolicy")]
    pub retry_policy: Option<ShardingDefinitionLifecycleActionsShardAddRetryPolicy>,
    /// Specifies the maximum duration in seconds that the Action is allowed to run.
    /// 
    /// 
    /// If the Action does not complete within this time frame, it will be terminated.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Defines the command to run.
/// 
/// 
/// This field cannot be updated.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsShardAddExec {
    /// Args represents the arguments that are passed to the `command` for execution.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Specifies the command to be executed inside the container.
    /// The working directory for this command is the container's root directory('/').
    /// Commands are executed directly without a shell environment, meaning shell-specific syntax ('|', etc.) is not supported.
    /// If the shell is required, it must be explicitly invoked in the command.
    /// 
    /// 
    /// A successful execution is indicated by an exit status of 0; any non-zero status signifies a failure.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// Specifies the name of the container within the same pod whose resources will be shared with the action.
    /// This allows the action to utilize the specified container's resources without executing within it.
    /// 
    /// 
    /// The name must match one of the containers defined in `componentDefinition.spec.runtime`.
    /// 
    /// 
    /// The resources that can be shared are included:
    /// 
    /// 
    /// - volume mounts
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    /// Represents a list of environment variables that will be injected into the container.
    /// These variables enable the container to adapt its behavior based on the environment it's running in.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ShardingDefinitionLifecycleActionsShardAddExecEnv>>,
    /// Specifies the container image to be used for running the Action.
    /// 
    /// 
    /// When specified, a dedicated container will be created using this image to execute the Action.
    /// All actions with same image will share the same container.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// Used in conjunction with the `targetPodSelector` field to refine the selection of target pod(s) for Action execution.
    /// The impact of this field depends on the `targetPodSelector` value:
    /// 
    /// 
    /// - When `targetPodSelector` is set to `Any` or `All`, this field will be ignored.
    /// - When `targetPodSelector` is set to `Role`, only those replicas whose role matches the `matchingKey`
    ///   will be selected for the Action.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchingKey")]
    pub matching_key: Option<String>,
    /// Defines the criteria used to select the target Pod(s) for executing the Action.
    /// This is useful when there is no default target replica identified.
    /// It allows for precise control over which Pod(s) the Action should run in.
    /// 
    /// 
    /// If not specified, the Action will be executed in the pod where the Action is triggered, such as the pod
    /// to be removed or added; or a random pod if the Action is triggered at the component level, such as
    /// post-provision or pre-terminate of the component.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPodSelector")]
    pub target_pod_selector: Option<ShardingDefinitionLifecycleActionsShardAddExecTargetPodSelector>,
}

/// EnvVar represents an environment variable present in a Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsShardAddExecEnv {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    /// Variable references $(VAR_NAME) are expanded
    /// using the previously defined environment variables in the container and
    /// any service environment variables. If a variable cannot be resolved,
    /// the reference in the input string will be unchanged. Double $$ are reduced
    /// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
    /// "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
    /// Escaped references will never be expanded, regardless of whether the variable
    /// exists or not.
    /// Defaults to "".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// Source for the environment variable's value. Cannot be used if value is not empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ShardingDefinitionLifecycleActionsShardAddExecEnvValueFrom>,
}

/// Source for the environment variable's value. Cannot be used if value is not empty.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsShardAddExecEnvValueFrom {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<ShardingDefinitionLifecycleActionsShardAddExecEnvValueFromConfigMapKeyRef>,
    /// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
    /// spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<ShardingDefinitionLifecycleActionsShardAddExecEnvValueFromFieldRef>,
    /// Selects a resource of the container: only resources limits and requests
    /// (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<ShardingDefinitionLifecycleActionsShardAddExecEnvValueFromResourceFieldRef>,
    /// Selects a key of a secret in the pod's namespace
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ShardingDefinitionLifecycleActionsShardAddExecEnvValueFromSecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsShardAddExecEnvValueFromConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
/// spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsShardAddExecEnvValueFromFieldRef {
    /// Version of the schema the FieldPath is written in terms of, defaults to "v1".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Path of the field to select in the specified API version.
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Selects a resource of the container: only resources limits and requests
/// (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsShardAddExecEnvValueFromResourceFieldRef {
    /// Container name: required for volumes, optional for env vars
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    /// Specifies the output format of the exposed resources, defaults to "1"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    /// Required: resource to select
    pub resource: String,
}

/// Selects a key of a secret in the pod's namespace
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsShardAddExecEnvValueFromSecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Defines the command to run.
/// 
/// 
/// This field cannot be updated.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ShardingDefinitionLifecycleActionsShardAddExecTargetPodSelector {
    Any,
    All,
    Role,
    Ordinal,
}

/// Defines the strategy to be taken when retrying the Action after a failure.
/// 
/// 
/// It specifies the conditions under which the Action should be retried and the limits to apply,
/// such as the maximum number of retries and backoff strategy.
/// 
/// 
/// This field cannot be updated.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsShardAddRetryPolicy {
    /// Defines the maximum number of retry attempts that should be made for a given Action.
    /// This value is set to 0 by default, indicating that no retries will be made.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    pub max_retries: Option<i64>,
    /// Indicates the duration of time to wait between each retry attempt.
    /// This value is set to 0 by default, indicating that there will be no delay between retry attempts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryInterval")]
    pub retry_interval: Option<i64>,
}

/// Specifies the hook to be executed prior to remove a shard.
/// 
/// 
/// Note: This field is immutable once it has been set.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsShardRemove {
    /// Defines the command to run.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<ShardingDefinitionLifecycleActionsShardRemoveExec>,
    /// Specifies the state that the cluster must reach before the Action is executed.
    /// Currently, this is only applicable to the `postProvision` action.
    /// 
    /// 
    /// The conditions are as follows:
    /// 
    /// 
    /// - `Immediately`: Executed right after the Component object is created.
    ///   The readiness of the Component and its resources is not guaranteed at this stage.
    /// - `RuntimeReady`: The Action is triggered after the Component object has been created and all associated
    ///   runtime resources (e.g. Pods) are in a ready state.
    /// - `ComponentReady`: The Action is triggered after the Component itself is in a ready state.
    ///   This process does not affect the readiness state of the Component or the Cluster.
    /// - `ClusterReady`: The Action is executed after the Cluster is in a ready state.
    ///   This execution does not alter the Component or the Cluster's state of readiness.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preCondition")]
    pub pre_condition: Option<String>,
    /// Defines the strategy to be taken when retrying the Action after a failure.
    /// 
    /// 
    /// It specifies the conditions under which the Action should be retried and the limits to apply,
    /// such as the maximum number of retries and backoff strategy.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryPolicy")]
    pub retry_policy: Option<ShardingDefinitionLifecycleActionsShardRemoveRetryPolicy>,
    /// Specifies the maximum duration in seconds that the Action is allowed to run.
    /// 
    /// 
    /// If the Action does not complete within this time frame, it will be terminated.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Defines the command to run.
/// 
/// 
/// This field cannot be updated.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsShardRemoveExec {
    /// Args represents the arguments that are passed to the `command` for execution.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Specifies the command to be executed inside the container.
    /// The working directory for this command is the container's root directory('/').
    /// Commands are executed directly without a shell environment, meaning shell-specific syntax ('|', etc.) is not supported.
    /// If the shell is required, it must be explicitly invoked in the command.
    /// 
    /// 
    /// A successful execution is indicated by an exit status of 0; any non-zero status signifies a failure.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// Specifies the name of the container within the same pod whose resources will be shared with the action.
    /// This allows the action to utilize the specified container's resources without executing within it.
    /// 
    /// 
    /// The name must match one of the containers defined in `componentDefinition.spec.runtime`.
    /// 
    /// 
    /// The resources that can be shared are included:
    /// 
    /// 
    /// - volume mounts
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    /// Represents a list of environment variables that will be injected into the container.
    /// These variables enable the container to adapt its behavior based on the environment it's running in.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ShardingDefinitionLifecycleActionsShardRemoveExecEnv>>,
    /// Specifies the container image to be used for running the Action.
    /// 
    /// 
    /// When specified, a dedicated container will be created using this image to execute the Action.
    /// All actions with same image will share the same container.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// Used in conjunction with the `targetPodSelector` field to refine the selection of target pod(s) for Action execution.
    /// The impact of this field depends on the `targetPodSelector` value:
    /// 
    /// 
    /// - When `targetPodSelector` is set to `Any` or `All`, this field will be ignored.
    /// - When `targetPodSelector` is set to `Role`, only those replicas whose role matches the `matchingKey`
    ///   will be selected for the Action.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchingKey")]
    pub matching_key: Option<String>,
    /// Defines the criteria used to select the target Pod(s) for executing the Action.
    /// This is useful when there is no default target replica identified.
    /// It allows for precise control over which Pod(s) the Action should run in.
    /// 
    /// 
    /// If not specified, the Action will be executed in the pod where the Action is triggered, such as the pod
    /// to be removed or added; or a random pod if the Action is triggered at the component level, such as
    /// post-provision or pre-terminate of the component.
    /// 
    /// 
    /// This field cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetPodSelector")]
    pub target_pod_selector: Option<ShardingDefinitionLifecycleActionsShardRemoveExecTargetPodSelector>,
}

/// EnvVar represents an environment variable present in a Container.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsShardRemoveExecEnv {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    /// Variable references $(VAR_NAME) are expanded
    /// using the previously defined environment variables in the container and
    /// any service environment variables. If a variable cannot be resolved,
    /// the reference in the input string will be unchanged. Double $$ are reduced
    /// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
    /// "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
    /// Escaped references will never be expanded, regardless of whether the variable
    /// exists or not.
    /// Defaults to "".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// Source for the environment variable's value. Cannot be used if value is not empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ShardingDefinitionLifecycleActionsShardRemoveExecEnvValueFrom>,
}

/// Source for the environment variable's value. Cannot be used if value is not empty.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsShardRemoveExecEnvValueFrom {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<ShardingDefinitionLifecycleActionsShardRemoveExecEnvValueFromConfigMapKeyRef>,
    /// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
    /// spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<ShardingDefinitionLifecycleActionsShardRemoveExecEnvValueFromFieldRef>,
    /// Selects a resource of the container: only resources limits and requests
    /// (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<ShardingDefinitionLifecycleActionsShardRemoveExecEnvValueFromResourceFieldRef>,
    /// Selects a key of a secret in the pod's namespace
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ShardingDefinitionLifecycleActionsShardRemoveExecEnvValueFromSecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsShardRemoveExecEnvValueFromConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
/// spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsShardRemoveExecEnvValueFromFieldRef {
    /// Version of the schema the FieldPath is written in terms of, defaults to "v1".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Path of the field to select in the specified API version.
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Selects a resource of the container: only resources limits and requests
/// (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsShardRemoveExecEnvValueFromResourceFieldRef {
    /// Container name: required for volumes, optional for env vars
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    /// Specifies the output format of the exposed resources, defaults to "1"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    /// Required: resource to select
    pub resource: String,
}

/// Selects a key of a secret in the pod's namespace
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsShardRemoveExecEnvValueFromSecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Defines the command to run.
/// 
/// 
/// This field cannot be updated.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ShardingDefinitionLifecycleActionsShardRemoveExecTargetPodSelector {
    Any,
    All,
    Role,
    Ordinal,
}

/// Defines the strategy to be taken when retrying the Action after a failure.
/// 
/// 
/// It specifies the conditions under which the Action should be retried and the limits to apply,
/// such as the maximum number of retries and backoff strategy.
/// 
/// 
/// This field cannot be updated.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionLifecycleActionsShardRemoveRetryPolicy {
    /// Defines the maximum number of retry attempts that should be made for a given Action.
    /// This value is set to 0 by default, indicating that no retries will be made.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    pub max_retries: Option<i64>,
    /// Indicates the duration of time to wait between each retry attempt.
    /// This value is set to 0 by default, indicating that there will be no delay between retry attempts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryInterval")]
    pub retry_interval: Option<i64>,
}

/// ShardingDefinitionSpec defines the desired state of ShardingDefinition
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ShardingDefinitionProvisionStrategy {
    Serial,
    BestEffortParallel,
    Parallel,
}

/// Defines the upper limit of the number of shards supported by the sharding.
/// 
/// 
/// This field is immutable.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionShardsLimit {
    /// The maximum limit of shards.
    #[serde(rename = "maxShards")]
    pub max_shards: i32,
    /// The minimum limit of shards.
    #[serde(rename = "minShards")]
    pub min_shards: i32,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionSystemAccounts {
    /// The name of the system account defined in the sharding template.
    /// 
    /// 
    /// This field is immutable once set.
    pub name: String,
    /// Specifies whether the account is shared across all shards in the sharding.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shared: Option<bool>,
}

/// This field is immutable.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionTemplate {
    /// The component definition(s) that the sharding is based on.
    /// 
    /// 
    /// The component definition can be specified using one of the following:
    /// 
    /// 
    /// - the full name
    /// - the regular expression pattern ('^' will be added to the beginning of the pattern automatically)
    /// 
    /// 
    /// This field is immutable.
    #[serde(rename = "compDef")]
    pub comp_def: String,
}

/// Defines the TLS for the sharding.
/// 
/// 
/// This field is immutable.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionTls {
    /// Specifies whether the TLS configuration is shared across all shards in the sharding.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shared: Option<bool>,
}

/// ShardingDefinitionSpec defines the desired state of ShardingDefinition
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ShardingDefinitionUpdateStrategy {
    Serial,
    BestEffortParallel,
    Parallel,
}

/// ShardingDefinitionStatus defines the observed state of ShardingDefinition
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ShardingDefinitionStatus {
    /// Provides additional information about the current phase.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Refers to the most recent generation that has been observed for the ShardingDefinition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// Represents the current status of the ShardingDefinition. Valid values include ``, `Available`, and `Unavailable`.
    /// When the status is `Available`, the ShardingDefinition is ready and can be utilized by related objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<ShardingDefinitionStatusPhase>,
}

/// ShardingDefinitionStatus defines the observed state of ShardingDefinition
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ShardingDefinitionStatusPhase {
    Available,
    Unavailable,
}

