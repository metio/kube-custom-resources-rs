// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/metallb/metallb-operator/metallb.io/v1beta2/bgppeers.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// BGPPeerSpec defines the desired state of Peer.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "metallb.io", version = "v1beta2", kind = "BGPPeer", plural = "bgppeers")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct BGPPeerSpec {
    /// The name of the BFD Profile to be used for the BFD session associated to the BGP session. If not set, the BFD session won't be set up.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bfdProfile")]
    pub bfd_profile: Option<String>,
    /// Requested BGP connect time, controls how long BGP waits between connection attempts to a neighbor.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectTime")]
    pub connect_time: Option<String>,
    /// To set if we want to disable MP BGP that will separate IPv4 and IPv6 route exchanges into distinct BGP sessions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableMP")]
    pub disable_mp: Option<bool>,
    /// DynamicASN detects the AS number to use for the remote end of the session
    /// without explicitly setting it via the ASN field. Limited to:
    /// internal - if the neighbor's ASN is different than MyASN connection is denied.
    /// external - if the neighbor's ASN is the same as MyASN the connection is denied.
    /// ASN and DynamicASN are mutually exclusive and one of them must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicASN")]
    pub dynamic_asn: Option<BGPPeerDynamicAsn>,
    /// To set if the BGPPeer is multi-hops away. Needed for FRR mode only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebgpMultiHop")]
    pub ebgp_multi_hop: Option<bool>,
    /// EnableGracefulRestart allows BGP peer to continue to forward data packets
    /// along known routes while the routing protocol information is being
    /// restored. This field is immutable because it requires restart of the BGP
    /// session. Supported for FRR mode only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableGracefulRestart")]
    pub enable_graceful_restart: Option<bool>,
    /// Requested BGP hold time, per RFC4271.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "holdTime")]
    pub hold_time: Option<String>,
    /// Interface is the node interface over which the unnumbered BGP peering will
    /// be established. No API validation takes place as that string value
    /// represents an interface name on the host and if user provides an invalid
    /// value, only the actual BGP session will not be established.
    /// Address and Interface are mutually exclusive and one of them must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interface: Option<String>,
    /// Requested BGP keepalive time, per RFC4271.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepaliveTime")]
    pub keepalive_time: Option<String>,
    /// AS number to use for the local end of the session.
    #[serde(rename = "myASN")]
    pub my_asn: i32,
    /// Only connect to this peer on nodes that match one of these
    /// selectors.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<Vec<BGPPeerNodeSelectors>>,
    /// Authentication password for routers enforcing TCP MD5 authenticated sessions
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// passwordSecret is name of the authentication secret for BGP Peer.
    /// the secret must be of type "kubernetes.io/basic-auth", and created in the
    /// same namespace as the MetalLB deployment. The password is stored in the
    /// secret as the key "password".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecret")]
    pub password_secret: Option<BGPPeerPasswordSecret>,
    /// AS number to expect from the remote end of the session.
    /// ASN and DynamicASN are mutually exclusive and one of them must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerASN")]
    pub peer_asn: Option<i32>,
    /// Address to dial when establishing the session.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerAddress")]
    pub peer_address: Option<String>,
    /// Port to dial when establishing the session.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerPort")]
    pub peer_port: Option<i64>,
    /// BGP router ID to advertise to the peer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routerID")]
    pub router_id: Option<String>,
    /// Source address to use when establishing the session.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceAddress")]
    pub source_address: Option<String>,
    /// To set if we want to peer with the BGPPeer using an interface belonging to
    /// a host vrf
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vrf: Option<String>,
}

/// BGPPeerSpec defines the desired state of Peer.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BGPPeerDynamicAsn {
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "external")]
    External,
}

/// A label selector is a label query over a set of resources. The result of matchLabels and
/// matchExpressions are ANDed. An empty label selector matches all objects. A null
/// label selector matches no objects.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BGPPeerNodeSelectors {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<BGPPeerNodeSelectorsMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BGPPeerNodeSelectorsMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// passwordSecret is name of the authentication secret for BGP Peer.
/// the secret must be of type "kubernetes.io/basic-auth", and created in the
/// same namespace as the MetalLB deployment. The password is stored in the
/// secret as the key "password".
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BGPPeerPasswordSecret {
    /// name is unique within a namespace to reference a secret resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// namespace defines the space within which the secret name must be unique.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// BGPPeerStatus defines the observed state of Peer.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BGPPeerStatus {
}

