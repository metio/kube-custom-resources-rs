// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/metallb/metallb-operator/metallb.io/v1beta1/bgppeers.yaml
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// BGPPeerSpec defines the desired state of Peer.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "metallb.io", version = "v1beta1", kind = "BGPPeer", plural = "bgppeers")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct BGPPeerSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bfdProfile")]
    pub bfd_profile: Option<String>,
    /// EBGP peer is multi-hops away
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebgpMultiHop")]
    pub ebgp_multi_hop: Option<bool>,
    /// Requested BGP hold time, per RFC4271.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "holdTime")]
    pub hold_time: Option<String>,
    /// Requested BGP keepalive time, per RFC4271.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepaliveTime")]
    pub keepalive_time: Option<String>,
    /// AS number to use for the local end of the session.
    #[serde(rename = "myASN")]
    pub my_asn: i32,
    /// Only connect to this peer on nodes that match one of these
    /// selectors.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<Vec<BGPPeerNodeSelectors>>,
    /// Authentication password for routers enforcing TCP MD5 authenticated sessions
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// AS number to expect from the remote end of the session.
    #[serde(rename = "peerASN")]
    pub peer_asn: i32,
    /// Address to dial when establishing the session.
    #[serde(rename = "peerAddress")]
    pub peer_address: String,
    /// Port to dial when establishing the session.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerPort")]
    pub peer_port: Option<i64>,
    /// BGP router ID to advertise to the peer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routerID")]
    pub router_id: Option<String>,
    /// Source address to use when establishing the session.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceAddress")]
    pub source_address: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BGPPeerNodeSelectors {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<BGPPeerNodeSelectorsMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BGPPeerNodeSelectorsMatchExpressions {
    pub key: String,
    pub operator: String,
    pub values: Vec<String>,
}

/// BGPPeerStatus defines the observed state of Peer.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BGPPeerStatus {
}

