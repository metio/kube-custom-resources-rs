// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/metallb/metallb-operator/metallb.io/v1beta1/servicel2statuses.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// ServiceL2StatusSpec defines the desired state of ServiceL2Status.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "metallb.io", version = "v1beta1", kind = "ServiceL2Status", plural = "servicel2statuses")]
#[kube(namespaced)]
#[kube(status = "ServiceL2StatusStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ServiceL2StatusSpec {
}

/// MetalLBServiceL2Status defines the observed state of ServiceL2Status.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ServiceL2StatusStatus {
    /// Interfaces indicates the interfaces that receive the directed traffic
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interfaces: Option<Vec<ServiceL2StatusStatusInterfaces>>,
    /// Node indicates the node that receives the directed traffic
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node: Option<String>,
    /// ServiceName indicates the service this status represents
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
    /// ServiceNamespace indicates the namespace of the service
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceNamespace")]
    pub service_namespace: Option<String>,
}

/// InterfaceInfo defines interface info of layer2 announcement.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ServiceL2StatusStatusInterfaces {
    /// Name the name of network interface card
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

