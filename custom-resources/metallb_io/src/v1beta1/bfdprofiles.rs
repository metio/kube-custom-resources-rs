// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/metallb/metallb-operator/metallb.io/v1beta1/bfdprofiles.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// BFDProfileSpec defines the desired state of BFDProfile.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "metallb.io", version = "v1beta1", kind = "BFDProfile", plural = "bfdprofiles")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct BFDProfileSpec {
    /// Configures the detection multiplier to determine
    /// packet loss. The remote transmission interval will be multiplied
    /// by this value to determine the connection loss detection timer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "detectMultiplier")]
    pub detect_multiplier: Option<i32>,
    /// Configures the minimal echo receive transmission
    /// interval that this system is capable of handling in milliseconds.
    /// Defaults to 50ms
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "echoInterval")]
    pub echo_interval: Option<i32>,
    /// Enables or disables the echo transmission mode.
    /// This mode is disabled by default, and not supported on multi
    /// hops setups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "echoMode")]
    pub echo_mode: Option<bool>,
    /// For multi hop sessions only: configure the minimum
    /// expected TTL for an incoming BFD control packet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumTtl")]
    pub minimum_ttl: Option<i32>,
    /// Mark session as passive: a passive session will not
    /// attempt to start the connection and will wait for control packets
    /// from peer before it begins replying.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passiveMode")]
    pub passive_mode: Option<bool>,
    /// The minimum interval that this system is capable of
    /// receiving control packets in milliseconds.
    /// Defaults to 300ms.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "receiveInterval")]
    pub receive_interval: Option<i32>,
    /// The minimum transmission interval (less jitter)
    /// that this system wants to use to send BFD control packets in
    /// milliseconds. Defaults to 300ms
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transmitInterval")]
    pub transmit_interval: Option<i32>,
}

/// BFDProfileStatus defines the observed state of BFDProfile.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BFDProfileStatus {
}

