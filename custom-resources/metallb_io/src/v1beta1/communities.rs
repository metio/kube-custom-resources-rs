// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/metallb/metallb-operator/metallb.io/v1beta1/communities.yaml
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// CommunitySpec defines the desired state of Community.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "metallb.io", version = "v1beta1", kind = "Community", plural = "communities")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct CommunitySpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub communities: Option<Vec<CommunityCommunities>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CommunityCommunities {
    /// The name of the alias for the community.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The BGP community value corresponding to the given name. Can be a standard community of the form 1234:1234
    /// or a large community of the form large:1234:1234:1234.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// CommunityStatus defines the observed state of Community.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct CommunityStatus {
}

