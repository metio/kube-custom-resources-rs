// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Default --derive=PartialEq --smart-derive-elision --filename crd-catalog/kubernetes-sigs/work-api/multicluster.x-k8s.io/v1alpha1/works.yaml
// kopium version: 0.22.3

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// spec defines the workload of a work.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "multicluster.x-k8s.io", version = "v1alpha1", kind = "Work", plural = "works")]
#[kube(namespaced)]
#[kube(status = "WorkStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct WorkSpec {
    /// Workload represents the manifest workload to be deployed on spoke cluster
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workload: Option<WorkWorkload>,
}

/// Workload represents the manifest workload to be deployed on spoke cluster
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct WorkWorkload {
    /// Manifests represents a list of kuberenetes resources to be deployed on the spoke cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub manifests: Option<Vec<BTreeMap<String, serde_json::Value>>>,
}

/// status defines the status of each applied manifest on the spoke cluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct WorkStatus {
    /// Conditions contains the different condition statuses for this work.
    /// Valid condition types are:
    /// 1. Applied represents workload in Work is applied successfully on the spoke cluster.
    /// 2. Progressing represents workload in Work in the trasitioning from one state to another the on the spoke cluster.
    /// 3. Available represents workload in Work exists on the spoke cluster.
    /// 4. Degraded represents the current state of workload does not match the desired
    /// state for a certain period.
    pub conditions: Vec<Condition>,
    /// ManifestConditions represents the conditions of each resource in work deployed on
    /// spoke cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manifestConditions")]
    pub manifest_conditions: Option<Vec<WorkStatusManifestConditions>>,
}

/// ManifestCondition represents the conditions of the resources deployed on
/// spoke cluster
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct WorkStatusManifestConditions {
    /// Conditions represents the conditions of this resource on spoke cluster
    pub conditions: Vec<Condition>,
    /// resourceId represents a identity of a resource linking to manifests in spec.
    pub identifier: WorkStatusManifestConditionsIdentifier,
}

/// resourceId represents a identity of a resource linking to manifests in spec.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct WorkStatusManifestConditionsIdentifier {
    /// Group is the group of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// Kind is the kind of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name is the name of the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace is the namespace of the resource, the resource is cluster scoped if the value
    /// is empty
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Ordinal represents an index in manifests list, so the condition can still be linked
    /// to a manifest even thougth manifest cannot be parsed successfully.
    pub ordinal: i64,
    /// Resource is the resource type of the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
    /// Version is the version of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

