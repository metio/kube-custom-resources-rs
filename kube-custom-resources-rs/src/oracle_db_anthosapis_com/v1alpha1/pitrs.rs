// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/GoogleCloudPlatform/elcarro-oracle-operator/oracle.db.anthosapis.com/v1alpha1/pitrs.yaml --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// PITRSpec defines the desired state of PITR
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "oracle.db.anthosapis.com", version = "v1alpha1", kind = "PITR", plural = "pitrs")]
#[kube(namespaced)]
#[kube(status = "PITRStatus")]
#[kube(schema = "disabled")]
pub struct PITRSpec {
    /// Schedule is a cron-style expression of the schedule on which Backup will be created for PITR. For allowed syntax, see en.wikipedia.org/wiki/Cron and godoc.org/github.com/robfig/cron. Default to backup every 4 hours.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupSchedule")]
    pub backup_schedule: Option<String>,
    /// Images defines PITR service agent images. This is a required map that allows a customer to specify GCR images.
    pub images: BTreeMap<String, String>,
    /// InstanceRef references to the instance that the PITR applies to.
    #[serde(rename = "instanceRef")]
    pub instance_ref: PITRInstanceRef,
    /// StorageURI is the URI to store PITR backups and redo logs. Currently only gs:// (GCS) schemes are supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageURI")]
    pub storage_uri: Option<String>,
}

/// InstanceRef references to the instance that the PITR applies to.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PITRInstanceRef {
    /// `name` is the name of a database instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PITRStatus defines the observed state of PITR
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PITRStatus {
    /// AvailableRecoveryWindowSCN represents the actual PITR recoverable SCN ranges for an instance in the current timeline/incarnation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availableRecoveryWindowSCN")]
    pub available_recovery_window_scn: Option<Vec<PITRStatusAvailableRecoveryWindowScn>>,
    /// AvailableRecoveryWindowTime represents the actual PITR recoverable time ranges for an instance in the current timeline/incarnation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availableRecoveryWindowTime")]
    pub available_recovery_window_time: Option<Vec<PITRStatusAvailableRecoveryWindowTime>>,
    /// BackupTotal stores the total number of current existing backups managed by a PITR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupTotal")]
    pub backup_total: Option<i64>,
    /// Conditions represents the latest available observations of the PITR's current state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<PITRStatusConditions>>,
    /// CurrentDatabaseIncarnation stores the current database incarnation number for the PITR enabled instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "currentDatabaseIncarnation")]
    pub current_database_incarnation: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PITRStatusAvailableRecoveryWindowScn {
    /// Begin SCN.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub begin: Option<String>,
    /// End SCN.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PITRStatusAvailableRecoveryWindowTime {
    /// Begin time.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub begin: Option<String>,
    /// End time.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<String>,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PITRStatusConditions {
    /// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// message is a human readable message indicating details about the transition. This may be an empty string.
    pub message: String,
    /// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    pub reason: String,
    /// status of the condition, one of True, False, Unknown.
    pub status: PITRStatusConditionsStatus,
    /// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PITRStatusConditionsStatus {
    True,
    False,
    Unknown,
}

