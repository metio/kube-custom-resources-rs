// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/authzed/spicedb-operator/authzed.com/v1alpha1/spicedbclusters.yaml --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// ClusterSpec holds the desired state of the cluster.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "authzed.com", version = "v1alpha1", kind = "SpiceDBCluster", plural = "spicedbclusters")]
#[kube(namespaced)]
#[kube(status = "SpiceDBClusterStatus")]
#[kube(schema = "disabled")]
pub struct SpiceDBClusterSpec {
    /// Channel is a defined series of updates that operator should follow. The operator is configured with a datasource that configures available channels and update paths. If `version` is not specified, then the operator will keep SpiceDB up-to-date with the current head of the channel. If `version` is specified, then the operator will write available updates in the status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    /// Config values to be passed to the cluster
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, serde_json::Value>>,
    /// Patches is a list of patches to apply to generated resources. If multiple patches apply to the same object and field, later patches in the list take precedence over earlier ones.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<SpiceDBClusterPatches>>,
    /// SecretName points to a secret (in the same namespace) that holds secret config for the cluster like passwords, credentials, etc. If the secret is omitted, one will be generated
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    /// Version is the name of the version of SpiceDB that will be run. The version is usually a simple version string like `v1.13.0`, but the operator is configured with a data source that tells it what versions are allowed, and they may have other names. If omitted, the newest version in the head of the channel will be used. Note that the `config.image` field will take precedence over version/channel, if it is specified
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// Patch represents a single change to apply to generated manifests
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct SpiceDBClusterPatches {
    /// Kind targets an object by its kubernetes Kind name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Patch is an inlined representation of a structured merge patch (one that just specifies the structure and fields to be modified) or a an explicit JSON6902 patch operation.
    pub patch: BTreeMap<String, serde_json::Value>,
}

/// ClusterStatus communicates the observed state of the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct SpiceDBClusterStatus {
    /// AvailableVersions is a list of versions that the currently running version can be updated to. Only applies if using an update channel.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availableVersions")]
    pub available_versions: Option<Vec<SpiceDBClusterStatusAvailableVersions>>,
    /// Conditions for the current state of the Stack.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<SpiceDBClusterStatusConditions>>,
    /// CurrentMigrationHash is a hash of the currently running migration target and config. If this is equal to TargetMigrationHash (and there are no conditions) then the datastore is fully migrated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "currentMigrationHash")]
    pub current_migration_hash: Option<String>,
    /// Image is the image that is or will be used for this cluster
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// Migration is the name of the last migration applied
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub migration: Option<String>,
    /// ObservedGeneration represents the .metadata.generation that has been seen by the controller.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// Phase is the currently running phase (used for phased migrations)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
    /// SecretHash is a digest of the last applied secret
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretHash")]
    pub secret_hash: Option<String>,
    /// TargetMigrationHash is a hash of the desired migration target and config
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetMigrationHash")]
    pub target_migration_hash: Option<String>,
    /// CurrentVersion is a description of the currently selected version from the channel, if an update channel is being used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<SpiceDBClusterStatusVersion>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct SpiceDBClusterStatusAvailableVersions {
    /// Attributes is an optional set of descriptors for the update, which carry additional information like whether there will be a migration if this version is selected.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<Vec<String>>,
    /// Channel is the name of the channel this version is in
    pub channel: String,
    /// Description a human-readable description of the update.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Name is the identifier for this version
    pub name: String,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct SpiceDBClusterStatusConditions {
    /// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// message is a human readable message indicating details about the transition. This may be an empty string.
    pub message: String,
    /// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    pub reason: String,
    /// status of the condition, one of True, False, Unknown.
    pub status: SpiceDBClusterStatusConditionsStatus,
    /// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SpiceDBClusterStatusConditionsStatus {
    True,
    False,
    Unknown,
}

/// CurrentVersion is a description of the currently selected version from the channel, if an update channel is being used.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct SpiceDBClusterStatusVersion {
    /// Attributes is an optional set of descriptors for the update, which carry additional information like whether there will be a migration if this version is selected.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<Vec<String>>,
    /// Channel is the name of the channel this version is in
    pub channel: String,
    /// Description a human-readable description of the update.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Name is the identifier for this version
    pub name: String,
}

