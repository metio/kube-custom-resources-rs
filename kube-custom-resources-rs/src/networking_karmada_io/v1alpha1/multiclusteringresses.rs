// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/karmada-io/karmada/networking.karmada.io/v1alpha1/multiclusteringresses.yaml --derive=Default --derive=PartialEq
// kopium version: 0.17.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// Spec is the desired state of the MultiClusterIngress.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "networking.karmada.io", version = "v1alpha1", kind = "MultiClusterIngress", plural = "multiclusteringresses")]
#[kube(namespaced)]
#[kube(status = "MultiClusterIngressStatus")]
#[kube(schema = "disabled")]
pub struct MultiClusterIngressSpec {
    /// defaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultBackend")]
    pub default_backend: Option<MultiClusterIngressDefaultBackend>,
    /// ingressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -> IngressClass -> Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressClassName")]
    pub ingress_class_name: Option<String>,
    /// rules is a list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rules: Option<Vec<MultiClusterIngressRules>>,
    /// tls represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<Vec<MultiClusterIngressTls>>,
}

/// defaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MultiClusterIngressDefaultBackend {
    /// resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with "Service".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<MultiClusterIngressDefaultBackendResource>,
    /// service references a service as a backend. This is a mutually exclusive setting with "Resource".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<MultiClusterIngressDefaultBackendService>,
}

/// resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with "Service".
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MultiClusterIngressDefaultBackendResource {
    /// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    /// Kind is the type of resource being referenced
    pub kind: String,
    /// Name is the name of resource being referenced
    pub name: String,
}

/// service references a service as a backend. This is a mutually exclusive setting with "Resource".
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MultiClusterIngressDefaultBackendService {
    /// name is the referenced service. The service must exist in the same namespace as the Ingress object.
    pub name: String,
    /// port of the referenced service. A port name or port number is required for a IngressServiceBackend.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<MultiClusterIngressDefaultBackendServicePort>,
}

/// port of the referenced service. A port name or port number is required for a IngressServiceBackend.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MultiClusterIngressDefaultBackendServicePort {
    /// name is the name of the port on the Service. This is a mutually exclusive setting with "Number".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with "Name".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub number: Option<i32>,
}

/// IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MultiClusterIngressRules {
    /// host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the IP in the Spec of the parent Ingress. 2. The `:` delimiter is not respected because ports are not allowed. Currently the port of an Ingress is implicitly :80 for http and :443 for https. Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue. 
    ///  host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If host is precise, the request matches this rule if the http host header is equal to Host. 2. If host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<MultiClusterIngressRulesHttp>,
}

/// HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MultiClusterIngressRulesHttp {
    /// paths is a collection of paths that map requests to backends.
    pub paths: Vec<MultiClusterIngressRulesHttpPaths>,
}

/// HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MultiClusterIngressRulesHttpPaths {
    /// backend defines the referenced service endpoint to which the traffic will be forwarded to.
    pub backend: MultiClusterIngressRulesHttpPathsBackend,
    /// path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value "Exact" or "Prefix".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is done on a path element by element basis. A path element refers is the list of labels in the path split by the '/' separator. A request is a match for path p if every p is an element-wise prefix of p of the request path. Note that if the last element of the path is a substring of the last element in request path, it is not a match (e.g. /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz). * ImplementationSpecific: Interpretation of the Path matching is up to the IngressClass. Implementations can treat this as a separate PathType or treat it identically to Prefix or Exact path types. Implementations are required to support all path types.
    #[serde(rename = "pathType")]
    pub path_type: String,
}

/// backend defines the referenced service endpoint to which the traffic will be forwarded to.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MultiClusterIngressRulesHttpPathsBackend {
    /// resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with "Service".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<MultiClusterIngressRulesHttpPathsBackendResource>,
    /// service references a service as a backend. This is a mutually exclusive setting with "Resource".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<MultiClusterIngressRulesHttpPathsBackendService>,
}

/// resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with "Service".
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MultiClusterIngressRulesHttpPathsBackendResource {
    /// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    /// Kind is the type of resource being referenced
    pub kind: String,
    /// Name is the name of resource being referenced
    pub name: String,
}

/// service references a service as a backend. This is a mutually exclusive setting with "Resource".
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MultiClusterIngressRulesHttpPathsBackendService {
    /// name is the referenced service. The service must exist in the same namespace as the Ingress object.
    pub name: String,
    /// port of the referenced service. A port name or port number is required for a IngressServiceBackend.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<MultiClusterIngressRulesHttpPathsBackendServicePort>,
}

/// port of the referenced service. A port name or port number is required for a IngressServiceBackend.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MultiClusterIngressRulesHttpPathsBackendServicePort {
    /// name is the name of the port on the Service. This is a mutually exclusive setting with "Number".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with "Name".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub number: Option<i32>,
}

/// IngressTLS describes the transport layer security associated with an ingress.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MultiClusterIngressTls {
    /// hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosts: Option<Vec<String>>,
    /// secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the "Host" header is used for routing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// Status is the current state of the MultiClusterIngress.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MultiClusterIngressStatus {
    /// loadBalancer contains the current status of the load-balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancer")]
    pub load_balancer: Option<MultiClusterIngressStatusLoadBalancer>,
    /// ServiceLocations records the locations of MulticlusterIngress's backend Service resources. It will be set by the system controller.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceLocations")]
    pub service_locations: Option<Vec<MultiClusterIngressStatusServiceLocations>>,
    /// TrafficBlockClusters records the cluster name list that needs to perform traffic block. When the cloud provider implements its multicluster-cloud-provider and refreshes the service backend address to the LoadBalancer Service, it needs to filter out the backend addresses in these clusters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trafficBlockClusters")]
    pub traffic_block_clusters: Option<Vec<String>>,
}

/// loadBalancer contains the current status of the load-balancer.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MultiClusterIngressStatusLoadBalancer {
    /// ingress is a list containing ingress points for the load-balancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingress: Option<Vec<MultiClusterIngressStatusLoadBalancerIngress>>,
}

/// IngressLoadBalancerIngress represents the status of a load-balancer ingress point.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MultiClusterIngressStatusLoadBalancerIngress {
    /// hostname is set for load-balancer ingress points that are DNS based.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// ip is set for load-balancer ingress points that are IP based.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ip: Option<String>,
    /// ports provides information about the ports exposed by this LoadBalancer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<MultiClusterIngressStatusLoadBalancerIngressPorts>>,
}

/// IngressPortStatus represents the error condition of a service port
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MultiClusterIngressStatusLoadBalancerIngressPorts {
    /// error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use CamelCase names - cloud provider specific error values must have names that comply with the format foo.example.com/CamelCase. --- The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// port is the port number of the ingress port.
    pub port: i32,
    /// protocol is the protocol of the ingress port. The supported values are: "TCP", "UDP", "SCTP"
    pub protocol: String,
}

/// ServiceLocation records the locations of MulticlusterIngress's backend Service resources.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct MultiClusterIngressStatusServiceLocations {
    /// Clusters records the cluster list where the Service is located.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<Vec<String>>,
    /// name is the referenced service. The service must exist in the same namespace as the MultiClusterService object.
    pub name: String,
}

