// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/aws-controllers-k8s/sagemaker-controller/sagemaker.services.k8s.aws/v1alpha1/modelpackages.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// ModelPackageSpec defines the desired state of ModelPackage.
/// 
/// 
/// A versioned model that can be deployed for SageMaker inference.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "sagemaker.services.k8s.aws", version = "v1alpha1", kind = "ModelPackage", plural = "modelpackages")]
#[kube(namespaced)]
#[kube(status = "ModelPackageStatus")]
#[kube(schema = "disabled")]
pub struct ModelPackageSpec {
    /// An array of additional Inference Specification objects. Each additional Inference
    /// Specification specifies artifacts based on this model package that can be
    /// used on inference endpoints. Generally used with SageMaker Neo to store the
    /// compiled artifacts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalInferenceSpecifications")]
    pub additional_inference_specifications: Option<Vec<ModelPackageAdditionalInferenceSpecifications>>,
    /// A description for the approval status of the model.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "approvalDescription")]
    pub approval_description: Option<String>,
    /// Whether to certify the model package for listing on Amazon Web Services Marketplace.
    /// 
    /// 
    /// This parameter is optional for unversioned models, and does not apply to
    /// versioned models.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certifyForMarketplace")]
    pub certify_for_marketplace: Option<bool>,
    /// A unique token that guarantees that the call to this API is idempotent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientToken")]
    pub client_token: Option<String>,
    /// The metadata properties associated with the model package versions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerMetadataProperties")]
    pub customer_metadata_properties: Option<BTreeMap<String, String>>,
    /// The machine learning domain of your model package and its components. Common
    /// machine learning domains include computer vision and natural language processing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    /// Represents the drift check baselines that can be used when the model monitor
    /// is set using the model package. For more information, see the topic on Drift
    /// Detection against Previous Baselines in SageMaker Pipelines (https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-quality-clarify-baseline-lifecycle.html#pipelines-quality-clarify-baseline-drift-detection)
    /// in the Amazon SageMaker Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "driftCheckBaselines")]
    pub drift_check_baselines: Option<ModelPackageDriftCheckBaselines>,
    /// Specifies details about inference jobs that can be run with models based
    /// on this model package, including the following:
    /// 
    /// 
    ///    * The Amazon ECR paths of containers that contain the inference code and
    ///    model artifacts.
    /// 
    /// 
    ///    * The instance types that the model package supports for transform jobs
    ///    and real-time endpoints used for inference.
    /// 
    /// 
    ///    * The input and output content formats that the model package supports
    ///    for inference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inferenceSpecification")]
    pub inference_specification: Option<ModelPackageInferenceSpecification>,
    /// Metadata properties of the tracking entity, trial, or trial component.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataProperties")]
    pub metadata_properties: Option<ModelPackageMetadataProperties>,
    /// Whether the model is approved for deployment.
    /// 
    /// 
    /// This parameter is optional for versioned models, and does not apply to unversioned
    /// models.
    /// 
    /// 
    /// For versioned models, the value of this parameter must be set to Approved
    /// to deploy the model.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelApprovalStatus")]
    pub model_approval_status: Option<String>,
    /// A structure that contains model metrics reports.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelMetrics")]
    pub model_metrics: Option<ModelPackageModelMetrics>,
    /// A description of the model package.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelPackageDescription")]
    pub model_package_description: Option<String>,
    /// The name or Amazon Resource Name (ARN) of the model package group that this
    /// model version belongs to.
    /// 
    /// 
    /// This parameter is required for versioned models, and does not apply to unversioned
    /// models.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelPackageGroupName")]
    pub model_package_group_name: Option<String>,
    /// The name of the model package. The name must have 1 to 63 characters. Valid
    /// characters are a-z, A-Z, 0-9, and - (hyphen).
    /// 
    /// 
    /// This parameter is required for unversioned models. It is not applicable to
    /// versioned models.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelPackageName")]
    pub model_package_name: Option<String>,
    /// The Amazon Simple Storage Service (Amazon S3) path where the sample payload
    /// is stored. This path must point to a single gzip compressed tar archive (.tar.gz
    /// suffix). This archive can hold multiple files that are all equally used in
    /// the load test. Each file in the archive must satisfy the size constraints
    /// of the InvokeEndpoint (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_runtime_InvokeEndpoint.html#API_runtime_InvokeEndpoint_RequestSyntax)
    /// call.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "samplePayloadURL")]
    pub sample_payload_url: Option<String>,
    /// Details about the algorithm that was used to create the model package.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceAlgorithmSpecification")]
    pub source_algorithm_specification: Option<ModelPackageSourceAlgorithmSpecification>,
    /// A list of key value pairs associated with the model. For more information,
    /// see Tagging Amazon Web Services resources (https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html)
    /// in the Amazon Web Services General Reference Guide.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<ModelPackageTags>>,
    /// The machine learning task your model package accomplishes. Common machine
    /// learning tasks include object detection and image classification. The following
    /// tasks are supported by Inference Recommender: "IMAGE_CLASSIFICATION" | "OBJECT_DETECTION"
    /// | "TEXT_GENERATION" |"IMAGE_SEGMENTATION" | "FILL_MASK" | "CLASSIFICATION"
    /// | "REGRESSION" | "OTHER".
    /// 
    /// 
    /// Specify "OTHER" if none of the tasks listed fit your use case.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub task: Option<String>,
    /// Specifies configurations for one or more transform jobs that SageMaker runs
    /// to test the model package.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationSpecification")]
    pub validation_specification: Option<ModelPackageValidationSpecification>,
}

/// A structure of additional Inference Specification. Additional Inference Specification
/// specifies details about inference jobs that can be run with models based
/// on this model package
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageAdditionalInferenceSpecifications {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<ModelPackageAdditionalInferenceSpecificationsContainers>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supportedContentTypes")]
    pub supported_content_types: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supportedRealtimeInferenceInstanceTypes")]
    pub supported_realtime_inference_instance_types: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supportedResponseMIMETypes")]
    pub supported_response_mime_types: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supportedTransformInstanceTypes")]
    pub supported_transform_instance_types: Option<Vec<String>>,
}

/// Describes the Docker container for the model package.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageAdditionalInferenceSpecificationsContainers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerHostname")]
    pub container_hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub framework: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frameworkVersion")]
    pub framework_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelDataURL")]
    pub model_data_url: Option<String>,
    /// Input object for the model.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelInput")]
    pub model_input: Option<ModelPackageAdditionalInferenceSpecificationsContainersModelInput>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nearestModelName")]
    pub nearest_model_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "productID")]
    pub product_id: Option<String>,
}

/// Input object for the model.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageAdditionalInferenceSpecificationsContainersModelInput {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataInputConfig")]
    pub data_input_config: Option<String>,
}

/// Represents the drift check baselines that can be used when the model monitor
/// is set using the model package. For more information, see the topic on Drift
/// Detection against Previous Baselines in SageMaker Pipelines (https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-quality-clarify-baseline-lifecycle.html#pipelines-quality-clarify-baseline-drift-detection)
/// in the Amazon SageMaker Developer Guide.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageDriftCheckBaselines {
    /// Represents the drift check bias baselines that can be used when the model
    /// monitor is set using the model package.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bias: Option<ModelPackageDriftCheckBaselinesBias>,
    /// Represents the drift check explainability baselines that can be used when
    /// the model monitor is set using the model package.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub explainability: Option<ModelPackageDriftCheckBaselinesExplainability>,
    /// Represents the drift check data quality baselines that can be used when the
    /// model monitor is set using the model package.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelDataQuality")]
    pub model_data_quality: Option<ModelPackageDriftCheckBaselinesModelDataQuality>,
    /// Represents the drift check model quality baselines that can be used when
    /// the model monitor is set using the model package.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelQuality")]
    pub model_quality: Option<ModelPackageDriftCheckBaselinesModelQuality>,
}

/// Represents the drift check bias baselines that can be used when the model
/// monitor is set using the model package.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageDriftCheckBaselinesBias {
    /// Contains details regarding the file source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configFile")]
    pub config_file: Option<ModelPackageDriftCheckBaselinesBiasConfigFile>,
    /// Details about the metrics source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postTrainingConstraints")]
    pub post_training_constraints: Option<ModelPackageDriftCheckBaselinesBiasPostTrainingConstraints>,
    /// Details about the metrics source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preTrainingConstraints")]
    pub pre_training_constraints: Option<ModelPackageDriftCheckBaselinesBiasPreTrainingConstraints>,
}

/// Contains details regarding the file source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageDriftCheckBaselinesBiasConfigFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDigest")]
    pub content_digest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3URI")]
    pub s3_uri: Option<String>,
}

/// Details about the metrics source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageDriftCheckBaselinesBiasPostTrainingConstraints {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDigest")]
    pub content_digest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3URI")]
    pub s3_uri: Option<String>,
}

/// Details about the metrics source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageDriftCheckBaselinesBiasPreTrainingConstraints {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDigest")]
    pub content_digest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3URI")]
    pub s3_uri: Option<String>,
}

/// Represents the drift check explainability baselines that can be used when
/// the model monitor is set using the model package.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageDriftCheckBaselinesExplainability {
    /// Contains details regarding the file source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configFile")]
    pub config_file: Option<ModelPackageDriftCheckBaselinesExplainabilityConfigFile>,
    /// Details about the metrics source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub constraints: Option<ModelPackageDriftCheckBaselinesExplainabilityConstraints>,
}

/// Contains details regarding the file source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageDriftCheckBaselinesExplainabilityConfigFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDigest")]
    pub content_digest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3URI")]
    pub s3_uri: Option<String>,
}

/// Details about the metrics source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageDriftCheckBaselinesExplainabilityConstraints {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDigest")]
    pub content_digest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3URI")]
    pub s3_uri: Option<String>,
}

/// Represents the drift check data quality baselines that can be used when the
/// model monitor is set using the model package.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageDriftCheckBaselinesModelDataQuality {
    /// Details about the metrics source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub constraints: Option<ModelPackageDriftCheckBaselinesModelDataQualityConstraints>,
    /// Details about the metrics source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statistics: Option<ModelPackageDriftCheckBaselinesModelDataQualityStatistics>,
}

/// Details about the metrics source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageDriftCheckBaselinesModelDataQualityConstraints {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDigest")]
    pub content_digest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3URI")]
    pub s3_uri: Option<String>,
}

/// Details about the metrics source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageDriftCheckBaselinesModelDataQualityStatistics {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDigest")]
    pub content_digest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3URI")]
    pub s3_uri: Option<String>,
}

/// Represents the drift check model quality baselines that can be used when
/// the model monitor is set using the model package.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageDriftCheckBaselinesModelQuality {
    /// Details about the metrics source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub constraints: Option<ModelPackageDriftCheckBaselinesModelQualityConstraints>,
    /// Details about the metrics source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statistics: Option<ModelPackageDriftCheckBaselinesModelQualityStatistics>,
}

/// Details about the metrics source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageDriftCheckBaselinesModelQualityConstraints {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDigest")]
    pub content_digest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3URI")]
    pub s3_uri: Option<String>,
}

/// Details about the metrics source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageDriftCheckBaselinesModelQualityStatistics {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDigest")]
    pub content_digest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3URI")]
    pub s3_uri: Option<String>,
}

/// Specifies details about inference jobs that can be run with models based
/// on this model package, including the following:
/// 
/// 
///    * The Amazon ECR paths of containers that contain the inference code and
///    model artifacts.
/// 
/// 
///    * The instance types that the model package supports for transform jobs
///    and real-time endpoints used for inference.
/// 
/// 
///    * The input and output content formats that the model package supports
///    for inference.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageInferenceSpecification {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<ModelPackageInferenceSpecificationContainers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supportedContentTypes")]
    pub supported_content_types: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supportedRealtimeInferenceInstanceTypes")]
    pub supported_realtime_inference_instance_types: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supportedResponseMIMETypes")]
    pub supported_response_mime_types: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supportedTransformInstanceTypes")]
    pub supported_transform_instance_types: Option<Vec<String>>,
}

/// Describes the Docker container for the model package.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageInferenceSpecificationContainers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerHostname")]
    pub container_hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub framework: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "frameworkVersion")]
    pub framework_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageDigest")]
    pub image_digest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelDataURL")]
    pub model_data_url: Option<String>,
    /// Input object for the model.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelInput")]
    pub model_input: Option<ModelPackageInferenceSpecificationContainersModelInput>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nearestModelName")]
    pub nearest_model_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "productID")]
    pub product_id: Option<String>,
}

/// Input object for the model.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageInferenceSpecificationContainersModelInput {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataInputConfig")]
    pub data_input_config: Option<String>,
}

/// Metadata properties of the tracking entity, trial, or trial component.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageMetadataProperties {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commitID")]
    pub commit_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generatedBy")]
    pub generated_by: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectID")]
    pub project_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
}

/// A structure that contains model metrics reports.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageModelMetrics {
    /// Contains bias metrics for a model.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bias: Option<ModelPackageModelMetricsBias>,
    /// Contains explainability metrics for a model.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub explainability: Option<ModelPackageModelMetricsExplainability>,
    /// Data quality constraints and statistics for a model.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelDataQuality")]
    pub model_data_quality: Option<ModelPackageModelMetricsModelDataQuality>,
    /// Model quality statistics and constraints.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelQuality")]
    pub model_quality: Option<ModelPackageModelMetricsModelQuality>,
}

/// Contains bias metrics for a model.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageModelMetricsBias {
    /// Details about the metrics source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postTrainingReport")]
    pub post_training_report: Option<ModelPackageModelMetricsBiasPostTrainingReport>,
    /// Details about the metrics source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preTrainingReport")]
    pub pre_training_report: Option<ModelPackageModelMetricsBiasPreTrainingReport>,
    /// Details about the metrics source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub report: Option<ModelPackageModelMetricsBiasReport>,
}

/// Details about the metrics source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageModelMetricsBiasPostTrainingReport {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDigest")]
    pub content_digest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3URI")]
    pub s3_uri: Option<String>,
}

/// Details about the metrics source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageModelMetricsBiasPreTrainingReport {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDigest")]
    pub content_digest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3URI")]
    pub s3_uri: Option<String>,
}

/// Details about the metrics source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageModelMetricsBiasReport {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDigest")]
    pub content_digest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3URI")]
    pub s3_uri: Option<String>,
}

/// Contains explainability metrics for a model.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageModelMetricsExplainability {
    /// Details about the metrics source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub report: Option<ModelPackageModelMetricsExplainabilityReport>,
}

/// Details about the metrics source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageModelMetricsExplainabilityReport {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDigest")]
    pub content_digest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3URI")]
    pub s3_uri: Option<String>,
}

/// Data quality constraints and statistics for a model.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageModelMetricsModelDataQuality {
    /// Details about the metrics source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub constraints: Option<ModelPackageModelMetricsModelDataQualityConstraints>,
    /// Details about the metrics source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statistics: Option<ModelPackageModelMetricsModelDataQualityStatistics>,
}

/// Details about the metrics source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageModelMetricsModelDataQualityConstraints {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDigest")]
    pub content_digest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3URI")]
    pub s3_uri: Option<String>,
}

/// Details about the metrics source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageModelMetricsModelDataQualityStatistics {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDigest")]
    pub content_digest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3URI")]
    pub s3_uri: Option<String>,
}

/// Model quality statistics and constraints.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageModelMetricsModelQuality {
    /// Details about the metrics source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub constraints: Option<ModelPackageModelMetricsModelQualityConstraints>,
    /// Details about the metrics source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statistics: Option<ModelPackageModelMetricsModelQualityStatistics>,
}

/// Details about the metrics source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageModelMetricsModelQualityConstraints {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDigest")]
    pub content_digest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3URI")]
    pub s3_uri: Option<String>,
}

/// Details about the metrics source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageModelMetricsModelQualityStatistics {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentDigest")]
    pub content_digest: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3URI")]
    pub s3_uri: Option<String>,
}

/// Details about the algorithm that was used to create the model package.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageSourceAlgorithmSpecification {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceAlgorithms")]
    pub source_algorithms: Option<Vec<ModelPackageSourceAlgorithmSpecificationSourceAlgorithms>>,
}

/// Specifies an algorithm that was used to create the model package. The algorithm
/// must be either an algorithm resource in your SageMaker account or an algorithm
/// in Amazon Web Services Marketplace that you are subscribed to.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageSourceAlgorithmSpecificationSourceAlgorithms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "algorithmName")]
    pub algorithm_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelDataURL")]
    pub model_data_url: Option<String>,
}

/// A tag object that consists of a key and an optional value, used to manage
/// metadata for SageMaker Amazon Web Services resources.
/// 
/// 
/// You can add tags to notebook instances, training jobs, hyperparameter tuning
/// jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations,
/// and endpoints. For more information on adding tags to SageMaker resources,
/// see AddTags.
/// 
/// 
/// For more information on adding metadata to your Amazon Web Services resources
/// with tagging, see Tagging Amazon Web Services resources (https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
/// For advice on best practices for managing Amazon Web Services resources with
/// tagging, see Tagging Best Practices: Implement an Effective Amazon Web Services
/// Resource Tagging Strategy (https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageTags {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Specifies configurations for one or more transform jobs that SageMaker runs
/// to test the model package.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageValidationSpecification {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationProfiles")]
    pub validation_profiles: Option<Vec<ModelPackageValidationSpecificationValidationProfiles>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationRole")]
    pub validation_role: Option<String>,
}

/// Contains data, such as the inputs and targeted instance types that are used
/// in the process of validating the model package.
/// 
/// 
/// The data provided in the validation profile is made available to your buyers
/// on Amazon Web Services Marketplace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageValidationSpecificationValidationProfiles {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "profileName")]
    pub profile_name: Option<String>,
    /// Defines the input needed to run a transform job using the inference specification
    /// specified in the algorithm.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformJobDefinition")]
    pub transform_job_definition: Option<ModelPackageValidationSpecificationValidationProfilesTransformJobDefinition>,
}

/// Defines the input needed to run a transform job using the inference specification
/// specified in the algorithm.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageValidationSpecificationValidationProfilesTransformJobDefinition {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batchStrategy")]
    pub batch_strategy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentTransforms")]
    pub max_concurrent_transforms: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPayloadInMB")]
    pub max_payload_in_mb: Option<i64>,
    /// Describes the input source of a transform job and the way the transform job
    /// consumes it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformInput")]
    pub transform_input: Option<ModelPackageValidationSpecificationValidationProfilesTransformJobDefinitionTransformInput>,
    /// Describes the results of a transform job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformOutput")]
    pub transform_output: Option<ModelPackageValidationSpecificationValidationProfilesTransformJobDefinitionTransformOutput>,
    /// Describes the resources, including ML instance types and ML instance count,
    /// to use for transform job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transformResources")]
    pub transform_resources: Option<ModelPackageValidationSpecificationValidationProfilesTransformJobDefinitionTransformResources>,
}

/// Describes the input source of a transform job and the way the transform job
/// consumes it.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageValidationSpecificationValidationProfilesTransformJobDefinitionTransformInput {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionType")]
    pub compression_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    /// Describes the location of the channel data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSource")]
    pub data_source: Option<ModelPackageValidationSpecificationValidationProfilesTransformJobDefinitionTransformInputDataSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "splitType")]
    pub split_type: Option<String>,
}

/// Describes the location of the channel data.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageValidationSpecificationValidationProfilesTransformJobDefinitionTransformInputDataSource {
    /// Describes the S3 data source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3DataSource")]
    pub s3_data_source: Option<ModelPackageValidationSpecificationValidationProfilesTransformJobDefinitionTransformInputDataSourceS3DataSource>,
}

/// Describes the S3 data source.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageValidationSpecificationValidationProfilesTransformJobDefinitionTransformInputDataSourceS3DataSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3DataType")]
    pub s3_data_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3URI")]
    pub s3_uri: Option<String>,
}

/// Describes the results of a transform job.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageValidationSpecificationValidationProfilesTransformJobDefinitionTransformOutput {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub accept: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "assembleWith")]
    pub assemble_with: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyID")]
    pub kms_key_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3OutputPath")]
    pub s3_output_path: Option<String>,
}

/// Describes the resources, including ML instance types and ML instance count,
/// to use for transform job.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageValidationSpecificationValidationProfilesTransformJobDefinitionTransformResources {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceCount")]
    pub instance_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    pub instance_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeKMSKeyID")]
    pub volume_kms_key_id: Option<String>,
}

/// ModelPackageStatus defines the observed state of ModelPackage
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageStatus {
    /// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
    /// that is used to contain resource sync state, account ownership,
    /// constructed ARN for the resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ackResourceMetadata")]
    pub ack_resource_metadata: Option<ModelPackageStatusAckResourceMetadata>,
    /// All CRS managed by ACK have a common `Status.Conditions` member that
    /// contains a collection of `ackv1alpha1.Condition` objects that describe
    /// the various terminal states of the CR and its backend AWS service API
    /// resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<ModelPackageStatusConditions>>,
    /// A timestamp specifying when the model package was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creationTime")]
    pub creation_time: Option<String>,
    /// The last time that the model package was modified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastModifiedTime")]
    pub last_modified_time: Option<String>,
    /// The current status of the model package.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelPackageStatus")]
    pub model_package_status: Option<String>,
    /// Details about the current status of the model package.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modelPackageStatusDetails")]
    pub model_package_status_details: Option<ModelPackageStatusModelPackageStatusDetails>,
}

/// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
/// that is used to contain resource sync state, account ownership,
/// constructed ARN for the resource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageStatusAckResourceMetadata {
    /// ARN is the Amazon Resource Name for the resource. This is a
    /// globally-unique identifier and is set only by the ACK service controller
    /// once the controller has orchestrated the creation of the resource OR
    /// when it has verified that an "adopted" resource (a resource where the
    /// ARN annotation was set by the Kubernetes user on the CR) exists and
    /// matches the supplied CR's Spec field values.
    /// TODO(vijat@): Find a better strategy for resources that do not have ARN in CreateOutputResponse
    /// https://github.com/aws/aws-controllers-k8s/issues/270
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// OwnerAccountID is the AWS Account ID of the account that owns the
    /// backend AWS service API resource.
    #[serde(rename = "ownerAccountID")]
    pub owner_account_id: String,
    /// Region is the AWS region in which the resource exists or will exist.
    pub region: String,
}

/// Condition is the common struct used by all CRDs managed by ACK service
/// controllers to indicate terminal states  of the CR and its backend AWS
/// service API resource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageStatusConditions {
    /// Last time the condition transitioned from one status to another.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    /// A human readable message indicating details about the transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// The reason for the condition's last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Status of the condition, one of True, False, Unknown.
    pub status: String,
    /// Type is the type of the Condition
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Details about the current status of the model package.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageStatusModelPackageStatusDetails {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageScanStatuses")]
    pub image_scan_statuses: Option<Vec<ModelPackageStatusModelPackageStatusDetailsImageScanStatuses>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validationStatuses")]
    pub validation_statuses: Option<Vec<ModelPackageStatusModelPackageStatusDetailsValidationStatuses>>,
}

/// Represents the overall status of a model package.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageStatusModelPackageStatusDetailsImageScanStatuses {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureReason")]
    pub failure_reason: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Represents the overall status of a model package.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ModelPackageStatusModelPackageStatusDetailsValidationStatuses {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureReason")]
    pub failure_reason: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

