// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/gravitational/teleport/resources.teleport.dev/v2/teleportusers.yaml --derive=PartialEq
// kopium version: 0.17.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// User resource definition v2 from Teleport
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "resources.teleport.dev", version = "v2", kind = "TeleportUser", plural = "teleportusers")]
#[kube(namespaced)]
#[kube(status = "TeleportUserStatus")]
#[kube(schema = "disabled")]
pub struct TeleportUserSpec {
    /// GithubIdentities list associated Github OAuth2 identities that let user log in using externally verified identity
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub github_identities: Option<Vec<TeleportUserGithubIdentities>>,
    /// OIDCIdentities lists associated OpenID Connect identities that let user log in using externally verified identity
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oidc_identities: Option<Vec<TeleportUserOidcIdentities>>,
    /// Roles is a list of roles assigned to user
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    /// SAMLIdentities lists associated SAML identities that let user log in using externally verified identity
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub saml_identities: Option<Vec<TeleportUserSamlIdentities>>,
    /// Traits are key/value pairs received from an identity provider (through OIDC claims or SAML assertions) or from a system administrator for local accounts. Traits are used to populate role variables.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub traits: Option<BTreeMap<String, String>>,
    /// TrustedDeviceIDs contains the IDs of trusted devices enrolled by the user. Managed by the Device Trust subsystem, avoid manual edits.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub trusted_device_ids: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TeleportUserGithubIdentities {
    /// ConnectorID is id of registered OIDC connector, e.g. 'google-example.com'
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connector_id: Option<String>,
    /// Username is username supplied by external identity provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TeleportUserOidcIdentities {
    /// ConnectorID is id of registered OIDC connector, e.g. 'google-example.com'
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connector_id: Option<String>,
    /// Username is username supplied by external identity provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TeleportUserSamlIdentities {
    /// ConnectorID is id of registered OIDC connector, e.g. 'google-example.com'
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connector_id: Option<String>,
    /// Username is username supplied by external identity provider
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// Status defines the observed state of the Teleport resource
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TeleportUserStatus {
    /// Conditions represent the latest available observations of an object's state
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "teleportResourceID")]
    pub teleport_resource_id: Option<i64>,
}

