// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --derive Default --derive PartialEq --docs --filename ./crd-catalog/kubernetes-sigs/hierarchical-namespaces/hnc.x-k8s.io/v1alpha2/hncconfigurations.yaml
// kopium version: 0.16.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// HNCConfigurationSpec defines the desired state of HNC configuration.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "hnc.x-k8s.io", version = "v1alpha2", kind = "HNCConfiguration", plural = "hncconfigurations")]
#[kube(schema = "disabled")]
pub struct HNCConfigurationSpec {
    /// Resources defines the cluster-wide settings for resource synchronization. Note that 'roles' and 'rolebindings' are pre-configured by HNC with 'Propagate' mode and are omitted in the spec. Any configuration of 'roles' or 'rolebindings' are not allowed. To learn more, see https://github.com/kubernetes-sigs/hierarchical-namespaces/blob/master/docs/user-guide/how-to.md#admin-types
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<HNCConfigurationResources>>,
}

/// ResourceSpec defines the desired synchronization state of a specific resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HNCConfigurationResources {
    /// Group of the resource defined below. This is used to unambiguously identify the resource. It may be omitted for core resources (e.g. "secrets").
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// Synchronization mode of the kind. If the field is empty, it will be treated as "Propagate".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<HNCConfigurationResourcesMode>,
    /// Resource to be configured.
    pub resource: String,
}

/// ResourceSpec defines the desired synchronization state of a specific resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum HNCConfigurationResourcesMode {
    Propagate,
    Ignore,
    Remove,
    AllowPropagate,
}

/// HNCConfigurationStatus defines the observed state of HNC configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HNCConfigurationStatus {
    /// Conditions describes the errors, if any. If there are any conditions with "ActivitiesHalted" reason, this means that HNC cannot function in the affected namespaces. The HierarchyConfiguration object in each of the affected namespaces will have more information. To learn more about conditions, see https://github.com/kubernetes-sigs/hierarchical-namespaces/blob/master/docs/user-guide/concepts.md#admin-conditions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<HNCConfigurationStatusConditions>>,
    /// Resources indicates the observed synchronization states of the resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<HNCConfigurationStatusResources>>,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HNCConfigurationStatusConditions {
    /// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// message is a human readable message indicating details about the transition. This may be an empty string.
    pub message: String,
    /// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    pub reason: String,
    /// status of the condition, one of True, False, Unknown.
    pub status: HNCConfigurationStatusConditionsStatus,
    /// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum HNCConfigurationStatusConditionsStatus {
    True,
    False,
    Unknown,
}

/// ResourceStatus defines the actual synchronization state of a specific resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HNCConfigurationStatusResources {
    /// The API group of the resource being synchronized.
    pub group: String,
    /// Mode describes the synchronization mode of the kind. Typically, it will be the same as the mode in the spec, except when the reconciler has fallen behind or for resources with an enforced default synchronization mode, such as RBAC objects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// Tracks the number of objects that are being propagated to descendant namespaces. The propagated objects are created by HNC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numPropagatedObjects")]
    pub num_propagated_objects: Option<i64>,
    /// Tracks the number of objects that are created by users.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numSourceObjects")]
    pub num_source_objects: Option<i64>,
    /// The resource being synchronized.
    pub resource: String,
    /// The API version used by HNC when propagating this resource.
    pub version: String,
}

