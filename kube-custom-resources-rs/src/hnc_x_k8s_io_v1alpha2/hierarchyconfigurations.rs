// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kubernetes-sigs/hierarchical-namespaces/hnc.x-k8s.io/v1alpha2/hierarchyconfigurations.yaml --derive=PartialEq
// kopium version: 0.16.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// HierarchySpec defines the desired state of Hierarchy
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "hnc.x-k8s.io", version = "v1alpha2", kind = "HierarchyConfiguration", plural = "hierarchyconfigurations")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
pub struct HierarchyConfigurationSpec {
    /// AllowCascadingDeletion indicates if the subnamespaces of this namespace are allowed to cascading delete.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowCascadingDeletion")]
    pub allow_cascading_deletion: Option<bool>,
    /// Annotations is a list of annotations and values to apply to the current namespace and all of its descendants. All annotation keys must match a regex specified on the command line by --managed-namespace-annotation. A namespace cannot have a KVP that conflicts with one of its ancestors.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<Vec<HierarchyConfigurationAnnotations>>,
    /// Lables is a list of labels and values to apply to the current namespace and all of its descendants. All label keys must match a regex specified on the command line by --managed-namespace-label. A namespace cannot have a KVP that conflicts with one of its ancestors.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<HierarchyConfigurationLabels>>,
    /// Parent indicates the parent of this namespace, if any.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<String>,
}

/// MetaKVP represents a label or annotation
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct HierarchyConfigurationAnnotations {
    /// Key is the name of the label or annotation. It must conform to the normal rules for Kubernetes label/annotation keys.
    pub key: String,
    /// Value is the value of the label or annotation. It must confirm to the normal rules for Kubernetes label or annoation values, which are far more restrictive for labels than for anntations.
    pub value: String,
}

/// MetaKVP represents a label or annotation
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct HierarchyConfigurationLabels {
    /// Key is the name of the label or annotation. It must conform to the normal rules for Kubernetes label/annotation keys.
    pub key: String,
    /// Value is the value of the label or annotation. It must confirm to the normal rules for Kubernetes label or annoation values, which are far more restrictive for labels than for anntations.
    pub value: String,
}

/// HierarchyStatus defines the observed state of Hierarchy
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct HierarchyConfigurationStatus {
    /// Children indicates the direct children of this namespace, if any.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub children: Option<Vec<String>>,
    /// Conditions describes the errors, if any.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<HierarchyConfigurationStatusConditions>>,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct HierarchyConfigurationStatusConditions {
    /// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// message is a human readable message indicating details about the transition. This may be an empty string.
    pub message: String,
    /// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    pub reason: String,
    /// status of the condition, one of True, False, Unknown.
    pub status: HierarchyConfigurationStatusConditionsStatus,
    /// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum HierarchyConfigurationStatusConditionsStatus {
    True,
    False,
    Unknown,
}

