// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kubewharf/kubeadmiral/core.kubeadmiral.io/v1alpha1/clusteroverridepolicies.yaml --derive=PartialEq
// kopium version: 0.17.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use std::collections::HashMap;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "core.kubeadmiral.io", version = "v1alpha1", kind = "ClusterOverridePolicy", plural = "clusteroverridepolicies")]
#[kube(status = "ClusterOverridePolicyStatus")]
#[kube(schema = "disabled")]
pub struct ClusterOverridePolicySpec {
    /// OverrideRules specify the override rules. Each rule specifies the overriders and the clusters these overriders should be applied to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overrideRules")]
    pub override_rules: Option<Vec<ClusterOverridePolicyOverrideRules>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterOverridePolicyOverrideRules {
    /// Overriders specify the overriders to be applied in the target clusters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overriders: Option<ClusterOverridePolicyOverrideRulesOverriders>,
    /// TargetClusters selects the clusters in which the overriders in this rule should be applied. If multiple types of selectors are specified, the overall result is the intersection of all of them.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetClusters")]
    pub target_clusters: Option<ClusterOverridePolicyOverrideRulesTargetClusters>,
}

/// Overriders specify the overriders to be applied in the target clusters.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterOverridePolicyOverrideRulesOverriders {
    /// Annotation specifies overriders that apply to the resource annotations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<Vec<ClusterOverridePolicyOverrideRulesOverridersAnnotations>>,
    /// Args specifies overriders that apply to the container arguments.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<ClusterOverridePolicyOverrideRulesOverridersArgs>>,
    /// Command specifies overriders that apply to the container commands.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<ClusterOverridePolicyOverrideRulesOverridersCommand>>,
    /// Image specifies the overriders that apply to the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<Vec<ClusterOverridePolicyOverrideRulesOverridersImage>>,
    /// JsonPatch specifies overriders in a syntax similar to RFC6902 JSON Patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonpatch: Option<Vec<ClusterOverridePolicyOverrideRulesOverridersJsonpatch>>,
    /// Label specifies overriders that apply to the resource labels.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<ClusterOverridePolicyOverrideRulesOverridersLabels>>,
}

/// StringMapOverrider represents the rules dedicated to handling resource labels/annotations
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterOverridePolicyOverrideRulesOverridersAnnotations {
    /// Operator specifies the operation. If omitted, defaults to "overwrite".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<ClusterOverridePolicyOverrideRulesOverridersAnnotationsOperator>,
    /// Value is the value(s) that will be applied to annotations/labels of resource. If Operator is 'addIfAbsent', items in Value (empty is not allowed) will be added in annotations/labels. - For 'addIfAbsent' Operator, the keys in Value cannot conflict with annotations/labels. If Operator is 'overwrite', items in Value which match in annotations/labels will be replaced. If Operator is 'delete', items in Value which match in annotations/labels will be deleted.
    pub value: BTreeMap<String, String>,
}

/// StringMapOverrider represents the rules dedicated to handling resource labels/annotations
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOverridePolicyOverrideRulesOverridersAnnotationsOperator {
    #[serde(rename = "addIfAbsent")]
    AddIfAbsent,
    #[serde(rename = "overwrite")]
    Overwrite,
    #[serde(rename = "delete")]
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterOverridePolicyOverrideRulesOverridersArgs {
    /// ContainerName targets the specified container or init container in the pod template.
    #[serde(rename = "containerName")]
    pub container_name: String,
    /// Operator specifies the operation. If omitted, defaults to "overwrite".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<ClusterOverridePolicyOverrideRulesOverridersArgsOperator>,
    /// Value is the value(s) that will be applied to command/args of ContainerName. If Operator is 'append', items in Value (empty is not allowed) will be appended to command/args. If Operator is 'overwrite', current command/args of ContainerName will be completely replaced by Value. If Operator is 'delete', items in Value that match in command/args will be deleted.
    pub value: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOverridePolicyOverrideRulesOverridersArgsOperator {
    #[serde(rename = "append")]
    Append,
    #[serde(rename = "overwrite")]
    Overwrite,
    #[serde(rename = "delete")]
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterOverridePolicyOverrideRulesOverridersCommand {
    /// ContainerName targets the specified container or init container in the pod template.
    #[serde(rename = "containerName")]
    pub container_name: String,
    /// Operator specifies the operation. If omitted, defaults to "overwrite".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<ClusterOverridePolicyOverrideRulesOverridersCommandOperator>,
    /// Value is the value(s) that will be applied to command/args of ContainerName. If Operator is 'append', items in Value (empty is not allowed) will be appended to command/args. If Operator is 'overwrite', current command/args of ContainerName will be completely replaced by Value. If Operator is 'delete', items in Value that match in command/args will be deleted.
    pub value: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOverridePolicyOverrideRulesOverridersCommandOperator {
    #[serde(rename = "append")]
    Append,
    #[serde(rename = "overwrite")]
    Overwrite,
    #[serde(rename = "delete")]
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterOverridePolicyOverrideRulesOverridersImage {
    /// ContainerNames are ignored when ImagePath is set. If empty, the image override rule applies to all containers. Otherwise, this override targets the specified container(s) or init container(s) in the pod template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerNames")]
    pub container_names: Option<Vec<String>>,
    /// ImagePath indicates the image path to target. For Example: /spec/template/spec/containers/0/image 
    ///  If empty, the system will automatically resolve the image path if the resource type is Pod, CronJob, Deployment, StatefulSet, DaemonSet or Job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePath")]
    pub image_path: Option<String>,
    /// Operations are the specific operations to be performed on ContainerNames or ImagePath.
    pub operations: Vec<ClusterOverridePolicyOverrideRulesOverridersImageOperations>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterOverridePolicyOverrideRulesOverridersImageOperations {
    /// ImageComponent is the part of the image to override.
    #[serde(rename = "imageComponent")]
    pub image_component: ClusterOverridePolicyOverrideRulesOverridersImageOperationsImageComponent,
    /// Operator specifies the operation. If omitted, defaults to "overwrite".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<ClusterOverridePolicyOverrideRulesOverridersImageOperationsOperator>,
    /// Value is the value required by the operation. For 'addIfAbsent' Operator, the old value of ImageComponent should be empty, and the Value shouldn't be empty.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOverridePolicyOverrideRulesOverridersImageOperationsImageComponent {
    Registry,
    Repository,
    Tag,
    Digest,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOverridePolicyOverrideRulesOverridersImageOperationsOperator {
    #[serde(rename = "addIfAbsent")]
    AddIfAbsent,
    #[serde(rename = "overwrite")]
    Overwrite,
    #[serde(rename = "delete")]
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterOverridePolicyOverrideRulesOverridersJsonpatch {
    /// Operator specifies the operation. If omitted, defaults to "replace".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// Path is a JSON pointer (RFC 6901) specifying the location within the resource document where the operation is performed. Each key in the path should be prefixed with "/", while "~" and "/" should be escaped as "~0" and "~1" respectively. For example, to add a label "kubeadmiral.io/label", the path should be "/metadata/labels/kubeadmiral.io~1label".
    pub path: String,
    /// Value is the value(s) required by the operation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<HashMap<String, serde_json::Value>>,
}

/// StringMapOverrider represents the rules dedicated to handling resource labels/annotations
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterOverridePolicyOverrideRulesOverridersLabels {
    /// Operator specifies the operation. If omitted, defaults to "overwrite".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<ClusterOverridePolicyOverrideRulesOverridersLabelsOperator>,
    /// Value is the value(s) that will be applied to annotations/labels of resource. If Operator is 'addIfAbsent', items in Value (empty is not allowed) will be added in annotations/labels. - For 'addIfAbsent' Operator, the keys in Value cannot conflict with annotations/labels. If Operator is 'overwrite', items in Value which match in annotations/labels will be replaced. If Operator is 'delete', items in Value which match in annotations/labels will be deleted.
    pub value: BTreeMap<String, String>,
}

/// StringMapOverrider represents the rules dedicated to handling resource labels/annotations
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOverridePolicyOverrideRulesOverridersLabelsOperator {
    #[serde(rename = "addIfAbsent")]
    AddIfAbsent,
    #[serde(rename = "overwrite")]
    Overwrite,
    #[serde(rename = "delete")]
    Delete,
}

/// TargetClusters selects the clusters in which the overriders in this rule should be applied. If multiple types of selectors are specified, the overall result is the intersection of all of them.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterOverridePolicyOverrideRulesTargetClusters {
    /// ClusterAffinity selects FederatedClusters by matching their labels and fields against expressions. If multiple terms are specified, their results are ORed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterAffinity")]
    pub cluster_affinity: Option<Vec<ClusterOverridePolicyOverrideRulesTargetClustersClusterAffinity>>,
    /// ClusterSelector selects FederatedClusters by their labels. Empty labels selects all FederatedClusters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterSelector")]
    pub cluster_selector: Option<BTreeMap<String, String>>,
    /// Clusters selects FederatedClusters by their names. Empty Clusters selects all FederatedClusters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterOverridePolicyOverrideRulesTargetClustersClusterAffinity {
    /// A list of cluster selector requirements by cluster labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<ClusterOverridePolicyOverrideRulesTargetClustersClusterAffinityMatchExpressions>>,
    /// A list of cluster selector requirements by cluster fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<ClusterOverridePolicyOverrideRulesTargetClustersClusterAffinityMatchFields>>,
}

/// ClusterSelectorRequirement is a selector that contains values, a key, and an operator that relates the values and keys
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterOverridePolicyOverrideRulesTargetClustersClusterAffinityMatchExpressions {
    pub key: String,
    /// ClusterSelectorOperator is the set of operators that can be used in a cluster selector requirement.
    pub operator: ClusterOverridePolicyOverrideRulesTargetClustersClusterAffinityMatchExpressionsOperator,
    pub values: Vec<String>,
}

/// ClusterSelectorRequirement is a selector that contains values, a key, and an operator that relates the values and keys
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOverridePolicyOverrideRulesTargetClustersClusterAffinityMatchExpressionsOperator {
    In,
    NotIn,
    Exists,
    DoesNotExist,
    Gt,
    Lt,
}

/// ClusterSelectorRequirement is a selector that contains values, a key, and an operator that relates the values and keys
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterOverridePolicyOverrideRulesTargetClustersClusterAffinityMatchFields {
    pub key: String,
    /// ClusterSelectorOperator is the set of operators that can be used in a cluster selector requirement.
    pub operator: ClusterOverridePolicyOverrideRulesTargetClustersClusterAffinityMatchFieldsOperator,
    pub values: Vec<String>,
}

/// ClusterSelectorRequirement is a selector that contains values, a key, and an operator that relates the values and keys
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterOverridePolicyOverrideRulesTargetClustersClusterAffinityMatchFieldsOperator {
    In,
    NotIn,
    Exists,
    DoesNotExist,
    Gt,
    Lt,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterOverridePolicyStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "refCount")]
    pub ref_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "typedRefCount")]
    pub typed_ref_count: Option<Vec<ClusterOverridePolicyStatusTypedRefCount>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ClusterOverridePolicyStatusTypedRefCount {
    pub count: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    pub resource: String,
}

