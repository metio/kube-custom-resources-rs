// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kubewharf/kubeadmiral/core.kubeadmiral.io/v1alpha1/federatedtypeconfigs.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "core.kubeadmiral.io", version = "v1alpha1", kind = "FederatedTypeConfig", plural = "federatedtypeconfigs")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct FederatedTypeConfigSpec {
    /// Configuration for AutoMigration. If left empty, the AutoMigration feature will be disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMigration")]
    pub auto_migration: Option<FederatedTypeConfigAutoMigration>,
    /// The controllers that must run before the source object can be propagated to member clusters. Each inner slice specifies a step. Step T must complete before step T+1 can commence. Controllers within each step can execute in parallel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controllers: Option<Vec<String>>,
    /// Defines the paths to various fields in the target object's schema.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathDefinition")]
    pub path_definition: Option<FederatedTypeConfigPathDefinition>,
    /// The API resource type to be federated.
    #[serde(rename = "sourceType")]
    pub source_type: FederatedTypeConfigSourceType,
    /// Configuration for StatusAggregation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusAggregation")]
    pub status_aggregation: Option<FederatedTypeConfigStatusAggregation>,
    /// Configuration for StatusCollection. If left empty, the StatusCollection feature will be disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusCollection")]
    pub status_collection: Option<FederatedTypeConfigStatusCollection>,
}

/// Configuration for AutoMigration. If left empty, the AutoMigration feature will be disabled.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedTypeConfigAutoMigration {
    /// Whether or not to automatically migrate unschedulable pods to a different cluster.
    pub enabled: bool,
}

/// Defines the paths to various fields in the target object's schema.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedTypeConfigPathDefinition {
    /// Path to a numeric field that reflects the number of available replicas that the object currently has. E.g. `status.availableReplicas` for Deployment and ReplicaSet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availableReplicasStatus")]
    pub available_replicas_status: Option<String>,
    /// Path to a metav1.LabelSelector field that selects the replicas for this object. E.g. `spec.selector` for Deployment and ReplicaSet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    /// Path to a numeric field that reflects the number of ready replicas that the object currently has. E.g. `status.readyReplicas` for Deployment and ReplicaSet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readyReplicasStatus")]
    pub ready_replicas_status: Option<String>,
    /// Path to a numeric field that indicates the number of replicas that an object can be divided into. E.g. `spec.replicas` for Deployment and ReplicaSet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicasSpec")]
    pub replicas_spec: Option<String>,
    /// Path to a numeric field that reflects the number of replicas that the object currently has. E.g. `status.replicas` for Deployment and ReplicaSet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicasStatus")]
    pub replicas_status: Option<String>,
}

/// The API resource type to be federated.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedTypeConfigSourceType {
    /// Group of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// Kind of the resource.
    pub kind: String,
    /// Lower-cased plural name of the resource (e.g. configmaps).  If not provided, it will be computed by lower-casing the kind and suffixing an 's'.
    #[serde(rename = "pluralName")]
    pub plural_name: String,
    /// Scope of the resource.
    pub scope: String,
    /// Version of the resource.
    pub version: String,
}

/// Configuration for StatusAggregation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedTypeConfigStatusAggregation {
    /// Whether or not to enable status aggregation.
    pub enabled: bool,
}

/// Configuration for StatusCollection. If left empty, the StatusCollection feature will be disabled.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedTypeConfigStatusCollection {
    /// Whether or not to enable status collection.
    pub enabled: bool,
    /// Contains the fields to be collected during status collection. Each field is a dot separated string that corresponds to its path in the source object's schema. E.g. `metadata.creationTimestamp`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<Vec<String>>,
}

