// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kubernetes-sigs/network-policy-api/policy.networking.k8s.io/v1alpha1/adminnetworkpolicies.yaml --derive=PartialEq
// kopium version: 0.18.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// Specification of the desired behavior of AdminNetworkPolicy.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "policy.networking.k8s.io", version = "v1alpha1", kind = "AdminNetworkPolicy", plural = "adminnetworkpolicies")]
#[kube(status = "AdminNetworkPolicyStatus")]
#[kube(schema = "disabled")]
pub struct AdminNetworkPolicySpec {
    /// Egress is the list of Egress rules to be applied to the selected pods.
    /// A total of 100 rules will be allowed in each ANP instance.
    /// The relative precedence of egress rules within a single ANP object (all of
    /// which share the priority) will be determined by the order in which the rule
    /// is written. Thus, a rule that appears at the top of the egress rules
    /// would take the highest precedence.
    /// ANPs with no egress rules do not affect egress traffic.
    /// 
    /// 
    /// Support: Core
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub egress: Option<Vec<AdminNetworkPolicyEgress>>,
    /// Ingress is the list of Ingress rules to be applied to the selected pods.
    /// A total of 100 rules will be allowed in each ANP instance.
    /// The relative precedence of ingress rules within a single ANP object (all of
    /// which share the priority) will be determined by the order in which the rule
    /// is written. Thus, a rule that appears at the top of the ingress rules
    /// would take the highest precedence.
    /// ANPs with no ingress rules do not affect ingress traffic.
    /// 
    /// 
    /// Support: Core
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingress: Option<Vec<AdminNetworkPolicyIngress>>,
    /// Priority is a value from 0 to 1000. Rules with lower priority values have
    /// higher precedence, and are checked before rules with higher priority values.
    /// All AdminNetworkPolicy rules have higher precedence than NetworkPolicy or
    /// BaselineAdminNetworkPolicy rules
    /// The behavior is undefined if two ANP objects have same priority.
    /// 
    /// 
    /// Support: Core
    pub priority: i32,
    /// Subject defines the pods to which this AdminNetworkPolicy applies.
    /// Note that host-networked pods are not included in subject selection.
    /// 
    /// 
    /// Support: Core
    pub subject: AdminNetworkPolicySubject,
}

/// AdminNetworkPolicyEgressRule describes an action to take on a particular
/// set of traffic originating from pods selected by a AdminNetworkPolicy's
/// Subject field.
/// <network-policy-api:experimental:validation>
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyEgress {
    /// Action specifies the effect this rule will have on matching traffic.
    /// Currently the following actions are supported:
    /// Allow: allows the selected traffic (even if it would otherwise have been denied by NetworkPolicy)
    /// Deny: denies the selected traffic
    /// Pass: instructs the selected traffic to skip any remaining ANP rules, and
    /// then pass execution to any NetworkPolicies that select the pod.
    /// If the pod is not selected by any NetworkPolicies then execution
    /// is passed to any BaselineAdminNetworkPolicies that select the pod.
    /// 
    /// 
    /// Support: Core
    pub action: AdminNetworkPolicyEgressAction,
    /// Name is an identifier for this rule, that may be no more than 100 characters
    /// in length. This field should be used by the implementation to help
    /// improve observability, readability and error-reporting for any applied
    /// AdminNetworkPolicies.
    /// 
    /// 
    /// Support: Core
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Ports allows for matching traffic based on port and protocols.
    /// This field is a list of destination ports for the outgoing egress traffic.
    /// If Ports is not set then the rule does not filter traffic via port.
    /// 
    /// 
    /// Support: Core
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<AdminNetworkPolicyEgressPorts>>,
    /// To is the List of destinations whose traffic this rule applies to.
    /// If any AdminNetworkPolicyEgressPeer matches the destination of outgoing
    /// traffic then the specified action is applied.
    /// This field must be defined and contain at least one item.
    /// 
    /// 
    /// Support: Core
    pub to: Vec<AdminNetworkPolicyEgressTo>,
}

/// AdminNetworkPolicyEgressRule describes an action to take on a particular
/// set of traffic originating from pods selected by a AdminNetworkPolicy's
/// Subject field.
/// <network-policy-api:experimental:validation>
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum AdminNetworkPolicyEgressAction {
    Allow,
    Deny,
    Pass,
}

/// AdminNetworkPolicyPort describes how to select network ports on pod(s).
/// Exactly one field must be set.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyEgressPorts {
    /// Port selects a port on a pod(s) based on number.
    /// 
    /// 
    /// Support: Core
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portNumber")]
    pub port_number: Option<AdminNetworkPolicyEgressPortsPortNumber>,
    /// PortRange selects a port range on a pod(s) based on provided start and end
    /// values.
    /// 
    /// 
    /// Support: Core
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portRange")]
    pub port_range: Option<AdminNetworkPolicyEgressPortsPortRange>,
}

/// Port selects a port on a pod(s) based on number.
/// 
/// 
/// Support: Core
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyEgressPortsPortNumber {
    /// Number defines a network port value.
    /// 
    /// 
    /// Support: Core
    pub port: i32,
    /// Protocol is the network protocol (TCP, UDP, or SCTP) which traffic must
    /// match. If not specified, this field defaults to TCP.
    /// 
    /// 
    /// Support: Core
    pub protocol: String,
}

/// PortRange selects a port range on a pod(s) based on provided start and end
/// values.
/// 
/// 
/// Support: Core
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyEgressPortsPortRange {
    /// End defines a network port that is the end of a port range, the End value
    /// must be greater than Start.
    /// 
    /// 
    /// Support: Core
    pub end: i32,
    /// Protocol is the network protocol (TCP, UDP, or SCTP) which traffic must
    /// match. If not specified, this field defaults to TCP.
    /// 
    /// 
    /// Support: Core
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Start defines a network port that is the start of a port range, the Start
    /// value must be less than End.
    /// 
    /// 
    /// Support: Core
    pub start: i32,
}

/// AdminNetworkPolicyEgressPeer defines a peer to allow traffic to.
/// Exactly one of the selector pointers must be set for a given peer. If a
/// consumer observes none of its fields are set, they must assume an unknown
/// option has been specified and fail closed.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyEgressTo {
    /// Namespaces defines a way to select all pods within a set of Namespaces.
    /// Note that host-networked pods are not included in this type of peer.
    /// 
    /// 
    /// Support: Core
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<AdminNetworkPolicyEgressToNamespaces>,
    /// Pods defines a way to select a set of pods in
    /// a set of namespaces. Note that host-networked pods
    /// are not included in this type of peer.
    /// 
    /// 
    /// Support: Core
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<AdminNetworkPolicyEgressToPods>,
}

/// Namespaces defines a way to select all pods within a set of Namespaces.
/// Note that host-networked pods are not included in this type of peer.
/// 
/// 
/// Support: Core
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyEgressToNamespaces {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<AdminNetworkPolicyEgressToNamespacesMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyEgressToNamespacesMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Pods defines a way to select a set of pods in
/// a set of namespaces. Note that host-networked pods
/// are not included in this type of peer.
/// 
/// 
/// Support: Core
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyEgressToPods {
    /// NamespaceSelector follows standard label selector semantics; if empty,
    /// it selects all Namespaces.
    #[serde(rename = "namespaceSelector")]
    pub namespace_selector: AdminNetworkPolicyEgressToPodsNamespaceSelector,
    /// PodSelector is used to explicitly select pods within a namespace; if empty,
    /// it selects all Pods.
    #[serde(rename = "podSelector")]
    pub pod_selector: AdminNetworkPolicyEgressToPodsPodSelector,
}

/// NamespaceSelector follows standard label selector semantics; if empty,
/// it selects all Namespaces.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyEgressToPodsNamespaceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<AdminNetworkPolicyEgressToPodsNamespaceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyEgressToPodsNamespaceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// PodSelector is used to explicitly select pods within a namespace; if empty,
/// it selects all Pods.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyEgressToPodsPodSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<AdminNetworkPolicyEgressToPodsPodSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyEgressToPodsPodSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// AdminNetworkPolicyIngressRule describes an action to take on a particular
/// set of traffic destined for pods selected by an AdminNetworkPolicy's
/// Subject field.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyIngress {
    /// Action specifies the effect this rule will have on matching traffic.
    /// Currently the following actions are supported:
    /// Allow: allows the selected traffic (even if it would otherwise have been denied by NetworkPolicy)
    /// Deny: denies the selected traffic
    /// Pass: instructs the selected traffic to skip any remaining ANP rules, and
    /// then pass execution to any NetworkPolicies that select the pod.
    /// If the pod is not selected by any NetworkPolicies then execution
    /// is passed to any BaselineAdminNetworkPolicies that select the pod.
    /// 
    /// 
    /// Support: Core
    pub action: AdminNetworkPolicyIngressAction,
    /// From is the list of sources whose traffic this rule applies to.
    /// If any AdminNetworkPolicyIngressPeer matches the source of incoming
    /// traffic then the specified action is applied.
    /// This field must be defined and contain at least one item.
    /// 
    /// 
    /// Support: Core
    pub from: Vec<AdminNetworkPolicyIngressFrom>,
    /// Name is an identifier for this rule, that may be no more than 100 characters
    /// in length. This field should be used by the implementation to help
    /// improve observability, readability and error-reporting for any applied
    /// AdminNetworkPolicies.
    /// 
    /// 
    /// Support: Core
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Ports allows for matching traffic based on port and protocols.
    /// This field is a list of ports which should be matched on
    /// the pods selected for this policy i.e the subject of the policy.
    /// So it matches on the destination port for the ingress traffic.
    /// If Ports is not set then the rule does not filter traffic via port.
    /// 
    /// 
    /// Support: Core
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<AdminNetworkPolicyIngressPorts>>,
}

/// AdminNetworkPolicyIngressRule describes an action to take on a particular
/// set of traffic destined for pods selected by an AdminNetworkPolicy's
/// Subject field.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum AdminNetworkPolicyIngressAction {
    Allow,
    Deny,
    Pass,
}

/// AdminNetworkPolicyIngressPeer defines an in-cluster peer to allow traffic from.
/// Exactly one of the selector pointers must be set for a given peer. If a
/// consumer observes none of its fields are set, they must assume an unknown
/// option has been specified and fail closed.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyIngressFrom {
    /// Namespaces defines a way to select all pods within a set of Namespaces.
    /// Note that host-networked pods are not included in this type of peer.
    /// 
    /// 
    /// Support: Core
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<AdminNetworkPolicyIngressFromNamespaces>,
    /// Pods defines a way to select a set of pods in
    /// a set of namespaces. Note that host-networked pods
    /// are not included in this type of peer.
    /// 
    /// 
    /// Support: Core
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<AdminNetworkPolicyIngressFromPods>,
}

/// Namespaces defines a way to select all pods within a set of Namespaces.
/// Note that host-networked pods are not included in this type of peer.
/// 
/// 
/// Support: Core
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyIngressFromNamespaces {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<AdminNetworkPolicyIngressFromNamespacesMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyIngressFromNamespacesMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Pods defines a way to select a set of pods in
/// a set of namespaces. Note that host-networked pods
/// are not included in this type of peer.
/// 
/// 
/// Support: Core
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyIngressFromPods {
    /// NamespaceSelector follows standard label selector semantics; if empty,
    /// it selects all Namespaces.
    #[serde(rename = "namespaceSelector")]
    pub namespace_selector: AdminNetworkPolicyIngressFromPodsNamespaceSelector,
    /// PodSelector is used to explicitly select pods within a namespace; if empty,
    /// it selects all Pods.
    #[serde(rename = "podSelector")]
    pub pod_selector: AdminNetworkPolicyIngressFromPodsPodSelector,
}

/// NamespaceSelector follows standard label selector semantics; if empty,
/// it selects all Namespaces.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyIngressFromPodsNamespaceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<AdminNetworkPolicyIngressFromPodsNamespaceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyIngressFromPodsNamespaceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// PodSelector is used to explicitly select pods within a namespace; if empty,
/// it selects all Pods.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyIngressFromPodsPodSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<AdminNetworkPolicyIngressFromPodsPodSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyIngressFromPodsPodSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// AdminNetworkPolicyPort describes how to select network ports on pod(s).
/// Exactly one field must be set.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyIngressPorts {
    /// Port selects a port on a pod(s) based on number.
    /// 
    /// 
    /// Support: Core
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portNumber")]
    pub port_number: Option<AdminNetworkPolicyIngressPortsPortNumber>,
    /// PortRange selects a port range on a pod(s) based on provided start and end
    /// values.
    /// 
    /// 
    /// Support: Core
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portRange")]
    pub port_range: Option<AdminNetworkPolicyIngressPortsPortRange>,
}

/// Port selects a port on a pod(s) based on number.
/// 
/// 
/// Support: Core
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyIngressPortsPortNumber {
    /// Number defines a network port value.
    /// 
    /// 
    /// Support: Core
    pub port: i32,
    /// Protocol is the network protocol (TCP, UDP, or SCTP) which traffic must
    /// match. If not specified, this field defaults to TCP.
    /// 
    /// 
    /// Support: Core
    pub protocol: String,
}

/// PortRange selects a port range on a pod(s) based on provided start and end
/// values.
/// 
/// 
/// Support: Core
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyIngressPortsPortRange {
    /// End defines a network port that is the end of a port range, the End value
    /// must be greater than Start.
    /// 
    /// 
    /// Support: Core
    pub end: i32,
    /// Protocol is the network protocol (TCP, UDP, or SCTP) which traffic must
    /// match. If not specified, this field defaults to TCP.
    /// 
    /// 
    /// Support: Core
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Start defines a network port that is the start of a port range, the Start
    /// value must be less than End.
    /// 
    /// 
    /// Support: Core
    pub start: i32,
}

/// Subject defines the pods to which this AdminNetworkPolicy applies.
/// Note that host-networked pods are not included in subject selection.
/// 
/// 
/// Support: Core
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicySubject {
    /// Namespaces is used to select pods via namespace selectors.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<AdminNetworkPolicySubjectNamespaces>,
    /// Pods is used to select pods via namespace AND pod selectors.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<AdminNetworkPolicySubjectPods>,
}

/// Namespaces is used to select pods via namespace selectors.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicySubjectNamespaces {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<AdminNetworkPolicySubjectNamespacesMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicySubjectNamespacesMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Pods is used to select pods via namespace AND pod selectors.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicySubjectPods {
    /// NamespaceSelector follows standard label selector semantics; if empty,
    /// it selects all Namespaces.
    #[serde(rename = "namespaceSelector")]
    pub namespace_selector: AdminNetworkPolicySubjectPodsNamespaceSelector,
    /// PodSelector is used to explicitly select pods within a namespace; if empty,
    /// it selects all Pods.
    #[serde(rename = "podSelector")]
    pub pod_selector: AdminNetworkPolicySubjectPodsPodSelector,
}

/// NamespaceSelector follows standard label selector semantics; if empty,
/// it selects all Namespaces.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicySubjectPodsNamespaceSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<AdminNetworkPolicySubjectPodsNamespaceSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicySubjectPodsNamespaceSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// PodSelector is used to explicitly select pods within a namespace; if empty,
/// it selects all Pods.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicySubjectPodsPodSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<AdminNetworkPolicySubjectPodsPodSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicySubjectPodsPodSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Status is the status to be reported by the implementation.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AdminNetworkPolicyStatus {
    pub conditions: Vec<Condition>,
}

