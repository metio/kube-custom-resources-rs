// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/Azure/azure-service-operator/azure.microsoft.com/v1alpha1/rediscacheactions.yaml --derive=PartialEq
// kopium version: 0.17.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// RedisCacheActionSpec defines the desired state of RedisCacheAction
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "azure.microsoft.com", version = "v1alpha1", kind = "RedisCacheAction", plural = "rediscacheactions")]
#[kube(namespaced)]
#[kube(status = "RedisCacheActionStatus")]
#[kube(schema = "disabled")]
pub struct RedisCacheActionSpec {
    #[serde(rename = "actionName")]
    pub action_name: RedisCacheActionActionName,
    #[serde(rename = "cacheName")]
    pub cache_name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyVaultToStoreSecrets")]
    pub key_vault_to_store_secrets: Option<String>,
    #[serde(rename = "resourceGroup")]
    pub resource_group: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shardID")]
    pub shard_id: Option<i32>,
}

/// RedisCacheActionSpec defines the desired state of RedisCacheAction
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum RedisCacheActionActionName {
    #[serde(rename = "rollallkeys")]
    Rollallkeys,
    #[serde(rename = "rollprimarykey")]
    Rollprimarykey,
    #[serde(rename = "rollsecondarykey")]
    Rollsecondarykey,
    #[serde(rename = "rebootallnodes")]
    Rebootallnodes,
    #[serde(rename = "rebootprimarynode")]
    Rebootprimarynode,
    #[serde(rename = "rebootsecondarynode")]
    Rebootsecondarynode,
}

/// ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct RedisCacheActionStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub completed: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containsUpdate")]
    pub contains_update: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failedProvisioning")]
    pub failed_provisioning: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flattenedSecrets")]
    pub flattened_secrets: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub output: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pollingUrl")]
    pub polling_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pollingUrlKind")]
    pub polling_url_kind: Option<RedisCacheActionStatusPollingUrlKind>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provisioned: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provisioning: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requested: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceId")]
    pub resource_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "specHash")]
    pub spec_hash: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

/// ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum RedisCacheActionStatusPollingUrlKind {
    CreateOrUpdate,
    Delete,
}

