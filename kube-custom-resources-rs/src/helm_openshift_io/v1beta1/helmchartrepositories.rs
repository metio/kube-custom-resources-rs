// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/api/helm.openshift.io/v1beta1/helmchartrepositories.yaml --derive=PartialEq
// kopium version: 0.17.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// spec holds user settable values for configuration
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "helm.openshift.io", version = "v1beta1", kind = "HelmChartRepository", plural = "helmchartrepositories")]
#[kube(status = "HelmChartRepositoryStatus")]
#[kube(schema = "disabled")]
pub struct HelmChartRepositorySpec {
    /// Required configuration for connecting to the chart repo
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionConfig")]
    pub connection_config: Option<HelmChartRepositoryConnectionConfig>,
    /// Optional human readable repository description, it can be used by UI for displaying purposes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// If set to true, disable the repo usage in the cluster/namespace
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// Optional associated human readable repository name, it can be used by UI for displaying purposes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Required configuration for connecting to the chart repo
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct HelmChartRepositoryConnectionConfig {
    /// ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca-bundle.crt" is used to locate the data. If empty, the default system roots are used. The namespace for this config map is openshift-config.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<HelmChartRepositoryConnectionConfigCa>,
    /// tlsClientConfig is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate and private key to present when connecting to the server. The key "tls.crt" is used to locate the client certificate. The key "tls.key" is used to locate the private key. The namespace for this secret is openshift-config.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsClientConfig")]
    pub tls_client_config: Option<HelmChartRepositoryConnectionConfigTlsClientConfig>,
    /// Chart repository URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca-bundle.crt" is used to locate the data. If empty, the default system roots are used. The namespace for this config map is openshift-config.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct HelmChartRepositoryConnectionConfigCa {
    /// name is the metadata.name of the referenced config map
    pub name: String,
}

/// tlsClientConfig is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate and private key to present when connecting to the server. The key "tls.crt" is used to locate the client certificate. The key "tls.key" is used to locate the private key. The namespace for this secret is openshift-config.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct HelmChartRepositoryConnectionConfigTlsClientConfig {
    /// name is the metadata.name of the referenced secret
    pub name: String,
}

/// Observed status of the repository within the cluster..
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct HelmChartRepositoryStatus {
    /// conditions is a list of conditions and their statuses
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
}

