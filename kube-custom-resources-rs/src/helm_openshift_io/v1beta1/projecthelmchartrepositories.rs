// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/api/helm.openshift.io/v1beta1/projecthelmchartrepositories.yaml --derive=PartialEq
// kopium version: 0.16.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// spec holds user settable values for configuration
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "helm.openshift.io", version = "v1beta1", kind = "ProjectHelmChartRepository", plural = "projecthelmchartrepositories")]
#[kube(namespaced)]
#[kube(status = "ProjectHelmChartRepositoryStatus")]
#[kube(schema = "disabled")]
pub struct ProjectHelmChartRepositorySpec {
    /// Required configuration for connecting to the chart repo
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionConfig")]
    pub connection_config: Option<ProjectHelmChartRepositoryConnectionConfig>,
    /// Optional human readable repository description, it can be used by UI for displaying purposes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// If set to true, disable the repo usage in the namespace
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// Optional associated human readable repository name, it can be used by UI for displaying purposes
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Required configuration for connecting to the chart repo
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ProjectHelmChartRepositoryConnectionConfig {
    /// basicAuthConfig is an optional reference to a secret by name that contains the basic authentication credentials to present when connecting to the server. The key "username" is used locate the username. The key "password" is used to locate the password. The namespace for this secret must be same as the namespace where the project helm chart repository is getting instantiated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuthConfig")]
    pub basic_auth_config: Option<ProjectHelmChartRepositoryConnectionConfigBasicAuthConfig>,
    /// ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca-bundle.crt" is used to locate the data. If empty, the default system roots are used. The namespace for this configmap must be same as the namespace where the project helm chart repository is getting instantiated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<ProjectHelmChartRepositoryConnectionConfigCa>,
    /// tlsClientConfig is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate and private key to present when connecting to the server. The key "tls.crt" is used to locate the client certificate. The key "tls.key" is used to locate the private key. The namespace for this secret must be same as the namespace where the project helm chart repository is getting instantiated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsClientConfig")]
    pub tls_client_config: Option<ProjectHelmChartRepositoryConnectionConfigTlsClientConfig>,
    /// Chart repository URL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// basicAuthConfig is an optional reference to a secret by name that contains the basic authentication credentials to present when connecting to the server. The key "username" is used locate the username. The key "password" is used to locate the password. The namespace for this secret must be same as the namespace where the project helm chart repository is getting instantiated.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ProjectHelmChartRepositoryConnectionConfigBasicAuthConfig {
    /// name is the metadata.name of the referenced secret
    pub name: String,
}

/// ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key "ca-bundle.crt" is used to locate the data. If empty, the default system roots are used. The namespace for this configmap must be same as the namespace where the project helm chart repository is getting instantiated.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ProjectHelmChartRepositoryConnectionConfigCa {
    /// name is the metadata.name of the referenced config map
    pub name: String,
}

/// tlsClientConfig is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate and private key to present when connecting to the server. The key "tls.crt" is used to locate the client certificate. The key "tls.key" is used to locate the private key. The namespace for this secret must be same as the namespace where the project helm chart repository is getting instantiated.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ProjectHelmChartRepositoryConnectionConfigTlsClientConfig {
    /// name is the metadata.name of the referenced secret
    pub name: String,
}

/// Observed status of the repository within the namespace..
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ProjectHelmChartRepositoryStatus {
    /// conditions is a list of conditions and their statuses
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<ProjectHelmChartRepositoryStatusConditions>>,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ProjectHelmChartRepositoryStatusConditions {
    /// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// message is a human readable message indicating details about the transition. This may be an empty string.
    pub message: String,
    /// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    pub reason: String,
    /// status of the condition, one of True, False, Unknown.
    pub status: ProjectHelmChartRepositoryStatusConditionsStatus,
    /// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ProjectHelmChartRepositoryStatusConditionsStatus {
    True,
    False,
    Unknown,
}

