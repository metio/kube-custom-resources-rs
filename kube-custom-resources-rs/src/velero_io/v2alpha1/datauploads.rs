// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/vmware-tanzu/velero/velero.io/v2alpha1/datauploads.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// DataUploadSpec is the specification for a DataUpload.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "velero.io", version = "v2alpha1", kind = "DataUpload", plural = "datauploads")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct DataUploadSpec {
    /// BackupStorageLocation is the name of the backup storage location
    /// where the backup repository is stored.
    #[serde(rename = "backupStorageLocation")]
    pub backup_storage_location: String,
    /// Cancel indicates request to cancel the ongoing DataUpload. It can be set
    /// when the DataUpload is in InProgress phase
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cancel: Option<bool>,
    /// If SnapshotType is CSI, CSISnapshot provides the information of the CSI snapshot.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "csiSnapshot")]
    pub csi_snapshot: Option<DataUploadCsiSnapshot>,
    /// DataMoverConfig is for data-mover-specific configuration fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataMoverConfig")]
    pub data_mover_config: Option<BTreeMap<String, String>>,
    /// DataMover specifies the data mover to be used by the backup.
    /// If DataMover is "" or "velero", the built-in data mover will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub datamover: Option<String>,
    /// OperationTimeout specifies the time used to wait internal operations,
    /// before returning error as timeout.
    #[serde(rename = "operationTimeout")]
    pub operation_timeout: String,
    /// SnapshotType is the type of the snapshot to be backed up.
    #[serde(rename = "snapshotType")]
    pub snapshot_type: String,
    /// SourceNamespace is the original namespace where the volume is backed up from.
    /// It is the same namespace for SourcePVC and CSI namespaced objects.
    #[serde(rename = "sourceNamespace")]
    pub source_namespace: String,
    /// SourcePVC is the name of the PVC which the snapshot is taken for.
    #[serde(rename = "sourcePVC")]
    pub source_pvc: String,
}

/// If SnapshotType is CSI, CSISnapshot provides the information of the CSI snapshot.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DataUploadCsiSnapshot {
    /// SnapshotClass is the name of the snapshot class that the volume snapshot is created with
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotClass")]
    pub snapshot_class: Option<String>,
    /// StorageClass is the name of the storage class of the PVC that the volume snapshot is created from
    #[serde(rename = "storageClass")]
    pub storage_class: String,
    /// VolumeSnapshot is the name of the volume snapshot to be backed up
    #[serde(rename = "volumeSnapshot")]
    pub volume_snapshot: String,
}

/// DataUploadStatus is the current status of a DataUpload.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DataUploadStatus {
    /// CompletionTimestamp records the time a backup was completed.
    /// Completion time is recorded even on failed backups.
    /// Completion time is recorded before uploading the backup object.
    /// The server's time is used for CompletionTimestamps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "completionTimestamp")]
    pub completion_timestamp: Option<String>,
    /// DataMoverResult stores data-mover-specific information as a result of the DataUpload.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataMoverResult")]
    pub data_mover_result: Option<BTreeMap<String, String>>,
    /// Message is a message about the DataUpload's status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Node is name of the node where the DataUpload is processed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node: Option<String>,
    /// Path is the full path of the snapshot volume being backed up.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Phase is the current state of the DataUpload.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<DataUploadStatusPhase>,
    /// Progress holds the total number of bytes of the volume and the current
    /// number of backed up bytes. This can be used to display progress information
    /// about the backup operation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub progress: Option<DataUploadStatusProgress>,
    /// SnapshotID is the identifier for the snapshot in the backup repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotID")]
    pub snapshot_id: Option<String>,
    /// StartTimestamp records the time a backup was started.
    /// Separate from CreationTimestamp, since that value changes
    /// on restores.
    /// The server's time is used for StartTimestamps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTimestamp")]
    pub start_timestamp: Option<String>,
}

/// DataUploadStatus is the current status of a DataUpload.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DataUploadStatusPhase {
    New,
    Accepted,
    Prepared,
    InProgress,
    Canceling,
    Canceled,
    Completed,
    Failed,
}

/// Progress holds the total number of bytes of the volume and the current
/// number of backed up bytes. This can be used to display progress information
/// about the backup operation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DataUploadStatusProgress {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bytesDone")]
    pub bytes_done: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalBytes")]
    pub total_bytes: Option<i64>,
}

