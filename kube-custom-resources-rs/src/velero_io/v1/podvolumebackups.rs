// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/vmware-tanzu/velero/velero.io/v1/podvolumebackups.yaml --derive=Default --derive=PartialEq
// kopium version: 0.17.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// PodVolumeBackupSpec is the specification for a PodVolumeBackup.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "velero.io", version = "v1", kind = "PodVolumeBackup", plural = "podvolumebackups")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
pub struct PodVolumeBackupSpec {
    /// BackupStorageLocation is the name of the backup storage location where the backup repository is stored.
    #[serde(rename = "backupStorageLocation")]
    pub backup_storage_location: String,
    /// Node is the name of the node that the Pod is running on.
    pub node: String,
    /// Pod is a reference to the pod containing the volume to be backed up.
    pub pod: PodVolumeBackupPod,
    /// RepoIdentifier is the backup repository identifier.
    #[serde(rename = "repoIdentifier")]
    pub repo_identifier: String,
    /// Tags are a map of key-value pairs that should be applied to the volume backup as tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
    /// UploaderSettings are a map of key-value pairs that should be applied to the uploader configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uploaderSettings")]
    pub uploader_settings: Option<BTreeMap<String, String>>,
    /// UploaderType is the type of the uploader to handle the data transfer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uploaderType")]
    pub uploader_type: Option<PodVolumeBackupUploaderType>,
    /// Volume is the name of the volume within the Pod to be backed up.
    pub volume: String,
}

/// Pod is a reference to the pod containing the volume to be backed up.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PodVolumeBackupPod {
    /// API version of the referent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldPath")]
    pub field_path: Option<String>,
    /// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceVersion")]
    pub resource_version: Option<String>,
    /// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// PodVolumeBackupSpec is the specification for a PodVolumeBackup.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PodVolumeBackupUploaderType {
    #[serde(rename = "kopia")]
    Kopia,
    #[serde(rename = "restic")]
    Restic,
    #[serde(rename = "")]
    KopiumEmpty,
}

/// PodVolumeBackupStatus is the current status of a PodVolumeBackup.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PodVolumeBackupStatus {
    /// CompletionTimestamp records the time a backup was completed. Completion time is recorded even on failed backups. Completion time is recorded before uploading the backup object. The server's time is used for CompletionTimestamps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "completionTimestamp")]
    pub completion_timestamp: Option<String>,
    /// Message is a message about the pod volume backup's status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Path is the full path within the controller pod being backed up.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Phase is the current state of the PodVolumeBackup.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<PodVolumeBackupStatusPhase>,
    /// Progress holds the total number of bytes of the volume and the current number of backed up bytes. This can be used to display progress information about the backup operation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub progress: Option<PodVolumeBackupStatusProgress>,
    /// SnapshotID is the identifier for the snapshot of the pod volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotID")]
    pub snapshot_id: Option<String>,
    /// StartTimestamp records the time a backup was started. Separate from CreationTimestamp, since that value changes on restores. The server's time is used for StartTimestamps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTimestamp")]
    pub start_timestamp: Option<String>,
}

/// PodVolumeBackupStatus is the current status of a PodVolumeBackup.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PodVolumeBackupStatusPhase {
    New,
    InProgress,
    Completed,
    Failed,
}

/// Progress holds the total number of bytes of the volume and the current number of backed up bytes. This can be used to display progress information about the backup operation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PodVolumeBackupStatusProgress {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bytesDone")]
    pub bytes_done: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalBytes")]
    pub total_bytes: Option<i64>,
}

