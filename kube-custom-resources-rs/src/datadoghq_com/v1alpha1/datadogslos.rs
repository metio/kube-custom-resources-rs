// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/DataDog/datadog-operator/datadoghq.com/v1alpha1/datadogslos.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "datadoghq.com", version = "v1alpha1", kind = "DatadogSLO", plural = "datadogslos")]
#[kube(namespaced)]
#[kube(status = "DatadogSLOStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct DatadogSLOSpec {
    /// ControllerOptions are the optional parameters in the DatadogSLO controller
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controllerOptions")]
    pub controller_options: Option<DatadogSLOControllerOptions>,
    /// Description is a user-defined description of the service level objective. Always included in service level objective responses (but may be null). Optional in create/update requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Groups is a list of (up to 100) monitor groups that narrow the scope of a monitor service level objective. Included in service level objective responses if it is not empty. Optional in create/update requests for monitor service level objectives, but may only be used when the length of the monitor_ids field is one.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<String>>,
    /// MonitorIDs is a list of monitor IDs that defines the scope of a monitor service level objective. Required if type is monitor.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitorIDs")]
    pub monitor_i_ds: Option<Vec<i64>>,
    /// Name is the name of the service level objective.
    pub name: String,
    /// Query is the query for a metric-based SLO. Required if type is metric. Note that only the `sum by` aggregator is allowed, which sums all request counts. `Average`, `max`, nor `min` request aggregators are not supported.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub query: Option<DatadogSLOQuery>,
    /// Tags is a list of tags to associate with your service level objective. This can help you categorize and filter service level objectives in the service level objectives page of the UI. Note: it's not currently possible to filter by these tags when querying via the API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// TargetThreshold is the target threshold such that when the service level indicator is above this threshold over the given timeframe, the objective is being met.
    #[serde(rename = "targetThreshold")]
    pub target_threshold: IntOrString,
    /// The SLO time window options.
    pub timeframe: String,
    /// Type is the type of the service level objective.
    #[serde(rename = "type")]
    pub r#type: String,
    /// WarningThreshold is a optional warning threshold such that when the service level indicator is below this value for the given threshold, but above the target threshold, the objective appears in a "warning" state. This value must be greater than the target threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "warningThreshold")]
    pub warning_threshold: Option<IntOrString>,
}

/// ControllerOptions are the optional parameters in the DatadogSLO controller
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatadogSLOControllerOptions {
    /// DisableRequiredTags disables the automatic addition of required tags to SLOs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableRequiredTags")]
    pub disable_required_tags: Option<bool>,
}

/// Query is the query for a metric-based SLO. Required if type is metric. Note that only the `sum by` aggregator is allowed, which sums all request counts. `Average`, `max`, nor `min` request aggregators are not supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatadogSLOQuery {
    /// Denominator is a Datadog metric query for total (valid) events.
    pub denominator: String,
    /// Numerator is a Datadog metric query for good events.
    pub numerator: String,
}

/// DatadogSLOStatus defines the observed state of a DatadogSLO.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatadogSLOStatus {
    /// Conditions represents the latest available observations of the state of a DatadogSLO.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// Created is the time the SLO was created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    /// Creator is the identity of the SLO creator.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub creator: Option<String>,
    /// CurrentHash tracks the hash of the current DatadogSLOSpec to know if the Spec has changed and needs an update.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "currentHash")]
    pub current_hash: Option<String>,
    /// ID is the SLO ID generated in Datadog.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// LastForceSyncTime is the last time the API SLO was last force synced with the DatadogSLO resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastForceSyncTime")]
    pub last_force_sync_time: Option<String>,
    /// SyncStatus shows the health of syncing the SLO state to Datadog.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncStatus")]
    pub sync_status: Option<String>,
}

