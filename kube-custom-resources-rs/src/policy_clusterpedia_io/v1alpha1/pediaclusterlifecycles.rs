// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/clusterpedia-io/clusterpedia/policy.clusterpedia.io/v1alpha1/pediaclusterlifecycles.yaml --derive=PartialEq
// kopium version: 0.19.0

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "policy.clusterpedia.io", version = "v1alpha1", kind = "PediaClusterLifecycle", plural = "pediaclusterlifecycles")]
#[kube(status = "PediaClusterLifecycleStatus")]
#[kube(schema = "disabled")]
#[kube(derive="PartialEq")]
pub struct PediaClusterLifecycleSpec {
    #[serde(rename = "creationCondition")]
    pub creation_condition: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub references: Option<Vec<PediaClusterLifecycleReferences>>,
    pub source: PediaClusterLifecycleSource,
    pub template: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PediaClusterLifecycleReferences {
    pub group: String,
    pub key: String,
    #[serde(rename = "nameTemplate")]
    pub name_template: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceTemplate")]
    pub namespace_template: Option<String>,
    pub resource: String,
    pub version: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PediaClusterLifecycleSource {
    pub group: String,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    pub resource: String,
    pub version: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PediaClusterLifecycleStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub references: Option<Vec<PediaClusterLifecycleStatusReferences>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct PediaClusterLifecycleStatusReferences {
    pub group: String,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    pub resource: String,
    pub version: String,
}

