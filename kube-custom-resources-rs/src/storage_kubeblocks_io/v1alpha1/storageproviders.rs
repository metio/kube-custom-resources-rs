// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/apecloud/kubeblocks/storage.kubeblocks.io/v1alpha1/storageproviders.yaml --derive=PartialEq
// kopium version: 0.16.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// StorageProviderSpec defines the desired state of StorageProvider
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "storage.kubeblocks.io", version = "v1alpha1", kind = "StorageProvider", plural = "storageproviders")]
#[kube(status = "StorageProviderStatus")]
#[kube(schema = "disabled")]
pub struct StorageProviderSpec {
    /// The name of the CSI driver used by this StorageProvider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "csiDriverName")]
    pub csi_driver_name: Option<String>,
    /// A Go template for rendering a secret which will be used by the CSI driver. The template will be rendered with the following variables: - Parameters: a map of parameters defined in the ParametersSchema.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "csiDriverSecretTemplate")]
    pub csi_driver_secret_template: Option<String>,
    /// A Go template for rendering a config used by the datasafed command. The template will be rendered with the following variables: - Parameters: a map of parameters defined in the ParametersSchema.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasafedConfigTemplate")]
    pub datasafed_config_template: Option<String>,
    /// The schema describes the parameters required by this StorageProvider, when rendering the templates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parametersSchema")]
    pub parameters_schema: Option<StorageProviderParametersSchema>,
    /// A Go template for rendering a PersistentVolumeClaim. The template will be rendered with the following variables: - Parameters: a map of parameters defined in the ParametersSchema. - GeneratedStorageClassName: the name of the storage class generated with the StorageClassTemplate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeClaimTemplate")]
    pub persistent_volume_claim_template: Option<String>,
    /// A Go template for rendering a storage class which will be used by the CSI driver. The template will be rendered with the following variables: - Parameters: a map of parameters defined in the ParametersSchema. - CSIDriverSecretRef: the reference of the secret created by the CSIDriverSecretTemplate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassTemplate")]
    pub storage_class_template: Option<String>,
}

/// The schema describes the parameters required by this StorageProvider, when rendering the templates.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct StorageProviderParametersSchema {
    /// credentialFields are the fields used to generate the secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialFields")]
    pub credential_fields: Option<Vec<String>>,
    /// openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openAPIV3Schema")]
    pub open_apiv3_schema: Option<BTreeMap<String, serde_json::Value>>,
}

/// StorageProviderStatus defines the observed state of StorageProvider
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct StorageProviderStatus {
    /// Describes the current state of the storage provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<StorageProviderStatusConditions>>,
    /// Storage provider reconciliation phases. Valid values are NotReady, Ready.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<StorageProviderStatusPhase>,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct StorageProviderStatusConditions {
    /// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// message is a human readable message indicating details about the transition. This may be an empty string.
    pub message: String,
    /// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    pub reason: String,
    /// status of the condition, one of True, False, Unknown.
    pub status: StorageProviderStatusConditionsStatus,
    /// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum StorageProviderStatusConditionsStatus {
    True,
    False,
    Unknown,
}

/// StorageProviderStatus defines the observed state of StorageProvider
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum StorageProviderStatusPhase {
    NotReady,
    Ready,
}

