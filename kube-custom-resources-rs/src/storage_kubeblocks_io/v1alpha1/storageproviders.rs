// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/apecloud/kubeblocks/storage.kubeblocks.io/v1alpha1/storageproviders.yaml --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// StorageProviderSpec defines the desired state of `StorageProvider`.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "storage.kubeblocks.io", version = "v1alpha1", kind = "StorageProvider", plural = "storageproviders")]
#[kube(status = "StorageProviderStatus")]
#[kube(schema = "disabled")]
pub struct StorageProviderSpec {
    /// Specifies the name of the CSI driver used to access remote storage. This field can be empty, it indicates that the storage is not accessible via CSI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "csiDriverName")]
    pub csi_driver_name: Option<String>,
    /// A Go template that used to render and generate `k8s.io/api/core/v1.Secret` resources for a specific CSI driver. For example, `accessKey` and `secretKey` needed by CSI-S3 are stored in this `Secret` resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "csiDriverSecretTemplate")]
    pub csi_driver_secret_template: Option<String>,
    /// A Go template used to render and generate `k8s.io/api/core/v1.Secret`. This `Secret` involves the configuration details required by the `datasafed` tool to access remote storage. For example, the `Secret` should contain `endpoint`, `bucket`, 'region', 'accessKey', 'secretKey', or something else for S3 storage. This field can be empty, it means this kind of storage is not accessible via the `datasafed` tool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasafedConfigTemplate")]
    pub datasafed_config_template: Option<String>,
    /// Describes the parameters required for storage. The parameters defined here can be referenced in the above templates, and `kbcli` uses this definition for dynamic command-line parameter parsing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parametersSchema")]
    pub parameters_schema: Option<StorageProviderParametersSchema>,
    /// A Go template that renders and generates `k8s.io/api/core/v1.PersistentVolumeClaim` resources. This PVC can reference the `StorageClass` created from `storageClassTemplate`, allowing Pods to access remote storage by mounting the PVC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeClaimTemplate")]
    pub persistent_volume_claim_template: Option<String>,
    /// A Go template utilized to render and generate `kubernetes.storage.k8s.io.v1.StorageClass` resources. The `StorageClass' created by this template is aimed at using the CSI driver.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassTemplate")]
    pub storage_class_template: Option<String>,
}

/// Describes the parameters required for storage. The parameters defined here can be referenced in the above templates, and `kbcli` uses this definition for dynamic command-line parameter parsing.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct StorageProviderParametersSchema {
    /// Defines which parameters are credential fields, which need to be handled specifically. For instance, these should be stored in a `Secret` instead of a `ConfigMap`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialFields")]
    pub credential_fields: Option<Vec<String>>,
    /// Defines the parameters in OpenAPI V3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openAPIV3Schema")]
    pub open_apiv3_schema: Option<BTreeMap<String, serde_json::Value>>,
}

/// StorageProviderStatus defines the observed state of `StorageProvider`.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct StorageProviderStatus {
    /// Describes the current state of the `StorageProvider`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<StorageProviderStatusConditions>>,
    /// The phase of the `StorageProvider`. Valid phases are `NotReady` and `Ready`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<StorageProviderStatusPhase>,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct StorageProviderStatusConditions {
    /// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// message is a human readable message indicating details about the transition. This may be an empty string.
    pub message: String,
    /// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    pub reason: String,
    /// status of the condition, one of True, False, Unknown.
    pub status: StorageProviderStatusConditionsStatus,
    /// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum StorageProviderStatusConditionsStatus {
    True,
    False,
    Unknown,
}

/// StorageProviderStatus defines the observed state of `StorageProvider`.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum StorageProviderStatusPhase {
    NotReady,
    Ready,
}

