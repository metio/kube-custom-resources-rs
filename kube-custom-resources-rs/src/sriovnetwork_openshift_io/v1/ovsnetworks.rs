// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/sriov-network-operator/sriovnetwork.openshift.io/v1/ovsnetworks.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// OVSNetworkSpec defines the desired state of OVSNetwork
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "sriovnetwork.openshift.io", version = "v1", kind = "OVSNetwork", plural = "ovsnetworks")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct OVSNetworkSpec {
    /// name of the OVS bridge, if not set OVS will automatically select bridge
    /// based on VF PCI address
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bridge: Option<String>,
    /// Capabilities to be configured for this network.
    /// Capabilities supported: (mac|ips), e.g. '{"mac": true}'
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<String>,
    /// The type of interface on ovs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "interfaceType")]
    pub interface_type: Option<String>,
    /// IPAM configuration to be used for this network.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ipam: Option<String>,
    /// MetaPluginsConfig configuration to be used in order to chain metaplugins
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metaPlugins")]
    pub meta_plugins: Option<String>,
    /// Mtu for the OVS port
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mtu: Option<i64>,
    /// Namespace of the NetworkAttachmentDefinition custom resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkNamespace")]
    pub network_namespace: Option<String>,
    /// OVS Network device plugin endpoint resource name
    #[serde(rename = "resourceName")]
    pub resource_name: String,
    /// Trunk configuration for the OVS port
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub trunk: Option<Vec<OVSNetworkTrunk>>,
    /// Vlan to assign for the OVS port
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vlan: Option<i64>,
}

/// TrunkConfig contains configuration for bridge trunk
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OVSNetworkTrunk {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxID")]
    pub max_id: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minID")]
    pub min_id: Option<i64>,
}

/// OVSNetworkStatus defines the observed state of OVSNetwork
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OVSNetworkStatus {
}

