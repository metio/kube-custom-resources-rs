// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/sriov-network-operator/sriovnetwork.openshift.io/v1/sriovnetworknodepolicies.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// SriovNetworkNodePolicySpec defines the desired state of SriovNetworkNodePolicy
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "sriovnetwork.openshift.io", version = "v1", kind = "SriovNetworkNodePolicy", plural = "sriovnetworknodepolicies")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct SriovNetworkNodePolicySpec {
    /// contains bridge configuration for matching PFs,
    /// valid only for eSwitchMode==switchdev
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bridge: Option<SriovNetworkNodePolicyBridge>,
    /// The driver type for configured VFs. Allowed value "netdevice", "vfio-pci". Defaults to netdevice.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceType")]
    pub device_type: Option<SriovNetworkNodePolicyDeviceType>,
    /// NIC Device Mode. Allowed value "legacy","switchdev".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eSwitchMode")]
    pub e_switch_mode: Option<SriovNetworkNodePolicyESwitchMode>,
    /// Exclude device's NUMA node when advertising this resource by SRIOV network device plugin. Default to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludeTopology")]
    pub exclude_topology: Option<bool>,
    /// don't create the virtual function only allocated them to the device plugin. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externallyManaged")]
    pub externally_managed: Option<bool>,
    /// RDMA mode. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isRdma")]
    pub is_rdma: Option<bool>,
    /// NIC Link Type. Allowed value "eth", "ETH", "ib", and "IB".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linkType")]
    pub link_type: Option<SriovNetworkNodePolicyLinkType>,
    /// MTU of VF
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mtu: Option<i64>,
    /// mount vhost-net device. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "needVhostNet")]
    pub need_vhost_net: Option<bool>,
    /// NicSelector selects the NICs to be configured
    #[serde(rename = "nicSelector")]
    pub nic_selector: SriovNetworkNodePolicyNicSelector,
    /// NodeSelector selects the nodes to be configured
    #[serde(rename = "nodeSelector")]
    pub node_selector: BTreeMap<String, String>,
    /// Number of VFs for each PF
    #[serde(rename = "numVfs")]
    pub num_vfs: i64,
    /// Priority of the policy, higher priority policies can override lower ones.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
    /// SRIOV Network device plugin endpoint resource name
    #[serde(rename = "resourceName")]
    pub resource_name: String,
    /// VDPA device type. Allowed value "virtio", "vhost"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vdpaType")]
    pub vdpa_type: Option<SriovNetworkNodePolicyVdpaType>,
}

/// contains bridge configuration for matching PFs,
/// valid only for eSwitchMode==switchdev
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SriovNetworkNodePolicyBridge {
    /// contains configuration for the OVS bridge,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ovs: Option<SriovNetworkNodePolicyBridgeOvs>,
}

/// contains configuration for the OVS bridge,
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SriovNetworkNodePolicyBridgeOvs {
    /// contains bridge level settings
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bridge: Option<SriovNetworkNodePolicyBridgeOvsBridge>,
    /// contains settings for uplink (PF)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uplink: Option<SriovNetworkNodePolicyBridgeOvsUplink>,
}

/// contains bridge level settings
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SriovNetworkNodePolicyBridgeOvsBridge {
    /// configure datapath_type field in the Bridge table in OVSDB
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datapathType")]
    pub datapath_type: Option<String>,
    /// IDs to inject to external_ids field in the Bridge table in OVSDB
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalIDs")]
    pub external_i_ds: Option<BTreeMap<String, String>>,
    /// additional options to inject to other_config field in the bridge table in OVSDB
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "otherConfig")]
    pub other_config: Option<BTreeMap<String, String>>,
}

/// contains settings for uplink (PF)
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SriovNetworkNodePolicyBridgeOvsUplink {
    /// contains settings for PF interface in the OVS bridge
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interface: Option<SriovNetworkNodePolicyBridgeOvsUplinkInterface>,
}

/// contains settings for PF interface in the OVS bridge
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SriovNetworkNodePolicyBridgeOvsUplinkInterface {
    /// external_ids field in the Interface table in OVSDB
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalIDs")]
    pub external_i_ds: Option<BTreeMap<String, String>>,
    /// options field in the Interface table in OVSDB
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, String>>,
    /// other_config field in the Interface table in OVSDB
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "otherConfig")]
    pub other_config: Option<BTreeMap<String, String>>,
    /// type field in the Interface table in OVSDB
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// SriovNetworkNodePolicySpec defines the desired state of SriovNetworkNodePolicy
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SriovNetworkNodePolicyDeviceType {
    #[serde(rename = "netdevice")]
    Netdevice,
    #[serde(rename = "vfio-pci")]
    VfioPci,
}

/// SriovNetworkNodePolicySpec defines the desired state of SriovNetworkNodePolicy
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SriovNetworkNodePolicyESwitchMode {
    #[serde(rename = "legacy")]
    Legacy,
    #[serde(rename = "switchdev")]
    Switchdev,
}

/// SriovNetworkNodePolicySpec defines the desired state of SriovNetworkNodePolicy
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SriovNetworkNodePolicyLinkType {
    #[serde(rename = "eth")]
    Eth,
    #[serde(rename = "ETH")]
    EthX,
    #[serde(rename = "ib")]
    Ib,
    #[serde(rename = "IB")]
    IbX,
}

/// NicSelector selects the NICs to be configured
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SriovNetworkNodePolicyNicSelector {
    /// The device hex code of SR-IoV device. Allowed value "0d58", "1572", "158b", "1013", "1015", "1017", "101b".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceID")]
    pub device_id: Option<String>,
    /// Infrastructure Networking selection filter. Allowed value "openstack/NetworkID:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "netFilter")]
    pub net_filter: Option<String>,
    /// Name of SR-IoV PF.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pfNames")]
    pub pf_names: Option<Vec<String>>,
    /// PCI address of SR-IoV PF.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootDevices")]
    pub root_devices: Option<Vec<String>>,
    /// The vendor hex code of SR-IoV device. Allowed value "8086", "15b3".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vendor: Option<String>,
}

/// SriovNetworkNodePolicySpec defines the desired state of SriovNetworkNodePolicy
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SriovNetworkNodePolicyVdpaType {
    #[serde(rename = "virtio")]
    Virtio,
    #[serde(rename = "vhost")]
    Vhost,
}

/// SriovNetworkNodePolicyStatus defines the observed state of SriovNetworkNodePolicy
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SriovNetworkNodePolicyStatus {
}

