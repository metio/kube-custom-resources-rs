// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/sriov-network-operator/sriovnetwork.openshift.io/v1/sriovnetworks.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// SriovNetworkSpec defines the desired state of SriovNetwork
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "sriovnetwork.openshift.io", version = "v1", kind = "SriovNetwork", plural = "sriovnetworks")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct SriovNetworkSpec {
    /// Capabilities to be configured for this network.
    /// Capabilities supported: (mac|ips), e.g. '{"mac": true}'
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<String>,
    /// IPAM configuration to be used for this network.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ipam: Option<String>,
    /// VF link state (enable|disable|auto)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linkState")]
    pub link_state: Option<SriovNetworkLinkState>,
    /// LogFile sets the log file of the SRIOV CNI plugin logs. If unset (default), this will log to stderr and thus
    /// to multus and container runtime logs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logFile")]
    pub log_file: Option<String>,
    /// LogLevel sets the log level of the SRIOV CNI plugin - either of panic, error, warning, info, debug. Defaults
    /// to info if left blank.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<SriovNetworkLogLevel>,
    /// Maximum tx rate, in Mbps, for the VF. Defaults to 0 (no rate limiting)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTxRate")]
    pub max_tx_rate: Option<i64>,
    /// MetaPluginsConfig configuration to be used in order to chain metaplugins to the sriov interface returned
    /// by the operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metaPlugins")]
    pub meta_plugins: Option<String>,
    /// Minimum tx rate, in Mbps, for the VF. Defaults to 0 (no rate limiting). min_tx_rate should be <= max_tx_rate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minTxRate")]
    pub min_tx_rate: Option<i64>,
    /// Namespace of the NetworkAttachmentDefinition custom resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkNamespace")]
    pub network_namespace: Option<String>,
    /// SRIOV Network device plugin endpoint resource name
    #[serde(rename = "resourceName")]
    pub resource_name: String,
    /// VF spoof check, (on|off)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spoofChk")]
    pub spoof_chk: Option<SriovNetworkSpoofChk>,
    /// VF trust mode (on|off)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub trust: Option<SriovNetworkTrust>,
    /// VLAN ID to assign for the VF. Defaults to 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vlan: Option<i64>,
    /// VLAN proto to assign for the VF. Defaults to 802.1q.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vlanProto")]
    pub vlan_proto: Option<SriovNetworkVlanProto>,
    /// VLAN QoS ID to assign for the VF. Defaults to 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vlanQoS")]
    pub vlan_qo_s: Option<i64>,
}

/// SriovNetworkSpec defines the desired state of SriovNetwork
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SriovNetworkLinkState {
    #[serde(rename = "auto")]
    Auto,
    #[serde(rename = "enable")]
    Enable,
    #[serde(rename = "disable")]
    Disable,
}

/// SriovNetworkSpec defines the desired state of SriovNetwork
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SriovNetworkLogLevel {
    #[serde(rename = "panic")]
    Panic,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "")]
    KopiumEmpty,
}

/// SriovNetworkSpec defines the desired state of SriovNetwork
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SriovNetworkSpoofChk {
    #[serde(rename = "on")]
    On,
    #[serde(rename = "off")]
    Off,
}

/// SriovNetworkSpec defines the desired state of SriovNetwork
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SriovNetworkTrust {
    #[serde(rename = "on")]
    On,
    #[serde(rename = "off")]
    Off,
}

/// SriovNetworkSpec defines the desired state of SriovNetwork
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SriovNetworkVlanProto {
    #[serde(rename = "802.1q")]
    r#_8021q,
    #[serde(rename = "802.1Q")]
    r#_8021qX,
    #[serde(rename = "802.1ad")]
    r#_8021ad,
    #[serde(rename = "802.1AD")]
    r#_8021adX,
}

/// SriovNetworkStatus defines the observed state of SriovNetwork
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SriovNetworkStatus {
}

