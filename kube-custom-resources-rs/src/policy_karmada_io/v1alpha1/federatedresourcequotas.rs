// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/karmada-io/karmada/policy.karmada.io/v1alpha1/federatedresourcequotas.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
}
use self::prelude::*;

/// Spec defines the desired quota.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "policy.karmada.io", version = "v1alpha1", kind = "FederatedResourceQuota", plural = "federatedresourcequotas")]
#[kube(namespaced)]
#[kube(status = "FederatedResourceQuotaStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct FederatedResourceQuotaSpec {
    /// Overall is the set of desired hard limits for each named resource.
    pub overall: BTreeMap<String, IntOrString>,
    /// StaticAssignments represents the subset of desired hard limits for each cluster.
    /// Note: for clusters not present in this list, Karmada will set an empty ResourceQuota to them, which means these
    /// clusters will have no quotas in the referencing namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "staticAssignments")]
    pub static_assignments: Option<Vec<FederatedResourceQuotaStaticAssignments>>,
}

/// StaticClusterAssignment represents the set of desired hard limits for a specific cluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedResourceQuotaStaticAssignments {
    /// ClusterName is the name of the cluster the limits enforce to.
    #[serde(rename = "clusterName")]
    pub cluster_name: String,
    /// Hard is the set of desired hard limits for each named resource.
    pub hard: BTreeMap<String, IntOrString>,
}

/// Status defines the actual enforced quota and its current usage.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedResourceQuotaStatus {
    /// AggregatedStatus is the observed quota usage of each cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aggregatedStatus")]
    pub aggregated_status: Option<Vec<FederatedResourceQuotaStatusAggregatedStatus>>,
    /// Overall is the set of enforced hard limits for each named resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overall: Option<BTreeMap<String, IntOrString>>,
    /// OverallUsed is the current observed total usage of the resource in the namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "overallUsed")]
    pub overall_used: Option<BTreeMap<String, IntOrString>>,
}

/// ClusterQuotaStatus represents the set of desired limits and observed usage for a specific cluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FederatedResourceQuotaStatusAggregatedStatus {
    /// ClusterName is the name of the cluster the limits enforce to.
    #[serde(rename = "clusterName")]
    pub cluster_name: String,
    /// Hard is the set of enforced hard limits for each named resource.
    /// More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hard: Option<BTreeMap<String, IntOrString>>,
    /// Used is the current observed total usage of the resource in the namespace.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub used: Option<BTreeMap<String, IntOrString>>,
}

