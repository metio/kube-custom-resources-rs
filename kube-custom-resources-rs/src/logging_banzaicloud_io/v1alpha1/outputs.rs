// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kube-logging/logging-operator/logging.banzaicloud.io/v1alpha1/outputs.yaml --derive=Default --derive=PartialEq
// kopium version: 0.19.0

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "logging.banzaicloud.io", version = "v1alpha1", kind = "Output", plural = "outputs")]
#[kube(namespaced)]
#[kube(status = "OutputStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct OutputSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsElasticsearch")]
    pub aws_elasticsearch: Option<OutputAwsElasticsearch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azurestorage: Option<OutputAzurestorage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cloudwatch: Option<OutputCloudwatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub datadog: Option<OutputDatadog>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub elasticsearch: Option<OutputElasticsearch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<OutputFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub forward: Option<OutputForward>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<OutputGcs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gelf: Option<OutputGelf>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<OutputHttp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kafka: Option<OutputKafka>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kinesisStream")]
    pub kinesis_stream: Option<OutputKinesisStream>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logdna: Option<OutputLogdna>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingRef")]
    pub logging_ref: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logz: Option<OutputLogz>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub loki: Option<OutputLoki>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub newrelic: Option<OutputNewrelic>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nullout: Option<OutputNullout>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub opensearch: Option<OutputOpensearch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oss: Option<OutputOss>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redis: Option<OutputRedis>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub relabel: Option<OutputRelabel>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3: Option<OutputS3>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "splunkHec")]
    pub splunk_hec: Option<OutputSplunkHec>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sqs: Option<OutputSqs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sumologic: Option<OutputSumologic>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub syslog: Option<OutputSyslog>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api_key: Option<OutputAwsElasticsearchApiKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub application_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputAwsElasticsearchBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk_message_request_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<OutputAwsElasticsearchCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_cert: Option<OutputAwsElasticsearchClientCert>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_key: Option<OutputAwsElasticsearchClientKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_key_pass: Option<OutputAwsElasticsearchClientKeyPass>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression_level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_headers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub customize_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_enable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_ilm_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_ilm_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_ilm_policy_overwrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_template_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_elasticsearch_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deflector_alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_ilm: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<OutputAwsElasticsearchEndpoint>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exception_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fail_on_detecting_es_version_retry_exceed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fail_on_putting_template_retry_exceed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flatten_hashes: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flatten_hashes_separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<OutputAwsElasticsearchFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosts: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http_backend: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ignore_exceptions: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ilm_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ilm_policy_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ilm_policy_overwrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_index_in_url: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_tag_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_timestamp: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_date_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_es_400_reason: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_dateformat: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_format: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_prefix_separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_retry_get_es_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_retry_putting_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<OutputAwsElasticsearchPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pipeline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefer_oj_serializer: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reconnect_on_error: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reload_after: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reload_connections: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reload_on_failure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys_on_update: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys_on_update_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resurrect_after: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rollover_index: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub routing_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sniffer_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_max_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_min_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suppress_doc_wrap: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suppress_type_name: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_index_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_type_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_file: Option<OutputAwsElasticsearchTemplateFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_overwrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub templates: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_parse_error_tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_precision: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub type_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unrecoverable_error_types: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_legacy_template: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub utc_index: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validate_client_version: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verify_es_version_at_startup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub with_transporter_log: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub write_operation: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchApiKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputAwsElasticsearchApiKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputAwsElasticsearchApiKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchApiKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchApiKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchApiKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchApiKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchApiKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchApiKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputAwsElasticsearchCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputAwsElasticsearchCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchClientCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputAwsElasticsearchClientCertMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputAwsElasticsearchClientCertValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchClientCertMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchClientCertMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchClientCertMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchClientCertValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchClientCertValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchClientCertValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchClientKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputAwsElasticsearchClientKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputAwsElasticsearchClientKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchClientKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchClientKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchClientKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchClientKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchClientKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchClientKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchClientKeyPass {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputAwsElasticsearchClientKeyPassMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputAwsElasticsearchClientKeyPassValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchClientKeyPassMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchClientKeyPassMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchClientKeyPassMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchClientKeyPassValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchClientKeyPassValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchClientKeyPassValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpoint {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub access_key_id: Option<OutputAwsElasticsearchEndpointAccessKeyId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assume_role_arn: Option<OutputAwsElasticsearchEndpointAssumeRoleArn>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assume_role_session_name: Option<OutputAwsElasticsearchEndpointAssumeRoleSessionName>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assume_role_web_identity_token_file: Option<OutputAwsElasticsearchEndpointAssumeRoleWebIdentityTokenFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ecs_container_credentials_relative_uri: Option<OutputAwsElasticsearchEndpointEcsContainerCredentialsRelativeUri>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret_access_key: Option<OutputAwsElasticsearchEndpointSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sts_credentials_region: Option<OutputAwsElasticsearchEndpointStsCredentialsRegion>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointAccessKeyId {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputAwsElasticsearchEndpointAccessKeyIdMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputAwsElasticsearchEndpointAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointAccessKeyIdMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchEndpointAccessKeyIdMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointAccessKeyIdMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchEndpointAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointAssumeRoleArn {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputAwsElasticsearchEndpointAssumeRoleArnMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputAwsElasticsearchEndpointAssumeRoleArnValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointAssumeRoleArnMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchEndpointAssumeRoleArnMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointAssumeRoleArnMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointAssumeRoleArnValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchEndpointAssumeRoleArnValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointAssumeRoleArnValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointAssumeRoleSessionName {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputAwsElasticsearchEndpointAssumeRoleSessionNameMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputAwsElasticsearchEndpointAssumeRoleSessionNameValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointAssumeRoleSessionNameMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchEndpointAssumeRoleSessionNameMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointAssumeRoleSessionNameMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointAssumeRoleSessionNameValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchEndpointAssumeRoleSessionNameValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointAssumeRoleSessionNameValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointAssumeRoleWebIdentityTokenFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputAwsElasticsearchEndpointAssumeRoleWebIdentityTokenFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputAwsElasticsearchEndpointAssumeRoleWebIdentityTokenFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointAssumeRoleWebIdentityTokenFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchEndpointAssumeRoleWebIdentityTokenFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointAssumeRoleWebIdentityTokenFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointAssumeRoleWebIdentityTokenFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchEndpointAssumeRoleWebIdentityTokenFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointAssumeRoleWebIdentityTokenFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointEcsContainerCredentialsRelativeUri {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputAwsElasticsearchEndpointEcsContainerCredentialsRelativeUriMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputAwsElasticsearchEndpointEcsContainerCredentialsRelativeUriValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointEcsContainerCredentialsRelativeUriMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchEndpointEcsContainerCredentialsRelativeUriMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointEcsContainerCredentialsRelativeUriMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointEcsContainerCredentialsRelativeUriValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchEndpointEcsContainerCredentialsRelativeUriValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointEcsContainerCredentialsRelativeUriValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointSecretAccessKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputAwsElasticsearchEndpointSecretAccessKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputAwsElasticsearchEndpointSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointSecretAccessKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchEndpointSecretAccessKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointSecretAccessKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchEndpointSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointStsCredentialsRegion {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputAwsElasticsearchEndpointStsCredentialsRegionMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputAwsElasticsearchEndpointStsCredentialsRegionValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointStsCredentialsRegionMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchEndpointStsCredentialsRegionMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointStsCredentialsRegionMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointStsCredentialsRegionValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchEndpointStsCredentialsRegionValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchEndpointStsCredentialsRegionValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<OutputAwsElasticsearchFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OutputAwsElasticsearchFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputAwsElasticsearchPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputAwsElasticsearchPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchTemplateFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputAwsElasticsearchTemplateFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputAwsElasticsearchTemplateFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchTemplateFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchTemplateFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchTemplateFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchTemplateFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAwsElasticsearchTemplateFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAwsElasticsearchTemplateFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAzurestorage {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_create_container: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure_cloud: Option<String>,
    pub azure_container: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure_imds_api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure_object_key_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure_storage_access_key: Option<OutputAzurestorageAzureStorageAccessKey>,
    pub azure_storage_account: OutputAzurestorageAzureStorageAccount,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure_storage_sas_token: Option<OutputAzurestorageAzureStorageSasToken>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputAzurestorageBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAzurestorageAzureStorageAccessKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputAzurestorageAzureStorageAccessKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputAzurestorageAzureStorageAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAzurestorageAzureStorageAccessKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAzurestorageAzureStorageAccessKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAzurestorageAzureStorageAccessKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAzurestorageAzureStorageAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAzurestorageAzureStorageAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAzurestorageAzureStorageAccessKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAzurestorageAzureStorageAccount {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputAzurestorageAzureStorageAccountMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputAzurestorageAzureStorageAccountValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAzurestorageAzureStorageAccountMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAzurestorageAzureStorageAccountMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAzurestorageAzureStorageAccountMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAzurestorageAzureStorageAccountValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAzurestorageAzureStorageAccountValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAzurestorageAzureStorageAccountValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAzurestorageAzureStorageSasToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputAzurestorageAzureStorageSasTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputAzurestorageAzureStorageSasTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAzurestorageAzureStorageSasTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAzurestorageAzureStorageSasTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAzurestorageAzureStorageSasTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAzurestorageAzureStorageSasTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputAzurestorageAzureStorageSasTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAzurestorageAzureStorageSasTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputAzurestorageBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputCloudwatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_create_stream: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_instance_profile_credentials_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_key_id: Option<OutputCloudwatchAwsKeyId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_sec_key: Option<OutputCloudwatchAwsSecKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_sts_role_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_sts_session_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_use_sts: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputCloudwatchBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub concurrency: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<OutputCloudwatchFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http_proxy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_time_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json_handler: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub localtime: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_group_aws_tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_group_aws_tags_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_group_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_group_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_rejected_request: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_stream_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_stream_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_events_per_batch: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_message_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_keys: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub put_log_events_disable_retry_limit: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub put_log_events_retry_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub put_log_events_retry_wait: Option<String>,
    pub region: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_log_group_aws_tags_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_log_group_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_log_stream_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_retention_in_days: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retention_in_days: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retention_in_days_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_tag_as_group: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_tag_as_stream: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputCloudwatchAwsKeyId {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputCloudwatchAwsKeyIdMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputCloudwatchAwsKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputCloudwatchAwsKeyIdMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputCloudwatchAwsKeyIdMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputCloudwatchAwsKeyIdMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputCloudwatchAwsKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputCloudwatchAwsKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputCloudwatchAwsKeyIdValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputCloudwatchAwsSecKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputCloudwatchAwsSecKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputCloudwatchAwsSecKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputCloudwatchAwsSecKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputCloudwatchAwsSecKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputCloudwatchAwsSecKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputCloudwatchAwsSecKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputCloudwatchAwsSecKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputCloudwatchAwsSecKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputCloudwatchBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputCloudwatchFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<OutputCloudwatchFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OutputCloudwatchFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputDatadog {
    pub api_key: OutputDatadogApiKey,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputDatadogBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression_level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dd_hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dd_source: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dd_sourcecategory: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dd_tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_tag_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_backoff: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_retries: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub no_ssl_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_port: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timestamp_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_compression: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_http: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_json: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_ssl: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputDatadogApiKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputDatadogApiKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputDatadogApiKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputDatadogApiKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputDatadogApiKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputDatadogApiKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputDatadogApiKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputDatadogApiKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputDatadogApiKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputDatadogBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api_key: Option<OutputElasticsearchApiKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub application_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputElasticsearchBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk_message_request_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<OutputElasticsearchCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_cert: Option<OutputElasticsearchClientCert>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_key: Option<OutputElasticsearchClientKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_key_pass: Option<OutputElasticsearchClientKeyPass>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression_level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_headers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub customize_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_enable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_ilm_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_ilm_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_ilm_policy_overwrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_template_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_elasticsearch_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deflector_alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_ilm: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exception_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fail_on_detecting_es_version_retry_exceed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fail_on_putting_template_retry_exceed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flatten_hashes: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flatten_hashes_separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosts: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http_backend: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ignore_exceptions: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ilm_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ilm_policy_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ilm_policy_overwrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_index_in_url: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_tag_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_timestamp: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_date_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_es_400_reason: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_dateformat: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_format: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_prefix_separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_retry_get_es_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_retry_putting_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<OutputElasticsearchPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pipeline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefer_oj_serializer: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reconnect_on_error: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reload_after: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reload_connections: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reload_on_failure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys_on_update: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys_on_update_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resurrect_after: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rollover_index: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub routing_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sniffer_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_max_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_min_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suppress_doc_wrap: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suppress_type_name: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_index_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_type_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_file: Option<OutputElasticsearchTemplateFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_overwrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub templates: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_parse_error_tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_precision: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub type_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unrecoverable_error_types: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_legacy_template: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub utc_index: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validate_client_version: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verify_es_version_at_startup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub with_transporter_log: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub write_operation: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchApiKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputElasticsearchApiKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputElasticsearchApiKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchApiKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputElasticsearchApiKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchApiKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchApiKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputElasticsearchApiKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchApiKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputElasticsearchCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputElasticsearchCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputElasticsearchCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputElasticsearchCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchClientCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputElasticsearchClientCertMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputElasticsearchClientCertValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchClientCertMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputElasticsearchClientCertMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchClientCertMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchClientCertValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputElasticsearchClientCertValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchClientCertValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchClientKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputElasticsearchClientKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputElasticsearchClientKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchClientKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputElasticsearchClientKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchClientKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchClientKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputElasticsearchClientKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchClientKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchClientKeyPass {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputElasticsearchClientKeyPassMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputElasticsearchClientKeyPassValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchClientKeyPassMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputElasticsearchClientKeyPassMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchClientKeyPassMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchClientKeyPassValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputElasticsearchClientKeyPassValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchClientKeyPassValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputElasticsearchPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputElasticsearchPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputElasticsearchPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputElasticsearchPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchTemplateFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputElasticsearchTemplateFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputElasticsearchTemplateFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchTemplateFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputElasticsearchTemplateFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchTemplateFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchTemplateFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputElasticsearchTemplateFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputElasticsearchTemplateFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputFile {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_path_suffix: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub append: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputFileBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<OutputFileFormat>,
    pub path: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recompress: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub symlink_path: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputFileBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputFileFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<OutputFileFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OutputFileFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForward {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ack_response_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputForwardBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connect_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dns_round_robin: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expire_dns_cache: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hard_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub heartbeat_interval: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub heartbeat_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ignore_network_errors_at_startup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keepalive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keepalive_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phi_failure_detector: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phi_threshold: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recover_wait: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub require_ack_response: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub security: Option<OutputForwardSecurity>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub send_timeout: Option<i64>,
    pub servers: Vec<OutputForwardServers>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_allow_self_signed_cert: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_cert_logical_store_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_cert_path: Option<OutputForwardTlsCertPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_cert_thumbprint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_cert_use_enterprise_store: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_ciphers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_client_cert_path: Option<OutputForwardTlsClientCertPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_client_private_key_passphrase: Option<OutputForwardTlsClientPrivateKeyPassphrase>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_client_private_key_path: Option<OutputForwardTlsClientPrivateKeyPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_insecure_mode: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_verify_hostname: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verify_connection_at_startup: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardSecurity {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_anonymous_source: Option<bool>,
    pub self_hostname: String,
    pub shared_key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user_auth: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardServers {
    pub host: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<OutputForwardServersPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shared_key: Option<OutputForwardServersSharedKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub standby: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<OutputForwardServersUsername>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardServersPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputForwardServersPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputForwardServersPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardServersPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputForwardServersPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardServersPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardServersPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputForwardServersPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardServersPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardServersSharedKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputForwardServersSharedKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputForwardServersSharedKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardServersSharedKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputForwardServersSharedKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardServersSharedKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardServersSharedKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputForwardServersSharedKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardServersSharedKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardServersUsername {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputForwardServersUsernameMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputForwardServersUsernameValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardServersUsernameMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputForwardServersUsernameMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardServersUsernameMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardServersUsernameValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputForwardServersUsernameValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardServersUsernameValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardTlsCertPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputForwardTlsCertPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputForwardTlsCertPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardTlsCertPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputForwardTlsCertPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardTlsCertPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardTlsCertPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputForwardTlsCertPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardTlsCertPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardTlsClientCertPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputForwardTlsClientCertPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputForwardTlsClientCertPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardTlsClientCertPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputForwardTlsClientCertPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardTlsClientCertPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardTlsClientCertPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputForwardTlsClientCertPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardTlsClientCertPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardTlsClientPrivateKeyPassphrase {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputForwardTlsClientPrivateKeyPassphraseMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputForwardTlsClientPrivateKeyPassphraseValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardTlsClientPrivateKeyPassphraseMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputForwardTlsClientPrivateKeyPassphraseMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardTlsClientPrivateKeyPassphraseMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardTlsClientPrivateKeyPassphraseValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputForwardTlsClientPrivateKeyPassphraseValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardTlsClientPrivateKeyPassphraseValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardTlsClientPrivateKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputForwardTlsClientPrivateKeyPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputForwardTlsClientPrivateKeyPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardTlsClientPrivateKeyPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputForwardTlsClientPrivateKeyPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardTlsClientPrivateKeyPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardTlsClientPrivateKeyPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputForwardTlsClientPrivateKeyPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputForwardTlsClientPrivateKeyPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputGcs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub acl: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_create_bucket: Option<bool>,
    pub bucket: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputGcsBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credentials_json: Option<OutputGcsCredentialsJson>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encryption_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<OutputGcsFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hex_random_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keyfile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object_key_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object_metadata: Option<Vec<OutputGcsObjectMetadata>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overwrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub project: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage_class: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub store_as: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transcoding: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputGcsBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputGcsCredentialsJson {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputGcsCredentialsJsonMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputGcsCredentialsJsonValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputGcsCredentialsJsonMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputGcsCredentialsJsonMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputGcsCredentialsJsonMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputGcsCredentialsJsonValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputGcsCredentialsJsonValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputGcsCredentialsJsonValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputGcsFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<OutputGcsFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OutputGcsFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputGcsObjectMetadata {
    pub key: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputGelf {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputGelfBuffer>,
    pub host: String,
    pub port: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_options: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputGelfBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<OutputHttpAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputHttpBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    pub endpoint: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error_response_as_unrecoverable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<OutputHttpFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http_method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json_array: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub open_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub read_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retryable_response_codes: Option<Vec<i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_ca_cert_path: Option<OutputHttpTlsCaCertPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_ciphers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_client_cert_path: Option<OutputHttpTlsClientCertPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_private_key_passphrase: Option<OutputHttpTlsPrivateKeyPassphrase>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_private_key_path: Option<OutputHttpTlsPrivateKeyPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_verify_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpAuth {
    pub password: OutputHttpAuthPassword,
    pub username: OutputHttpAuthUsername,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpAuthPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputHttpAuthPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputHttpAuthPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpAuthPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputHttpAuthPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpAuthPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpAuthPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputHttpAuthPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpAuthPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpAuthUsername {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputHttpAuthUsernameMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputHttpAuthUsernameValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpAuthUsernameMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputHttpAuthUsernameMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpAuthUsernameMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpAuthUsernameValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputHttpAuthUsernameValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpAuthUsernameValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<OutputHttpFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OutputHttpFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpTlsCaCertPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputHttpTlsCaCertPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputHttpTlsCaCertPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpTlsCaCertPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputHttpTlsCaCertPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpTlsCaCertPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpTlsCaCertPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputHttpTlsCaCertPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpTlsCaCertPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpTlsClientCertPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputHttpTlsClientCertPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputHttpTlsClientCertPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpTlsClientCertPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputHttpTlsClientCertPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpTlsClientCertPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpTlsClientCertPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputHttpTlsClientCertPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpTlsClientCertPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpTlsPrivateKeyPassphrase {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputHttpTlsPrivateKeyPassphraseMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputHttpTlsPrivateKeyPassphraseValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpTlsPrivateKeyPassphraseMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputHttpTlsPrivateKeyPassphraseMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpTlsPrivateKeyPassphraseMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpTlsPrivateKeyPassphraseValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputHttpTlsPrivateKeyPassphraseValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpTlsPrivateKeyPassphraseValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpTlsPrivateKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputHttpTlsPrivateKeyPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputHttpTlsPrivateKeyPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpTlsPrivateKeyPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputHttpTlsPrivateKeyPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpTlsPrivateKeyPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpTlsPrivateKeyPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputHttpTlsPrivateKeyPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputHttpTlsPrivateKeyPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafka {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ack_timeout: Option<i64>,
    pub brokers: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputKafkaBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression_codec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_partition_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_topic: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub discard_kafka_delivery_failed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude_partion_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude_topic_key: Option<bool>,
    pub format: OutputKafkaFormat,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub get_kafka_client_log: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers_from_record: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub idempotent: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kafka_agg_max_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kafka_agg_max_messages: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keytab: Option<OutputKafkaKeytab>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_send_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition_key_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<OutputKafkaPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub principal: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required_acks: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sasl_over_ssl: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scram_mechanism: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_ca_cert: Option<OutputKafkaSslCaCert>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_ca_certs_from_system: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_client_cert: Option<OutputKafkaSslClientCert>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_client_cert_chain: Option<OutputKafkaSslClientCertChain>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_client_cert_key: Option<OutputKafkaSslClientCertKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_verify_hostname: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_default_for_unknown_topic: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<OutputKafkaUsername>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<OutputKafkaFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OutputKafkaFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaKeytab {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputKafkaKeytabMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputKafkaKeytabValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaKeytabMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputKafkaKeytabMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaKeytabMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaKeytabValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputKafkaKeytabValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaKeytabValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputKafkaPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputKafkaPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputKafkaPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputKafkaPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaSslCaCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputKafkaSslCaCertMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputKafkaSslCaCertValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaSslCaCertMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputKafkaSslCaCertMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaSslCaCertMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaSslCaCertValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputKafkaSslCaCertValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaSslCaCertValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaSslClientCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputKafkaSslClientCertMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputKafkaSslClientCertValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaSslClientCertMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputKafkaSslClientCertMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaSslClientCertMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaSslClientCertValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputKafkaSslClientCertValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaSslClientCertValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaSslClientCertChain {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputKafkaSslClientCertChainMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputKafkaSslClientCertChainValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaSslClientCertChainMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputKafkaSslClientCertChainMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaSslClientCertChainMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaSslClientCertChainValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputKafkaSslClientCertChainValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaSslClientCertChainValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaSslClientCertKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputKafkaSslClientCertKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputKafkaSslClientCertKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaSslClientCertKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputKafkaSslClientCertKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaSslClientCertKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaSslClientCertKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputKafkaSslClientCertKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaSslClientCertKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaUsername {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputKafkaUsernameMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputKafkaUsernameValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaUsernameMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputKafkaUsernameMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaUsernameMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaUsernameValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputKafkaUsernameValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKafkaUsernameValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKinesisStream {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assume_role_credentials: Option<OutputKinesisStreamAssumeRoleCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_iam_retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_key_id: Option<OutputKinesisStreamAwsKeyId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_sec_key: Option<OutputKinesisStreamAwsSecKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_ses_token: Option<OutputKinesisStreamAwsSesToken>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub batch_request_max_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub batch_request_max_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputKinesisStreamBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<OutputKinesisStreamFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub process_credentials: Option<OutputKinesisStreamProcessCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reset_backoff_if_success: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries_on_batch_request: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    pub stream_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKinesisStreamAssumeRoleCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration_seconds: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
    pub role_arn: String,
    pub role_session_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKinesisStreamAwsKeyId {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputKinesisStreamAwsKeyIdMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputKinesisStreamAwsKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKinesisStreamAwsKeyIdMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputKinesisStreamAwsKeyIdMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKinesisStreamAwsKeyIdMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKinesisStreamAwsKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputKinesisStreamAwsKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKinesisStreamAwsKeyIdValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKinesisStreamAwsSecKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputKinesisStreamAwsSecKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputKinesisStreamAwsSecKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKinesisStreamAwsSecKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputKinesisStreamAwsSecKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKinesisStreamAwsSecKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKinesisStreamAwsSecKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputKinesisStreamAwsSecKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKinesisStreamAwsSecKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKinesisStreamAwsSesToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputKinesisStreamAwsSesTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputKinesisStreamAwsSesTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKinesisStreamAwsSesTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputKinesisStreamAwsSesTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKinesisStreamAwsSesTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKinesisStreamAwsSesTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputKinesisStreamAwsSesTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKinesisStreamAwsSesTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKinesisStreamBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKinesisStreamFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<OutputKinesisStreamFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OutputKinesisStreamFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputKinesisStreamProcessCredentials {
    pub process: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLogdna {
    pub api_key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub app: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputLogdnaBuffer>,
    pub hostname: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingester_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingester_endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLogdnaBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLogz {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputLogzBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk_limit_warning_limit: Option<i64>,
    pub endpoint: OutputLogzEndpoint,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gzip: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http_idle_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub output_include_tags: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub output_include_time: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_sleep: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLogzBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLogzEndpoint {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<OutputLogzEndpointToken>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLogzEndpointToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputLogzEndpointTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputLogzEndpointTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLogzEndpointTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputLogzEndpointTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLogzEndpointTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLogzEndpointTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputLogzEndpointTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLogzEndpointTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLoki {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputLokiBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_cert: Option<OutputLokiCaCert>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<OutputLokiCert>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configure_kubernetes_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop_single_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extra_labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extract_kubernetes_labels: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_thread_label: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure_tls: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<OutputLokiKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub line_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<OutputLokiPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tenant: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<OutputLokiUsername>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiCaCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputLokiCaCertMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputLokiCaCertValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiCaCertMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputLokiCaCertMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiCaCertMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiCaCertValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputLokiCaCertValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiCaCertValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputLokiCertMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputLokiCertValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiCertMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputLokiCertMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiCertMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiCertValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputLokiCertValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiCertValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputLokiKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputLokiKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputLokiKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputLokiKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputLokiPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputLokiPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputLokiPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputLokiPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiUsername {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputLokiUsernameMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputLokiUsernameValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiUsernameMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputLokiUsernameMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiUsernameMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiUsernameValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputLokiUsernameValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputLokiUsernameValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputNewrelic {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api_key: Option<OutputNewrelicApiKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub base_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputNewrelicBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<OutputNewrelicFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub license_key: Option<OutputNewrelicLicenseKey>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputNewrelicApiKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputNewrelicApiKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputNewrelicApiKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputNewrelicApiKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputNewrelicApiKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputNewrelicApiKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputNewrelicApiKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputNewrelicApiKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputNewrelicApiKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputNewrelicBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputNewrelicFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<OutputNewrelicFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OutputNewrelicFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputNewrelicLicenseKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputNewrelicLicenseKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputNewrelicLicenseKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputNewrelicLicenseKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputNewrelicLicenseKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputNewrelicLicenseKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputNewrelicLicenseKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputNewrelicLicenseKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputNewrelicLicenseKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputNullout {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub application_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputOpensearchBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk_message_request_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<OutputOpensearchCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub catch_transport_exception_on_retry: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_cert: Option<OutputOpensearchClientCert>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_key: Option<OutputOpensearchClientKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_key_pass: Option<OutputOpensearchClientKeyPass>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression_level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_headers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub customize_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_enable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_stream_template_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_opensearch_version: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub emit_error_for_missing_id: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub emit_error_label_event: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<OutputOpensearchEndpoint>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exception_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fail_on_detecting_os_version_retry_exceed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fail_on_putting_template_retry_exceed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flatten_hashes: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flatten_hashes_separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosts: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http_backend: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http_backend_excon_nonblock: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ignore_exceptions: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_index_in_url: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_tag_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_timestamp: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_date_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_os_400_reason: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_dateformat: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_format: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_prefix_separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_retry_get_os_version: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_retry_putting_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<OutputOpensearchPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pipeline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefer_oj_serializer: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reconnect_on_error: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reload_after: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reload_connections: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reload_on_failure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys_on_update: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys_on_update_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resurrect_after: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub routing_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sniffer_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suppress_doc_wrap: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suppress_type_name: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_index_affinity: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_index_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_file: Option<OutputOpensearchTemplateFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_overwrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub templates: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key_exclude_timestamp: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_parse_error_tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_precision: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub truncate_caches_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unrecoverable_error_types: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unrecoverable_record_types: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_legacy_template: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub utc_index: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validate_client_version: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verify_os_version_at_startup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub with_transporter_log: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub write_operation: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputOpensearchCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputOpensearchCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchClientCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputOpensearchClientCertMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputOpensearchClientCertValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchClientCertMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchClientCertMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchClientCertMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchClientCertValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchClientCertValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchClientCertValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchClientKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputOpensearchClientKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputOpensearchClientKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchClientKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchClientKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchClientKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchClientKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchClientKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchClientKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchClientKeyPass {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputOpensearchClientKeyPassMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputOpensearchClientKeyPassValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchClientKeyPassMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchClientKeyPassMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchClientKeyPassMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchClientKeyPassValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchClientKeyPassValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchClientKeyPassValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpoint {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub access_key_id: Option<OutputOpensearchEndpointAccessKeyId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assume_role_arn: Option<OutputOpensearchEndpointAssumeRoleArn>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assume_role_session_name: Option<OutputOpensearchEndpointAssumeRoleSessionName>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assume_role_web_identity_token_file: Option<OutputOpensearchEndpointAssumeRoleWebIdentityTokenFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ecs_container_credentials_relative_uri: Option<OutputOpensearchEndpointEcsContainerCredentialsRelativeUri>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret_access_key: Option<OutputOpensearchEndpointSecretAccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sts_credentials_region: Option<OutputOpensearchEndpointStsCredentialsRegion>,
    pub url: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointAccessKeyId {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputOpensearchEndpointAccessKeyIdMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputOpensearchEndpointAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointAccessKeyIdMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchEndpointAccessKeyIdMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointAccessKeyIdMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchEndpointAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointAssumeRoleArn {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputOpensearchEndpointAssumeRoleArnMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputOpensearchEndpointAssumeRoleArnValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointAssumeRoleArnMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchEndpointAssumeRoleArnMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointAssumeRoleArnMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointAssumeRoleArnValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchEndpointAssumeRoleArnValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointAssumeRoleArnValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointAssumeRoleSessionName {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputOpensearchEndpointAssumeRoleSessionNameMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputOpensearchEndpointAssumeRoleSessionNameValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointAssumeRoleSessionNameMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchEndpointAssumeRoleSessionNameMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointAssumeRoleSessionNameMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointAssumeRoleSessionNameValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchEndpointAssumeRoleSessionNameValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointAssumeRoleSessionNameValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointAssumeRoleWebIdentityTokenFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputOpensearchEndpointAssumeRoleWebIdentityTokenFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputOpensearchEndpointAssumeRoleWebIdentityTokenFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointAssumeRoleWebIdentityTokenFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchEndpointAssumeRoleWebIdentityTokenFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointAssumeRoleWebIdentityTokenFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointAssumeRoleWebIdentityTokenFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchEndpointAssumeRoleWebIdentityTokenFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointAssumeRoleWebIdentityTokenFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointEcsContainerCredentialsRelativeUri {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputOpensearchEndpointEcsContainerCredentialsRelativeUriMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputOpensearchEndpointEcsContainerCredentialsRelativeUriValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointEcsContainerCredentialsRelativeUriMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchEndpointEcsContainerCredentialsRelativeUriMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointEcsContainerCredentialsRelativeUriMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointEcsContainerCredentialsRelativeUriValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchEndpointEcsContainerCredentialsRelativeUriValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointEcsContainerCredentialsRelativeUriValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointSecretAccessKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputOpensearchEndpointSecretAccessKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputOpensearchEndpointSecretAccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointSecretAccessKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchEndpointSecretAccessKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointSecretAccessKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointSecretAccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchEndpointSecretAccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointSecretAccessKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointStsCredentialsRegion {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputOpensearchEndpointStsCredentialsRegionMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputOpensearchEndpointStsCredentialsRegionValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointStsCredentialsRegionMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchEndpointStsCredentialsRegionMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointStsCredentialsRegionMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointStsCredentialsRegionValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchEndpointStsCredentialsRegionValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchEndpointStsCredentialsRegionValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputOpensearchPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputOpensearchPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchTemplateFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputOpensearchTemplateFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputOpensearchTemplateFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchTemplateFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchTemplateFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchTemplateFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchTemplateFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOpensearchTemplateFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOpensearchTemplateFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOss {
    pub access_key_id: OutputOssAccessKeyId,
    pub access_key_secret: OutputOssAccessKeySecret,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_create_bucket: Option<bool>,
    pub bucket: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputOssBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check_bucket: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check_object: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub download_crc_enable: Option<bool>,
    pub endpoint: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<OutputOssFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hex_random_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub open_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oss_sdk_log_dir: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overwrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub read_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub store_as: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upload_crc_enable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub warn_for_delay: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOssAccessKeyId {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputOssAccessKeyIdMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputOssAccessKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOssAccessKeyIdMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOssAccessKeyIdMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOssAccessKeyIdMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOssAccessKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOssAccessKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOssAccessKeyIdValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOssAccessKeySecret {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputOssAccessKeySecretMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputOssAccessKeySecretValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOssAccessKeySecretMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOssAccessKeySecretMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOssAccessKeySecretMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOssAccessKeySecretValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputOssAccessKeySecretValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOssAccessKeySecretValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOssBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputOssFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<OutputOssFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OutputOssFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputRedis {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_duplicate_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputRedisBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub db_number: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<OutputRedisFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insert_key_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<OutputRedisPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strftime_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputRedisBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputRedisFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<OutputRedisFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OutputRedisFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputRedisPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputRedisPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputRedisPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputRedisPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputRedisPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputRedisPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputRedisPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputRedisPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputRedisPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputRelabel {
    pub label: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputS3 {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub acl: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assume_role_credentials: Option<OutputS3AssumeRoleCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_create_bucket: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_iam_retries: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_key_id: Option<OutputS3AwsKeyId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_sec_key: Option<OutputS3AwsSecKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputS3Buffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check_apikey_on_start: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check_bucket: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check_object: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clustername: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<OutputS3Compress>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compute_checksums: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_transfer_acceleration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub force_path_style: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<OutputS3Format>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grant_full_control: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grant_read: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grant_read_acp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grant_write_acp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hex_random_length: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instance_profile_credentials: Option<OutputS3InstanceProfileCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oneeye_format: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overwrite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy_uri: Option<String>,
    pub s3_bucket: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3_endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3_metadata: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3_object_key_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3_region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shared_credentials: Option<OutputS3SharedCredentials>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub signature_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sse_customer_algorithm: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sse_customer_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sse_customer_key_md5: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssekms_key_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_verify_peer: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage_class: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub store_as: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_bundled_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_server_side_encryption: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub warn_for_delay: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputS3AssumeRoleCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration_seconds: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub external_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
    pub role_arn: String,
    pub role_session_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputS3AwsKeyId {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputS3AwsKeyIdMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputS3AwsKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputS3AwsKeyIdMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputS3AwsKeyIdMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputS3AwsKeyIdMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputS3AwsKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputS3AwsKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputS3AwsKeyIdValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputS3AwsSecKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputS3AwsSecKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputS3AwsSecKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputS3AwsSecKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputS3AwsSecKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputS3AwsSecKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputS3AwsSecKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputS3AwsSecKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputS3AwsSecKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputS3Buffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputS3Compress {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parquet_compression_codec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parquet_page_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parquet_row_group_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub record_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputS3Format {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<OutputS3FormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OutputS3FormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputS3InstanceProfileCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http_open_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http_read_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputS3SharedCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profile_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputSplunkHecBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<OutputSplunkHecCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_path: Option<OutputSplunkHecCaPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_cert: Option<OutputSplunkHecClientCert>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_key: Option<OutputSplunkHecClientKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub coerce_to_utf8: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<OutputSplunkHecFormat>,
    pub hec_host: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hec_port: Option<i64>,
    pub hec_token: OutputSplunkHecHecToken,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub idle_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure_ssl: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_keys: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metric_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metric_value_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics_from_event: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub non_utf8_replacement_string: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub open_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub read_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sourcetype: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sourcetype_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_ciphers: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputSplunkHecCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputSplunkHecCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSplunkHecCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSplunkHecCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecCaPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputSplunkHecCaPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputSplunkHecCaPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecCaPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSplunkHecCaPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecCaPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecCaPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSplunkHecCaPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecCaPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecClientCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputSplunkHecClientCertMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputSplunkHecClientCertValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecClientCertMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSplunkHecClientCertMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecClientCertMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecClientCertValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSplunkHecClientCertValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecClientCertValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecClientKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputSplunkHecClientKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputSplunkHecClientKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecClientKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSplunkHecClientKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecClientKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecClientKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSplunkHecClientKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecClientKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_newline: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<OutputSplunkHecFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OutputSplunkHecFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecHecToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputSplunkHecHecTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputSplunkHecHecTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecHecTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSplunkHecHecTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecHecTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecHecTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSplunkHecHecTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSplunkHecHecTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSqs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_key_id: Option<OutputSqsAwsKeyId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws_sec_key: Option<OutputSqsAwsSecKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputSqsBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub create_queue: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delay_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_tag: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_group_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sqs_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag_property_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSqsAwsKeyId {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputSqsAwsKeyIdMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputSqsAwsKeyIdValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSqsAwsKeyIdMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSqsAwsKeyIdMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSqsAwsKeyIdMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSqsAwsKeyIdValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSqsAwsKeyIdValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSqsAwsKeyIdValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSqsAwsSecKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputSqsAwsSecKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputSqsAwsSecKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSqsAwsSecKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSqsAwsSecKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSqsAwsSecKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSqsAwsSecKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSqsAwsSecKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSqsAwsSecKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSqsBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSumologic {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add_timestamp: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputSumologicBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress_encoding: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_dimensions: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_cookies: Option<bool>,
    pub endpoint: OutputSumologicEndpoint,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metric_data_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub open_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_category: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_host: Option<String>,
    pub source_name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sumo_client: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timestamp_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verify_ssl: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSumologicBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSumologicEndpoint {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputSumologicEndpointMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputSumologicEndpointValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSumologicEndpointMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSumologicEndpointMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSumologicEndpointMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSumologicEndpointValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSumologicEndpointValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSumologicEndpointValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslog {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_self_signed_cert: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffer: Option<OutputSyslogBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_cert_path: Option<OutputSyslogClientCertPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_system_cert_store: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<OutputSyslogFormat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fqdn: Option<String>,
    pub host: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub private_key_passphrase: Option<OutputSyslogPrivateKeyPassphrase>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub private_key_path: Option<OutputSyslogPrivateKeyPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slow_flush_log_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub trusted_ca_path: Option<OutputSyslogTrustedCaPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verify_fqdn: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_full_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_records: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delayed_commit_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable_chunk_backup: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_at_shutdown: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_burst_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_thread_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overflow_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue_limit_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queued_chunks_limit_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_exponential_backoff_base: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_max_times: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_randomize: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_secondary_threshold: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_use_utc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_wait: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timekey_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_limit_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogClientCertPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputSyslogClientCertPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputSyslogClientCertPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogClientCertPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSyslogClientCertPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogClientCertPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogClientCertPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSyslogClientCertPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogClientCertPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogFormat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub app_name_field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname_field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message_id_field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proc_id_field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rfc6587_message_size: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub structured_data_field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<OutputSyslogFormatType>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum OutputSyslogFormatType {
    #[serde(rename = "out_file")]
    OutFile,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "ltsv")]
    Ltsv,
    #[serde(rename = "csv")]
    Csv,
    #[serde(rename = "msgpack")]
    Msgpack,
    #[serde(rename = "hash")]
    Hash,
    #[serde(rename = "single_value")]
    SingleValue,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogPrivateKeyPassphrase {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputSyslogPrivateKeyPassphraseMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputSyslogPrivateKeyPassphraseValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogPrivateKeyPassphraseMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSyslogPrivateKeyPassphraseMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogPrivateKeyPassphraseMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogPrivateKeyPassphraseValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSyslogPrivateKeyPassphraseValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogPrivateKeyPassphraseValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogPrivateKeyPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputSyslogPrivateKeyPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputSyslogPrivateKeyPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogPrivateKeyPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSyslogPrivateKeyPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogPrivateKeyPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogPrivateKeyPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSyslogPrivateKeyPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogPrivateKeyPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogTrustedCaPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<OutputSyslogTrustedCaPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<OutputSyslogTrustedCaPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogTrustedCaPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSyslogTrustedCaPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogTrustedCaPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogTrustedCaPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<OutputSyslogTrustedCaPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputSyslogTrustedCaPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct OutputStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub problems: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "problemsCount")]
    pub problems_count: Option<i64>,
}

