// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kube-logging/logging-operator/logging.banzaicloud.io/v1beta1/syslogngflows.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "logging.banzaicloud.io", version = "v1beta1", kind = "SyslogNGFlow", plural = "syslogngflows")]
#[kube(namespaced)]
#[kube(status = "SyslogNGFlowStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct SyslogNGFlowSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<SyslogNGFlowFilters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalOutputRefs")]
    pub global_output_refs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localOutputRefs")]
    pub local_output_refs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingRef")]
    pub logging_ref: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<SyslogNGFlowMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputMetrics")]
    pub output_metrics: Option<Vec<SyslogNGFlowOutputMetrics>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFilters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<SyslogNGFlowFiltersMatch>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parser: Option<SyslogNGFlowFiltersParser>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rewrite: Option<Vec<SyslogNGFlowFiltersRewrite>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNGFlowFiltersMatchRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersMatchRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersParser {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metrics-probe")]
    pub metrics_probe: Option<SyslogNGFlowFiltersParserMetricsProbe>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNGFlowFiltersParserRegexp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syslog-parser")]
    pub syslog_parser: Option<SyslogNGFlowFiltersParserSyslogParser>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersParserMetricsProbe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersParserRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub patterns: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersParserSyslogParser {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersRewrite {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_unset: Option<SyslogNGFlowFiltersRewriteGroupUnset>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rename: Option<SyslogNGFlowFiltersRewriteRename>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub set: Option<SyslogNGFlowFiltersRewriteSet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subst: Option<SyslogNGFlowFiltersRewriteSubst>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unset: Option<SyslogNGFlowFiltersRewriteUnset>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersRewriteGroupUnset {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<SyslogNGFlowFiltersRewriteGroupUnsetCondition>,
    pub pattern: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersRewriteGroupUnsetCondition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNGFlowFiltersRewriteGroupUnsetConditionRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersRewriteGroupUnsetConditionRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersRewriteRename {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<SyslogNGFlowFiltersRewriteRenameCondition>,
    #[serde(rename = "newName")]
    pub new_name: String,
    #[serde(rename = "oldName")]
    pub old_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersRewriteRenameCondition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNGFlowFiltersRewriteRenameConditionRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersRewriteRenameConditionRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersRewriteSet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<SyslogNGFlowFiltersRewriteSetCondition>,
    pub field: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersRewriteSetCondition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNGFlowFiltersRewriteSetConditionRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersRewriteSetConditionRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersRewriteSubst {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<SyslogNGFlowFiltersRewriteSubstCondition>,
    pub field: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    pub replace: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersRewriteSubstCondition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNGFlowFiltersRewriteSubstConditionRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersRewriteSubstConditionRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersRewriteUnset {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<SyslogNGFlowFiltersRewriteUnsetCondition>,
    pub field: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersRewriteUnsetCondition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNGFlowFiltersRewriteUnsetConditionRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowFiltersRewriteUnsetConditionRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub not: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<SyslogNGFlowMatchRegexp>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowMatchRegexp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowOutputMetrics {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGFlowStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub problems: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "problemsCount")]
    pub problems_count: Option<i64>,
}

