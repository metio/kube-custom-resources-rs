// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kube-logging/logging-operator/logging.banzaicloud.io/v1beta1/clusterflows.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "logging.banzaicloud.io", version = "v1beta1", kind = "ClusterFlow", plural = "clusterflows")]
#[kube(namespaced)]
#[kube(status = "ClusterFlowStatus")]
#[kube(schema = "disabled")]
pub struct ClusterFlowSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<ClusterFlowFilters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flowLabel")]
    pub flow_label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalOutputRefs")]
    pub global_output_refs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeLabelInRouter")]
    pub include_label_in_router: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingRef")]
    pub logging_ref: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<Vec<ClusterFlowMatch>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputRefs")]
    pub output_refs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selectors: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFilters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub concat: Option<ClusterFlowFiltersConcat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dedot: Option<ClusterFlowFiltersDedot>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "detectExceptions")]
    pub detect_exceptions: Option<ClusterFlowFiltersDetectExceptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub elasticsearch_genid: Option<ClusterFlowFiltersElasticsearchGenid>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enhanceK8s")]
    pub enhance_k8s: Option<ClusterFlowFiltersEnhanceK8s>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub geoip: Option<ClusterFlowFiltersGeoip>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grep: Option<ClusterFlowFiltersGrep>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kube_events_timestamp: Option<ClusterFlowFiltersKubeEventsTimestamp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parser: Option<ClusterFlowFiltersParser>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prometheus: Option<ClusterFlowFiltersPrometheus>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub record_modifier: Option<ClusterFlowFiltersRecordModifier>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub record_transformer: Option<ClusterFlowFiltersRecordTransformer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stdout: Option<ClusterFlowFiltersStdout>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sumologic: Option<ClusterFlowFiltersSumologic>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag_normaliser: Option<ClusterFlowFiltersTagNormaliser>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub throttle: Option<ClusterFlowFiltersThrottle>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub useragent: Option<ClusterFlowFiltersUseragent>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersConcat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub continuous_line_regexp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_partial_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_partial_metadata: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multiline_end_regexp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multiline_start_regexp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub n_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partial_cri_logtag_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partial_cri_stream_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partial_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partial_metadata_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partial_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stream_identity_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout_label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_first_timestamp: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_partial_cri_logtag: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_partial_metadata: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersDedot {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub de_dot_nested: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub de_dot_separator: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersDetectExceptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub force_line_breaks: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub languages: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub match_tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multiline_flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_tag_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stream: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersElasticsearchGenid {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hash_id_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hash_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_tag_in_seed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_time_in_seed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub record_keys: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_entire_record: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_record_as_seed: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersEnhanceK8s {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api_groups: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bearer_token_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<ClusterFlowFiltersEnhanceK8sCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache_refresh: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache_refresh_variation: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache_ttl: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_cert: Option<ClusterFlowFiltersEnhanceK8sClientCert>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_key: Option<ClusterFlowFiltersEnhanceK8sClientKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub core_api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub in_namespace_path: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub in_pod_path: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret_dir: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_partial_chain: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verify_ssl: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersEnhanceK8sCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterFlowFiltersEnhanceK8sCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterFlowFiltersEnhanceK8sCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersEnhanceK8sCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterFlowFiltersEnhanceK8sCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersEnhanceK8sCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersEnhanceK8sCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterFlowFiltersEnhanceK8sCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersEnhanceK8sCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersEnhanceK8sClientCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterFlowFiltersEnhanceK8sClientCertMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterFlowFiltersEnhanceK8sClientCertValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersEnhanceK8sClientCertMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterFlowFiltersEnhanceK8sClientCertMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersEnhanceK8sClientCertMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersEnhanceK8sClientCertValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterFlowFiltersEnhanceK8sClientCertValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersEnhanceK8sClientCertValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersEnhanceK8sClientKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterFlowFiltersEnhanceK8sClientKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterFlowFiltersEnhanceK8sClientKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersEnhanceK8sClientKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterFlowFiltersEnhanceK8sClientKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersEnhanceK8sClientKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersEnhanceK8sClientKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterFlowFiltersEnhanceK8sClientKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersEnhanceK8sClientKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersGeoip {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backend_library: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub geoip2_database: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub geoip_database: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub geoip_lookup_keys: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub records: Option<Vec<BTreeMap<String, String>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub skip_adding_null_record: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersGrep {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<Vec<ClusterFlowFiltersGrepAnd>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Vec<ClusterFlowFiltersGrepExclude>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<Vec<ClusterFlowFiltersGrepOr>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<Vec<ClusterFlowFiltersGrepRegexp>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersGrepAnd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Vec<ClusterFlowFiltersGrepAndExclude>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<Vec<ClusterFlowFiltersGrepAndRegexp>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersGrepAndExclude {
    pub key: String,
    pub pattern: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersGrepAndRegexp {
    pub key: String,
    pub pattern: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersGrepExclude {
    pub key: String,
    pub pattern: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersGrepOr {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Vec<ClusterFlowFiltersGrepOrExclude>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<Vec<ClusterFlowFiltersGrepOrRegexp>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersGrepOrExclude {
    pub key: String,
    pub pattern: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersGrepOrRegexp {
    pub key: String,
    pub pattern: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersGrepRegexp {
    pub key: String,
    pub pattern: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersKubeEventsTimestamp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mapped_time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timestamp_fields: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParser {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub emit_invalid_record_to_error: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hash_value_field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inject_key_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parse: Option<ClusterFlowFiltersParserParse>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parsers: Option<Vec<ClusterFlowFiltersParserParsers>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_key_name_field: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replace_invalid_sequence: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reserve_data: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reserve_time: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_pattern_path: Option<ClusterFlowFiltersParserParseCustomPatternPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub estimate_current_event: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format_firstline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_failure_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_patterns: Option<Vec<ClusterFlowFiltersParserParseGrokPatterns>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_time_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keys: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label_delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub local_time: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multiline: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multiline_start_regexp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub null_empty_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub null_value_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patterns: Option<Vec<ClusterFlowFiltersParserParsePatterns>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub utc: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParseCustomPatternPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterFlowFiltersParserParseCustomPatternPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterFlowFiltersParserParseCustomPatternPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParseCustomPatternPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterFlowFiltersParserParseCustomPatternPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParseCustomPatternPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParseCustomPatternPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterFlowFiltersParserParseCustomPatternPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParseCustomPatternPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParseGrokPatterns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_time_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsePatterns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_pattern_path: Option<ClusterFlowFiltersParserParsePatternsCustomPatternPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub estimate_current_event: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_failure_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_patterns: Option<Vec<ClusterFlowFiltersParserParsePatternsGrokPatterns>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_time_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub local_time: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multiline_start_regexp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub null_empty_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub null_value_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub utc: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsePatternsCustomPatternPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterFlowFiltersParserParsePatternsCustomPatternPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterFlowFiltersParserParsePatternsCustomPatternPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsePatternsCustomPatternPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterFlowFiltersParserParsePatternsCustomPatternPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsePatternsCustomPatternPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsePatternsCustomPatternPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterFlowFiltersParserParsePatternsCustomPatternPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsePatternsCustomPatternPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsePatternsGrokPatterns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_time_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_pattern_path: Option<ClusterFlowFiltersParserParsersCustomPatternPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub estimate_current_event: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format_firstline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_failure_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_patterns: Option<Vec<ClusterFlowFiltersParserParsersGrokPatterns>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_time_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keys: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label_delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub local_time: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multiline: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multiline_start_regexp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub null_empty_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub null_value_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patterns: Option<Vec<ClusterFlowFiltersParserParsersPatterns>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub utc: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsersCustomPatternPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterFlowFiltersParserParsersCustomPatternPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterFlowFiltersParserParsersCustomPatternPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsersCustomPatternPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterFlowFiltersParserParsersCustomPatternPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsersCustomPatternPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsersCustomPatternPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterFlowFiltersParserParsersCustomPatternPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsersCustomPatternPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsersGrokPatterns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_time_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsersPatterns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_pattern_path: Option<ClusterFlowFiltersParserParsersPatternsCustomPatternPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub estimate_current_event: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_failure_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_patterns: Option<Vec<ClusterFlowFiltersParserParsersPatternsGrokPatterns>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_time_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub local_time: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multiline_start_regexp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub null_empty_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub null_value_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub utc: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsersPatternsCustomPatternPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<ClusterFlowFiltersParserParsersPatternsCustomPatternPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<ClusterFlowFiltersParserParsersPatternsCustomPatternPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsersPatternsCustomPatternPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterFlowFiltersParserParsersPatternsCustomPatternPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsersPatternsCustomPatternPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsersPatternsCustomPatternPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<ClusterFlowFiltersParserParsersPatternsCustomPatternPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsersPatternsCustomPatternPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersParserParsersPatternsGrokPatterns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_time_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersPrometheus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics: Option<Vec<ClusterFlowFiltersPrometheusMetrics>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersPrometheusMetrics {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buckets: Option<String>,
    pub desc: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    pub name: String,
    #[serde(rename = "type")]
    pub r#type: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersRecordModifier {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub char_encoding: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prepare_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub records: Option<Vec<BTreeMap<String, String>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replaces: Option<Vec<ClusterFlowFiltersRecordModifierReplaces>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub whitelist_keys: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersRecordModifierReplaces {
    pub expression: String,
    pub key: String,
    pub replace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersRecordTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_typecast: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_ruby: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_keys: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub records: Option<Vec<BTreeMap<String, String>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub renew_record: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub renew_time_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersStdout {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub output_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersSumologic {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collector_key_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collector_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude_container_regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude_facility_regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude_host_regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude_namespace_regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude_pod_regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude_priority_regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude_unit_regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_category: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_category_key_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_category_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_category_replace_dash: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_host_key_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_name_key_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing_annotation_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing_container_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing_format: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing_host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing_label_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing_pod: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing_pod_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersTagNormaliser {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub match_tag: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersThrottle {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_bucket_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_bucket_period_s: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_drop_logs: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_reset_rate_s: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_warning_delay_s: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowFiltersUseragent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delete_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flatten: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub out_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<ClusterFlowMatchExclude>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub select: Option<ClusterFlowMatchSelect>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowMatchExclude {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container_names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosts: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowMatchSelect {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container_names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosts: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterFlowStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub problems: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "problemsCount")]
    pub problems_count: Option<i64>,
}

