// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kube-logging/logging-operator/logging.banzaicloud.io/v1beta1/syslogngclusteroutputs.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "logging.banzaicloud.io", version = "v1beta1", kind = "SyslogNGClusterOutput", plural = "syslogngclusteroutputs")]
#[kube(namespaced)]
#[kube(status = "SyslogNGClusterOutputStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct SyslogNGClusterOutputSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub elasticsearch: Option<SyslogNGClusterOutputElasticsearch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticsearch-datastream")]
    pub elasticsearch_datastream: Option<SyslogNGClusterOutputElasticsearchDatastream>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enabledNamespaces")]
    pub enabled_namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<SyslogNGClusterOutputFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<SyslogNGClusterOutputHttp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingRef")]
    pub logging_ref: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub loggly: Option<SyslogNGClusterOutputLoggly>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logscale: Option<SyslogNGClusterOutputLogscale>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub loki: Option<SyslogNGClusterOutputLoki>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mongodb: Option<SyslogNGClusterOutputMongodb>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mqtt: Option<SyslogNGClusterOutputMqtt>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openobserve: Option<SyslogNGClusterOutputOpenobserve>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub opentelemetry: Option<SyslogNGClusterOutputOpentelemetry>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redis: Option<SyslogNGClusterOutputRedis>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3: Option<SyslogNGClusterOutputS3>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub splunk_hec_event: Option<SyslogNGClusterOutputSplunkHecEvent>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sumologic-http")]
    pub sumologic_http: Option<SyslogNGClusterOutputSumologicHttp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sumologic-syslog")]
    pub sumologic_syslog: Option<SyslogNGClusterOutputSumologicSyslog>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub syslog: Option<SyslogNGClusterOutputSyslog>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-prefix")]
    pub body_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-suffix")]
    pub body_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGClusterOutputElasticsearchDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_prefix_separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<SyslogNGClusterOutputElasticsearchPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "response-action")]
    pub response_action: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGClusterOutputElasticsearchTls>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "user-agent")]
    pub user_agent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputElasticsearchPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputElasticsearchPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputElasticsearchPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputElasticsearchPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNGClusterOutputElasticsearchTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGClusterOutputElasticsearchTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGClusterOutputElasticsearchTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGClusterOutputElasticsearchTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNGClusterOutputElasticsearchTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputElasticsearchTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputElasticsearchTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputElasticsearchTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputElasticsearchTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputElasticsearchTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputElasticsearchTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputElasticsearchTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputElasticsearchTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputElasticsearchTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputElasticsearchTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputElasticsearchTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputElasticsearchTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputElasticsearchTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputElasticsearchTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputElasticsearchTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputElasticsearchTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGClusterOutputElasticsearchTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastream {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-prefix")]
    pub body_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-suffix")]
    pub body_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGClusterOutputElasticsearchDatastreamDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<SyslogNGClusterOutputElasticsearchDatastreamPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub record: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "response-action")]
    pub response_action: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGClusterOutputElasticsearchDatastreamTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "user-agent")]
    pub user_agent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputElasticsearchDatastreamPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputElasticsearchDatastreamPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputElasticsearchDatastreamPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputElasticsearchDatastreamPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputElasticsearchDatastreamTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputElasticsearchDatastreamTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGClusterOutputElasticsearchDatastreamTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputFile {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub create_dirs: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir_group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir_owner: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir_perm: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGClusterOutputFileDiskBuffer>,
    pub path: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputFileDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttp {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-prefix")]
    pub body_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-suffix")]
    pub body_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGClusterOutputHttpDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<SyslogNGClusterOutputHttpPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "response-action")]
    pub response_action: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGClusterOutputHttpTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "user-agent")]
    pub user_agent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputHttpPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputHttpPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputHttpPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputHttpPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNGClusterOutputHttpTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGClusterOutputHttpTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGClusterOutputHttpTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGClusterOutputHttpTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNGClusterOutputHttpTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputHttpTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputHttpTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputHttpTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputHttpTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputHttpTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputHttpTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputHttpTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputHttpTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputHttpTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputHttpTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputHttpTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputHttpTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputHttpTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputHttpTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputHttpTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputHttpTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputHttpTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGClusterOutputHttpTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLoggly {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub close_on_input: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGClusterOutputLogglyDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub so_keepalive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suppress: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_escape: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGClusterOutputLogglyTls>,
    pub token: SyslogNGClusterOutputLogglyToken,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ts_format: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNGClusterOutputLogglyTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGClusterOutputLogglyTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGClusterOutputLogglyTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGClusterOutputLogglyTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNGClusterOutputLogglyTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputLogglyTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputLogglyTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputLogglyTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputLogglyTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputLogglyTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputLogglyTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputLogglyTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputLogglyTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputLogglyTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputLogglyTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputLogglyTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputLogglyTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputLogglyTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputLogglyTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputLogglyTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputLogglyTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGClusterOutputLogglyTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputLogglyTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputLogglyTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputLogglyTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputLogglyTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogglyTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogscale {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGClusterOutputLogscaleDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extra_headers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rawstring: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<SyslogNGClusterOutputLogscaleToken>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<SyslogNGClusterOutputLogscaleUrl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogscaleDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogscaleToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputLogscaleTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputLogscaleTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogscaleTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputLogscaleTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogscaleTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogscaleTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputLogscaleTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogscaleTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogscaleUrl {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputLogscaleUrlMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputLogscaleUrlValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogscaleUrlMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputLogscaleUrlMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogscaleUrlMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogscaleUrlValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputLogscaleUrlValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLogscaleUrlValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLoki {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<SyslogNGClusterOutputLokiAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGClusterOutputLokiDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<SyslogNGClusterOutputLokiTimestamp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub adc: Option<SyslogNGClusterOutputLokiAuthAdc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alts: Option<SyslogNGClusterOutputLokiAuthAlts>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<SyslogNGClusterOutputLokiAuthInsecure>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGClusterOutputLokiAuthTls>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiAuthAdc {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiAuthAlts {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "target-service-accounts")]
    pub target_service_accounts: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiAuthInsecure {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiAuthTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGClusterOutputLokiAuthTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGClusterOutputLokiAuthTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGClusterOutputLokiAuthTlsKeyFile>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiAuthTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputLokiAuthTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputLokiAuthTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiAuthTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputLokiAuthTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiAuthTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiAuthTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputLokiAuthTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiAuthTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiAuthTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputLokiAuthTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputLokiAuthTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiAuthTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputLokiAuthTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiAuthTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiAuthTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputLokiAuthTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiAuthTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiAuthTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputLokiAuthTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputLokiAuthTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiAuthTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputLokiAuthTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiAuthTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiAuthTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputLokiAuthTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiAuthTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputLokiDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGClusterOutputLokiTimestamp {
    #[serde(rename = "current")]
    Current,
    #[serde(rename = "received")]
    Received,
    #[serde(rename = "msg")]
    Msg,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputMongodb {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk_bypass_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk_unordered: Option<bool>,
    pub collection: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGClusterOutputMongodbDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<SyslogNGClusterOutputMongodbUri>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value_pairs: Option<SyslogNGClusterOutputMongodbValuePairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub write_concern: Option<SyslogNGClusterOutputMongodbWriteConcern>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputMongodbDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputMongodbUri {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputMongodbUriMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputMongodbUriValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputMongodbUriMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputMongodbUriMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputMongodbUriMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputMongodbUriValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputMongodbUriValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputMongodbUriValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputMongodbValuePairs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pair: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGClusterOutputMongodbWriteConcern {
    #[serde(rename = "unacked")]
    Unacked,
    #[serde(rename = "acked")]
    Acked,
    #[serde(rename = "majority")]
    Majority,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputMqtt {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fallback-topic")]
    pub fallback_topic: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qos: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserve {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-prefix")]
    pub body_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-suffix")]
    pub body_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGClusterOutputOpenobserveDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<SyslogNGClusterOutputOpenobservePassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub record: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "response-action")]
    pub response_action: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stream: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGClusterOutputOpenobserveTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "user-agent")]
    pub user_agent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobservePassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputOpenobservePasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputOpenobservePasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobservePasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputOpenobservePasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobservePasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobservePasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputOpenobservePasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobservePasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNGClusterOutputOpenobserveTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGClusterOutputOpenobserveTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGClusterOutputOpenobserveTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGClusterOutputOpenobserveTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNGClusterOutputOpenobserveTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputOpenobserveTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputOpenobserveTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputOpenobserveTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputOpenobserveTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputOpenobserveTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputOpenobserveTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputOpenobserveTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputOpenobserveTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputOpenobserveTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputOpenobserveTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputOpenobserveTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputOpenobserveTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputOpenobserveTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputOpenobserveTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputOpenobserveTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputOpenobserveTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpenobserveTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGClusterOutputOpenobserveTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<SyslogNGClusterOutputOpentelemetryAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub channel_args: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGClusterOutputOpentelemetryDiskBuffer>,
    pub url: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub adc: Option<SyslogNGClusterOutputOpentelemetryAuthAdc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alts: Option<SyslogNGClusterOutputOpentelemetryAuthAlts>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<SyslogNGClusterOutputOpentelemetryAuthInsecure>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGClusterOutputOpentelemetryAuthTls>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryAuthAdc {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryAuthAlts {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "target-service-accounts")]
    pub target_service_accounts: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryAuthInsecure {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryAuthTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGClusterOutputOpentelemetryAuthTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGClusterOutputOpentelemetryAuthTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGClusterOutputOpentelemetryAuthTlsKeyFile>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryAuthTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputOpentelemetryAuthTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputOpentelemetryAuthTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryAuthTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputOpentelemetryAuthTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryAuthTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryAuthTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputOpentelemetryAuthTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryAuthTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryAuthTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputOpentelemetryAuthTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputOpentelemetryAuthTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryAuthTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputOpentelemetryAuthTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryAuthTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryAuthTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputOpentelemetryAuthTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryAuthTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryAuthTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputOpentelemetryAuthTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputOpentelemetryAuthTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryAuthTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputOpentelemetryAuthTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryAuthTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryAuthTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputOpentelemetryAuthTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryAuthTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputOpentelemetryDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputRedis {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<SyslogNGClusterOutputRedisAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<SyslogNGClusterOutputRedisCommand>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command_and_arguments: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGClusterOutputRedisDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub throttle: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "time-reopen")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputRedisAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputRedisAuthMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputRedisAuthValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputRedisAuthMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputRedisAuthMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputRedisAuthMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputRedisAuthValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputRedisAuthValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputRedisAuthValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputRedisCommand {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "string-list")]
    pub string_list: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputRedisDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputS3 {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub access_key: Option<SyslogNGClusterOutputS3AccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub canned_acl: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compresslevel: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGClusterOutputS3DiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_grace_period: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_object_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_pending_uploads: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object_key_timestamp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret_key: Option<SyslogNGClusterOutputS3SecretKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage_class: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub throttle: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upload_threads: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputS3AccessKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputS3AccessKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputS3AccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputS3AccessKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputS3AccessKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputS3AccessKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputS3AccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputS3AccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputS3AccessKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputS3DiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputS3SecretKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputS3SecretKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputS3SecretKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputS3SecretKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputS3SecretKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputS3SecretKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputS3SecretKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputS3SecretKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputS3SecretKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEvent {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-prefix")]
    pub body_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-suffix")]
    pub body_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_index: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_source: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_sourcetype: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGClusterOutputSplunkHecEventDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub event: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extra_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extra_queries: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<SyslogNGClusterOutputSplunkHecEventPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "response-action")]
    pub response_action: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sourcetype: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGClusterOutputSplunkHecEventTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<SyslogNGClusterOutputSplunkHecEventToken>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "user-agent")]
    pub user_agent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputSplunkHecEventPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputSplunkHecEventPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSplunkHecEventPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSplunkHecEventPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNGClusterOutputSplunkHecEventTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGClusterOutputSplunkHecEventTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGClusterOutputSplunkHecEventTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGClusterOutputSplunkHecEventTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNGClusterOutputSplunkHecEventTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputSplunkHecEventTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputSplunkHecEventTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSplunkHecEventTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSplunkHecEventTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputSplunkHecEventTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputSplunkHecEventTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSplunkHecEventTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSplunkHecEventTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputSplunkHecEventTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputSplunkHecEventTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSplunkHecEventTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSplunkHecEventTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputSplunkHecEventTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputSplunkHecEventTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSplunkHecEventTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSplunkHecEventTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGClusterOutputSplunkHecEventTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputSplunkHecEventTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputSplunkHecEventTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSplunkHecEventTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSplunkHecEventTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSplunkHecEventTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttp {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collector: Option<SyslogNGClusterOutputSumologicHttpCollector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGClusterOutputSumologicHttpDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGClusterOutputSumologicHttpTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<SyslogNGClusterOutputSumologicHttpUrl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpCollector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputSumologicHttpCollectorMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputSumologicHttpCollectorValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpCollectorMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSumologicHttpCollectorMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpCollectorMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpCollectorValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSumologicHttpCollectorValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpCollectorValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNGClusterOutputSumologicHttpTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGClusterOutputSumologicHttpTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGClusterOutputSumologicHttpTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGClusterOutputSumologicHttpTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNGClusterOutputSumologicHttpTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputSumologicHttpTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputSumologicHttpTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSumologicHttpTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSumologicHttpTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputSumologicHttpTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputSumologicHttpTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSumologicHttpTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSumologicHttpTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputSumologicHttpTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputSumologicHttpTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSumologicHttpTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSumologicHttpTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputSumologicHttpTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputSumologicHttpTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSumologicHttpTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSumologicHttpTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGClusterOutputSumologicHttpTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpUrl {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputSumologicHttpUrlMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputSumologicHttpUrlValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpUrlMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSumologicHttpUrlMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpUrlMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpUrlValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSumologicHttpUrlValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicHttpUrlValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslog {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGClusterOutputSumologicSyslogDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGClusterOutputSumologicSyslogTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNGClusterOutputSumologicSyslogTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGClusterOutputSumologicSyslogTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGClusterOutputSumologicSyslogTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGClusterOutputSumologicSyslogTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNGClusterOutputSumologicSyslogTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputSumologicSyslogTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputSumologicSyslogTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSumologicSyslogTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSumologicSyslogTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputSumologicSyslogTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputSumologicSyslogTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSumologicSyslogTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSumologicSyslogTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputSumologicSyslogTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputSumologicSyslogTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSumologicSyslogTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSumologicSyslogTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputSumologicSyslogTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputSumologicSyslogTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSumologicSyslogTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSumologicSyslogTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSumologicSyslogTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGClusterOutputSumologicSyslogTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslog {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub close_on_input: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGClusterOutputSyslogDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub so_keepalive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suppress: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_escape: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGClusterOutputSyslogTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ts_format: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNGClusterOutputSyslogTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGClusterOutputSyslogTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGClusterOutputSyslogTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGClusterOutputSyslogTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNGClusterOutputSyslogTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputSyslogTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputSyslogTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSyslogTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSyslogTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputSyslogTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputSyslogTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSyslogTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSyslogTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputSyslogTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputSyslogTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSyslogTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSyslogTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGClusterOutputSyslogTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGClusterOutputSyslogTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSyslogTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGClusterOutputSyslogTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputSyslogTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGClusterOutputSyslogTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGClusterOutputStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub problems: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "problemsCount")]
    pub problems_count: Option<i64>,
}

