// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kube-logging/logging-operator/logging.banzaicloud.io/v1beta1/syslogngoutputs.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "logging.banzaicloud.io", version = "v1beta1", kind = "SyslogNGOutput", plural = "syslogngoutputs")]
#[kube(namespaced)]
#[kube(status = "SyslogNGOutputStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct SyslogNGOutputSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub elasticsearch: Option<SyslogNGOutputElasticsearch>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticsearch-datastream")]
    pub elasticsearch_datastream: Option<SyslogNGOutputElasticsearchDatastream>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<SyslogNGOutputFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<SyslogNGOutputHttp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingRef")]
    pub logging_ref: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub loggly: Option<SyslogNGOutputLoggly>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logscale: Option<SyslogNGOutputLogscale>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub loki: Option<SyslogNGOutputLoki>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mongodb: Option<SyslogNGOutputMongodb>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mqtt: Option<SyslogNGOutputMqtt>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openobserve: Option<SyslogNGOutputOpenobserve>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redis: Option<SyslogNGOutputRedis>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3: Option<SyslogNGOutputS3>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub splunk_hec_event: Option<SyslogNGOutputSplunkHecEvent>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sumologic-http")]
    pub sumologic_http: Option<SyslogNGOutputSumologicHttp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sumologic-syslog")]
    pub sumologic_syslog: Option<SyslogNGOutputSumologicSyslog>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub syslog: Option<SyslogNGOutputSyslog>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearch {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-prefix")]
    pub body_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-suffix")]
    pub body_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGOutputElasticsearchDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_prefix_separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logstash_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<SyslogNGOutputElasticsearchPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "response-action")]
    pub response_action: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGOutputElasticsearchTls>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "user-agent")]
    pub user_agent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputElasticsearchPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputElasticsearchPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputElasticsearchPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputElasticsearchPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNGOutputElasticsearchTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGOutputElasticsearchTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGOutputElasticsearchTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGOutputElasticsearchTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNGOutputElasticsearchTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputElasticsearchTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputElasticsearchTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputElasticsearchTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputElasticsearchTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputElasticsearchTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputElasticsearchTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputElasticsearchTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputElasticsearchTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputElasticsearchTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputElasticsearchTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputElasticsearchTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputElasticsearchTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputElasticsearchTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputElasticsearchTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputElasticsearchTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputElasticsearchTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGOutputElasticsearchTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastream {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-prefix")]
    pub body_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-suffix")]
    pub body_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGOutputElasticsearchDatastreamDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<SyslogNGOutputElasticsearchDatastreamPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub record: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "response-action")]
    pub response_action: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGOutputElasticsearchDatastreamTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "user-agent")]
    pub user_agent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputElasticsearchDatastreamPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputElasticsearchDatastreamPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputElasticsearchDatastreamPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputElasticsearchDatastreamPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNGOutputElasticsearchDatastreamTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGOutputElasticsearchDatastreamTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGOutputElasticsearchDatastreamTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGOutputElasticsearchDatastreamTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNGOutputElasticsearchDatastreamTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputElasticsearchDatastreamTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputElasticsearchDatastreamTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputElasticsearchDatastreamTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputElasticsearchDatastreamTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputElasticsearchDatastreamTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputElasticsearchDatastreamTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputElasticsearchDatastreamTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputElasticsearchDatastreamTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputElasticsearchDatastreamTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputElasticsearchDatastreamTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputElasticsearchDatastreamTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputElasticsearchDatastreamTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputElasticsearchDatastreamTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputElasticsearchDatastreamTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputElasticsearchDatastreamTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputElasticsearchDatastreamTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputElasticsearchDatastreamTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGOutputElasticsearchDatastreamTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputFile {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub create_dirs: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir_group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir_owner: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir_perm: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGOutputFileDiskBuffer>,
    pub path: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputFileDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttp {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-prefix")]
    pub body_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-suffix")]
    pub body_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGOutputHttpDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<SyslogNGOutputHttpPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "response-action")]
    pub response_action: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGOutputHttpTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "user-agent")]
    pub user_agent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputHttpPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputHttpPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputHttpPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputHttpPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNGOutputHttpTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGOutputHttpTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGOutputHttpTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGOutputHttpTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNGOutputHttpTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputHttpTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputHttpTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputHttpTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputHttpTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputHttpTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputHttpTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputHttpTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputHttpTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputHttpTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputHttpTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputHttpTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputHttpTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputHttpTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputHttpTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputHttpTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputHttpTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputHttpTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGOutputHttpTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLoggly {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub close_on_input: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGOutputLogglyDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub so_keepalive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suppress: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_escape: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGOutputLogglyTls>,
    pub token: SyslogNGOutputLogglyToken,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ts_format: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNGOutputLogglyTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGOutputLogglyTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGOutputLogglyTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGOutputLogglyTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNGOutputLogglyTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputLogglyTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputLogglyTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputLogglyTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputLogglyTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputLogglyTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputLogglyTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputLogglyTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputLogglyTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputLogglyTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputLogglyTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputLogglyTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputLogglyTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputLogglyTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputLogglyTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputLogglyTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputLogglyTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGOutputLogglyTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputLogglyTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputLogglyTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputLogglyTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputLogglyTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogglyTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogscale {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGOutputLogscaleDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extra_headers: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rawstring: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<SyslogNGOutputLogscaleToken>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<SyslogNGOutputLogscaleUrl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogscaleDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogscaleToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputLogscaleTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputLogscaleTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogscaleTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputLogscaleTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogscaleTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogscaleTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputLogscaleTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogscaleTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogscaleUrl {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputLogscaleUrlMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputLogscaleUrlValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogscaleUrlMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputLogscaleUrlMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogscaleUrlMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogscaleUrlValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputLogscaleUrlValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLogscaleUrlValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLoki {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<SyslogNGOutputLokiAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGOutputLokiDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<SyslogNGOutputLokiTimestamp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiAuth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub adc: Option<SyslogNGOutputLokiAuthAdc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alts: Option<SyslogNGOutputLokiAuthAlts>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<SyslogNGOutputLokiAuthInsecure>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGOutputLokiAuthTls>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiAuthAdc {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiAuthAlts {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "target-service-accounts")]
    pub target_service_accounts: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiAuthInsecure {
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiAuthTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGOutputLokiAuthTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGOutputLokiAuthTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGOutputLokiAuthTlsKeyFile>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiAuthTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputLokiAuthTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputLokiAuthTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiAuthTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputLokiAuthTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiAuthTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiAuthTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputLokiAuthTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiAuthTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiAuthTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputLokiAuthTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputLokiAuthTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiAuthTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputLokiAuthTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiAuthTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiAuthTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputLokiAuthTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiAuthTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiAuthTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputLokiAuthTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputLokiAuthTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiAuthTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputLokiAuthTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiAuthTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiAuthTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputLokiAuthTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiAuthTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputLokiDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGOutputLokiTimestamp {
    #[serde(rename = "current")]
    Current,
    #[serde(rename = "received")]
    Received,
    #[serde(rename = "msg")]
    Msg,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputMongodb {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk_bypass_validation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bulk_unordered: Option<bool>,
    pub collection: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGOutputMongodbDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<SyslogNGOutputMongodbUri>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value_pairs: Option<SyslogNGOutputMongodbValuePairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub write_concern: Option<SyslogNGOutputMongodbWriteConcern>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputMongodbDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputMongodbUri {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputMongodbUriMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputMongodbUriValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputMongodbUriMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputMongodbUriMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputMongodbUriMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputMongodbUriValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputMongodbUriValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputMongodbUriValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputMongodbValuePairs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pair: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGOutputMongodbWriteConcern {
    #[serde(rename = "unacked")]
    Unacked,
    #[serde(rename = "acked")]
    Acked,
    #[serde(rename = "majority")]
    Majority,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputMqtt {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fallback-topic")]
    pub fallback_topic: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qos: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserve {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-prefix")]
    pub body_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-suffix")]
    pub body_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGOutputOpenobserveDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<SyslogNGOutputOpenobservePassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub record: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "response-action")]
    pub response_action: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stream: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGOutputOpenobserveTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "user-agent")]
    pub user_agent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobservePassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputOpenobservePasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputOpenobservePasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobservePasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputOpenobservePasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobservePasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobservePasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputOpenobservePasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobservePasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNGOutputOpenobserveTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGOutputOpenobserveTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGOutputOpenobserveTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGOutputOpenobserveTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNGOutputOpenobserveTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputOpenobserveTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputOpenobserveTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputOpenobserveTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputOpenobserveTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputOpenobserveTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputOpenobserveTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputOpenobserveTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputOpenobserveTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputOpenobserveTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputOpenobserveTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputOpenobserveTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputOpenobserveTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputOpenobserveTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputOpenobserveTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputOpenobserveTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputOpenobserveTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputOpenobserveTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGOutputOpenobserveTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputRedis {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<SyslogNGOutputRedisAuth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<SyslogNGOutputRedisCommand>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command_and_arguments: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGOutputRedisDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub throttle: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "time-reopen")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputRedisAuth {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputRedisAuthMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputRedisAuthValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputRedisAuthMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputRedisAuthMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputRedisAuthMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputRedisAuthValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputRedisAuthValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputRedisAuthValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputRedisCommand {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "string-list")]
    pub string_list: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputRedisDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputS3 {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub access_key: Option<SyslogNGOutputS3AccessKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub canned_acl: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chunk_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compresslevel: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGOutputS3DiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_grace_period: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_object_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_pending_uploads: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object_key_timestamp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret_key: Option<SyslogNGOutputS3SecretKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage_class: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub throttle: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upload_threads: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputS3AccessKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputS3AccessKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputS3AccessKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputS3AccessKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputS3AccessKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputS3AccessKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputS3AccessKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputS3AccessKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputS3AccessKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputS3DiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputS3SecretKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputS3SecretKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputS3SecretKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputS3SecretKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputS3SecretKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputS3SecretKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputS3SecretKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputS3SecretKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputS3SecretKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEvent {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-prefix")]
    pub body_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "body-suffix")]
    pub body_suffix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_index: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_source: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_sourcetype: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGOutputSplunkHecEventDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub event: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extra_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extra_queries: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "log-fifo-size")]
    pub log_fifo_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<SyslogNGOutputSplunkHecEventPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "response-action")]
    pub response_action: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sourcetype: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGOutputSplunkHecEventTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<SyslogNGOutputSplunkHecEventToken>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "user-agent")]
    pub user_agent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventPassword {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputSplunkHecEventPasswordMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputSplunkHecEventPasswordValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventPasswordMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSplunkHecEventPasswordMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventPasswordMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventPasswordValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSplunkHecEventPasswordValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventPasswordValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNGOutputSplunkHecEventTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGOutputSplunkHecEventTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGOutputSplunkHecEventTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGOutputSplunkHecEventTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNGOutputSplunkHecEventTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputSplunkHecEventTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputSplunkHecEventTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSplunkHecEventTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSplunkHecEventTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputSplunkHecEventTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputSplunkHecEventTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSplunkHecEventTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSplunkHecEventTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputSplunkHecEventTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputSplunkHecEventTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSplunkHecEventTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSplunkHecEventTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputSplunkHecEventTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputSplunkHecEventTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSplunkHecEventTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSplunkHecEventTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGOutputSplunkHecEventTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventToken {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputSplunkHecEventTokenMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputSplunkHecEventTokenValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTokenMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSplunkHecEventTokenMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTokenMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTokenValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSplunkHecEventTokenValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSplunkHecEventTokenValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttp {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-bytes")]
    pub batch_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-lines")]
    pub batch_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "batch-timeout")]
    pub batch_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collector: Option<SyslogNGOutputSumologicHttpCollector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGOutputSumologicHttpDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_reopen: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGOutputSumologicHttpTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<SyslogNGOutputSumologicHttpUrl>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpCollector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputSumologicHttpCollectorMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputSumologicHttpCollectorValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpCollectorMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSumologicHttpCollectorMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpCollectorMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpCollectorValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSumologicHttpCollectorValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpCollectorValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNGOutputSumologicHttpTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGOutputSumologicHttpTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGOutputSumologicHttpTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGOutputSumologicHttpTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNGOutputSumologicHttpTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputSumologicHttpTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputSumologicHttpTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSumologicHttpTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSumologicHttpTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputSumologicHttpTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputSumologicHttpTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSumologicHttpTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSumologicHttpTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputSumologicHttpTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputSumologicHttpTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSumologicHttpTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSumologicHttpTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputSumologicHttpTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputSumologicHttpTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSumologicHttpTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSumologicHttpTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGOutputSumologicHttpTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpUrl {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputSumologicHttpUrlMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputSumologicHttpUrlValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpUrlMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSumologicHttpUrlMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpUrlMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpUrlValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSumologicHttpUrlValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicHttpUrlValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslog {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGOutputSumologicSyslogDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGOutputSumologicSyslogTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNGOutputSumologicSyslogTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGOutputSumologicSyslogTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGOutputSumologicSyslogTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGOutputSumologicSyslogTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNGOutputSumologicSyslogTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputSumologicSyslogTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputSumologicSyslogTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSumologicSyslogTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSumologicSyslogTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputSumologicSyslogTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputSumologicSyslogTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSumologicSyslogTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSumologicSyslogTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputSumologicSyslogTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputSumologicSyslogTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSumologicSyslogTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSumologicSyslogTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputSumologicSyslogTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputSumologicSyslogTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSumologicSyslogTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSumologicSyslogTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSumologicSyslogTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGOutputSumologicSyslogTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslog {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub close_on_input: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk_buffer: Option<SyslogNGOutputSyslogDiskBuffer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persist_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub so_keepalive: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suppress: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_escape: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<SyslogNGOutputSyslogTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transport: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ts_format: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogDiskBuffer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compaction: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dir: Option<String>,
    pub disk_buf_size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mem_buf_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub q_out_size: Option<i64>,
    pub reliable: bool,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_dir: Option<SyslogNGOutputSyslogTlsCaDir>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<SyslogNGOutputSyslogTlsCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert_file: Option<SyslogNGOutputSyslogTlsCertFile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cipher-suite")]
    pub cipher_suite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_file: Option<SyslogNGOutputSyslogTlsKeyFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_verify: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_version: Option<SyslogNGOutputSyslogTlsSslVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-system-cert-store")]
    pub use_system_cert_store: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTlsCaDir {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputSyslogTlsCaDirMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputSyslogTlsCaDirValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTlsCaDirMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSyslogTlsCaDirMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTlsCaDirMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTlsCaDirValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSyslogTlsCaDirValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTlsCaDirValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTlsCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputSyslogTlsCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputSyslogTlsCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTlsCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSyslogTlsCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTlsCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTlsCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSyslogTlsCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTlsCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTlsCertFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputSyslogTlsCertFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputSyslogTlsCertFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTlsCertFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSyslogTlsCertFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTlsCertFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTlsCertFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSyslogTlsCertFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTlsCertFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTlsKeyFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<SyslogNGOutputSyslogTlsKeyFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<SyslogNGOutputSyslogTlsKeyFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTlsKeyFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSyslogTlsKeyFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTlsKeyFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTlsKeyFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<SyslogNGOutputSyslogTlsKeyFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputSyslogTlsKeyFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum SyslogNGOutputSyslogTlsSslVersion {
    #[serde(rename = "sslv3")]
    Sslv3,
    #[serde(rename = "tlsv1")]
    Tlsv1,
    #[serde(rename = "tlsv1_0")]
    Tlsv10,
    #[serde(rename = "tlsv1_1")]
    Tlsv11,
    #[serde(rename = "tlsv1_2")]
    Tlsv12,
    #[serde(rename = "tlsv1_3")]
    Tlsv13,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct SyslogNGOutputStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub problems: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "problemsCount")]
    pub problems_count: Option<i64>,
}

