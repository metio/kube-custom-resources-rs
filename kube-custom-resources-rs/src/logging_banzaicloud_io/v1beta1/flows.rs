// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kube-logging/logging-operator/logging.banzaicloud.io/v1beta1/flows.yaml --derive=Default --derive=PartialEq
// kopium version: 0.18.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "logging.banzaicloud.io", version = "v1beta1", kind = "Flow", plural = "flows")]
#[kube(namespaced)]
#[kube(status = "FlowStatus")]
#[kube(schema = "disabled")]
pub struct FlowSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<FlowFilters>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flowLabel")]
    pub flow_label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalOutputRefs")]
    pub global_output_refs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeLabelInRouter")]
    pub include_label_in_router: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localOutputRefs")]
    pub local_output_refs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingRef")]
    pub logging_ref: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<Vec<FlowMatch>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputRefs")]
    pub output_refs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selectors: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFilters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub concat: Option<FlowFiltersConcat>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dedot: Option<FlowFiltersDedot>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "detectExceptions")]
    pub detect_exceptions: Option<FlowFiltersDetectExceptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub elasticsearch_genid: Option<FlowFiltersElasticsearchGenid>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enhanceK8s")]
    pub enhance_k8s: Option<FlowFiltersEnhanceK8s>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub geoip: Option<FlowFiltersGeoip>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grep: Option<FlowFiltersGrep>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kube_events_timestamp: Option<FlowFiltersKubeEventsTimestamp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parser: Option<FlowFiltersParser>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prometheus: Option<FlowFiltersPrometheus>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub record_modifier: Option<FlowFiltersRecordModifier>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub record_transformer: Option<FlowFiltersRecordTransformer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stdout: Option<FlowFiltersStdout>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sumologic: Option<FlowFiltersSumologic>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag_normaliser: Option<FlowFiltersTagNormaliser>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub throttle: Option<FlowFiltersThrottle>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub useragent: Option<FlowFiltersUseragent>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersConcat {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub continuous_line_regexp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flush_interval: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_partial_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_partial_metadata: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multiline_end_regexp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multiline_start_regexp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub n_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partial_cri_logtag_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partial_cri_stream_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partial_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partial_metadata_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partial_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stream_identity_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout_label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_first_timestamp: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_partial_cri_logtag: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_partial_metadata: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersDedot {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub de_dot_nested: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub de_dot_separator: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersDetectExceptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub force_line_breaks: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub languages: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub match_tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_bytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_lines: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multiline_flush_interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_tag_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stream: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersElasticsearchGenid {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hash_id_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hash_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_tag_in_seed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include_time_in_seed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub record_keys: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub separator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_entire_record: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_record_as_seed: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersEnhanceK8s {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub api_groups: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bearer_token_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca_file: Option<FlowFiltersEnhanceK8sCaFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache_refresh: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache_refresh_variation: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache_ttl: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_cert: Option<FlowFiltersEnhanceK8sClientCert>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_key: Option<FlowFiltersEnhanceK8sClientKey>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub core_api_versions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub in_namespace_path: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub in_pod_path: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubernetes_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret_dir: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssl_partial_chain: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verify_ssl: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersEnhanceK8sCaFile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<FlowFiltersEnhanceK8sCaFileMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<FlowFiltersEnhanceK8sCaFileValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersEnhanceK8sCaFileMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<FlowFiltersEnhanceK8sCaFileMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersEnhanceK8sCaFileMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersEnhanceK8sCaFileValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<FlowFiltersEnhanceK8sCaFileValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersEnhanceK8sCaFileValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersEnhanceK8sClientCert {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<FlowFiltersEnhanceK8sClientCertMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<FlowFiltersEnhanceK8sClientCertValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersEnhanceK8sClientCertMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<FlowFiltersEnhanceK8sClientCertMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersEnhanceK8sClientCertMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersEnhanceK8sClientCertValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<FlowFiltersEnhanceK8sClientCertValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersEnhanceK8sClientCertValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersEnhanceK8sClientKey {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<FlowFiltersEnhanceK8sClientKeyMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<FlowFiltersEnhanceK8sClientKeyValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersEnhanceK8sClientKeyMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<FlowFiltersEnhanceK8sClientKeyMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersEnhanceK8sClientKeyMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersEnhanceK8sClientKeyValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<FlowFiltersEnhanceK8sClientKeyValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersEnhanceK8sClientKeyValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersGeoip {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backend_library: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub geoip2_database: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub geoip_database: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub geoip_lookup_keys: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub records: Option<Vec<BTreeMap<String, String>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub skip_adding_null_record: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersGrep {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub and: Option<Vec<FlowFiltersGrepAnd>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Vec<FlowFiltersGrepExclude>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub or: Option<Vec<FlowFiltersGrepOr>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<Vec<FlowFiltersGrepRegexp>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersGrepAnd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Vec<FlowFiltersGrepAndExclude>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<Vec<FlowFiltersGrepAndRegexp>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersGrepAndExclude {
    pub key: String,
    pub pattern: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersGrepAndRegexp {
    pub key: String,
    pub pattern: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersGrepExclude {
    pub key: String,
    pub pattern: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersGrepOr {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Vec<FlowFiltersGrepOrExclude>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regexp: Option<Vec<FlowFiltersGrepOrRegexp>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersGrepOrExclude {
    pub key: String,
    pub pattern: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersGrepOrRegexp {
    pub key: String,
    pub pattern: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersGrepRegexp {
    pub key: String,
    pub pattern: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersKubeEventsTimestamp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mapped_time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timestamp_fields: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParser {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub emit_invalid_record_to_error: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hash_value_field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inject_key_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parse: Option<FlowFiltersParserParse>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parsers: Option<Vec<FlowFiltersParserParsers>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_key_name_field: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replace_invalid_sequence: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reserve_data: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reserve_time: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_pattern_path: Option<FlowFiltersParserParseCustomPatternPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub estimate_current_event: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format_firstline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_failure_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_patterns: Option<Vec<FlowFiltersParserParseGrokPatterns>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_time_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keys: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label_delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub local_time: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multiline: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multiline_start_regexp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub null_empty_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub null_value_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patterns: Option<Vec<FlowFiltersParserParsePatterns>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub utc: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParseCustomPatternPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<FlowFiltersParserParseCustomPatternPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<FlowFiltersParserParseCustomPatternPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParseCustomPatternPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<FlowFiltersParserParseCustomPatternPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParseCustomPatternPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParseCustomPatternPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<FlowFiltersParserParseCustomPatternPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParseCustomPatternPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParseGrokPatterns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_time_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsePatterns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_pattern_path: Option<FlowFiltersParserParsePatternsCustomPatternPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub estimate_current_event: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_failure_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_patterns: Option<Vec<FlowFiltersParserParsePatternsGrokPatterns>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_time_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub local_time: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multiline_start_regexp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub null_empty_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub null_value_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub utc: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsePatternsCustomPatternPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<FlowFiltersParserParsePatternsCustomPatternPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<FlowFiltersParserParsePatternsCustomPatternPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsePatternsCustomPatternPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<FlowFiltersParserParsePatternsCustomPatternPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsePatternsCustomPatternPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsePatternsCustomPatternPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<FlowFiltersParserParsePatternsCustomPatternPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsePatternsCustomPatternPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsePatternsGrokPatterns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_time_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_pattern_path: Option<FlowFiltersParserParsersCustomPatternPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub estimate_current_event: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format_firstline: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_failure_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_patterns: Option<Vec<FlowFiltersParserParsersGrokPatterns>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_time_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keys: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label_delimiter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub local_time: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multiline: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multiline_start_regexp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub null_empty_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub null_value_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patterns: Option<Vec<FlowFiltersParserParsersPatterns>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub utc: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsersCustomPatternPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<FlowFiltersParserParsersCustomPatternPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<FlowFiltersParserParsersCustomPatternPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsersCustomPatternPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<FlowFiltersParserParsersCustomPatternPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsersCustomPatternPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsersCustomPatternPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<FlowFiltersParserParsersCustomPatternPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsersCustomPatternPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsersGrokPatterns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_time_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsersPatterns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_pattern_path: Option<FlowFiltersParserParsersPatternsCustomPatternPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub estimate_current_event: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_failure_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_name_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grok_patterns: Option<Vec<FlowFiltersParserParsersPatternsGrokPatterns>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_time_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub local_time: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multiline_start_regexp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub null_empty_string: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub null_value_pattern: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub utc: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsersPatternsCustomPatternPath {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountFrom")]
    pub mount_from: Option<FlowFiltersParserParsersPatternsCustomPatternPathMountFrom>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<FlowFiltersParserParsersPatternsCustomPatternPathValueFrom>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsersPatternsCustomPatternPathMountFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<FlowFiltersParserParsersPatternsCustomPatternPathMountFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsersPatternsCustomPatternPathMountFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsersPatternsCustomPatternPathValueFrom {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<FlowFiltersParserParsersPatternsCustomPatternPathValueFromSecretKeyRef>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsersPatternsCustomPatternPathValueFromSecretKeyRef {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersParserParsersPatternsGrokPatterns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_time_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    pub pattern: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersPrometheus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics: Option<Vec<FlowFiltersPrometheusMetrics>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersPrometheusMetrics {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buckets: Option<String>,
    pub desc: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    pub name: String,
    #[serde(rename = "type")]
    pub r#type: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersRecordModifier {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub char_encoding: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prepare_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub records: Option<Vec<BTreeMap<String, String>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replaces: Option<Vec<FlowFiltersRecordModifierReplaces>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub whitelist_keys: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersRecordModifierReplaces {
    pub expression: String,
    pub key: String,
    pub replace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersRecordTransformer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_typecast: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable_ruby: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keep_keys: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub records: Option<Vec<BTreeMap<String, String>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove_keys: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub renew_record: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub renew_time_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersStdout {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub output_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersSumologic {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collector_key_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collector_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude_container_regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude_facility_regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude_host_regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude_namespace_regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude_pod_regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude_priority_regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude_unit_regex: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_category: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_category_key_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_category_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_category_replace_dash: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_host_key_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_name_key_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing_annotation_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing_container_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing_format: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing_host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing_label_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing_namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing_pod: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing_pod_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersTagNormaliser {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub match_tag: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersThrottle {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_bucket_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_bucket_period_s: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_drop_logs: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_reset_rate_s: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_warning_delay_s: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowFiltersUseragent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delete_key: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flatten: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub out_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowMatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<FlowMatchExclude>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub select: Option<FlowMatchSelect>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowMatchExclude {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container_names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosts: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowMatchSelect {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container_names: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hosts: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct FlowStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub problems: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "problemsCount")]
    pub problems_count: Option<i64>,
}

