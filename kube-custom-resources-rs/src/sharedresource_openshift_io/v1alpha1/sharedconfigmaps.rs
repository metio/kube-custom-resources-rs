// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/api/sharedresource.openshift.io/v1alpha1/sharedconfigmaps.yaml --derive=PartialEq
// kopium version: 0.17.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// spec is the specification of the desired shared configmap
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "sharedresource.openshift.io", version = "v1alpha1", kind = "SharedConfigMap", plural = "sharedconfigmaps")]
#[kube(status = "SharedConfigMapStatus")]
#[kube(schema = "disabled")]
pub struct SharedConfigMapSpec {
    /// configMapRef is a reference to the ConfigMap to share
    #[serde(rename = "configMapRef")]
    pub config_map_ref: SharedConfigMapConfigMapRef,
    /// description is a user readable explanation of what the backing resource provides.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}

/// configMapRef is a reference to the ConfigMap to share
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct SharedConfigMapConfigMapRef {
    /// name represents the name of the ConfigMap that is being referenced.
    pub name: String,
    /// namespace represents the namespace where the referenced ConfigMap is located.
    pub namespace: String,
}

/// status is the observed status of the shared configmap
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct SharedConfigMapStatus {
    /// conditions represents any observations made on this particular shared resource by the underlying CSI driver or Share controller.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
}

