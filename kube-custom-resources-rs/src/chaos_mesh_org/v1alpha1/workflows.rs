// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/chaos-mesh/chaos-mesh/chaos-mesh.org/v1alpha1/workflows.yaml --derive=PartialEq
// kopium version: 0.17.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;

/// Spec defines the behavior of a workflow
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "chaos-mesh.org", version = "v1alpha1", kind = "Workflow", plural = "workflows")]
#[kube(namespaced)]
#[kube(status = "WorkflowStatus")]
#[kube(schema = "disabled")]
pub struct WorkflowSpec {
    pub entry: String,
    pub templates: Vec<WorkflowTemplates>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplates {
    /// AbortWithStatusCheck describe whether to abort the workflow when the failure threshold of StatusCheck is exceeded. Only used when Type is TypeStatusCheck.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "abortWithStatusCheck")]
    pub abort_with_status_check: Option<bool>,
    /// AWSChaosSpec is the content of the specification for an AWSChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsChaos")]
    pub aws_chaos: Option<WorkflowTemplatesAwsChaos>,
    /// AzureChaosSpec is the content of the specification for an AzureChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureChaos")]
    pub azure_chaos: Option<WorkflowTemplatesAzureChaos>,
    /// BlockChaosSpec is the content of the specification for a BlockChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockChaos")]
    pub block_chaos: Option<WorkflowTemplatesBlockChaos>,
    /// Children describes the children steps of serial or parallel node. Only used when Type is TypeSerial or TypeParallel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub children: Option<Vec<String>>,
    /// ConditionalBranches describes the conditional branches of custom tasks. Only used when Type is TypeTask.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "conditionalBranches")]
    pub conditional_branches: Option<Vec<WorkflowTemplatesConditionalBranches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deadline: Option<String>,
    /// DNSChaosSpec defines the desired state of DNSChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsChaos")]
    pub dns_chaos: Option<WorkflowTemplatesDnsChaos>,
    /// GCPChaosSpec is the content of the specification for a GCPChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gcpChaos")]
    pub gcp_chaos: Option<WorkflowTemplatesGcpChaos>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpChaos")]
    pub http_chaos: Option<WorkflowTemplatesHttpChaos>,
    /// IOChaosSpec defines the desired state of IOChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ioChaos")]
    pub io_chaos: Option<WorkflowTemplatesIoChaos>,
    /// JVMChaosSpec defines the desired state of JVMChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jvmChaos")]
    pub jvm_chaos: Option<WorkflowTemplatesJvmChaos>,
    /// KernelChaosSpec defines the desired state of KernelChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kernelChaos")]
    pub kernel_chaos: Option<WorkflowTemplatesKernelChaos>,
    pub name: String,
    /// NetworkChaosSpec defines the desired state of NetworkChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkChaos")]
    pub network_chaos: Option<WorkflowTemplatesNetworkChaos>,
    /// PhysicalMachineChaosSpec defines the desired state of PhysicalMachineChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "physicalmachineChaos")]
    pub physicalmachine_chaos: Option<WorkflowTemplatesPhysicalmachineChaos>,
    /// PodChaosSpec defines the attributes that a user creates on a chaos experiment about pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podChaos")]
    pub pod_chaos: Option<WorkflowTemplatesPodChaos>,
    /// Schedule describe the Schedule(describing scheduled chaos) to be injected with chaos nodes. Only used when Type is TypeSchedule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<WorkflowTemplatesSchedule>,
    /// StatusCheck describe the behavior of StatusCheck. Only used when Type is TypeStatusCheck.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusCheck")]
    pub status_check: Option<WorkflowTemplatesStatusCheck>,
    /// StressChaosSpec defines the desired state of StressChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stressChaos")]
    pub stress_chaos: Option<WorkflowTemplatesStressChaos>,
    /// Task describes the behavior of the custom task. Only used when Type is TypeTask.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub task: Option<WorkflowTemplatesTask>,
    #[serde(rename = "templateType")]
    pub template_type: String,
    /// TimeChaosSpec defines the desired state of TimeChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeChaos")]
    pub time_chaos: Option<WorkflowTemplatesTimeChaos>,
}

/// AWSChaosSpec is the content of the specification for an AWSChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesAwsChaos {
    /// Action defines the specific aws chaos action. Supported action: ec2-stop / ec2-restart / detach-volume Default action: ec2-stop
    pub action: WorkflowTemplatesAwsChaosAction,
    /// AWSRegion defines the region of aws.
    #[serde(rename = "awsRegion")]
    pub aws_region: String,
    /// DeviceName indicates the name of the device. Needed in detach-volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    pub device_name: Option<String>,
    /// Duration represents the duration of the chaos action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Ec2Instance indicates the ID of the ec2 instance.
    #[serde(rename = "ec2Instance")]
    pub ec2_instance: String,
    /// Endpoint indicates the endpoint of the aws server. Just used it in test now.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// SecretName defines the name of kubernetes secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    /// EbsVolume indicates the ID of the EBS volume. Needed in detach-volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeID")]
    pub volume_id: Option<String>,
}

/// AWSChaosSpec is the content of the specification for an AWSChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesAwsChaosAction {
    #[serde(rename = "ec2-stop")]
    Ec2Stop,
    #[serde(rename = "ec2-restart")]
    Ec2Restart,
    #[serde(rename = "detach-volume")]
    DetachVolume,
}

/// AzureChaosSpec is the content of the specification for an AzureChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesAzureChaos {
    /// Action defines the specific azure chaos action. Supported action: vm-stop / vm-restart / disk-detach Default action: vm-stop
    pub action: WorkflowTemplatesAzureChaosAction,
    /// DiskName indicates the name of the disk. Needed in disk-detach.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskName")]
    pub disk_name: Option<String>,
    /// Duration represents the duration of the chaos action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// LUN indicates the Logical Unit Number of the data disk. Needed in disk-detach.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lun: Option<i64>,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// ResourceGroupName defines the name of ResourceGroup
    #[serde(rename = "resourceGroupName")]
    pub resource_group_name: String,
    /// SecretName defines the name of kubernetes secret. It is used for Azure credentials.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    /// SubscriptionID defines the id of Azure subscription.
    #[serde(rename = "subscriptionID")]
    pub subscription_id: String,
    /// VMName defines the name of Virtual Machine
    #[serde(rename = "vmName")]
    pub vm_name: String,
}

/// AzureChaosSpec is the content of the specification for an AzureChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesAzureChaosAction {
    #[serde(rename = "vm-stop")]
    VmStop,
    #[serde(rename = "vm-restart")]
    VmRestart,
    #[serde(rename = "disk-detach")]
    DiskDetach,
}

/// BlockChaosSpec is the content of the specification for a BlockChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesBlockChaos {
    /// Action defines the specific block chaos action. Supported action: delay
    pub action: WorkflowTemplatesBlockChaosAction,
    /// ContainerNames indicates list of the name of affected container. If not set, the first container will be injected
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerNames")]
    pub container_names: Option<Vec<String>>,
    /// Delay defines the delay distribution.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delay: Option<WorkflowTemplatesBlockChaosDelay>,
    /// Duration represents the duration of the chaos action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesBlockChaosMode,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesBlockChaosSelector,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(rename = "volumeName")]
    pub volume_name: String,
}

/// BlockChaosSpec is the content of the specification for a BlockChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesBlockChaosAction {
    #[serde(rename = "delay")]
    Delay,
}

/// Delay defines the delay distribution.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesBlockChaosDelay {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jitter: Option<String>,
    /// Latency defines the latency of every io request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub latency: Option<String>,
}

/// BlockChaosSpec is the content of the specification for a BlockChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesBlockChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesBlockChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesBlockChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesBlockChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesConditionalBranches {
    /// Expression is the expression for this conditional branch, expected type of result is boolean. If expression is empty, this branch will always be selected/the template will be spawned.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    /// Target is the name of other template, if expression is evaluated as true, this template will be spawned.
    pub target: String,
}

/// DNSChaosSpec defines the desired state of DNSChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesDnsChaos {
    /// Action defines the specific DNS chaos action. Supported action: error, random Default action: error
    pub action: WorkflowTemplatesDnsChaosAction,
    /// ContainerNames indicates list of the name of affected container. If not set, the first container will be injected
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerNames")]
    pub container_names: Option<Vec<String>>,
    /// Duration represents the duration of the chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesDnsChaosMode,
    /// Choose which domain names to take effect, support the placeholder ? and wildcard *, or the Specified domain name. Note: 1. The wildcard * must be at the end of the string. For example, chaos-*.org is invalid. 2. if the patterns is empty, will take effect on all the domain names. For example: The value is ["google.com", "github.*", "chaos-mes?.org"], will take effect on "google.com", "github.com" and "chaos-mesh.org"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patterns: Option<Vec<String>>,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesDnsChaosSelector,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// DNSChaosSpec defines the desired state of DNSChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesDnsChaosAction {
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "random")]
    Random,
}

/// DNSChaosSpec defines the desired state of DNSChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesDnsChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesDnsChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesDnsChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesDnsChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// GCPChaosSpec is the content of the specification for a GCPChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesGcpChaos {
    /// Action defines the specific gcp chaos action. Supported action: node-stop / node-reset / disk-loss Default action: node-stop
    pub action: WorkflowTemplatesGcpChaosAction,
    /// The device name of disks to detach. Needed in disk-loss.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceNames")]
    pub device_names: Option<Vec<String>>,
    /// Duration represents the duration of the chaos action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Instance defines the name of the instance
    pub instance: String,
    /// Project defines the ID of gcp project.
    pub project: String,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// SecretName defines the name of kubernetes secret. It is used for GCP credentials.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    /// Zone defines the zone of gcp project.
    pub zone: String,
}

/// GCPChaosSpec is the content of the specification for a GCPChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesGcpChaosAction {
    #[serde(rename = "node-stop")]
    NodeStop,
    #[serde(rename = "node-reset")]
    NodeReset,
    #[serde(rename = "disk-loss")]
    DiskLoss,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesHttpChaos {
    /// Abort is a rule to abort a http session.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub abort: Option<bool>,
    /// Code is a rule to select target by http status code in response.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i32>,
    /// Delay represents the delay of the target request/response. A duration string is a possibly unsigned sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "2h45m". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delay: Option<String>,
    /// Duration represents the duration of the chaos action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Method is a rule to select target by http method in request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesHttpChaosMode,
    /// Patch is a rule to patch some contents in target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<WorkflowTemplatesHttpChaosPatch>,
    /// Path is a rule to select target by uri path in http request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Port represents the target port to be proxy of.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// Replace is a rule to replace some contents in target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replace: Option<WorkflowTemplatesHttpChaosReplace>,
    /// RequestHeaders is a rule to select target by http headers in request. The key-value pairs represent header name and header value pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request_headers: Option<BTreeMap<String, String>>,
    /// ResponseHeaders is a rule to select target by http headers in response. The key-value pairs represent header name and header value pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response_headers: Option<BTreeMap<String, String>>,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesHttpChaosSelector,
    /// Target is the object to be selected and injected.
    pub target: WorkflowTemplatesHttpChaosTarget,
    /// TLS is the tls config, will override PodHttpChaos if there are multiple HTTPChaos experiments are applied
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<WorkflowTemplatesHttpChaosTls>,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesHttpChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Patch is a rule to patch some contents in target.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesHttpChaosPatch {
    /// Body is a rule to patch message body of target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<WorkflowTemplatesHttpChaosPatchBody>,
    /// Headers is a rule to append http headers of target. For example: `[["Set-Cookie", "<one cookie>"], ["Set-Cookie", "<another cookie>"]]`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    /// Queries is a rule to append uri queries of target(Request only). For example: `[["foo", "bar"], ["foo", "unknown"]]`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queries: Option<Vec<String>>,
}

/// Body is a rule to patch message body of target.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesHttpChaosPatchBody {
    /// Type represents the patch type, only support `JSON` as [merge patch json](https://tools.ietf.org/html/rfc7396) currently.
    #[serde(rename = "type")]
    pub r#type: String,
    /// Value is the patch contents.
    pub value: String,
}

/// Replace is a rule to replace some contents in target.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesHttpChaosReplace {
    /// Body is a rule to replace http message body in target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    /// Code is a rule to replace http status code in response.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i32>,
    /// Headers is a rule to replace http headers of target. The key-value pairs represent header name and header value pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    /// Method is a rule to replace http method in request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// Path is rule to to replace uri path in http request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Queries is a rule to replace uri queries in http request. For example, with value `{ "foo": "unknown" }`, the `/?foo=bar` will be altered to `/?foo=unknown`,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queries: Option<BTreeMap<String, String>>,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesHttpChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesHttpChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesHttpChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesHttpChaosTarget {
    Request,
    Response,
}

/// TLS is the tls config, will override PodHttpChaos if there are multiple HTTPChaos experiments are applied
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesHttpChaosTls {
    /// CAName represents the data name of ca file in secret, `ca.crt` for example
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caName")]
    pub ca_name: Option<String>,
    /// CertName represents the data name of cert file in secret, `tls.crt` for example
    #[serde(rename = "certName")]
    pub cert_name: String,
    /// KeyName represents the data name of key file in secret, `tls.key` for example
    #[serde(rename = "keyName")]
    pub key_name: String,
    /// SecretName represents the name of required secret resource
    #[serde(rename = "secretName")]
    pub secret_name: String,
    /// SecretNamespace represents the namespace of required secret resource
    #[serde(rename = "secretNamespace")]
    pub secret_namespace: String,
}

/// IOChaosSpec defines the desired state of IOChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesIoChaos {
    /// Action defines the specific pod chaos action. Supported action: latency / fault / attrOverride / mistake
    pub action: WorkflowTemplatesIoChaosAction,
    /// Attr defines the overrided attribution
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attr: Option<WorkflowTemplatesIoChaosAttr>,
    /// ContainerNames indicates list of the name of affected container. If not set, the first container will be injected
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerNames")]
    pub container_names: Option<Vec<String>>,
    /// Delay defines the value of I/O chaos action delay. A delay string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delay: Option<String>,
    /// Duration represents the duration of the chaos action. It is required when the action is `PodFailureAction`. A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "-1.5h" or "2h45m". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Errno defines the error code that returned by I/O action. refer to: https://www-numi.fnal.gov/offline_software/srt_public_context/WebDocs/Errors/unix_system_errors.html
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub errno: Option<i32>,
    /// Methods defines the I/O methods for injecting I/O chaos action. default: all I/O methods.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    /// Mistake defines what types of incorrectness are injected to IO operations
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mistake: Option<WorkflowTemplatesIoChaosMistake>,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesIoChaosMode,
    /// Path defines the path of files for injecting I/O chaos action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Percent defines the percentage of injection errors and provides a number from 0-100. default: 100.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<i64>,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesIoChaosSelector,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// VolumePath represents the mount path of injected volume
    #[serde(rename = "volumePath")]
    pub volume_path: String,
}

/// IOChaosSpec defines the desired state of IOChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesIoChaosAction {
    #[serde(rename = "latency")]
    Latency,
    #[serde(rename = "fault")]
    Fault,
    #[serde(rename = "attrOverride")]
    AttrOverride,
    #[serde(rename = "mistake")]
    Mistake,
}

/// Attr defines the overrided attribution
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesIoChaosAttr {
    /// Timespec represents a time
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub atime: Option<WorkflowTemplatesIoChaosAttrAtime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocks: Option<i64>,
    /// Timespec represents a time
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ctime: Option<WorkflowTemplatesIoChaosAttrCtime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gid: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ino: Option<i64>,
    /// FileType represents type of file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Timespec represents a time
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mtime: Option<WorkflowTemplatesIoChaosAttrMtime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nlink: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub perm: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rdev: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<i32>,
}

/// Timespec represents a time
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesIoChaosAttrAtime {
    pub nsec: i64,
    pub sec: i64,
}

/// Timespec represents a time
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesIoChaosAttrCtime {
    pub nsec: i64,
    pub sec: i64,
}

/// Timespec represents a time
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesIoChaosAttrMtime {
    pub nsec: i64,
    pub sec: i64,
}

/// Mistake defines what types of incorrectness are injected to IO operations
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesIoChaosMistake {
    /// Filling determines what is filled in the mistake data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filling: Option<WorkflowTemplatesIoChaosMistakeFilling>,
    /// Max length of each wrong data segment in bytes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxLength")]
    pub max_length: Option<i64>,
    /// There will be [1, MaxOccurrences] segments of wrong data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxOccurrences")]
    pub max_occurrences: Option<i64>,
}

/// Mistake defines what types of incorrectness are injected to IO operations
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesIoChaosMistakeFilling {
    #[serde(rename = "zero")]
    Zero,
    #[serde(rename = "random")]
    Random,
}

/// IOChaosSpec defines the desired state of IOChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesIoChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesIoChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesIoChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesIoChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// JVMChaosSpec defines the desired state of JVMChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesJvmChaos {
    /// Action defines the specific jvm chaos action. Supported action: latency;return;exception;stress;gc;ruleData
    pub action: WorkflowTemplatesJvmChaosAction,
    /// Java class
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
    /// ContainerNames indicates list of the name of affected container. If not set, the first container will be injected
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerNames")]
    pub container_names: Option<Vec<String>>,
    /// the CPU core number needs to use, only set it when action is stress
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuCount")]
    pub cpu_count: Option<i64>,
    /// the match database default value is "", means match all database
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub database: Option<String>,
    /// Duration represents the duration of the chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// the exception which needs to throw for action `exception` or the exception message needs to throw in action `mysql`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exception: Option<String>,
    /// the latency duration for action 'latency', unit ms or the latency duration in action `mysql`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub latency: Option<i64>,
    /// the memory type needs to locate, only set it when action is stress, the value can be 'stack' or 'heap'
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memType")]
    pub mem_type: Option<String>,
    /// the method in Java class
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesJvmChaosMode,
    /// the version of mysql-connector-java, only support 5.X.X(set to "5") and 8.X.X(set to "8") now
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mysqlConnectorVersion")]
    pub mysql_connector_version: Option<String>,
    /// byteman rule name, should be unique, and will generate one if not set
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// the pid of Java process which needs to attach
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<i64>,
    /// the port of agent server, default 9277
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// the byteman rule's data for action 'ruleData'
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleData")]
    pub rule_data: Option<String>,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesJvmChaosSelector,
    /// the match sql type default value is "", means match all SQL type. The value can be 'select', 'insert', 'update', 'delete', 'replace'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sqlType")]
    pub sql_type: Option<String>,
    /// the match table default value is "", means match all table
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub table: Option<String>,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// JVMChaosSpec defines the desired state of JVMChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesJvmChaosAction {
    #[serde(rename = "latency")]
    Latency,
    #[serde(rename = "return")]
    Return,
    #[serde(rename = "exception")]
    Exception,
    #[serde(rename = "stress")]
    Stress,
    #[serde(rename = "gc")]
    Gc,
    #[serde(rename = "ruleData")]
    RuleData,
    #[serde(rename = "mysql")]
    Mysql,
}

/// JVMChaosSpec defines the desired state of JVMChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesJvmChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesJvmChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesJvmChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesJvmChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// KernelChaosSpec defines the desired state of KernelChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesKernelChaos {
    /// ContainerNames indicates list of the name of affected container. If not set, the first container will be injected
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerNames")]
    pub container_names: Option<Vec<String>>,
    /// Duration represents the duration of the chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// FailKernRequest defines the request of kernel injection
    #[serde(rename = "failKernRequest")]
    pub fail_kern_request: WorkflowTemplatesKernelChaosFailKernRequest,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesKernelChaosMode,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesKernelChaosSelector,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// FailKernRequest defines the request of kernel injection
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesKernelChaosFailKernRequest {
    /// Callchain indicate a special call chain, such as: ext4_mount -> mount_subtree -> ... -> should_failslab With an optional set of predicates and an optional set of parameters, which used with predicates. You can read call chan and predicate examples from https://github.com/chaos-mesh/bpfki/tree/develop/examples to learn more. If no special call chain, just keep Callchain empty, which means it will fail at any call chain with slab alloc (eg: kmalloc).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub callchain: Option<Vec<WorkflowTemplatesKernelChaosFailKernRequestCallchain>>,
    /// FailType indicates what to fail, can be set to '0' / '1' / '2' If `0`, indicates slab to fail (should_failslab) If `1`, indicates alloc_page to fail (should_fail_alloc_page) If `2`, indicates bio to fail (should_fail_bio) You can read: 1. https://www.kernel.org/doc/html/latest/fault-injection/fault-injection.html 2. http://github.com/iovisor/bcc/blob/master/tools/inject_example.txt to learn more
    pub failtype: i32,
    /// Headers indicates the appropriate kernel headers you need. Eg: "linux/mmzone.h", "linux/blkdev.h" and so on
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    /// Probability indicates the fails with probability. If you want 1%, please set this field with 1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub probability: Option<i32>,
    /// Times indicates the max times of fails.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub times: Option<i32>,
}

/// Frame defines the function signature and predicate in function's body
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesKernelChaosFailKernRequestCallchain {
    /// Funcname can be find from kernel source or `/proc/kallsyms`, such as `ext4_mount`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub funcname: Option<String>,
    /// Parameters is used with predicate, for example, if you want to inject slab error in `d_alloc_parallel(struct dentry *parent, const struct qstr *name)` with a special name `bananas`, you need to set it to `struct dentry *parent, const struct qstr *name` otherwise omit it.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<String>,
    /// Predicate will access the arguments of this Frame, example with Parameters's, you can set it to `STRNCMP(name->name, "bananas", 8)` to make inject only with it, or omit it to inject for all d_alloc_parallel call chain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub predicate: Option<String>,
}

/// KernelChaosSpec defines the desired state of KernelChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesKernelChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesKernelChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesKernelChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesKernelChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// NetworkChaosSpec defines the desired state of NetworkChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesNetworkChaos {
    /// Action defines the specific network chaos action. Supported action: partition, netem, delay, loss, duplicate, corrupt Default action: delay
    pub action: WorkflowTemplatesNetworkChaosAction,
    /// Bandwidth represents the detail about bandwidth control action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bandwidth: Option<WorkflowTemplatesNetworkChaosBandwidth>,
    /// Corrupt represents the detail about corrupt action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub corrupt: Option<WorkflowTemplatesNetworkChaosCorrupt>,
    /// Delay represents the detail about delay action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delay: Option<WorkflowTemplatesNetworkChaosDelay>,
    /// Device represents the network device to be affected.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device: Option<String>,
    /// Direction represents the direction, this applies on netem and network partition action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub direction: Option<WorkflowTemplatesNetworkChaosDirection>,
    /// DuplicateSpec represents the detail about loss action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duplicate: Option<WorkflowTemplatesNetworkChaosDuplicate>,
    /// Duration represents the duration of the chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// ExternalTargets represents network targets outside k8s
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalTargets")]
    pub external_targets: Option<Vec<String>>,
    /// Loss represents the detail about loss action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub loss: Option<WorkflowTemplatesNetworkChaosLoss>,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesNetworkChaosMode,
    /// Rate represents the detail about rate control action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rate: Option<WorkflowTemplatesNetworkChaosRate>,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesNetworkChaosSelector,
    /// Target represents network target, this applies on netem and network partition action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<WorkflowTemplatesNetworkChaosTarget>,
    /// TargetDevice represents the network device to be affected in target scope.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetDevice")]
    pub target_device: Option<String>,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// NetworkChaosSpec defines the desired state of NetworkChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesNetworkChaosAction {
    #[serde(rename = "netem")]
    Netem,
    #[serde(rename = "delay")]
    Delay,
    #[serde(rename = "loss")]
    Loss,
    #[serde(rename = "duplicate")]
    Duplicate,
    #[serde(rename = "corrupt")]
    Corrupt,
    #[serde(rename = "partition")]
    Partition,
    #[serde(rename = "bandwidth")]
    Bandwidth,
}

/// Bandwidth represents the detail about bandwidth control action
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesNetworkChaosBandwidth {
    /// Buffer is the maximum amount of bytes that tokens can be available for instantaneously.
    pub buffer: i32,
    /// Limit is the number of bytes that can be queued waiting for tokens to become available.
    pub limit: i32,
    /// Minburst specifies the size of the peakrate bucket. For perfect accuracy, should be set to the MTU of the interface.  If a peakrate is needed, but some burstiness is acceptable, this size can be raised. A 3000 byte minburst allows around 3mbit/s of peakrate, given 1000 byte packets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub minburst: Option<i32>,
    /// Peakrate is the maximum depletion rate of the bucket. The peakrate does not need to be set, it is only necessary if perfect millisecond timescale shaping is required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peakrate: Option<i64>,
    /// Rate is the speed knob. Allows bit, kbit, mbit, gbit, tbit, bps, kbps, mbps, gbps, tbps unit. bps means bytes per second.
    pub rate: String,
}

/// Corrupt represents the detail about corrupt action
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesNetworkChaosCorrupt {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<String>,
    pub corrupt: String,
}

/// Delay represents the detail about delay action
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesNetworkChaosDelay {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jitter: Option<String>,
    pub latency: String,
    /// ReorderSpec defines details of packet reorder.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reorder: Option<WorkflowTemplatesNetworkChaosDelayReorder>,
}

/// ReorderSpec defines details of packet reorder.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesNetworkChaosDelayReorder {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<String>,
    pub gap: i64,
    pub reorder: String,
}

/// NetworkChaosSpec defines the desired state of NetworkChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesNetworkChaosDirection {
    #[serde(rename = "to")]
    To,
    #[serde(rename = "from")]
    From,
    #[serde(rename = "both")]
    Both,
}

/// DuplicateSpec represents the detail about loss action
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesNetworkChaosDuplicate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<String>,
    pub duplicate: String,
}

/// Loss represents the detail about loss action
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesNetworkChaosLoss {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<String>,
    pub loss: String,
}

/// NetworkChaosSpec defines the desired state of NetworkChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesNetworkChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Rate represents the detail about rate control action
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesNetworkChaosRate {
    /// Rate is the speed knob. Allows bit, kbit, mbit, gbit, tbit, bps, kbps, mbps, gbps, tbps unit. bps means bytes per second.
    pub rate: String,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesNetworkChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesNetworkChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesNetworkChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Target represents network target, this applies on netem and network partition action
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesNetworkChaosTarget {
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesNetworkChaosTargetMode,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesNetworkChaosTargetSelector,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Target represents network target, this applies on netem and network partition action
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesNetworkChaosTargetMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesNetworkChaosTargetSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesNetworkChaosTargetSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesNetworkChaosTargetSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// PhysicalMachineChaosSpec defines the desired state of PhysicalMachineChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaos {
    /// the subAction, generate automatically
    pub action: WorkflowTemplatesPhysicalmachineChaosAction,
    /// DEPRECATED: Use Selector instead. Only one of Address and Selector could be specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clock: Option<WorkflowTemplatesPhysicalmachineChaosClock>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disk-fill")]
    pub disk_fill: Option<WorkflowTemplatesPhysicalmachineChaosDiskFill>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disk-read-payload")]
    pub disk_read_payload: Option<WorkflowTemplatesPhysicalmachineChaosDiskReadPayload>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disk-write-payload")]
    pub disk_write_payload: Option<WorkflowTemplatesPhysicalmachineChaosDiskWritePayload>,
    /// Duration represents the duration of the chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-append")]
    pub file_append: Option<WorkflowTemplatesPhysicalmachineChaosFileAppend>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-create")]
    pub file_create: Option<WorkflowTemplatesPhysicalmachineChaosFileCreate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-delete")]
    pub file_delete: Option<WorkflowTemplatesPhysicalmachineChaosFileDelete>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-modify")]
    pub file_modify: Option<WorkflowTemplatesPhysicalmachineChaosFileModify>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-rename")]
    pub file_rename: Option<WorkflowTemplatesPhysicalmachineChaosFileRename>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-replace")]
    pub file_replace: Option<WorkflowTemplatesPhysicalmachineChaosFileReplace>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http-abort")]
    pub http_abort: Option<WorkflowTemplatesPhysicalmachineChaosHttpAbort>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http-config")]
    pub http_config: Option<WorkflowTemplatesPhysicalmachineChaosHttpConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http-delay")]
    pub http_delay: Option<WorkflowTemplatesPhysicalmachineChaosHttpDelay>,
    /// used for HTTP request, now only support GET
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http-request")]
    pub http_request: Option<WorkflowTemplatesPhysicalmachineChaosHttpRequest>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jvm-exception")]
    pub jvm_exception: Option<WorkflowTemplatesPhysicalmachineChaosJvmException>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jvm-gc")]
    pub jvm_gc: Option<WorkflowTemplatesPhysicalmachineChaosJvmGc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jvm-latency")]
    pub jvm_latency: Option<WorkflowTemplatesPhysicalmachineChaosJvmLatency>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jvm-mysql")]
    pub jvm_mysql: Option<WorkflowTemplatesPhysicalmachineChaosJvmMysql>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jvm-return")]
    pub jvm_return: Option<WorkflowTemplatesPhysicalmachineChaosJvmReturn>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jvm-rule-data")]
    pub jvm_rule_data: Option<WorkflowTemplatesPhysicalmachineChaosJvmRuleData>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jvm-stress")]
    pub jvm_stress: Option<WorkflowTemplatesPhysicalmachineChaosJvmStress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kafka-fill")]
    pub kafka_fill: Option<WorkflowTemplatesPhysicalmachineChaosKafkaFill>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kafka-flood")]
    pub kafka_flood: Option<WorkflowTemplatesPhysicalmachineChaosKafkaFlood>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kafka-io")]
    pub kafka_io: Option<WorkflowTemplatesPhysicalmachineChaosKafkaIo>,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesPhysicalmachineChaosMode,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "network-bandwidth")]
    pub network_bandwidth: Option<WorkflowTemplatesPhysicalmachineChaosNetworkBandwidth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "network-corrupt")]
    pub network_corrupt: Option<WorkflowTemplatesPhysicalmachineChaosNetworkCorrupt>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "network-delay")]
    pub network_delay: Option<WorkflowTemplatesPhysicalmachineChaosNetworkDelay>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "network-dns")]
    pub network_dns: Option<WorkflowTemplatesPhysicalmachineChaosNetworkDns>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "network-down")]
    pub network_down: Option<WorkflowTemplatesPhysicalmachineChaosNetworkDown>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "network-duplicate")]
    pub network_duplicate: Option<WorkflowTemplatesPhysicalmachineChaosNetworkDuplicate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "network-flood")]
    pub network_flood: Option<WorkflowTemplatesPhysicalmachineChaosNetworkFlood>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "network-loss")]
    pub network_loss: Option<WorkflowTemplatesPhysicalmachineChaosNetworkLoss>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "network-partition")]
    pub network_partition: Option<WorkflowTemplatesPhysicalmachineChaosNetworkPartition>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub process: Option<WorkflowTemplatesPhysicalmachineChaosProcess>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redis-cacheLimit")]
    pub redis_cache_limit: Option<WorkflowTemplatesPhysicalmachineChaosRedisCacheLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redis-expiration")]
    pub redis_expiration: Option<WorkflowTemplatesPhysicalmachineChaosRedisExpiration>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redis-penetration")]
    pub redis_penetration: Option<WorkflowTemplatesPhysicalmachineChaosRedisPenetration>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redis-restart")]
    pub redis_restart: Option<WorkflowTemplatesPhysicalmachineChaosRedisRestart>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redis-stop")]
    pub redis_stop: Option<WorkflowTemplatesPhysicalmachineChaosRedisStop>,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// Selector is used to select physical machines that are used to inject chaos action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<WorkflowTemplatesPhysicalmachineChaosSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stress-cpu")]
    pub stress_cpu: Option<WorkflowTemplatesPhysicalmachineChaosStressCpu>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stress-mem")]
    pub stress_mem: Option<WorkflowTemplatesPhysicalmachineChaosStressMem>,
    /// the experiment ID
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user_defined: Option<WorkflowTemplatesPhysicalmachineChaosUserDefined>,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of physical machines to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of physical machines the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vm: Option<WorkflowTemplatesPhysicalmachineChaosVm>,
}

/// PhysicalMachineChaosSpec defines the desired state of PhysicalMachineChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesPhysicalmachineChaosAction {
    #[serde(rename = "stress-cpu")]
    StressCpu,
    #[serde(rename = "stress-mem")]
    StressMem,
    #[serde(rename = "disk-read-payload")]
    DiskReadPayload,
    #[serde(rename = "disk-write-payload")]
    DiskWritePayload,
    #[serde(rename = "disk-fill")]
    DiskFill,
    #[serde(rename = "network-corrupt")]
    NetworkCorrupt,
    #[serde(rename = "network-duplicate")]
    NetworkDuplicate,
    #[serde(rename = "network-loss")]
    NetworkLoss,
    #[serde(rename = "network-delay")]
    NetworkDelay,
    #[serde(rename = "network-partition")]
    NetworkPartition,
    #[serde(rename = "network-dns")]
    NetworkDns,
    #[serde(rename = "network-bandwidth")]
    NetworkBandwidth,
    #[serde(rename = "network-flood")]
    NetworkFlood,
    #[serde(rename = "network-down")]
    NetworkDown,
    #[serde(rename = "process")]
    Process,
    #[serde(rename = "jvm-exception")]
    JvmException,
    #[serde(rename = "jvm-gc")]
    JvmGc,
    #[serde(rename = "jvm-latency")]
    JvmLatency,
    #[serde(rename = "jvm-return")]
    JvmReturn,
    #[serde(rename = "jvm-stress")]
    JvmStress,
    #[serde(rename = "jvm-rule-data")]
    JvmRuleData,
    #[serde(rename = "jvm-mysql")]
    JvmMysql,
    #[serde(rename = "clock")]
    Clock,
    #[serde(rename = "redis-expiration")]
    RedisExpiration,
    #[serde(rename = "redis-penetration")]
    RedisPenetration,
    #[serde(rename = "redis-cacheLimit")]
    RedisCacheLimit,
    #[serde(rename = "redis-restart")]
    RedisRestart,
    #[serde(rename = "redis-stop")]
    RedisStop,
    #[serde(rename = "kafka-fill")]
    KafkaFill,
    #[serde(rename = "kafka-flood")]
    KafkaFlood,
    #[serde(rename = "kafka-io")]
    KafkaIo,
    #[serde(rename = "file-create")]
    FileCreate,
    #[serde(rename = "file-modify")]
    FileModify,
    #[serde(rename = "file-delete")]
    FileDelete,
    #[serde(rename = "file-rename")]
    FileRename,
    #[serde(rename = "file-append")]
    FileAppend,
    #[serde(rename = "file-replace")]
    FileReplace,
    #[serde(rename = "vm")]
    Vm,
    #[serde(rename = "user_defined")]
    UserDefined,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosClock {
    /// the identifier of the particular clock on which to act. More clock description in linux kernel can be found in man page of clock_getres, clock_gettime, clock_settime. Muti clock ids should be split with ","
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clock-ids-slice")]
    pub clock_ids_slice: Option<String>,
    /// the pid of target program.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<i64>,
    /// specifies the length of time offset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "time-offset")]
    pub time_offset: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosDiskFill {
    /// fill disk by fallocate
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fill-by-fallocate")]
    pub fill_by_fallocate: Option<bool>,
    /// specifies the location to fill data in. if path not provided, payload will read/write from/into a temp file, temp file will be deleted after writing
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// specifies how many units of data will write into the file path. support unit: c=1, w=2, b=512, kB=1000, K=1024, MB=1000*1000, M=1024*1024, GB=1000*1000*1000, G=1024*1024*1024 BYTES. example : 1M | 512kB
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosDiskReadPayload {
    /// specifies the location to fill data in. if path not provided, payload will read/write from/into a temp file, temp file will be deleted after writing
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// specifies the number of process work on writing, default 1, only 1-255 is valid value
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "payload-process-num")]
    pub payload_process_num: Option<i64>,
    /// specifies how many units of data will write into the file path. support unit: c=1, w=2, b=512, kB=1000, K=1024, MB=1000*1000, M=1024*1024, GB=1000*1000*1000, G=1024*1024*1024 BYTES. example : 1M | 512kB
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosDiskWritePayload {
    /// specifies the location to fill data in. if path not provided, payload will read/write from/into a temp file, temp file will be deleted after writing
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// specifies the number of process work on writing, default 1, only 1-255 is valid value
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "payload-process-num")]
    pub payload_process_num: Option<i64>,
    /// specifies how many units of data will write into the file path. support unit: c=1, w=2, b=512, kB=1000, K=1024, MB=1000*1000, M=1024*1024, GB=1000*1000*1000, G=1024*1024*1024 BYTES. example : 1M | 512kB
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosFileAppend {
    /// Count is the number of times to append the data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i64>,
    /// Data is the data for append.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<String>,
    /// FileName is the name of the file to be created, modified, deleted, renamed, or appended.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-name")]
    pub file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosFileCreate {
    /// DirName is the directory name to create or delete.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dir-name")]
    pub dir_name: Option<String>,
    /// FileName is the name of the file to be created, modified, deleted, renamed, or appended.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-name")]
    pub file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosFileDelete {
    /// DirName is the directory name to create or delete.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dir-name")]
    pub dir_name: Option<String>,
    /// FileName is the name of the file to be created, modified, deleted, renamed, or appended.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-name")]
    pub file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosFileModify {
    /// FileName is the name of the file to be created, modified, deleted, renamed, or appended.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-name")]
    pub file_name: Option<String>,
    /// Privilege is the file privilege to be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privilege: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosFileRename {
    /// DestFile is the name to be renamed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dest-file")]
    pub dest_file: Option<String>,
    /// SourceFile is the name need to be renamed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "source-file")]
    pub source_file: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosFileReplace {
    /// DestStr is the destination string of the file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dest-string")]
    pub dest_string: Option<String>,
    /// FileName is the name of the file to be created, modified, deleted, renamed, or appended.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-name")]
    pub file_name: Option<String>,
    /// Line is the line number of the file to be replaced.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub line: Option<i64>,
    /// OriginStr is the origin string of the file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "origin-string")]
    pub origin_string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosHttpAbort {
    /// Code is a rule to select target by http status code in response
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    /// HTTP method
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// Match path of Uri with wildcard matches
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// The TCP port that the target service listens on
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// Composed with one of the port of HTTP connection, we will only attack HTTP connection with port inside proxy_ports
    pub proxy_ports: Vec<i64>,
    /// HTTP target: Request or Response
    pub target: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosHttpConfig {
    /// The config file path
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosHttpDelay {
    /// Code is a rule to select target by http status code in response
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    /// Delay represents the delay of the target request/response
    pub delay: String,
    /// HTTP method
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// Match path of Uri with wildcard matches
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// The TCP port that the target service listens on
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// Composed with one of the port of HTTP connection, we will only attack HTTP connection with port inside proxy_ports
    pub proxy_ports: Vec<i64>,
    /// HTTP target: Request or Response
    pub target: String,
}

/// used for HTTP request, now only support GET
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosHttpRequest {
    /// The number of requests to send
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i64>,
    /// Enable connection pool
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enable-conn-pool")]
    pub enable_conn_pool: Option<bool>,
    /// Request to send"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosJvmException {
    /// Java class
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
    /// the exception which needs to throw for action `exception`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exception: Option<String>,
    /// the method in Java class
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// the pid of Java process which needs to attach
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<i64>,
    /// the port of agent server, default 9277
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosJvmGc {
    /// the pid of Java process which needs to attach
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<i64>,
    /// the port of agent server, default 9277
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosJvmLatency {
    /// Java class
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
    /// the latency duration for action 'latency', unit ms
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub latency: Option<i64>,
    /// the method in Java class
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// the pid of Java process which needs to attach
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<i64>,
    /// the port of agent server, default 9277
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosJvmMysql {
    /// the match database default value is "", means match all database
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub database: Option<String>,
    /// The exception which needs to throw for action `exception` or the exception message needs to throw in action `mysql`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exception: Option<String>,
    /// The latency duration for action 'latency' or the latency duration in action `mysql`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub latency: Option<i64>,
    /// the version of mysql-connector-java, only support 5.X.X(set to "5") and 8.X.X(set to "8") now
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mysqlConnectorVersion")]
    pub mysql_connector_version: Option<String>,
    /// the pid of Java process which needs to attach
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<i64>,
    /// the port of agent server, default 9277
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// the match sql type default value is "", means match all SQL type. The value can be 'select', 'insert', 'update', 'delete', 'replace'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sqlType")]
    pub sql_type: Option<String>,
    /// the match table default value is "", means match all table
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub table: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosJvmReturn {
    /// Java class
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
    /// the method in Java class
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// the pid of Java process which needs to attach
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<i64>,
    /// the port of agent server, default 9277
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// the return value for action 'return'
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosJvmRuleData {
    /// the pid of Java process which needs to attach
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<i64>,
    /// the port of agent server, default 9277
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// RuleData used to save the rule file's data, will use it when recover
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rule-data")]
    pub rule_data: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosJvmStress {
    /// the CPU core number need to use, only set it when action is stress
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpu-count")]
    pub cpu_count: Option<i64>,
    /// the memory type need to locate, only set it when action is stress, the value can be 'stack' or 'heap'
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mem-type")]
    pub mem_type: Option<String>,
    /// the pid of Java process which needs to attach
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<i64>,
    /// the port of agent server, default 9277
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosKafkaFill {
    /// The host of kafka server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// The max bytes to fill
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBytes")]
    pub max_bytes: Option<i64>,
    /// The size of each message
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageSize")]
    pub message_size: Option<i64>,
    /// The password of kafka client
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// The port of kafka server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// The command to reload kafka config
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reloadCommand")]
    pub reload_command: Option<String>,
    /// The topic to attack
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
    /// The username of kafka client
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosKafkaFlood {
    /// The host of kafka server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// The size of each message
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageSize")]
    pub message_size: Option<i64>,
    /// The password of kafka client
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// The port of kafka server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// The number of worker threads
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub threads: Option<i64>,
    /// The topic to attack
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
    /// The username of kafka client
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosKafkaIo {
    /// The path of server config
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configFile")]
    pub config_file: Option<String>,
    /// Make kafka cluster non-readable
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonReadable")]
    pub non_readable: Option<bool>,
    /// Make kafka cluster non-writable
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonWritable")]
    pub non_writable: Option<bool>,
    /// The topic to attack
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
}

/// PhysicalMachineChaosSpec defines the desired state of PhysicalMachineChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesPhysicalmachineChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosNetworkBandwidth {
    pub buffer: i32,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-address")]
    pub ip_address: Option<String>,
    pub limit: i32,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub minburst: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peakrate: Option<i64>,
    pub rate: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosNetworkCorrupt {
    /// correlation is percentage (10 is 10%)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<String>,
    /// the network interface to impact
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device: Option<String>,
    /// only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egress-port")]
    pub egress_port: Option<String>,
    /// only impact traffic to these hostnames
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// only impact egress traffic to these IP addresses
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-address")]
    pub ip_address: Option<String>,
    /// only impact traffic using this IP protocol, supported: tcp, udp, icmp, all
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-protocol")]
    pub ip_protocol: Option<String>,
    /// percentage of packets to corrupt (10 is 10%)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<String>,
    /// only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "source-port")]
    pub source_port: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosNetworkDelay {
    /// only the packet which match the tcp flag can be accepted, others will be dropped. only set when the IPProtocol is tcp, used for partition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accept-tcp-flags")]
    pub accept_tcp_flags: Option<String>,
    /// correlation is percentage (10 is 10%)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<String>,
    /// the network interface to impact
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device: Option<String>,
    /// only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egress-port")]
    pub egress_port: Option<String>,
    /// only impact traffic to these hostnames
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// only impact egress traffic to these IP addresses
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-address")]
    pub ip_address: Option<String>,
    /// only impact traffic using this IP protocol, supported: tcp, udp, icmp, all
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-protocol")]
    pub ip_protocol: Option<String>,
    /// jitter time, time units: ns, us (or µs), ms, s, m, h.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jitter: Option<String>,
    /// delay egress time, time units: ns, us (or µs), ms, s, m, h.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub latency: Option<String>,
    /// only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "source-port")]
    pub source_port: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosNetworkDns {
    /// map this host to specified IP
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dns-domain-name")]
    pub dns_domain_name: Option<String>,
    /// map specified host to this IP address
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dns-ip")]
    pub dns_ip: Option<String>,
    /// update the DNS server in /etc/resolv.conf with this value
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dns-server")]
    pub dns_server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosNetworkDown {
    /// The network interface to impact
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device: Option<String>,
    /// NIC down time, time units: ns, us (or µs), ms, s, m, h.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosNetworkDuplicate {
    /// correlation is percentage (10 is 10%)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<String>,
    /// the network interface to impact
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device: Option<String>,
    /// only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egress-port")]
    pub egress_port: Option<String>,
    /// only impact traffic to these hostnames
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// only impact egress traffic to these IP addresses
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-address")]
    pub ip_address: Option<String>,
    /// only impact traffic using this IP protocol, supported: tcp, udp, icmp, all
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-protocol")]
    pub ip_protocol: Option<String>,
    /// percentage of packets to duplicate (10 is 10%)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<String>,
    /// only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "source-port")]
    pub source_port: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosNetworkFlood {
    /// The number of seconds to run the iperf test
    pub duration: String,
    /// Generate traffic to this IP address
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-address")]
    pub ip_address: Option<String>,
    /// The number of iperf parallel client threads to run
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parallel: Option<i32>,
    /// Generate traffic to this port on the IP address
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// The speed of network traffic, allows bps, kbps, mbps, gbps, tbps unit. bps means bytes per second
    pub rate: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosNetworkLoss {
    /// correlation is percentage (10 is 10%)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<String>,
    /// the network interface to impact
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device: Option<String>,
    /// only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egress-port")]
    pub egress_port: Option<String>,
    /// only impact traffic to these hostnames
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// only impact egress traffic to these IP addresses
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-address")]
    pub ip_address: Option<String>,
    /// only impact traffic using this IP protocol, supported: tcp, udp, icmp, all
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-protocol")]
    pub ip_protocol: Option<String>,
    /// percentage of packets to loss (10 is 10%)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<String>,
    /// only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "source-port")]
    pub source_port: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosNetworkPartition {
    /// only the packet which match the tcp flag can be accepted, others will be dropped. only set when the IPProtocol is tcp, used for partition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accept-tcp-flags")]
    pub accept_tcp_flags: Option<String>,
    /// the network interface to impact
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device: Option<String>,
    /// specifies the partition direction, values can be 'from', 'to'. 'from' means packets coming from the 'IPAddress' or 'Hostname' and going to your server, 'to' means packets originating from your server and going to the 'IPAddress' or 'Hostname'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub direction: Option<String>,
    /// only impact traffic to these hostnames
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// only impact egress traffic to these IP addresses
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-address")]
    pub ip_address: Option<String>,
    /// only impact egress traffic to these IP addresses
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-protocol")]
    pub ip_protocol: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosProcess {
    /// the process name or the process ID
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub process: Option<String>,
    /// the command to be run when recovering experiment
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recoverCmd")]
    pub recover_cmd: Option<String>,
    /// the signal number to send
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub signal: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosRedisCacheLimit {
    /// The adress of Redis server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addr: Option<String>,
    /// The size of `maxmemory`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheSize")]
    pub cache_size: Option<String>,
    /// The password of Redis server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// Specifies maxmemory as a percentage of the original value
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosRedisExpiration {
    /// The adress of Redis server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addr: Option<String>,
    /// The expiration of the keys
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expiration: Option<String>,
    /// The keys to be expired
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Additional options for `expiration`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub option: Option<String>,
    /// The password of Redis server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosRedisPenetration {
    /// The adress of Redis server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addr: Option<String>,
    /// The password of Redis server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// The number of requests to be sent
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestNum")]
    pub request_num: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosRedisRestart {
    /// The adress of Redis server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addr: Option<String>,
    /// The path of Sentinel conf
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conf: Option<String>,
    /// The control flag determines whether to flush config
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flushConfig")]
    pub flush_config: Option<bool>,
    /// The password of Redis server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// The path of `redis-server` command-line tool
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redisPath")]
    pub redis_path: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosRedisStop {
    /// The adress of Redis server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addr: Option<String>,
    /// The path of Sentinel conf
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conf: Option<String>,
    /// The control flag determines whether to flush config
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flushConfig")]
    pub flush_config: Option<bool>,
    /// The password of Redis server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// The path of `redis-server` command-line tool
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redisPath")]
    pub redis_path: Option<bool>,
}

/// Selector is used to select physical machines that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesPhysicalmachineChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// PhysicalMachines is a map of string keys and a set values that used to select physical machines. The key defines the namespace which physical machine belong, and each value is a set of physical machine names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "physicalMachines")]
    pub physical_machines: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosStressCpu {
    /// specifies P percent loading per CPU worker. 0 is effectively a sleep (no load) and 100 is full loading.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub load: Option<i64>,
    /// extend stress-ng options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<String>>,
    /// specifies N workers to apply the stressor.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosStressMem {
    /// extend stress-ng options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<String>>,
    /// specifies N bytes consumed per vm worker, default is the total available memory. One can specify the size as % of total available memory or in units of B, KB/KiB, MB/MiB, GB/GiB, TB/TiB..
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosUserDefined {
    /// The command to be executed when attack
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attackCmd")]
    pub attack_cmd: Option<String>,
    /// The command to be executed when recover
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recoverCmd")]
    pub recover_cmd: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPhysicalmachineChaosVm {
    /// The name of the VM to be injected
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vm-name")]
    pub vm_name: Option<String>,
}

/// PodChaosSpec defines the attributes that a user creates on a chaos experiment about pods.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPodChaos {
    /// Action defines the specific pod chaos action. Supported action: pod-kill / pod-failure / container-kill Default action: pod-kill
    pub action: WorkflowTemplatesPodChaosAction,
    /// ContainerNames indicates list of the name of affected container. If not set, the first container will be injected
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerNames")]
    pub container_names: Option<Vec<String>>,
    /// Duration represents the duration of the chaos action. It is required when the action is `PodFailureAction`. A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "-1.5h" or "2h45m". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// GracePeriod is used in pod-kill action. It represents the duration in seconds before the pod should be deleted. Value must be non-negative integer. The default value is zero that indicates delete immediately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gracePeriod")]
    pub grace_period: Option<i64>,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesPodChaosMode,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesPodChaosSelector,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// PodChaosSpec defines the attributes that a user creates on a chaos experiment about pods.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesPodChaosAction {
    #[serde(rename = "pod-kill")]
    PodKill,
    #[serde(rename = "pod-failure")]
    PodFailure,
    #[serde(rename = "container-kill")]
    ContainerKill,
}

/// PodChaosSpec defines the attributes that a user creates on a chaos experiment about pods.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesPodChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPodChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesPodChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesPodChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Schedule describe the Schedule(describing scheduled chaos) to be injected with chaos nodes. Only used when Type is TypeSchedule.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedule {
    /// AWSChaosSpec is the content of the specification for an AWSChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsChaos")]
    pub aws_chaos: Option<WorkflowTemplatesScheduleAwsChaos>,
    /// AzureChaosSpec is the content of the specification for an AzureChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureChaos")]
    pub azure_chaos: Option<WorkflowTemplatesScheduleAzureChaos>,
    /// BlockChaosSpec is the content of the specification for a BlockChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockChaos")]
    pub block_chaos: Option<WorkflowTemplatesScheduleBlockChaos>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "concurrencyPolicy")]
    pub concurrency_policy: Option<WorkflowTemplatesScheduleConcurrencyPolicy>,
    /// DNSChaosSpec defines the desired state of DNSChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsChaos")]
    pub dns_chaos: Option<WorkflowTemplatesScheduleDnsChaos>,
    /// GCPChaosSpec is the content of the specification for a GCPChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gcpChaos")]
    pub gcp_chaos: Option<WorkflowTemplatesScheduleGcpChaos>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "historyLimit")]
    pub history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpChaos")]
    pub http_chaos: Option<WorkflowTemplatesScheduleHttpChaos>,
    /// IOChaosSpec defines the desired state of IOChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ioChaos")]
    pub io_chaos: Option<WorkflowTemplatesScheduleIoChaos>,
    /// JVMChaosSpec defines the desired state of JVMChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jvmChaos")]
    pub jvm_chaos: Option<WorkflowTemplatesScheduleJvmChaos>,
    /// KernelChaosSpec defines the desired state of KernelChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kernelChaos")]
    pub kernel_chaos: Option<WorkflowTemplatesScheduleKernelChaos>,
    /// NetworkChaosSpec defines the desired state of NetworkChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkChaos")]
    pub network_chaos: Option<WorkflowTemplatesScheduleNetworkChaos>,
    /// PhysicalMachineChaosSpec defines the desired state of PhysicalMachineChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "physicalmachineChaos")]
    pub physicalmachine_chaos: Option<WorkflowTemplatesSchedulePhysicalmachineChaos>,
    /// PodChaosSpec defines the attributes that a user creates on a chaos experiment about pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podChaos")]
    pub pod_chaos: Option<WorkflowTemplatesSchedulePodChaos>,
    pub schedule: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startingDeadlineSeconds")]
    pub starting_deadline_seconds: Option<i64>,
    /// StressChaosSpec defines the desired state of StressChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stressChaos")]
    pub stress_chaos: Option<WorkflowTemplatesScheduleStressChaos>,
    /// TimeChaosSpec defines the desired state of TimeChaos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeChaos")]
    pub time_chaos: Option<WorkflowTemplatesScheduleTimeChaos>,
    #[serde(rename = "type")]
    pub r#type: String,
}

/// AWSChaosSpec is the content of the specification for an AWSChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleAwsChaos {
    /// Action defines the specific aws chaos action. Supported action: ec2-stop / ec2-restart / detach-volume Default action: ec2-stop
    pub action: WorkflowTemplatesScheduleAwsChaosAction,
    /// AWSRegion defines the region of aws.
    #[serde(rename = "awsRegion")]
    pub aws_region: String,
    /// DeviceName indicates the name of the device. Needed in detach-volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    pub device_name: Option<String>,
    /// Duration represents the duration of the chaos action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Ec2Instance indicates the ID of the ec2 instance.
    #[serde(rename = "ec2Instance")]
    pub ec2_instance: String,
    /// Endpoint indicates the endpoint of the aws server. Just used it in test now.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// SecretName defines the name of kubernetes secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    /// EbsVolume indicates the ID of the EBS volume. Needed in detach-volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeID")]
    pub volume_id: Option<String>,
}

/// AWSChaosSpec is the content of the specification for an AWSChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleAwsChaosAction {
    #[serde(rename = "ec2-stop")]
    Ec2Stop,
    #[serde(rename = "ec2-restart")]
    Ec2Restart,
    #[serde(rename = "detach-volume")]
    DetachVolume,
}

/// AzureChaosSpec is the content of the specification for an AzureChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleAzureChaos {
    /// Action defines the specific azure chaos action. Supported action: vm-stop / vm-restart / disk-detach Default action: vm-stop
    pub action: WorkflowTemplatesScheduleAzureChaosAction,
    /// DiskName indicates the name of the disk. Needed in disk-detach.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskName")]
    pub disk_name: Option<String>,
    /// Duration represents the duration of the chaos action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// LUN indicates the Logical Unit Number of the data disk. Needed in disk-detach.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lun: Option<i64>,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// ResourceGroupName defines the name of ResourceGroup
    #[serde(rename = "resourceGroupName")]
    pub resource_group_name: String,
    /// SecretName defines the name of kubernetes secret. It is used for Azure credentials.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    /// SubscriptionID defines the id of Azure subscription.
    #[serde(rename = "subscriptionID")]
    pub subscription_id: String,
    /// VMName defines the name of Virtual Machine
    #[serde(rename = "vmName")]
    pub vm_name: String,
}

/// AzureChaosSpec is the content of the specification for an AzureChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleAzureChaosAction {
    #[serde(rename = "vm-stop")]
    VmStop,
    #[serde(rename = "vm-restart")]
    VmRestart,
    #[serde(rename = "disk-detach")]
    DiskDetach,
}

/// BlockChaosSpec is the content of the specification for a BlockChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleBlockChaos {
    /// Action defines the specific block chaos action. Supported action: delay
    pub action: WorkflowTemplatesScheduleBlockChaosAction,
    /// ContainerNames indicates list of the name of affected container. If not set, the first container will be injected
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerNames")]
    pub container_names: Option<Vec<String>>,
    /// Delay defines the delay distribution.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delay: Option<WorkflowTemplatesScheduleBlockChaosDelay>,
    /// Duration represents the duration of the chaos action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesScheduleBlockChaosMode,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesScheduleBlockChaosSelector,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(rename = "volumeName")]
    pub volume_name: String,
}

/// BlockChaosSpec is the content of the specification for a BlockChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleBlockChaosAction {
    #[serde(rename = "delay")]
    Delay,
}

/// Delay defines the delay distribution.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleBlockChaosDelay {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jitter: Option<String>,
    /// Latency defines the latency of every io request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub latency: Option<String>,
}

/// BlockChaosSpec is the content of the specification for a BlockChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleBlockChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleBlockChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesScheduleBlockChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleBlockChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Schedule describe the Schedule(describing scheduled chaos) to be injected with chaos nodes. Only used when Type is TypeSchedule.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleConcurrencyPolicy {
    Forbid,
    Allow,
}

/// DNSChaosSpec defines the desired state of DNSChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleDnsChaos {
    /// Action defines the specific DNS chaos action. Supported action: error, random Default action: error
    pub action: WorkflowTemplatesScheduleDnsChaosAction,
    /// ContainerNames indicates list of the name of affected container. If not set, the first container will be injected
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerNames")]
    pub container_names: Option<Vec<String>>,
    /// Duration represents the duration of the chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesScheduleDnsChaosMode,
    /// Choose which domain names to take effect, support the placeholder ? and wildcard *, or the Specified domain name. Note: 1. The wildcard * must be at the end of the string. For example, chaos-*.org is invalid. 2. if the patterns is empty, will take effect on all the domain names. For example: The value is ["google.com", "github.*", "chaos-mes?.org"], will take effect on "google.com", "github.com" and "chaos-mesh.org"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patterns: Option<Vec<String>>,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesScheduleDnsChaosSelector,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// DNSChaosSpec defines the desired state of DNSChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleDnsChaosAction {
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "random")]
    Random,
}

/// DNSChaosSpec defines the desired state of DNSChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleDnsChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleDnsChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesScheduleDnsChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleDnsChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// GCPChaosSpec is the content of the specification for a GCPChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleGcpChaos {
    /// Action defines the specific gcp chaos action. Supported action: node-stop / node-reset / disk-loss Default action: node-stop
    pub action: WorkflowTemplatesScheduleGcpChaosAction,
    /// The device name of disks to detach. Needed in disk-loss.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceNames")]
    pub device_names: Option<Vec<String>>,
    /// Duration represents the duration of the chaos action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Instance defines the name of the instance
    pub instance: String,
    /// Project defines the ID of gcp project.
    pub project: String,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// SecretName defines the name of kubernetes secret. It is used for GCP credentials.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    /// Zone defines the zone of gcp project.
    pub zone: String,
}

/// GCPChaosSpec is the content of the specification for a GCPChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleGcpChaosAction {
    #[serde(rename = "node-stop")]
    NodeStop,
    #[serde(rename = "node-reset")]
    NodeReset,
    #[serde(rename = "disk-loss")]
    DiskLoss,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleHttpChaos {
    /// Abort is a rule to abort a http session.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub abort: Option<bool>,
    /// Code is a rule to select target by http status code in response.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i32>,
    /// Delay represents the delay of the target request/response. A duration string is a possibly unsigned sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "2h45m". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delay: Option<String>,
    /// Duration represents the duration of the chaos action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Method is a rule to select target by http method in request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesScheduleHttpChaosMode,
    /// Patch is a rule to patch some contents in target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<WorkflowTemplatesScheduleHttpChaosPatch>,
    /// Path is a rule to select target by uri path in http request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Port represents the target port to be proxy of.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// Replace is a rule to replace some contents in target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replace: Option<WorkflowTemplatesScheduleHttpChaosReplace>,
    /// RequestHeaders is a rule to select target by http headers in request. The key-value pairs represent header name and header value pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request_headers: Option<BTreeMap<String, String>>,
    /// ResponseHeaders is a rule to select target by http headers in response. The key-value pairs represent header name and header value pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response_headers: Option<BTreeMap<String, String>>,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesScheduleHttpChaosSelector,
    /// Target is the object to be selected and injected.
    pub target: WorkflowTemplatesScheduleHttpChaosTarget,
    /// TLS is the tls config, will override PodHttpChaos if there are multiple HTTPChaos experiments are applied
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<WorkflowTemplatesScheduleHttpChaosTls>,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleHttpChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Patch is a rule to patch some contents in target.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleHttpChaosPatch {
    /// Body is a rule to patch message body of target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<WorkflowTemplatesScheduleHttpChaosPatchBody>,
    /// Headers is a rule to append http headers of target. For example: `[["Set-Cookie", "<one cookie>"], ["Set-Cookie", "<another cookie>"]]`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    /// Queries is a rule to append uri queries of target(Request only). For example: `[["foo", "bar"], ["foo", "unknown"]]`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queries: Option<Vec<String>>,
}

/// Body is a rule to patch message body of target.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleHttpChaosPatchBody {
    /// Type represents the patch type, only support `JSON` as [merge patch json](https://tools.ietf.org/html/rfc7396) currently.
    #[serde(rename = "type")]
    pub r#type: String,
    /// Value is the patch contents.
    pub value: String,
}

/// Replace is a rule to replace some contents in target.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleHttpChaosReplace {
    /// Body is a rule to replace http message body in target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    /// Code is a rule to replace http status code in response.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i32>,
    /// Headers is a rule to replace http headers of target. The key-value pairs represent header name and header value pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    /// Method is a rule to replace http method in request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// Path is rule to to replace uri path in http request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Queries is a rule to replace uri queries in http request. For example, with value `{ "foo": "unknown" }`, the `/?foo=bar` will be altered to `/?foo=unknown`,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queries: Option<BTreeMap<String, String>>,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleHttpChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesScheduleHttpChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleHttpChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleHttpChaosTarget {
    Request,
    Response,
}

/// TLS is the tls config, will override PodHttpChaos if there are multiple HTTPChaos experiments are applied
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleHttpChaosTls {
    /// CAName represents the data name of ca file in secret, `ca.crt` for example
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caName")]
    pub ca_name: Option<String>,
    /// CertName represents the data name of cert file in secret, `tls.crt` for example
    #[serde(rename = "certName")]
    pub cert_name: String,
    /// KeyName represents the data name of key file in secret, `tls.key` for example
    #[serde(rename = "keyName")]
    pub key_name: String,
    /// SecretName represents the name of required secret resource
    #[serde(rename = "secretName")]
    pub secret_name: String,
    /// SecretNamespace represents the namespace of required secret resource
    #[serde(rename = "secretNamespace")]
    pub secret_namespace: String,
}

/// IOChaosSpec defines the desired state of IOChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleIoChaos {
    /// Action defines the specific pod chaos action. Supported action: latency / fault / attrOverride / mistake
    pub action: WorkflowTemplatesScheduleIoChaosAction,
    /// Attr defines the overrided attribution
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attr: Option<WorkflowTemplatesScheduleIoChaosAttr>,
    /// ContainerNames indicates list of the name of affected container. If not set, the first container will be injected
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerNames")]
    pub container_names: Option<Vec<String>>,
    /// Delay defines the value of I/O chaos action delay. A delay string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delay: Option<String>,
    /// Duration represents the duration of the chaos action. It is required when the action is `PodFailureAction`. A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "-1.5h" or "2h45m". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Errno defines the error code that returned by I/O action. refer to: https://www-numi.fnal.gov/offline_software/srt_public_context/WebDocs/Errors/unix_system_errors.html
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub errno: Option<i32>,
    /// Methods defines the I/O methods for injecting I/O chaos action. default: all I/O methods.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    /// Mistake defines what types of incorrectness are injected to IO operations
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mistake: Option<WorkflowTemplatesScheduleIoChaosMistake>,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesScheduleIoChaosMode,
    /// Path defines the path of files for injecting I/O chaos action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Percent defines the percentage of injection errors and provides a number from 0-100. default: 100.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<i64>,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesScheduleIoChaosSelector,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// VolumePath represents the mount path of injected volume
    #[serde(rename = "volumePath")]
    pub volume_path: String,
}

/// IOChaosSpec defines the desired state of IOChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleIoChaosAction {
    #[serde(rename = "latency")]
    Latency,
    #[serde(rename = "fault")]
    Fault,
    #[serde(rename = "attrOverride")]
    AttrOverride,
    #[serde(rename = "mistake")]
    Mistake,
}

/// Attr defines the overrided attribution
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleIoChaosAttr {
    /// Timespec represents a time
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub atime: Option<WorkflowTemplatesScheduleIoChaosAttrAtime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocks: Option<i64>,
    /// Timespec represents a time
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ctime: Option<WorkflowTemplatesScheduleIoChaosAttrCtime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gid: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ino: Option<i64>,
    /// FileType represents type of file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Timespec represents a time
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mtime: Option<WorkflowTemplatesScheduleIoChaosAttrMtime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nlink: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub perm: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rdev: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<i32>,
}

/// Timespec represents a time
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleIoChaosAttrAtime {
    pub nsec: i64,
    pub sec: i64,
}

/// Timespec represents a time
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleIoChaosAttrCtime {
    pub nsec: i64,
    pub sec: i64,
}

/// Timespec represents a time
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleIoChaosAttrMtime {
    pub nsec: i64,
    pub sec: i64,
}

/// Mistake defines what types of incorrectness are injected to IO operations
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleIoChaosMistake {
    /// Filling determines what is filled in the mistake data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filling: Option<WorkflowTemplatesScheduleIoChaosMistakeFilling>,
    /// Max length of each wrong data segment in bytes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxLength")]
    pub max_length: Option<i64>,
    /// There will be [1, MaxOccurrences] segments of wrong data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxOccurrences")]
    pub max_occurrences: Option<i64>,
}

/// Mistake defines what types of incorrectness are injected to IO operations
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleIoChaosMistakeFilling {
    #[serde(rename = "zero")]
    Zero,
    #[serde(rename = "random")]
    Random,
}

/// IOChaosSpec defines the desired state of IOChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleIoChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleIoChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesScheduleIoChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleIoChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// JVMChaosSpec defines the desired state of JVMChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleJvmChaos {
    /// Action defines the specific jvm chaos action. Supported action: latency;return;exception;stress;gc;ruleData
    pub action: WorkflowTemplatesScheduleJvmChaosAction,
    /// Java class
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
    /// ContainerNames indicates list of the name of affected container. If not set, the first container will be injected
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerNames")]
    pub container_names: Option<Vec<String>>,
    /// the CPU core number needs to use, only set it when action is stress
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuCount")]
    pub cpu_count: Option<i64>,
    /// the match database default value is "", means match all database
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub database: Option<String>,
    /// Duration represents the duration of the chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// the exception which needs to throw for action `exception` or the exception message needs to throw in action `mysql`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exception: Option<String>,
    /// the latency duration for action 'latency', unit ms or the latency duration in action `mysql`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub latency: Option<i64>,
    /// the memory type needs to locate, only set it when action is stress, the value can be 'stack' or 'heap'
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memType")]
    pub mem_type: Option<String>,
    /// the method in Java class
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesScheduleJvmChaosMode,
    /// the version of mysql-connector-java, only support 5.X.X(set to "5") and 8.X.X(set to "8") now
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mysqlConnectorVersion")]
    pub mysql_connector_version: Option<String>,
    /// byteman rule name, should be unique, and will generate one if not set
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// the pid of Java process which needs to attach
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<i64>,
    /// the port of agent server, default 9277
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// the byteman rule's data for action 'ruleData'
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleData")]
    pub rule_data: Option<String>,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesScheduleJvmChaosSelector,
    /// the match sql type default value is "", means match all SQL type. The value can be 'select', 'insert', 'update', 'delete', 'replace'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sqlType")]
    pub sql_type: Option<String>,
    /// the match table default value is "", means match all table
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub table: Option<String>,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// JVMChaosSpec defines the desired state of JVMChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleJvmChaosAction {
    #[serde(rename = "latency")]
    Latency,
    #[serde(rename = "return")]
    Return,
    #[serde(rename = "exception")]
    Exception,
    #[serde(rename = "stress")]
    Stress,
    #[serde(rename = "gc")]
    Gc,
    #[serde(rename = "ruleData")]
    RuleData,
    #[serde(rename = "mysql")]
    Mysql,
}

/// JVMChaosSpec defines the desired state of JVMChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleJvmChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleJvmChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesScheduleJvmChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleJvmChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// KernelChaosSpec defines the desired state of KernelChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleKernelChaos {
    /// ContainerNames indicates list of the name of affected container. If not set, the first container will be injected
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerNames")]
    pub container_names: Option<Vec<String>>,
    /// Duration represents the duration of the chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// FailKernRequest defines the request of kernel injection
    #[serde(rename = "failKernRequest")]
    pub fail_kern_request: WorkflowTemplatesScheduleKernelChaosFailKernRequest,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesScheduleKernelChaosMode,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesScheduleKernelChaosSelector,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// FailKernRequest defines the request of kernel injection
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleKernelChaosFailKernRequest {
    /// Callchain indicate a special call chain, such as: ext4_mount -> mount_subtree -> ... -> should_failslab With an optional set of predicates and an optional set of parameters, which used with predicates. You can read call chan and predicate examples from https://github.com/chaos-mesh/bpfki/tree/develop/examples to learn more. If no special call chain, just keep Callchain empty, which means it will fail at any call chain with slab alloc (eg: kmalloc).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub callchain: Option<Vec<WorkflowTemplatesScheduleKernelChaosFailKernRequestCallchain>>,
    /// FailType indicates what to fail, can be set to '0' / '1' / '2' If `0`, indicates slab to fail (should_failslab) If `1`, indicates alloc_page to fail (should_fail_alloc_page) If `2`, indicates bio to fail (should_fail_bio) You can read: 1. https://www.kernel.org/doc/html/latest/fault-injection/fault-injection.html 2. http://github.com/iovisor/bcc/blob/master/tools/inject_example.txt to learn more
    pub failtype: i32,
    /// Headers indicates the appropriate kernel headers you need. Eg: "linux/mmzone.h", "linux/blkdev.h" and so on
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    /// Probability indicates the fails with probability. If you want 1%, please set this field with 1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub probability: Option<i32>,
    /// Times indicates the max times of fails.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub times: Option<i32>,
}

/// Frame defines the function signature and predicate in function's body
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleKernelChaosFailKernRequestCallchain {
    /// Funcname can be find from kernel source or `/proc/kallsyms`, such as `ext4_mount`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub funcname: Option<String>,
    /// Parameters is used with predicate, for example, if you want to inject slab error in `d_alloc_parallel(struct dentry *parent, const struct qstr *name)` with a special name `bananas`, you need to set it to `struct dentry *parent, const struct qstr *name` otherwise omit it.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<String>,
    /// Predicate will access the arguments of this Frame, example with Parameters's, you can set it to `STRNCMP(name->name, "bananas", 8)` to make inject only with it, or omit it to inject for all d_alloc_parallel call chain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub predicate: Option<String>,
}

/// KernelChaosSpec defines the desired state of KernelChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleKernelChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleKernelChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesScheduleKernelChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleKernelChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// NetworkChaosSpec defines the desired state of NetworkChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleNetworkChaos {
    /// Action defines the specific network chaos action. Supported action: partition, netem, delay, loss, duplicate, corrupt Default action: delay
    pub action: WorkflowTemplatesScheduleNetworkChaosAction,
    /// Bandwidth represents the detail about bandwidth control action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bandwidth: Option<WorkflowTemplatesScheduleNetworkChaosBandwidth>,
    /// Corrupt represents the detail about corrupt action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub corrupt: Option<WorkflowTemplatesScheduleNetworkChaosCorrupt>,
    /// Delay represents the detail about delay action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delay: Option<WorkflowTemplatesScheduleNetworkChaosDelay>,
    /// Device represents the network device to be affected.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device: Option<String>,
    /// Direction represents the direction, this applies on netem and network partition action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub direction: Option<WorkflowTemplatesScheduleNetworkChaosDirection>,
    /// DuplicateSpec represents the detail about loss action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duplicate: Option<WorkflowTemplatesScheduleNetworkChaosDuplicate>,
    /// Duration represents the duration of the chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// ExternalTargets represents network targets outside k8s
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalTargets")]
    pub external_targets: Option<Vec<String>>,
    /// Loss represents the detail about loss action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub loss: Option<WorkflowTemplatesScheduleNetworkChaosLoss>,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesScheduleNetworkChaosMode,
    /// Rate represents the detail about rate control action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rate: Option<WorkflowTemplatesScheduleNetworkChaosRate>,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesScheduleNetworkChaosSelector,
    /// Target represents network target, this applies on netem and network partition action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<WorkflowTemplatesScheduleNetworkChaosTarget>,
    /// TargetDevice represents the network device to be affected in target scope.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetDevice")]
    pub target_device: Option<String>,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// NetworkChaosSpec defines the desired state of NetworkChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleNetworkChaosAction {
    #[serde(rename = "netem")]
    Netem,
    #[serde(rename = "delay")]
    Delay,
    #[serde(rename = "loss")]
    Loss,
    #[serde(rename = "duplicate")]
    Duplicate,
    #[serde(rename = "corrupt")]
    Corrupt,
    #[serde(rename = "partition")]
    Partition,
    #[serde(rename = "bandwidth")]
    Bandwidth,
}

/// Bandwidth represents the detail about bandwidth control action
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleNetworkChaosBandwidth {
    /// Buffer is the maximum amount of bytes that tokens can be available for instantaneously.
    pub buffer: i32,
    /// Limit is the number of bytes that can be queued waiting for tokens to become available.
    pub limit: i32,
    /// Minburst specifies the size of the peakrate bucket. For perfect accuracy, should be set to the MTU of the interface.  If a peakrate is needed, but some burstiness is acceptable, this size can be raised. A 3000 byte minburst allows around 3mbit/s of peakrate, given 1000 byte packets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub minburst: Option<i32>,
    /// Peakrate is the maximum depletion rate of the bucket. The peakrate does not need to be set, it is only necessary if perfect millisecond timescale shaping is required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peakrate: Option<i64>,
    /// Rate is the speed knob. Allows bit, kbit, mbit, gbit, tbit, bps, kbps, mbps, gbps, tbps unit. bps means bytes per second.
    pub rate: String,
}

/// Corrupt represents the detail about corrupt action
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleNetworkChaosCorrupt {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<String>,
    pub corrupt: String,
}

/// Delay represents the detail about delay action
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleNetworkChaosDelay {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jitter: Option<String>,
    pub latency: String,
    /// ReorderSpec defines details of packet reorder.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reorder: Option<WorkflowTemplatesScheduleNetworkChaosDelayReorder>,
}

/// ReorderSpec defines details of packet reorder.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleNetworkChaosDelayReorder {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<String>,
    pub gap: i64,
    pub reorder: String,
}

/// NetworkChaosSpec defines the desired state of NetworkChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleNetworkChaosDirection {
    #[serde(rename = "to")]
    To,
    #[serde(rename = "from")]
    From,
    #[serde(rename = "both")]
    Both,
}

/// DuplicateSpec represents the detail about loss action
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleNetworkChaosDuplicate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<String>,
    pub duplicate: String,
}

/// Loss represents the detail about loss action
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleNetworkChaosLoss {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<String>,
    pub loss: String,
}

/// NetworkChaosSpec defines the desired state of NetworkChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleNetworkChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Rate represents the detail about rate control action
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleNetworkChaosRate {
    /// Rate is the speed knob. Allows bit, kbit, mbit, gbit, tbit, bps, kbps, mbps, gbps, tbps unit. bps means bytes per second.
    pub rate: String,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleNetworkChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesScheduleNetworkChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleNetworkChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Target represents network target, this applies on netem and network partition action
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleNetworkChaosTarget {
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesScheduleNetworkChaosTargetMode,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesScheduleNetworkChaosTargetSelector,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Target represents network target, this applies on netem and network partition action
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleNetworkChaosTargetMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleNetworkChaosTargetSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesScheduleNetworkChaosTargetSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleNetworkChaosTargetSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// PhysicalMachineChaosSpec defines the desired state of PhysicalMachineChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaos {
    /// the subAction, generate automatically
    pub action: WorkflowTemplatesSchedulePhysicalmachineChaosAction,
    /// DEPRECATED: Use Selector instead. Only one of Address and Selector could be specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clock: Option<WorkflowTemplatesSchedulePhysicalmachineChaosClock>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disk-fill")]
    pub disk_fill: Option<WorkflowTemplatesSchedulePhysicalmachineChaosDiskFill>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disk-read-payload")]
    pub disk_read_payload: Option<WorkflowTemplatesSchedulePhysicalmachineChaosDiskReadPayload>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disk-write-payload")]
    pub disk_write_payload: Option<WorkflowTemplatesSchedulePhysicalmachineChaosDiskWritePayload>,
    /// Duration represents the duration of the chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-append")]
    pub file_append: Option<WorkflowTemplatesSchedulePhysicalmachineChaosFileAppend>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-create")]
    pub file_create: Option<WorkflowTemplatesSchedulePhysicalmachineChaosFileCreate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-delete")]
    pub file_delete: Option<WorkflowTemplatesSchedulePhysicalmachineChaosFileDelete>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-modify")]
    pub file_modify: Option<WorkflowTemplatesSchedulePhysicalmachineChaosFileModify>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-rename")]
    pub file_rename: Option<WorkflowTemplatesSchedulePhysicalmachineChaosFileRename>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-replace")]
    pub file_replace: Option<WorkflowTemplatesSchedulePhysicalmachineChaosFileReplace>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http-abort")]
    pub http_abort: Option<WorkflowTemplatesSchedulePhysicalmachineChaosHttpAbort>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http-config")]
    pub http_config: Option<WorkflowTemplatesSchedulePhysicalmachineChaosHttpConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http-delay")]
    pub http_delay: Option<WorkflowTemplatesSchedulePhysicalmachineChaosHttpDelay>,
    /// used for HTTP request, now only support GET
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http-request")]
    pub http_request: Option<WorkflowTemplatesSchedulePhysicalmachineChaosHttpRequest>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jvm-exception")]
    pub jvm_exception: Option<WorkflowTemplatesSchedulePhysicalmachineChaosJvmException>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jvm-gc")]
    pub jvm_gc: Option<WorkflowTemplatesSchedulePhysicalmachineChaosJvmGc>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jvm-latency")]
    pub jvm_latency: Option<WorkflowTemplatesSchedulePhysicalmachineChaosJvmLatency>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jvm-mysql")]
    pub jvm_mysql: Option<WorkflowTemplatesSchedulePhysicalmachineChaosJvmMysql>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jvm-return")]
    pub jvm_return: Option<WorkflowTemplatesSchedulePhysicalmachineChaosJvmReturn>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jvm-rule-data")]
    pub jvm_rule_data: Option<WorkflowTemplatesSchedulePhysicalmachineChaosJvmRuleData>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jvm-stress")]
    pub jvm_stress: Option<WorkflowTemplatesSchedulePhysicalmachineChaosJvmStress>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kafka-fill")]
    pub kafka_fill: Option<WorkflowTemplatesSchedulePhysicalmachineChaosKafkaFill>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kafka-flood")]
    pub kafka_flood: Option<WorkflowTemplatesSchedulePhysicalmachineChaosKafkaFlood>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kafka-io")]
    pub kafka_io: Option<WorkflowTemplatesSchedulePhysicalmachineChaosKafkaIo>,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesSchedulePhysicalmachineChaosMode,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "network-bandwidth")]
    pub network_bandwidth: Option<WorkflowTemplatesSchedulePhysicalmachineChaosNetworkBandwidth>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "network-corrupt")]
    pub network_corrupt: Option<WorkflowTemplatesSchedulePhysicalmachineChaosNetworkCorrupt>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "network-delay")]
    pub network_delay: Option<WorkflowTemplatesSchedulePhysicalmachineChaosNetworkDelay>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "network-dns")]
    pub network_dns: Option<WorkflowTemplatesSchedulePhysicalmachineChaosNetworkDns>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "network-down")]
    pub network_down: Option<WorkflowTemplatesSchedulePhysicalmachineChaosNetworkDown>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "network-duplicate")]
    pub network_duplicate: Option<WorkflowTemplatesSchedulePhysicalmachineChaosNetworkDuplicate>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "network-flood")]
    pub network_flood: Option<WorkflowTemplatesSchedulePhysicalmachineChaosNetworkFlood>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "network-loss")]
    pub network_loss: Option<WorkflowTemplatesSchedulePhysicalmachineChaosNetworkLoss>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "network-partition")]
    pub network_partition: Option<WorkflowTemplatesSchedulePhysicalmachineChaosNetworkPartition>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub process: Option<WorkflowTemplatesSchedulePhysicalmachineChaosProcess>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redis-cacheLimit")]
    pub redis_cache_limit: Option<WorkflowTemplatesSchedulePhysicalmachineChaosRedisCacheLimit>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redis-expiration")]
    pub redis_expiration: Option<WorkflowTemplatesSchedulePhysicalmachineChaosRedisExpiration>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redis-penetration")]
    pub redis_penetration: Option<WorkflowTemplatesSchedulePhysicalmachineChaosRedisPenetration>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redis-restart")]
    pub redis_restart: Option<WorkflowTemplatesSchedulePhysicalmachineChaosRedisRestart>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redis-stop")]
    pub redis_stop: Option<WorkflowTemplatesSchedulePhysicalmachineChaosRedisStop>,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// Selector is used to select physical machines that are used to inject chaos action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<WorkflowTemplatesSchedulePhysicalmachineChaosSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stress-cpu")]
    pub stress_cpu: Option<WorkflowTemplatesSchedulePhysicalmachineChaosStressCpu>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stress-mem")]
    pub stress_mem: Option<WorkflowTemplatesSchedulePhysicalmachineChaosStressMem>,
    /// the experiment ID
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user_defined: Option<WorkflowTemplatesSchedulePhysicalmachineChaosUserDefined>,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of physical machines to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of physical machines the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vm: Option<WorkflowTemplatesSchedulePhysicalmachineChaosVm>,
}

/// PhysicalMachineChaosSpec defines the desired state of PhysicalMachineChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesSchedulePhysicalmachineChaosAction {
    #[serde(rename = "stress-cpu")]
    StressCpu,
    #[serde(rename = "stress-mem")]
    StressMem,
    #[serde(rename = "disk-read-payload")]
    DiskReadPayload,
    #[serde(rename = "disk-write-payload")]
    DiskWritePayload,
    #[serde(rename = "disk-fill")]
    DiskFill,
    #[serde(rename = "network-corrupt")]
    NetworkCorrupt,
    #[serde(rename = "network-duplicate")]
    NetworkDuplicate,
    #[serde(rename = "network-loss")]
    NetworkLoss,
    #[serde(rename = "network-delay")]
    NetworkDelay,
    #[serde(rename = "network-partition")]
    NetworkPartition,
    #[serde(rename = "network-dns")]
    NetworkDns,
    #[serde(rename = "network-bandwidth")]
    NetworkBandwidth,
    #[serde(rename = "network-flood")]
    NetworkFlood,
    #[serde(rename = "network-down")]
    NetworkDown,
    #[serde(rename = "process")]
    Process,
    #[serde(rename = "jvm-exception")]
    JvmException,
    #[serde(rename = "jvm-gc")]
    JvmGc,
    #[serde(rename = "jvm-latency")]
    JvmLatency,
    #[serde(rename = "jvm-return")]
    JvmReturn,
    #[serde(rename = "jvm-stress")]
    JvmStress,
    #[serde(rename = "jvm-rule-data")]
    JvmRuleData,
    #[serde(rename = "jvm-mysql")]
    JvmMysql,
    #[serde(rename = "clock")]
    Clock,
    #[serde(rename = "redis-expiration")]
    RedisExpiration,
    #[serde(rename = "redis-penetration")]
    RedisPenetration,
    #[serde(rename = "redis-cacheLimit")]
    RedisCacheLimit,
    #[serde(rename = "redis-restart")]
    RedisRestart,
    #[serde(rename = "redis-stop")]
    RedisStop,
    #[serde(rename = "kafka-fill")]
    KafkaFill,
    #[serde(rename = "kafka-flood")]
    KafkaFlood,
    #[serde(rename = "kafka-io")]
    KafkaIo,
    #[serde(rename = "file-create")]
    FileCreate,
    #[serde(rename = "file-modify")]
    FileModify,
    #[serde(rename = "file-delete")]
    FileDelete,
    #[serde(rename = "file-rename")]
    FileRename,
    #[serde(rename = "file-append")]
    FileAppend,
    #[serde(rename = "file-replace")]
    FileReplace,
    #[serde(rename = "vm")]
    Vm,
    #[serde(rename = "user_defined")]
    UserDefined,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosClock {
    /// the identifier of the particular clock on which to act. More clock description in linux kernel can be found in man page of clock_getres, clock_gettime, clock_settime. Muti clock ids should be split with ","
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clock-ids-slice")]
    pub clock_ids_slice: Option<String>,
    /// the pid of target program.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<i64>,
    /// specifies the length of time offset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "time-offset")]
    pub time_offset: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosDiskFill {
    /// fill disk by fallocate
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fill-by-fallocate")]
    pub fill_by_fallocate: Option<bool>,
    /// specifies the location to fill data in. if path not provided, payload will read/write from/into a temp file, temp file will be deleted after writing
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// specifies how many units of data will write into the file path. support unit: c=1, w=2, b=512, kB=1000, K=1024, MB=1000*1000, M=1024*1024, GB=1000*1000*1000, G=1024*1024*1024 BYTES. example : 1M | 512kB
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosDiskReadPayload {
    /// specifies the location to fill data in. if path not provided, payload will read/write from/into a temp file, temp file will be deleted after writing
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// specifies the number of process work on writing, default 1, only 1-255 is valid value
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "payload-process-num")]
    pub payload_process_num: Option<i64>,
    /// specifies how many units of data will write into the file path. support unit: c=1, w=2, b=512, kB=1000, K=1024, MB=1000*1000, M=1024*1024, GB=1000*1000*1000, G=1024*1024*1024 BYTES. example : 1M | 512kB
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosDiskWritePayload {
    /// specifies the location to fill data in. if path not provided, payload will read/write from/into a temp file, temp file will be deleted after writing
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// specifies the number of process work on writing, default 1, only 1-255 is valid value
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "payload-process-num")]
    pub payload_process_num: Option<i64>,
    /// specifies how many units of data will write into the file path. support unit: c=1, w=2, b=512, kB=1000, K=1024, MB=1000*1000, M=1024*1024, GB=1000*1000*1000, G=1024*1024*1024 BYTES. example : 1M | 512kB
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosFileAppend {
    /// Count is the number of times to append the data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i64>,
    /// Data is the data for append.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<String>,
    /// FileName is the name of the file to be created, modified, deleted, renamed, or appended.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-name")]
    pub file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosFileCreate {
    /// DirName is the directory name to create or delete.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dir-name")]
    pub dir_name: Option<String>,
    /// FileName is the name of the file to be created, modified, deleted, renamed, or appended.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-name")]
    pub file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosFileDelete {
    /// DirName is the directory name to create or delete.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dir-name")]
    pub dir_name: Option<String>,
    /// FileName is the name of the file to be created, modified, deleted, renamed, or appended.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-name")]
    pub file_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosFileModify {
    /// FileName is the name of the file to be created, modified, deleted, renamed, or appended.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-name")]
    pub file_name: Option<String>,
    /// Privilege is the file privilege to be set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privilege: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosFileRename {
    /// DestFile is the name to be renamed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dest-file")]
    pub dest_file: Option<String>,
    /// SourceFile is the name need to be renamed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "source-file")]
    pub source_file: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosFileReplace {
    /// DestStr is the destination string of the file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dest-string")]
    pub dest_string: Option<String>,
    /// FileName is the name of the file to be created, modified, deleted, renamed, or appended.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "file-name")]
    pub file_name: Option<String>,
    /// Line is the line number of the file to be replaced.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub line: Option<i64>,
    /// OriginStr is the origin string of the file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "origin-string")]
    pub origin_string: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosHttpAbort {
    /// Code is a rule to select target by http status code in response
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    /// HTTP method
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// Match path of Uri with wildcard matches
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// The TCP port that the target service listens on
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// Composed with one of the port of HTTP connection, we will only attack HTTP connection with port inside proxy_ports
    pub proxy_ports: Vec<i64>,
    /// HTTP target: Request or Response
    pub target: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosHttpConfig {
    /// The config file path
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosHttpDelay {
    /// Code is a rule to select target by http status code in response
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    /// Delay represents the delay of the target request/response
    pub delay: String,
    /// HTTP method
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// Match path of Uri with wildcard matches
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// The TCP port that the target service listens on
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// Composed with one of the port of HTTP connection, we will only attack HTTP connection with port inside proxy_ports
    pub proxy_ports: Vec<i64>,
    /// HTTP target: Request or Response
    pub target: String,
}

/// used for HTTP request, now only support GET
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosHttpRequest {
    /// The number of requests to send
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i64>,
    /// Enable connection pool
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enable-conn-pool")]
    pub enable_conn_pool: Option<bool>,
    /// Request to send"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosJvmException {
    /// Java class
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
    /// the exception which needs to throw for action `exception`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exception: Option<String>,
    /// the method in Java class
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// the pid of Java process which needs to attach
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<i64>,
    /// the port of agent server, default 9277
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosJvmGc {
    /// the pid of Java process which needs to attach
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<i64>,
    /// the port of agent server, default 9277
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosJvmLatency {
    /// Java class
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
    /// the latency duration for action 'latency', unit ms
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub latency: Option<i64>,
    /// the method in Java class
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// the pid of Java process which needs to attach
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<i64>,
    /// the port of agent server, default 9277
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosJvmMysql {
    /// the match database default value is "", means match all database
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub database: Option<String>,
    /// The exception which needs to throw for action `exception` or the exception message needs to throw in action `mysql`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exception: Option<String>,
    /// The latency duration for action 'latency' or the latency duration in action `mysql`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub latency: Option<i64>,
    /// the version of mysql-connector-java, only support 5.X.X(set to "5") and 8.X.X(set to "8") now
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mysqlConnectorVersion")]
    pub mysql_connector_version: Option<String>,
    /// the pid of Java process which needs to attach
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<i64>,
    /// the port of agent server, default 9277
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// the match sql type default value is "", means match all SQL type. The value can be 'select', 'insert', 'update', 'delete', 'replace'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sqlType")]
    pub sql_type: Option<String>,
    /// the match table default value is "", means match all table
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub table: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosJvmReturn {
    /// Java class
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
    /// the method in Java class
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// the pid of Java process which needs to attach
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<i64>,
    /// the port of agent server, default 9277
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// the return value for action 'return'
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosJvmRuleData {
    /// the pid of Java process which needs to attach
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<i64>,
    /// the port of agent server, default 9277
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// RuleData used to save the rule file's data, will use it when recover
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rule-data")]
    pub rule_data: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosJvmStress {
    /// the CPU core number need to use, only set it when action is stress
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpu-count")]
    pub cpu_count: Option<i64>,
    /// the memory type need to locate, only set it when action is stress, the value can be 'stack' or 'heap'
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mem-type")]
    pub mem_type: Option<String>,
    /// the pid of Java process which needs to attach
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<i64>,
    /// the port of agent server, default 9277
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosKafkaFill {
    /// The host of kafka server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// The max bytes to fill
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBytes")]
    pub max_bytes: Option<i64>,
    /// The size of each message
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageSize")]
    pub message_size: Option<i64>,
    /// The password of kafka client
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// The port of kafka server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// The command to reload kafka config
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reloadCommand")]
    pub reload_command: Option<String>,
    /// The topic to attack
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
    /// The username of kafka client
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosKafkaFlood {
    /// The host of kafka server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// The size of each message
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageSize")]
    pub message_size: Option<i64>,
    /// The password of kafka client
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// The port of kafka server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// The number of worker threads
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub threads: Option<i64>,
    /// The topic to attack
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
    /// The username of kafka client
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosKafkaIo {
    /// The path of server config
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configFile")]
    pub config_file: Option<String>,
    /// Make kafka cluster non-readable
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonReadable")]
    pub non_readable: Option<bool>,
    /// Make kafka cluster non-writable
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonWritable")]
    pub non_writable: Option<bool>,
    /// The topic to attack
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
}

/// PhysicalMachineChaosSpec defines the desired state of PhysicalMachineChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesSchedulePhysicalmachineChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosNetworkBandwidth {
    pub buffer: i32,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-address")]
    pub ip_address: Option<String>,
    pub limit: i32,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub minburst: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peakrate: Option<i64>,
    pub rate: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosNetworkCorrupt {
    /// correlation is percentage (10 is 10%)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<String>,
    /// the network interface to impact
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device: Option<String>,
    /// only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egress-port")]
    pub egress_port: Option<String>,
    /// only impact traffic to these hostnames
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// only impact egress traffic to these IP addresses
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-address")]
    pub ip_address: Option<String>,
    /// only impact traffic using this IP protocol, supported: tcp, udp, icmp, all
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-protocol")]
    pub ip_protocol: Option<String>,
    /// percentage of packets to corrupt (10 is 10%)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<String>,
    /// only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "source-port")]
    pub source_port: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosNetworkDelay {
    /// only the packet which match the tcp flag can be accepted, others will be dropped. only set when the IPProtocol is tcp, used for partition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accept-tcp-flags")]
    pub accept_tcp_flags: Option<String>,
    /// correlation is percentage (10 is 10%)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<String>,
    /// the network interface to impact
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device: Option<String>,
    /// only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egress-port")]
    pub egress_port: Option<String>,
    /// only impact traffic to these hostnames
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// only impact egress traffic to these IP addresses
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-address")]
    pub ip_address: Option<String>,
    /// only impact traffic using this IP protocol, supported: tcp, udp, icmp, all
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-protocol")]
    pub ip_protocol: Option<String>,
    /// jitter time, time units: ns, us (or µs), ms, s, m, h.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jitter: Option<String>,
    /// delay egress time, time units: ns, us (or µs), ms, s, m, h.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub latency: Option<String>,
    /// only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "source-port")]
    pub source_port: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosNetworkDns {
    /// map this host to specified IP
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dns-domain-name")]
    pub dns_domain_name: Option<String>,
    /// map specified host to this IP address
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dns-ip")]
    pub dns_ip: Option<String>,
    /// update the DNS server in /etc/resolv.conf with this value
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dns-server")]
    pub dns_server: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosNetworkDown {
    /// The network interface to impact
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device: Option<String>,
    /// NIC down time, time units: ns, us (or µs), ms, s, m, h.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosNetworkDuplicate {
    /// correlation is percentage (10 is 10%)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<String>,
    /// the network interface to impact
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device: Option<String>,
    /// only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egress-port")]
    pub egress_port: Option<String>,
    /// only impact traffic to these hostnames
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// only impact egress traffic to these IP addresses
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-address")]
    pub ip_address: Option<String>,
    /// only impact traffic using this IP protocol, supported: tcp, udp, icmp, all
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-protocol")]
    pub ip_protocol: Option<String>,
    /// percentage of packets to duplicate (10 is 10%)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<String>,
    /// only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "source-port")]
    pub source_port: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosNetworkFlood {
    /// The number of seconds to run the iperf test
    pub duration: String,
    /// Generate traffic to this IP address
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-address")]
    pub ip_address: Option<String>,
    /// The number of iperf parallel client threads to run
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parallel: Option<i32>,
    /// Generate traffic to this port on the IP address
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// The speed of network traffic, allows bps, kbps, mbps, gbps, tbps unit. bps means bytes per second
    pub rate: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosNetworkLoss {
    /// correlation is percentage (10 is 10%)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<String>,
    /// the network interface to impact
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device: Option<String>,
    /// only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egress-port")]
    pub egress_port: Option<String>,
    /// only impact traffic to these hostnames
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// only impact egress traffic to these IP addresses
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-address")]
    pub ip_address: Option<String>,
    /// only impact traffic using this IP protocol, supported: tcp, udp, icmp, all
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-protocol")]
    pub ip_protocol: Option<String>,
    /// percentage of packets to loss (10 is 10%)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<String>,
    /// only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "source-port")]
    pub source_port: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosNetworkPartition {
    /// only the packet which match the tcp flag can be accepted, others will be dropped. only set when the IPProtocol is tcp, used for partition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accept-tcp-flags")]
    pub accept_tcp_flags: Option<String>,
    /// the network interface to impact
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub device: Option<String>,
    /// specifies the partition direction, values can be 'from', 'to'. 'from' means packets coming from the 'IPAddress' or 'Hostname' and going to your server, 'to' means packets originating from your server and going to the 'IPAddress' or 'Hostname'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub direction: Option<String>,
    /// only impact traffic to these hostnames
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// only impact egress traffic to these IP addresses
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-address")]
    pub ip_address: Option<String>,
    /// only impact egress traffic to these IP addresses
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ip-protocol")]
    pub ip_protocol: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosProcess {
    /// the process name or the process ID
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub process: Option<String>,
    /// the command to be run when recovering experiment
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recoverCmd")]
    pub recover_cmd: Option<String>,
    /// the signal number to send
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub signal: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosRedisCacheLimit {
    /// The adress of Redis server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addr: Option<String>,
    /// The size of `maxmemory`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheSize")]
    pub cache_size: Option<String>,
    /// The password of Redis server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// Specifies maxmemory as a percentage of the original value
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosRedisExpiration {
    /// The adress of Redis server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addr: Option<String>,
    /// The expiration of the keys
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expiration: Option<String>,
    /// The keys to be expired
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Additional options for `expiration`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub option: Option<String>,
    /// The password of Redis server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosRedisPenetration {
    /// The adress of Redis server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addr: Option<String>,
    /// The password of Redis server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// The number of requests to be sent
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestNum")]
    pub request_num: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosRedisRestart {
    /// The adress of Redis server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addr: Option<String>,
    /// The path of Sentinel conf
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conf: Option<String>,
    /// The control flag determines whether to flush config
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flushConfig")]
    pub flush_config: Option<bool>,
    /// The password of Redis server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// The path of `redis-server` command-line tool
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redisPath")]
    pub redis_path: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosRedisStop {
    /// The adress of Redis server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addr: Option<String>,
    /// The path of Sentinel conf
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conf: Option<String>,
    /// The control flag determines whether to flush config
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flushConfig")]
    pub flush_config: Option<bool>,
    /// The password of Redis server
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// The path of `redis-server` command-line tool
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redisPath")]
    pub redis_path: Option<bool>,
}

/// Selector is used to select physical machines that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesSchedulePhysicalmachineChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// PhysicalMachines is a map of string keys and a set values that used to select physical machines. The key defines the namespace which physical machine belong, and each value is a set of physical machine names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "physicalMachines")]
    pub physical_machines: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosStressCpu {
    /// specifies P percent loading per CPU worker. 0 is effectively a sleep (no load) and 100 is full loading.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub load: Option<i64>,
    /// extend stress-ng options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<String>>,
    /// specifies N workers to apply the stressor.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workers: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosStressMem {
    /// extend stress-ng options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<String>>,
    /// specifies N bytes consumed per vm worker, default is the total available memory. One can specify the size as % of total available memory or in units of B, KB/KiB, MB/MiB, GB/GiB, TB/TiB..
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosUserDefined {
    /// The command to be executed when attack
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attackCmd")]
    pub attack_cmd: Option<String>,
    /// The command to be executed when recover
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recoverCmd")]
    pub recover_cmd: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePhysicalmachineChaosVm {
    /// The name of the VM to be injected
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vm-name")]
    pub vm_name: Option<String>,
}

/// PodChaosSpec defines the attributes that a user creates on a chaos experiment about pods.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePodChaos {
    /// Action defines the specific pod chaos action. Supported action: pod-kill / pod-failure / container-kill Default action: pod-kill
    pub action: WorkflowTemplatesSchedulePodChaosAction,
    /// ContainerNames indicates list of the name of affected container. If not set, the first container will be injected
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerNames")]
    pub container_names: Option<Vec<String>>,
    /// Duration represents the duration of the chaos action. It is required when the action is `PodFailureAction`. A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "-1.5h" or "2h45m". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// GracePeriod is used in pod-kill action. It represents the duration in seconds before the pod should be deleted. Value must be non-negative integer. The default value is zero that indicates delete immediately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gracePeriod")]
    pub grace_period: Option<i64>,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesSchedulePodChaosMode,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesSchedulePodChaosSelector,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// PodChaosSpec defines the attributes that a user creates on a chaos experiment about pods.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesSchedulePodChaosAction {
    #[serde(rename = "pod-kill")]
    PodKill,
    #[serde(rename = "pod-failure")]
    PodFailure,
    #[serde(rename = "container-kill")]
    ContainerKill,
}

/// PodChaosSpec defines the attributes that a user creates on a chaos experiment about pods.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesSchedulePodChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePodChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesSchedulePodChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesSchedulePodChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// StressChaosSpec defines the desired state of StressChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleStressChaos {
    /// ContainerNames indicates list of the name of affected container. If not set, the first container will be injected
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerNames")]
    pub container_names: Option<Vec<String>>,
    /// Duration represents the duration of the chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesScheduleStressChaosMode,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesScheduleStressChaosSelector,
    /// StressngStressors defines plenty of stressors just like `Stressors` except that it's an experimental feature and more powerful. You can define stressors in `stress-ng` (see also `man stress-ng`) dialect, however not all of the supported stressors are well tested. It maybe retired in later releases. You should always use `Stressors` to define the stressors and use this only when you want more stressors unsupported by `Stressors`. When both `StressngStressors` and `Stressors` are defined, `StressngStressors` wins.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stressngStressors")]
    pub stressng_stressors: Option<String>,
    /// Stressors defines plenty of stressors supported to stress system components out. You can use one or more of them to make up various kinds of stresses. At least one of the stressors should be specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stressors: Option<WorkflowTemplatesScheduleStressChaosStressors>,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// StressChaosSpec defines the desired state of StressChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleStressChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleStressChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesScheduleStressChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleStressChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Stressors defines plenty of stressors supported to stress system components out. You can use one or more of them to make up various kinds of stresses. At least one of the stressors should be specified.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleStressChaosStressors {
    /// CPUStressor stresses CPU out
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<WorkflowTemplatesScheduleStressChaosStressorsCpu>,
    /// MemoryStressor stresses virtual memory out
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub memory: Option<WorkflowTemplatesScheduleStressChaosStressorsMemory>,
}

/// CPUStressor stresses CPU out
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleStressChaosStressorsCpu {
    /// Load specifies P percent loading per CPU worker. 0 is effectively a sleep (no load) and 100 is full loading.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub load: Option<i64>,
    /// extend stress-ng options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<String>>,
    /// Workers specifies N workers to apply the stressor. Maximum 8192 workers can run by stress-ng
    pub workers: i64,
}

/// MemoryStressor stresses virtual memory out
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleStressChaosStressorsMemory {
    /// OOMScoreAdj sets the oom_score_adj of the stress process. See `man 5 proc` to know more about this option.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oomScoreAdj")]
    pub oom_score_adj: Option<i64>,
    /// extend stress-ng options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<String>>,
    /// Size specifies N bytes consumed per vm worker, default is the total available memory. One can specify the size as % of total available memory or in units of B, KB/KiB, MB/MiB, GB/GiB, TB/TiB.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
    /// Workers specifies N workers to apply the stressor. Maximum 8192 workers can run by stress-ng
    pub workers: i64,
}

/// TimeChaosSpec defines the desired state of TimeChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleTimeChaos {
    /// ClockIds defines all affected clock id All available options are ["CLOCK_REALTIME","CLOCK_MONOTONIC","CLOCK_PROCESS_CPUTIME_ID","CLOCK_THREAD_CPUTIME_ID", "CLOCK_MONOTONIC_RAW","CLOCK_REALTIME_COARSE","CLOCK_MONOTONIC_COARSE","CLOCK_BOOTTIME","CLOCK_REALTIME_ALARM", "CLOCK_BOOTTIME_ALARM"] Default value is ["CLOCK_REALTIME"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clockIds")]
    pub clock_ids: Option<Vec<String>>,
    /// ContainerNames indicates list of the name of affected container. If not set, the first container will be injected
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerNames")]
    pub container_names: Option<Vec<String>>,
    /// Duration represents the duration of the chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesScheduleTimeChaosMode,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesScheduleTimeChaosSelector,
    /// TimeOffset defines the delta time of injected program. It's a possibly signed sequence of decimal numbers, such as "300ms", "-1.5h" or "2h45m". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
    #[serde(rename = "timeOffset")]
    pub time_offset: String,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// TimeChaosSpec defines the desired state of TimeChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesScheduleTimeChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleTimeChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesScheduleTimeChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesScheduleTimeChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// StatusCheck describe the behavior of StatusCheck. Only used when Type is TypeStatusCheck.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesStatusCheck {
    /// Duration defines the duration of the whole status check if the number of failed execution does not exceed the failure threshold. Duration is available to both `Synchronous` and `Continuous` mode. A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "-1.5h" or "2h45m". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// FailureThreshold defines the minimum consecutive failure for the status check to be considered failed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<WorkflowTemplatesStatusCheckHttp>,
    /// IntervalSeconds defines how often (in seconds) to perform an execution of status check.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalSeconds")]
    pub interval_seconds: Option<i64>,
    /// Mode defines the execution mode of the status check. Support type: Synchronous / Continuous
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<WorkflowTemplatesStatusCheckMode>,
    /// RecordsHistoryLimit defines the number of record to retain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordsHistoryLimit")]
    pub records_history_limit: Option<i64>,
    /// SuccessThreshold defines the minimum consecutive successes for the status check to be considered successful. SuccessThreshold only works for `Synchronous` mode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i64>,
    /// TimeoutSeconds defines the number of seconds after which an execution of status check times out.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i64>,
    /// Type defines the specific status check type. Support type: HTTP
    #[serde(rename = "type")]
    pub r#type: WorkflowTemplatesStatusCheckType,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesStatusCheckHttp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    /// Criteria defines how to determine the result of the status check.
    pub criteria: WorkflowTemplatesStatusCheckHttpCriteria,
    /// A Header represents the key-value pairs in an HTTP header. 
    ///  The keys should be in canonical form, as returned by CanonicalHeaderKey.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<WorkflowTemplatesStatusCheckHttpMethod>,
    pub url: String,
}

/// Criteria defines how to determine the result of the status check.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesStatusCheckHttpCriteria {
    /// StatusCode defines the expected http status code for the request. A statusCode string could be a single code (e.g. 200), or an inclusive range (e.g. 200-400, both `200` and `400` are included).
    #[serde(rename = "statusCode")]
    pub status_code: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesStatusCheckHttpMethod {
    #[serde(rename = "GET")]
    Get,
    #[serde(rename = "POST")]
    Post,
}

/// StatusCheck describe the behavior of StatusCheck. Only used when Type is TypeStatusCheck.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesStatusCheckMode {
    Synchronous,
    Continuous,
}

/// StatusCheck describe the behavior of StatusCheck. Only used when Type is TypeStatusCheck.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesStatusCheckType {
    #[serde(rename = "HTTP")]
    Http,
}

/// StressChaosSpec defines the desired state of StressChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesStressChaos {
    /// ContainerNames indicates list of the name of affected container. If not set, the first container will be injected
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerNames")]
    pub container_names: Option<Vec<String>>,
    /// Duration represents the duration of the chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesStressChaosMode,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesStressChaosSelector,
    /// StressngStressors defines plenty of stressors just like `Stressors` except that it's an experimental feature and more powerful. You can define stressors in `stress-ng` (see also `man stress-ng`) dialect, however not all of the supported stressors are well tested. It maybe retired in later releases. You should always use `Stressors` to define the stressors and use this only when you want more stressors unsupported by `Stressors`. When both `StressngStressors` and `Stressors` are defined, `StressngStressors` wins.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stressngStressors")]
    pub stressng_stressors: Option<String>,
    /// Stressors defines plenty of stressors supported to stress system components out. You can use one or more of them to make up various kinds of stresses. At least one of the stressors should be specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stressors: Option<WorkflowTemplatesStressChaosStressors>,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// StressChaosSpec defines the desired state of StressChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesStressChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesStressChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesStressChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesStressChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Stressors defines plenty of stressors supported to stress system components out. You can use one or more of them to make up various kinds of stresses. At least one of the stressors should be specified.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesStressChaosStressors {
    /// CPUStressor stresses CPU out
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<WorkflowTemplatesStressChaosStressorsCpu>,
    /// MemoryStressor stresses virtual memory out
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub memory: Option<WorkflowTemplatesStressChaosStressorsMemory>,
}

/// CPUStressor stresses CPU out
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesStressChaosStressorsCpu {
    /// Load specifies P percent loading per CPU worker. 0 is effectively a sleep (no load) and 100 is full loading.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub load: Option<i64>,
    /// extend stress-ng options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<String>>,
    /// Workers specifies N workers to apply the stressor. Maximum 8192 workers can run by stress-ng
    pub workers: i64,
}

/// MemoryStressor stresses virtual memory out
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesStressChaosStressorsMemory {
    /// OOMScoreAdj sets the oom_score_adj of the stress process. See `man 5 proc` to know more about this option.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oomScoreAdj")]
    pub oom_score_adj: Option<i64>,
    /// extend stress-ng options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<String>>,
    /// Size specifies N bytes consumed per vm worker, default is the total available memory. One can specify the size as % of total available memory or in units of B, KB/KiB, MB/MiB, GB/GiB, TB/TiB.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
    /// Workers specifies N workers to apply the stressor. Maximum 8192 workers can run by stress-ng
    pub workers: i64,
}

/// Task describes the behavior of the custom task. Only used when Type is TypeTask.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTask {
    /// Container is the main container image to run in the pod
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<WorkflowTemplatesTaskContainer>,
    /// Volumes is a list of volumes that can be mounted by containers in a template.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<WorkflowTemplatesTaskVolumes>>,
}

/// Container is the main container image to run in the pod
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainer {
    /// Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// List of environment variables to set in the container. Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<WorkflowTemplatesTaskContainerEnv>>,
    /// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envFrom")]
    pub env_from: Option<Vec<WorkflowTemplatesTaskContainerEnvFrom>>,
    /// Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    /// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lifecycle: Option<WorkflowTemplatesTaskContainerLifecycle>,
    /// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<WorkflowTemplatesTaskContainerLivenessProbe>,
    /// Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
    pub name: String,
    /// List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<WorkflowTemplatesTaskContainerPorts>>,
    /// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<WorkflowTemplatesTaskContainerReadinessProbe>,
    /// Resources resize policy for the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resizePolicy")]
    pub resize_policy: Option<Vec<WorkflowTemplatesTaskContainerResizePolicy>>,
    /// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<WorkflowTemplatesTaskContainerResources>,
    /// RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is "Always". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as "Always" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy "Always" will be shut down. This lifecycle differs from normal init containers and is often referred to as a "sidecar" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restartPolicy")]
    pub restart_policy: Option<String>,
    /// SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<WorkflowTemplatesTaskContainerSecurityContext>,
    /// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbe")]
    pub startup_probe: Option<WorkflowTemplatesTaskContainerStartupProbe>,
    /// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stdin: Option<bool>,
    /// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stdinOnce")]
    pub stdin_once: Option<bool>,
    /// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationMessagePath")]
    pub termination_message_path: Option<String>,
    /// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationMessagePolicy")]
    pub termination_message_policy: Option<String>,
    /// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tty: Option<bool>,
    /// volumeDevices is the list of block devices to be used by the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeDevices")]
    pub volume_devices: Option<Vec<WorkflowTemplatesTaskContainerVolumeDevices>>,
    /// Pod volumes to mount into the container's filesystem. Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<WorkflowTemplatesTaskContainerVolumeMounts>>,
    /// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workingDir")]
    pub working_dir: Option<String>,
}

/// EnvVar represents an environment variable present in a Container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerEnv {
    /// Name of the environment variable. Must be a C_IDENTIFIER.
    pub name: String,
    /// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// Source for the environment variable's value. Cannot be used if value is not empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<WorkflowTemplatesTaskContainerEnvValueFrom>,
}

/// Source for the environment variable's value. Cannot be used if value is not empty.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerEnvValueFrom {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<WorkflowTemplatesTaskContainerEnvValueFromConfigMapKeyRef>,
    /// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<WorkflowTemplatesTaskContainerEnvValueFromFieldRef>,
    /// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<WorkflowTemplatesTaskContainerEnvValueFromResourceFieldRef>,
    /// Selects a key of a secret in the pod's namespace
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<WorkflowTemplatesTaskContainerEnvValueFromSecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerEnvValueFromConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerEnvValueFromFieldRef {
    /// Version of the schema the FieldPath is written in terms of, defaults to "v1".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Path of the field to select in the specified API version.
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerEnvValueFromResourceFieldRef {
    /// Container name: required for volumes, optional for env vars
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    /// Specifies the output format of the exposed resources, defaults to "1"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    /// Required: resource to select
    pub resource: String,
}

/// Selects a key of a secret in the pod's namespace
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerEnvValueFromSecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// EnvFromSource represents the source of a set of ConfigMaps
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerEnvFrom {
    /// The ConfigMap to select from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapRef")]
    pub config_map_ref: Option<WorkflowTemplatesTaskContainerEnvFromConfigMapRef>,
    /// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The Secret to select from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<WorkflowTemplatesTaskContainerEnvFromSecretRef>,
}

/// The ConfigMap to select from
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerEnvFromConfigMapRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The Secret to select from
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerEnvFromSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerLifecycle {
    /// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postStart")]
    pub post_start: Option<WorkflowTemplatesTaskContainerLifecyclePostStart>,
    /// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preStop")]
    pub pre_stop: Option<WorkflowTemplatesTaskContainerLifecyclePreStop>,
}

/// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerLifecyclePostStart {
    /// Exec specifies the action to take.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<WorkflowTemplatesTaskContainerLifecyclePostStartExec>,
    /// HTTPGet specifies the http request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<WorkflowTemplatesTaskContainerLifecyclePostStartHttpGet>,
    /// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<WorkflowTemplatesTaskContainerLifecyclePostStartTcpSocket>,
}

/// Exec specifies the action to take.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerLifecyclePostStartExec {
    /// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// HTTPGet specifies the http request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerLifecyclePostStartHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<WorkflowTemplatesTaskContainerLifecyclePostStartHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host. Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerLifecyclePostStartHttpGetHttpHeaders {
    /// The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerLifecyclePostStartTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerLifecyclePreStop {
    /// Exec specifies the action to take.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<WorkflowTemplatesTaskContainerLifecyclePreStopExec>,
    /// HTTPGet specifies the http request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<WorkflowTemplatesTaskContainerLifecyclePreStopHttpGet>,
    /// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<WorkflowTemplatesTaskContainerLifecyclePreStopTcpSocket>,
}

/// Exec specifies the action to take.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerLifecyclePreStopExec {
    /// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// HTTPGet specifies the http request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerLifecyclePreStopHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<WorkflowTemplatesTaskContainerLifecyclePreStopHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host. Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerLifecyclePreStopHttpGetHttpHeaders {
    /// The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerLifecyclePreStopTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerLivenessProbe {
    /// Exec specifies the action to take.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<WorkflowTemplatesTaskContainerLivenessProbeExec>,
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// GRPC specifies an action involving a GRPC port.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<WorkflowTemplatesTaskContainerLivenessProbeGrpc>,
    /// HTTPGet specifies the http request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<WorkflowTemplatesTaskContainerLivenessProbeHttpGet>,
    /// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    /// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    /// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// TCPSocket specifies an action involving a TCP port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<WorkflowTemplatesTaskContainerLivenessProbeTcpSocket>,
    /// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Exec specifies the action to take.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerLivenessProbeExec {
    /// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// GRPC specifies an action involving a GRPC port.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerLivenessProbeGrpc {
    /// Port number of the gRPC service. Number must be in the range 1 to 65535.
    pub port: i32,
    /// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
    ///  If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

/// HTTPGet specifies the http request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerLivenessProbeHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<WorkflowTemplatesTaskContainerLivenessProbeHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host. Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerLivenessProbeHttpGetHttpHeaders {
    /// The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// TCPSocket specifies an action involving a TCP port.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerLivenessProbeTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// ContainerPort represents a network port in a single container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerPorts {
    /// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
    #[serde(rename = "containerPort")]
    pub container_port: i32,
    /// What host IP to bind the external port to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostIP")]
    pub host_ip: Option<String>,
    /// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPort")]
    pub host_port: Option<i32>,
    /// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
}

/// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerReadinessProbe {
    /// Exec specifies the action to take.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<WorkflowTemplatesTaskContainerReadinessProbeExec>,
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// GRPC specifies an action involving a GRPC port.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<WorkflowTemplatesTaskContainerReadinessProbeGrpc>,
    /// HTTPGet specifies the http request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<WorkflowTemplatesTaskContainerReadinessProbeHttpGet>,
    /// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    /// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    /// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// TCPSocket specifies an action involving a TCP port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<WorkflowTemplatesTaskContainerReadinessProbeTcpSocket>,
    /// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Exec specifies the action to take.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerReadinessProbeExec {
    /// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// GRPC specifies an action involving a GRPC port.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerReadinessProbeGrpc {
    /// Port number of the gRPC service. Number must be in the range 1 to 65535.
    pub port: i32,
    /// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
    ///  If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

/// HTTPGet specifies the http request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerReadinessProbeHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<WorkflowTemplatesTaskContainerReadinessProbeHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host. Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerReadinessProbeHttpGetHttpHeaders {
    /// The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// TCPSocket specifies an action involving a TCP port.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerReadinessProbeTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// ContainerResizePolicy represents resource resize policy for the container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerResizePolicy {
    /// Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
    #[serde(rename = "resourceName")]
    pub resource_name: String,
    /// Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
    #[serde(rename = "restartPolicy")]
    pub restart_policy: String,
}

/// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
    ///  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
    ///  This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<WorkflowTemplatesTaskContainerResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    pub name: String,
}

/// SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerSecurityContext {
    /// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPrivilegeEscalation")]
    pub allow_privilege_escalation: Option<bool>,
    /// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<WorkflowTemplatesTaskContainerSecurityContextCapabilities>,
    /// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    /// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "procMount")]
    pub proc_mount: Option<String>,
    /// Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFilesystem")]
    pub read_only_root_filesystem: Option<bool>,
    /// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    /// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    /// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    /// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<WorkflowTemplatesTaskContainerSecurityContextSeLinuxOptions>,
    /// The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<WorkflowTemplatesTaskContainerSecurityContextSeccompProfile>,
    /// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<WorkflowTemplatesTaskContainerSecurityContextWindowsOptions>,
}

/// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerSecurityContextCapabilities {
    /// Added capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<String>>,
    /// Removed capabilities
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<Vec<String>>,
}

/// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerSecurityContextSeLinuxOptions {
    /// Level is SELinux level label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// Role is a SELinux role label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Type is a SELinux type label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// User is a SELinux user label that applies to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerSecurityContextSeccompProfile {
    /// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    /// type indicates which kind of seccomp profile will be applied. Valid options are: 
    ///  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerSecurityContextWindowsOptions {
    /// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    /// GMSACredentialSpecName is the name of the GMSA credential spec to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    /// HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    /// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

/// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerStartupProbe {
    /// Exec specifies the action to take.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<WorkflowTemplatesTaskContainerStartupProbeExec>,
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    /// GRPC specifies an action involving a GRPC port.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<WorkflowTemplatesTaskContainerStartupProbeGrpc>,
    /// HTTPGet specifies the http request to perform.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<WorkflowTemplatesTaskContainerStartupProbeHttpGet>,
    /// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i32>,
    /// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    /// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    /// TCPSocket specifies an action involving a TCP port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<WorkflowTemplatesTaskContainerStartupProbeTcpSocket>,
    /// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

/// Exec specifies the action to take.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerStartupProbeExec {
    /// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

/// GRPC specifies an action involving a GRPC port.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerStartupProbeGrpc {
    /// Port number of the gRPC service. Number must be in the range 1 to 65535.
    pub port: i32,
    /// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
    ///  If this is not specified, the default behavior is defined by gRPC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
}

/// HTTPGet specifies the http request to perform.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerStartupProbeHttpGet {
    /// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Custom headers to set in the request. HTTP allows repeated headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<WorkflowTemplatesTaskContainerStartupProbeHttpGetHttpHeaders>>,
    /// Path to access on the HTTP server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
    /// Scheme to use for connecting to the host. Defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

/// HTTPHeader describes a custom header to be used in HTTP probes
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerStartupProbeHttpGetHttpHeaders {
    /// The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    pub name: String,
    /// The header field value
    pub value: String,
}

/// TCPSocket specifies an action involving a TCP port.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerStartupProbeTcpSocket {
    /// Optional: Host name to connect to, defaults to the pod IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    pub port: IntOrString,
}

/// volumeDevice describes a mapping of a raw block device within a container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerVolumeDevices {
    /// devicePath is the path inside of the container that the device will be mapped to.
    #[serde(rename = "devicePath")]
    pub device_path: String,
    /// name must match the name of a persistentVolumeClaim in the pod
    pub name: String,
}

/// VolumeMount describes a mounting of a Volume within a container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskContainerVolumeMounts {
    /// Path within the container at which the volume should be mounted.  Must not contain ':'.
    #[serde(rename = "mountPath")]
    pub mount_path: String,
    /// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPropagation")]
    pub mount_propagation: Option<String>,
    /// This must match the Name of a Volume.
    pub name: String,
    /// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPath")]
    pub sub_path: Option<String>,
    /// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subPathExpr")]
    pub sub_path_expr: Option<String>,
}

/// Volume represents a named volume in a pod that may be accessed by any container in the pod.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumes {
    /// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsElasticBlockStore")]
    pub aws_elastic_block_store: Option<WorkflowTemplatesTaskVolumesAwsElasticBlockStore>,
    /// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureDisk")]
    pub azure_disk: Option<WorkflowTemplatesTaskVolumesAzureDisk>,
    /// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "azureFile")]
    pub azure_file: Option<WorkflowTemplatesTaskVolumesAzureFile>,
    /// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cephfs: Option<WorkflowTemplatesTaskVolumesCephfs>,
    /// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cinder: Option<WorkflowTemplatesTaskVolumesCinder>,
    /// configMap represents a configMap that should populate this volume
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<WorkflowTemplatesTaskVolumesConfigMap>,
    /// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csi: Option<WorkflowTemplatesTaskVolumesCsi>,
    /// downwardAPI represents downward API about the pod that should populate this volume
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "downwardAPI")]
    pub downward_api: Option<WorkflowTemplatesTaskVolumesDownwardApi>,
    /// emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emptyDir")]
    pub empty_dir: Option<WorkflowTemplatesTaskVolumesEmptyDir>,
    /// ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
    ///  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
    ///  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
    ///  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
    ///  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ephemeral: Option<WorkflowTemplatesTaskVolumesEphemeral>,
    /// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fc: Option<WorkflowTemplatesTaskVolumesFc>,
    /// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flexVolume")]
    pub flex_volume: Option<WorkflowTemplatesTaskVolumesFlexVolume>,
    /// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flocker: Option<WorkflowTemplatesTaskVolumesFlocker>,
    /// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gcePersistentDisk")]
    pub gce_persistent_disk: Option<WorkflowTemplatesTaskVolumesGcePersistentDisk>,
    /// gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gitRepo")]
    pub git_repo: Option<WorkflowTemplatesTaskVolumesGitRepo>,
    /// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub glusterfs: Option<WorkflowTemplatesTaskVolumesGlusterfs>,
    /// hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPath")]
    pub host_path: Option<WorkflowTemplatesTaskVolumesHostPath>,
    /// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iscsi: Option<WorkflowTemplatesTaskVolumesIscsi>,
    /// name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    pub name: String,
    /// nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nfs: Option<WorkflowTemplatesTaskVolumesNfs>,
    /// persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeClaim")]
    pub persistent_volume_claim: Option<WorkflowTemplatesTaskVolumesPersistentVolumeClaim>,
    /// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "photonPersistentDisk")]
    pub photon_persistent_disk: Option<WorkflowTemplatesTaskVolumesPhotonPersistentDisk>,
    /// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portworxVolume")]
    pub portworx_volume: Option<WorkflowTemplatesTaskVolumesPortworxVolume>,
    /// projected items for all in one resources secrets, configmaps, and downward API
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub projected: Option<WorkflowTemplatesTaskVolumesProjected>,
    /// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quobyte: Option<WorkflowTemplatesTaskVolumesQuobyte>,
    /// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rbd: Option<WorkflowTemplatesTaskVolumesRbd>,
    /// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scaleIO")]
    pub scale_io: Option<WorkflowTemplatesTaskVolumesScaleIo>,
    /// secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<WorkflowTemplatesTaskVolumesSecret>,
    /// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storageos: Option<WorkflowTemplatesTaskVolumesStorageos>,
    /// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vsphereVolume")]
    pub vsphere_volume: Option<WorkflowTemplatesTaskVolumesVsphereVolume>,
}

/// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesAwsElasticBlockStore {
    /// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition: Option<i32>,
    /// readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    #[serde(rename = "volumeID")]
    pub volume_id: String,
}

/// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesAzureDisk {
    /// cachingMode is the Host Caching mode: None, Read Only, Read Write.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cachingMode")]
    pub caching_mode: Option<String>,
    /// diskName is the Name of the data disk in the blob storage
    #[serde(rename = "diskName")]
    pub disk_name: String,
    /// diskURI is the URI of data disk in the blob storage
    #[serde(rename = "diskURI")]
    pub disk_uri: String,
    /// fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

/// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesAzureFile {
    /// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// secretName is the  name of secret that contains Azure Storage Account Name and Key
    #[serde(rename = "secretName")]
    pub secret_name: String,
    /// shareName is the azure share Name
    #[serde(rename = "shareName")]
    pub share_name: String,
}

/// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesCephfs {
    /// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    pub monitors: Vec<String>,
    /// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretFile")]
    pub secret_file: Option<String>,
    /// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<WorkflowTemplatesTaskVolumesCephfsSecretRef>,
    /// user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesCephfsSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesCinder {
    /// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<WorkflowTemplatesTaskVolumesCinderSecretRef>,
    /// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    #[serde(rename = "volumeID")]
    pub volume_id: String,
}

/// secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesCinderSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// configMap represents a configMap that should populate this volume
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesConfigMap {
    /// defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    /// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<WorkflowTemplatesTaskVolumesConfigMapItems>>,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// optional specify whether the ConfigMap or its keys must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Maps a string key to a path within a volume.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesConfigMapItems {
    /// key is the key to project.
    pub key: String,
    /// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    /// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
    pub path: String,
}

/// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesCsi {
    /// driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
    pub driver: String,
    /// fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePublishSecretRef")]
    pub node_publish_secret_ref: Option<WorkflowTemplatesTaskVolumesCsiNodePublishSecretRef>,
    /// readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeAttributes")]
    pub volume_attributes: Option<BTreeMap<String, String>>,
}

/// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesCsiNodePublishSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// downwardAPI represents downward API about the pod that should populate this volume
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesDownwardApi {
    /// Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    /// Items is a list of downward API volume file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<WorkflowTemplatesTaskVolumesDownwardApiItems>>,
}

/// DownwardAPIVolumeFile represents information to create the file containing the pod field
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesDownwardApiItems {
    /// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<WorkflowTemplatesTaskVolumesDownwardApiItemsFieldRef>,
    /// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    /// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
    pub path: String,
    /// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<WorkflowTemplatesTaskVolumesDownwardApiItemsResourceFieldRef>,
}

/// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesDownwardApiItemsFieldRef {
    /// Version of the schema the FieldPath is written in terms of, defaults to "v1".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Path of the field to select in the specified API version.
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesDownwardApiItemsResourceFieldRef {
    /// Container name: required for volumes, optional for env vars
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    /// Specifies the output format of the exposed resources, defaults to "1"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    /// Required: resource to select
    pub resource: String,
}

/// emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesEmptyDir {
    /// medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub medium: Option<String>,
    /// sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeLimit")]
    pub size_limit: Option<IntOrString>,
}

/// ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
///  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
///  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
///  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
///  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesEphemeral {
    /// Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
    ///  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
    ///  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
    ///  Required, must not be nil.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeClaimTemplate")]
    pub volume_claim_template: Option<WorkflowTemplatesTaskVolumesEphemeralVolumeClaimTemplate>,
}

/// Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
///  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
///  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
///  Required, must not be nil.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesEphemeralVolumeClaimTemplate {
    /// May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<WorkflowTemplatesTaskVolumesEphemeralVolumeClaimTemplateMetadata>,
    /// The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
    pub spec: WorkflowTemplatesTaskVolumesEphemeralVolumeClaimTemplateSpec,
}

/// May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesEphemeralVolumeClaimTemplateMetadata {
}

/// The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesEphemeralVolumeClaimTemplateSpec {
    /// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    /// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSource")]
    pub data_source: Option<WorkflowTemplatesTaskVolumesEphemeralVolumeClaimTemplateSpecDataSource>,
    /// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSourceRef")]
    pub data_source_ref: Option<WorkflowTemplatesTaskVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef>,
    /// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<WorkflowTemplatesTaskVolumesEphemeralVolumeClaimTemplateSpecResources>,
    /// selector is a label query over volumes to consider for binding.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<WorkflowTemplatesTaskVolumesEphemeralVolumeClaimTemplateSpecSelector>,
    /// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    /// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMode")]
    pub volume_mode: Option<String>,
    /// volumeName is the binding reference to the PersistentVolume backing this claim.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
}

/// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesEphemeralVolumeClaimTemplateSpecDataSource {
    /// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    /// Kind is the type of resource being referenced
    pub kind: String,
    /// Name is the name of resource being referenced
    pub name: String,
}

/// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
    /// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    /// Kind is the type of resource being referenced
    pub kind: String,
    /// Name is the name of resource being referenced
    pub name: String,
    /// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesEphemeralVolumeClaimTemplateSpecResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
    ///  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
    ///  This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<WorkflowTemplatesTaskVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    pub name: String,
}

/// selector is a label query over volumes to consider for binding.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesEphemeralVolumeClaimTemplateSpecSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<WorkflowTemplatesTaskVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesFc {
    /// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// lun is Optional: FC target lun number
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lun: Option<i32>,
    /// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// targetWWNs is Optional: FC target worldwide names (WWNs)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetWWNs")]
    pub target_ww_ns: Option<Vec<String>>,
    /// wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wwids: Option<Vec<String>>,
}

/// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesFlexVolume {
    /// driver is the name of the driver to use for this volume.
    pub driver: String,
    /// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// options is Optional: this field holds extra command options if any.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, String>>,
    /// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<WorkflowTemplatesTaskVolumesFlexVolumeSecretRef>,
}

/// secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesFlexVolumeSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesFlocker {
    /// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetName")]
    pub dataset_name: Option<String>,
    /// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetUUID")]
    pub dataset_uuid: Option<String>,
}

/// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesGcePersistentDisk {
    /// fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub partition: Option<i32>,
    /// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    #[serde(rename = "pdName")]
    pub pd_name: String,
    /// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

/// gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesGitRepo {
    /// directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<String>,
    /// repository is the URL
    pub repository: String,
    /// revision is the commit hash for the specified revision.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

/// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesGlusterfs {
    /// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    pub endpoints: String,
    /// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    pub path: String,
    /// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

/// hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesHostPath {
    /// path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    pub path: String,
    /// type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesIscsi {
    /// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chapAuthDiscovery")]
    pub chap_auth_discovery: Option<bool>,
    /// chapAuthSession defines whether support iSCSI Session CHAP authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chapAuthSession")]
    pub chap_auth_session: Option<bool>,
    /// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initiatorName")]
    pub initiator_name: Option<String>,
    /// iqn is the target iSCSI Qualified Name.
    pub iqn: String,
    /// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iscsiInterface")]
    pub iscsi_interface: Option<String>,
    /// lun represents iSCSI Target Lun number.
    pub lun: i32,
    /// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub portals: Option<Vec<String>>,
    /// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// secretRef is the CHAP Secret for iSCSI target and initiator authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<WorkflowTemplatesTaskVolumesIscsiSecretRef>,
    /// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    #[serde(rename = "targetPortal")]
    pub target_portal: String,
}

/// secretRef is the CHAP Secret for iSCSI target and initiator authentication
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesIscsiSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesNfs {
    /// path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    pub path: String,
    /// readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    pub server: String,
}

/// persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesPersistentVolumeClaim {
    /// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    #[serde(rename = "claimName")]
    pub claim_name: String,
    /// readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

/// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesPhotonPersistentDisk {
    /// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// pdID is the ID that identifies Photon Controller persistent disk
    #[serde(rename = "pdID")]
    pub pd_id: String,
}

/// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesPortworxVolume {
    /// fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// volumeID uniquely identifies a Portworx volume
    #[serde(rename = "volumeID")]
    pub volume_id: String,
}

/// projected items for all in one resources secrets, configmaps, and downward API
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesProjected {
    /// defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    /// sources is the list of volume projections
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<WorkflowTemplatesTaskVolumesProjectedSources>>,
}

/// Projection that may be projected along with other supported volume types
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesProjectedSources {
    /// configMap information about the configMap data to project
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<WorkflowTemplatesTaskVolumesProjectedSourcesConfigMap>,
    /// downwardAPI information about the downwardAPI data to project
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "downwardAPI")]
    pub downward_api: Option<WorkflowTemplatesTaskVolumesProjectedSourcesDownwardApi>,
    /// secret information about the secret data to project
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<WorkflowTemplatesTaskVolumesProjectedSourcesSecret>,
    /// serviceAccountToken is information about the serviceAccountToken data to project
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountToken")]
    pub service_account_token: Option<WorkflowTemplatesTaskVolumesProjectedSourcesServiceAccountToken>,
}

/// configMap information about the configMap data to project
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesProjectedSourcesConfigMap {
    /// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<WorkflowTemplatesTaskVolumesProjectedSourcesConfigMapItems>>,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// optional specify whether the ConfigMap or its keys must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Maps a string key to a path within a volume.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesProjectedSourcesConfigMapItems {
    /// key is the key to project.
    pub key: String,
    /// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    /// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
    pub path: String,
}

/// downwardAPI information about the downwardAPI data to project
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesProjectedSourcesDownwardApi {
    /// Items is a list of DownwardAPIVolume file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<WorkflowTemplatesTaskVolumesProjectedSourcesDownwardApiItems>>,
}

/// DownwardAPIVolumeFile represents information to create the file containing the pod field
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesProjectedSourcesDownwardApiItems {
    /// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<WorkflowTemplatesTaskVolumesProjectedSourcesDownwardApiItemsFieldRef>,
    /// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    /// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
    pub path: String,
    /// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<WorkflowTemplatesTaskVolumesProjectedSourcesDownwardApiItemsResourceFieldRef>,
}

/// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesProjectedSourcesDownwardApiItemsFieldRef {
    /// Version of the schema the FieldPath is written in terms of, defaults to "v1".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    /// Path of the field to select in the specified API version.
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

/// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesProjectedSourcesDownwardApiItemsResourceFieldRef {
    /// Container name: required for volumes, optional for env vars
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    /// Specifies the output format of the exposed resources, defaults to "1"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    /// Required: resource to select
    pub resource: String,
}

/// secret information about the secret data to project
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesProjectedSourcesSecret {
    /// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<WorkflowTemplatesTaskVolumesProjectedSourcesSecretItems>>,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// optional field specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Maps a string key to a path within a volume.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesProjectedSourcesSecretItems {
    /// key is the key to project.
    pub key: String,
    /// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    /// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
    pub path: String,
}

/// serviceAccountToken is information about the serviceAccountToken data to project
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesProjectedSourcesServiceAccountToken {
    /// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audience: Option<String>,
    /// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expirationSeconds")]
    pub expiration_seconds: Option<i64>,
    /// path is the path relative to the mount point of the file to project the token into.
    pub path: String,
}

/// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesQuobyte {
    /// group to map volume access to Default is no group
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
    pub registry: String,
    /// tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tenant: Option<String>,
    /// user to map volume access to Defaults to serivceaccount user
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    /// volume is a string that references an already created Quobyte volume by name.
    pub volume: String,
}

/// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesRbd {
    /// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    pub image: String,
    /// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keyring: Option<String>,
    /// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    pub monitors: Vec<String>,
    /// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pool: Option<String>,
    /// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<WorkflowTemplatesTaskVolumesRbdSecretRef>,
    /// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesRbdSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesScaleIo {
    /// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// gateway is the host address of the ScaleIO API Gateway.
    pub gateway: String,
    /// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "protectionDomain")]
    pub protection_domain: Option<String>,
    /// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
    #[serde(rename = "secretRef")]
    pub secret_ref: WorkflowTemplatesTaskVolumesScaleIoSecretRef,
    /// sslEnabled Flag enable/disable SSL communication with Gateway, default false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslEnabled")]
    pub ssl_enabled: Option<bool>,
    /// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageMode")]
    pub storage_mode: Option<String>,
    /// storagePool is the ScaleIO Storage Pool associated with the protection domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePool")]
    pub storage_pool: Option<String>,
    /// system is the name of the storage system as configured in ScaleIO.
    pub system: String,
    /// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
}

/// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesScaleIoSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesSecret {
    /// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    /// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<WorkflowTemplatesTaskVolumesSecretItems>>,
    /// optional field specify whether the Secret or its keys must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
    /// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// Maps a string key to a path within a volume.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesSecretItems {
    /// key is the key to project.
    pub key: String,
    /// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    /// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
    pub path: String,
}

/// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesStorageos {
    /// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
    /// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<WorkflowTemplatesTaskVolumesStorageosSecretRef>,
    /// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
    /// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeNamespace")]
    pub volume_namespace: Option<String>,
}

/// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesStorageosSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTaskVolumesVsphereVolume {
    /// fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsType")]
    pub fs_type: Option<String>,
    /// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePolicyID")]
    pub storage_policy_id: Option<String>,
    /// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePolicyName")]
    pub storage_policy_name: Option<String>,
    /// volumePath is the path that identifies vSphere volume vmdk
    #[serde(rename = "volumePath")]
    pub volume_path: String,
}

/// TimeChaosSpec defines the desired state of TimeChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTimeChaos {
    /// ClockIds defines all affected clock id All available options are ["CLOCK_REALTIME","CLOCK_MONOTONIC","CLOCK_PROCESS_CPUTIME_ID","CLOCK_THREAD_CPUTIME_ID", "CLOCK_MONOTONIC_RAW","CLOCK_REALTIME_COARSE","CLOCK_MONOTONIC_COARSE","CLOCK_BOOTTIME","CLOCK_REALTIME_ALARM", "CLOCK_BOOTTIME_ALARM"] Default value is ["CLOCK_REALTIME"]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clockIds")]
    pub clock_ids: Option<Vec<String>>,
    /// ContainerNames indicates list of the name of affected container. If not set, the first container will be injected
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerNames")]
    pub container_names: Option<Vec<String>>,
    /// Duration represents the duration of the chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent
    pub mode: WorkflowTemplatesTimeChaosMode,
    /// RemoteCluster represents the remote cluster where the chaos will be deployed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteCluster")]
    pub remote_cluster: Option<String>,
    /// Selector is used to select pods that are used to inject chaos action.
    pub selector: WorkflowTemplatesTimeChaosSelector,
    /// TimeOffset defines the delta time of injected program. It's a possibly signed sequence of decimal numbers, such as "300ms", "-1.5h" or "2h45m". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
    #[serde(rename = "timeOffset")]
    pub time_offset: String,
    /// Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// TimeChaosSpec defines the desired state of TimeChaos
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowTemplatesTimeChaosMode {
    #[serde(rename = "one")]
    One,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "fixed-percent")]
    FixedPercent,
    #[serde(rename = "random-max-percent")]
    RandomMaxPercent,
}

/// Selector is used to select pods that are used to inject chaos action.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTimeChaosSelector {
    /// Map of string keys and values that can be used to select objects. A selector based on annotations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelectors")]
    pub annotation_selectors: Option<BTreeMap<String, String>>,
    /// a slice of label selector expressions that can be used to select objects. A list of selectors based on set-based label expressions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expressionSelectors")]
    pub expression_selectors: Option<Vec<WorkflowTemplatesTimeChaosSelectorExpressionSelectors>>,
    /// Map of string keys and values that can be used to select objects. A selector based on fields.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldSelectors")]
    pub field_selectors: Option<BTreeMap<String, String>>,
    /// Map of string keys and values that can be used to select objects. A selector based on labels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelectors")]
    pub label_selectors: Option<BTreeMap<String, String>>,
    /// Namespaces is a set of namespace to which objects belong.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectors")]
    pub node_selectors: Option<BTreeMap<String, String>>,
    /// Nodes is a set of node name and objects must belong to these nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podPhaseSelectors")]
    pub pod_phase_selectors: Option<Vec<String>>,
    /// Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pods: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowTemplatesTimeChaosSelectorExpressionSelectors {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Most recently observed status of the workflow
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowStatus {
    /// Represents the latest available observations of a workflow's current state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<WorkflowStatusConditions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endTime")]
    pub end_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entryNode")]
    pub entry_node: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct WorkflowStatusConditions {
    pub reason: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
    pub status: String,
    #[serde(rename = "type")]
    pub r#type: String,
}

