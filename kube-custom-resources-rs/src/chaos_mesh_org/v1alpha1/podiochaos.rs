// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/chaos-mesh/chaos-mesh/chaos-mesh.org/v1alpha1/podiochaos.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// PodIOChaosSpec defines the desired state of IOChaos
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "chaos-mesh.org", version = "v1alpha1", kind = "PodIOChaos", plural = "podiochaos")]
#[kube(namespaced)]
#[kube(status = "PodIOChaosStatus")]
#[kube(schema = "disabled")]
pub struct PodIOChaosSpec {
    /// Actions are a list of IOChaos actions
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<PodIOChaosActions>>,
    /// TODO: support multiple different container to inject in one pod
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    /// VolumeMountPath represents the target mount path It must be a root of mount path now. TODO: search the mount parent of any path automatically. TODO: support multiple different volume mount path in one pod
    #[serde(rename = "volumeMountPath")]
    pub volume_mount_path: String,
}

/// IOChaosAction defines a possible action of IOChaos
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PodIOChaosActions {
    /// Timespec represents a time
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub atime: Option<PodIOChaosActionsAtime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocks: Option<i64>,
    /// Timespec represents a time
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ctime: Option<PodIOChaosActionsCtime>,
    /// Faults represents the fault to inject
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub faults: Option<Vec<PodIOChaosActionsFaults>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gid: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ino: Option<i64>,
    /// FileType represents type of file
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Latency represents the latency to inject
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub latency: Option<String>,
    /// Methods represents the method that the action will inject in
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methods: Option<Vec<String>>,
    /// MistakeSpec represents the mistake to inject
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mistake: Option<PodIOChaosActionsMistake>,
    /// Timespec represents a time
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mtime: Option<PodIOChaosActionsMtime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nlink: Option<i32>,
    /// Path represents a glob of injecting path
    pub path: String,
    /// Percent represents the percent probability of injecting this action
    pub percent: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub perm: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rdev: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
    /// Source represents the source of current rules
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    /// IOChaosType represents the type of IOChaos Action
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<i32>,
}

/// Timespec represents a time
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PodIOChaosActionsAtime {
    pub nsec: i64,
    pub sec: i64,
}

/// Timespec represents a time
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PodIOChaosActionsCtime {
    pub nsec: i64,
    pub sec: i64,
}

/// IoFault represents the fault to inject and their weight
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PodIOChaosActionsFaults {
    pub errno: i32,
    pub weight: i32,
}

/// MistakeSpec represents the mistake to inject
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PodIOChaosActionsMistake {
    /// Filling determines what is filled in the mistake data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filling: Option<PodIOChaosActionsMistakeFilling>,
    /// Max length of each wrong data segment in bytes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxLength")]
    pub max_length: Option<i64>,
    /// There will be [1, MaxOccurrences] segments of wrong data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxOccurrences")]
    pub max_occurrences: Option<i64>,
}

/// MistakeSpec represents the mistake to inject
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PodIOChaosActionsMistakeFilling {
    #[serde(rename = "zero")]
    Zero,
    #[serde(rename = "random")]
    Random,
}

/// Timespec represents a time
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PodIOChaosActionsMtime {
    pub nsec: i64,
    pub sec: i64,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PodIOChaosStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failedMessage")]
    pub failed_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// Pid represents a running toda process id
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<i64>,
    /// StartTime represents the start time of a toda process
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<i64>,
}

