// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --derive Default --derive PartialEq --docs --filename ./crd-catalog/kubernetes/autoscaler/autoscaling.k8s.io/v1beta2/verticalpodautoscalercheckpoints.yaml
// kopium version: 0.16.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// Specification of the checkpoint. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "autoscaling.k8s.io", version = "v1beta2", kind = "VerticalPodAutoscalerCheckpoint", plural = "verticalpodautoscalercheckpoints")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
pub struct VerticalPodAutoscalerCheckpointSpec {
    /// Name of the checkpointed container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    /// Name of the VPA object that stored VerticalPodAutoscalerCheckpoint object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpaObjectName")]
    pub vpa_object_name: Option<String>,
}

/// Data of the checkpoint.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VerticalPodAutoscalerCheckpointStatus {
    /// Checkpoint of histogram for consumption of CPU.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuHistogram")]
    pub cpu_histogram: Option<VerticalPodAutoscalerCheckpointStatusCpuHistogram>,
    /// Timestamp of the fist sample from the histograms.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firstSampleStart")]
    pub first_sample_start: Option<String>,
    /// Timestamp of the last sample from the histograms.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastSampleStart")]
    pub last_sample_start: Option<String>,
    /// The time when the status was last refreshed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastUpdateTime")]
    pub last_update_time: Option<String>,
    /// Checkpoint of histogram for consumption of memory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryHistogram")]
    pub memory_histogram: Option<VerticalPodAutoscalerCheckpointStatusMemoryHistogram>,
    /// Total number of samples in the histograms.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalSamplesCount")]
    pub total_samples_count: Option<i64>,
    /// Version of the format of the stored data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// Checkpoint of histogram for consumption of CPU.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VerticalPodAutoscalerCheckpointStatusCpuHistogram {
    /// Map from bucket index to bucket weight.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketWeights")]
    pub bucket_weights: Option<BTreeMap<String, serde_json::Value>>,
    /// Reference timestamp for samples collected within this histogram.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "referenceTimestamp")]
    pub reference_timestamp: Option<String>,
    /// Sum of samples to be used as denominator for weights from BucketWeights.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalWeight")]
    pub total_weight: Option<f64>,
}

/// Checkpoint of histogram for consumption of memory.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VerticalPodAutoscalerCheckpointStatusMemoryHistogram {
    /// Map from bucket index to bucket weight.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketWeights")]
    pub bucket_weights: Option<BTreeMap<String, serde_json::Value>>,
    /// Reference timestamp for samples collected within this histogram.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "referenceTimestamp")]
    pub reference_timestamp: Option<String>,
    /// Sum of samples to be used as denominator for weights from BucketWeights.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalWeight")]
    pub total_weight: Option<f64>,
}

