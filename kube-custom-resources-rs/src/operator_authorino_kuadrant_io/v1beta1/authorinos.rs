// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/Kuadrant/authorino-operator/operator.authorino.kuadrant.io/v1beta1/authorinos.yaml --derive=Default --derive=PartialEq
// kopium version: 0.17.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// AuthorinoSpec defines the desired state of Authorino
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "operator.authorino.kuadrant.io", version = "v1beta1", kind = "Authorino", plural = "authorinos")]
#[kube(namespaced)]
#[kube(status = "AuthorinoStatus")]
#[kube(schema = "disabled")]
pub struct AuthorinoSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authConfigLabelSelectors")]
    pub auth_config_label_selectors: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterWide")]
    pub cluster_wide: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluatorCacheSize")]
    pub evaluator_cache_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub healthz: Option<AuthorinoHealthz>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// PullPolicy describes a policy for if/when to pull a container image
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    pub listener: AuthorinoListener,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logMode")]
    pub log_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics: Option<AuthorinoMetrics>,
    #[serde(rename = "oidcServer")]
    pub oidc_server: AuthorinoOidcServer,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretLabelSelectors")]
    pub secret_label_selectors: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supersedingHostSubsets")]
    pub superseding_host_subsets: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing: Option<AuthorinoTracing>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<AuthorinoVolumes>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthorinoHealthz {
    /// Port number of the health/readiness probe endpoints.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthorinoListener {
    /// Maximum payload (request body) size for the auth service (HTTP interface), in bytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxHttpRequestBodySize")]
    pub max_http_request_body_size: Option<i64>,
    /// Port number of the GRPC interface. DEPRECATED: use 'ports.grpc' instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// Port numbers of the GRPC and HTTP auth interfaces.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<AuthorinoListenerPorts>,
    /// Timeout of the auth service (GRPC and HTTP interfaces), in milliseconds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    /// TLS configuration of the auth service (GRPC and HTTP interfaces).
    pub tls: AuthorinoListenerTls,
}

/// Port numbers of the GRPC and HTTP auth interfaces.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthorinoListenerPorts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<i32>,
}

/// TLS configuration of the auth service (GRPC and HTTP interfaces).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthorinoListenerTls {
    /// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSecretRef")]
    pub cert_secret_ref: Option<AuthorinoListenerTlsCertSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthorinoListenerTlsCertSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthorinoMetrics {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deep: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthorinoOidcServer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    pub tls: AuthorinoOidcServerTls,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthorinoOidcServerTls {
    /// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSecretRef")]
    pub cert_secret_ref: Option<AuthorinoOidcServerTlsCertSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthorinoOidcServerTlsCertSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthorinoTracing {
    pub endpoint: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthorinoVolumes {
    /// Permissions mode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<AuthorinoVolumesItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthorinoVolumesItems {
    /// Allow multiple configmaps to mount to the same directory
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMaps")]
    pub config_maps: Option<Vec<String>>,
    /// Mount details
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<AuthorinoVolumesItemsItems>>,
    /// An absolute path where to mount it
    #[serde(rename = "mountPath")]
    pub mount_path: String,
    /// Volume name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Secret mount
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secrets: Option<Vec<String>>,
}

/// Maps a string key to a path within a volume.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthorinoVolumesItemsItems {
    /// key is the key to project.
    pub key: String,
    /// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    /// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
    pub path: String,
}

/// AuthorinoStatus defines the observed state of Authorino
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct AuthorinoStatus {
    /// Conditions is an array of the current Authorino's CR conditions Supported condition types: ConditionReady
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
}

