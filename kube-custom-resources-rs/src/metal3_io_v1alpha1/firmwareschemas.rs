// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename ./crd-catalog/metal3-io/baremetal-operator/metal3.io/v1alpha1/firmwareschemas.yaml
// kopium version: 0.16.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// FirmwareSchemaSpec defines the desired state of FirmwareSchema
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug)]
#[kube(group = "metal3.io", version = "v1alpha1", kind = "FirmwareSchema", plural = "firmwareschemas")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
pub struct FirmwareSchemaSpec {
    /// The hardware model associated with this schema
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hardwareModel")]
    pub hardware_model: Option<String>,
    /// The hardware vendor associated with this schema
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hardwareVendor")]
    pub hardware_vendor: Option<String>,
    /// Map of firmware name to schema
    pub schema: BTreeMap<String, FirmwareSchemaSchema>,
}

/// Map of firmware name to schema
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct FirmwareSchemaSchema {
    /// The allowable value for an Enumeration type setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allowable_values: Option<Vec<String>>,
    /// The type of setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attribute_type: Option<FirmwareSchemaSchemaAttributeType>,
    /// The lowest value for an Integer type setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lower_bound: Option<i64>,
    /// Maximum length for a String type setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_length: Option<i64>,
    /// Minimum length for a String type setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min_length: Option<i64>,
    /// Whether or not this setting is read only.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub read_only: Option<bool>,
    /// Whether or not this setting's value is unique to this node, e.g. a serial number.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unique: Option<bool>,
    /// The highest value for an Integer type setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upper_bound: Option<i64>,
}

/// Map of firmware name to schema
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum FirmwareSchemaSchemaAttributeType {
    Enumeration,
    String,
    Integer,
    Boolean,
    Password,
}

