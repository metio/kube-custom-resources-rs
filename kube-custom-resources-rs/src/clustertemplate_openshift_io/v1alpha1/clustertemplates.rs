// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/stolostron/cluster-templates-operator/clustertemplate.openshift.io/v1alpha1/clustertemplates.yaml --derive=Default --derive=PartialEq
// kopium version: 0.19.0

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "clustertemplate.openshift.io", version = "v1alpha1", kind = "ClusterTemplate", plural = "clustertemplates")]
#[kube(status = "ClusterTemplateStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ClusterTemplateSpec {
    /// ArgoCD applicationset name which is used for installation of the cluster
    #[serde(rename = "clusterDefinition")]
    pub cluster_definition: String,
    /// Array of ArgoCD applicationset names which are used for post installation setup of the cluster
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterSetup")]
    pub cluster_setup: Option<Vec<String>>,
    /// Cost of the cluster, used for quotas
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cost: Option<i64>,
    /// Skip the registration of the cluster to the hub cluster
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipClusterRegistration")]
    pub skip_cluster_registration: Option<bool>,
}

/// ClusterTemplateStatus defines the observed state of ClusterTemplate
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterTemplateStatus {
    /// Describes helm chart properties and their schema
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterDefinition")]
    pub cluster_definition: Option<ClusterTemplateStatusClusterDefinition>,
    /// Describes helm chart properties and schema for every cluster setup step
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterSetup")]
    pub cluster_setup: Option<Vec<ClusterTemplateStatusClusterSetup>>,
}

/// Describes helm chart properties and their schema
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterTemplateStatusClusterDefinition {
    /// Contain information about failure during fetching helm chart
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// Helm chart param overrides from the ArgoCD ApplicationSet
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub params: Option<Vec<ClusterTemplateStatusClusterDefinitionParams>>,
    /// Content of helm chart values.schema.json
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
    /// Content of helm chart values.yaml
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterTemplateStatusClusterDefinitionParams {
    /// Name of a helm chart param
    pub name: String,
    /// Value of a helm chart param
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterTemplateStatusClusterSetup {
    /// Contain information about failure during fetching helm chart
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// Name of the cluster setup step
    pub name: String,
    /// Helm chart param overrides from the ArgoCD ApplicationSet
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub params: Option<Vec<ClusterTemplateStatusClusterSetupParams>>,
    /// Content of helm chart values.schema.json
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
    /// Content of helm chart values.yaml
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterTemplateStatusClusterSetupParams {
    /// Name of a helm chart param
    pub name: String,
    /// Value of a helm chart param
    pub value: String,
}

