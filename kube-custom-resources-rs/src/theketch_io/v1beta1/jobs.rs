// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/theketchio/ketch/theketch.io/v1beta1/jobs.yaml --derive=Default --derive=PartialEq
// kopium version: 0.17.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// JobSpec defines the desired state of Job
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "theketch.io", version = "v1beta1", kind = "Job", plural = "jobs")]
#[kube(namespaced)]
#[kube(status = "JobStatus")]
#[kube(schema = "disabled")]
pub struct JobSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backoffLimit")]
    pub backoff_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub completions: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<JobContainers>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failedJobsHistoryLimit")]
    pub failed_jobs_history_limit: Option<i64>,
    pub name: String,
    pub namespace: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parallelism: Option<i64>,
    /// Policy represents the policy types a job can have
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<JobPolicy>,
    /// CronJob-specific
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startingDeadlineSeconds")]
    pub starting_deadline_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successfulJobsHistoryLimit")]
    pub successful_jobs_history_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suspend: Option<bool>,
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// Container represents a single container run in a Job
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct JobContainers {
    pub command: Vec<String>,
    pub image: String,
    pub name: String,
}

/// Policy represents the policy types a job can have
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct JobPolicy {
    /// CronJob-specific
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "concurrencyPolicy")]
    pub concurrency_policy: Option<String>,
    /// RestartPolicy describes how the container should be restarted. Only one of the following restart policies may be specified. If none of the following policies is specified, the default one is RestartPolicyAlways.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restartPolicy")]
    pub restart_policy: Option<String>,
}

/// JobStatus defines the observed state of Job
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct JobStatus {
    /// CronJob-specific
    pub active: bool,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<JobStatusConditions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastScheduleTime")]
    pub last_schedule_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastSuccessfulTime")]
    pub last_successful_time: Option<String>,
}

/// Condition contains details for the current condition of this app.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct JobStatusConditions {
    /// LastTransitionTime is the timestamp corresponding to the last status.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    /// A human readable message indicating details about why the application is in this condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Status of the condition.
    pub status: String,
    /// Type of the condition.
    #[serde(rename = "type")]
    pub r#type: String,
}

