// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/aws-controllers-k8s/dynamodb-controller/dynamodb.services.k8s.aws/v1alpha1/globaltables.yaml --derive=Default --derive=PartialEq
// kopium version: 0.17.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// GlobalTableSpec defines the desired state of GlobalTable.
/// 
/// 
/// Represents the properties of a global table.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "dynamodb.services.k8s.aws", version = "v1alpha1", kind = "GlobalTable", plural = "globaltables")]
#[kube(namespaced)]
#[kube(status = "GlobalTableStatus")]
#[kube(schema = "disabled")]
pub struct GlobalTableSpec {
    /// The global table name.
    #[serde(rename = "globalTableName")]
    pub global_table_name: String,
    /// The Regions where the global table needs to be created.
    #[serde(rename = "replicationGroup")]
    pub replication_group: Vec<GlobalTableReplicationGroup>,
}

/// Represents the properties of a replica.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalTableReplicationGroup {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionName")]
    pub region_name: Option<String>,
}

/// GlobalTableStatus defines the observed state of GlobalTable
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalTableStatus {
    /// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
    /// that is used to contain resource sync state, account ownership,
    /// constructed ARN for the resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ackResourceMetadata")]
    pub ack_resource_metadata: Option<GlobalTableStatusAckResourceMetadata>,
    /// All CRS managed by ACK have a common `Status.Conditions` member that
    /// contains a collection of `ackv1alpha1.Condition` objects that describe
    /// the various terminal states of the CR and its backend AWS service API
    /// resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// The creation time of the global table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creationDateTime")]
    pub creation_date_time: Option<String>,
    /// The current state of the global table:
    /// 
    /// 
    ///    * CREATING - The global table is being created.
    /// 
    /// 
    ///    * UPDATING - The global table is being updated.
    /// 
    /// 
    ///    * DELETING - The global table is being deleted.
    /// 
    /// 
    ///    * ACTIVE - The global table is ready for use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalTableStatus")]
    pub global_table_status: Option<String>,
}

/// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
/// that is used to contain resource sync state, account ownership,
/// constructed ARN for the resource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GlobalTableStatusAckResourceMetadata {
    /// ARN is the Amazon Resource Name for the resource. This is a
    /// globally-unique identifier and is set only by the ACK service controller
    /// once the controller has orchestrated the creation of the resource OR
    /// when it has verified that an "adopted" resource (a resource where the
    /// ARN annotation was set by the Kubernetes user on the CR) exists and
    /// matches the supplied CR's Spec field values.
    /// TODO(vijat@): Find a better strategy for resources that do not have ARN in CreateOutputResponse
    /// https://github.com/aws/aws-controllers-k8s/issues/270
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// OwnerAccountID is the AWS Account ID of the account that owns the
    /// backend AWS service API resource.
    #[serde(rename = "ownerAccountID")]
    pub owner_account_id: String,
    /// Region is the AWS region in which the resource exists or will exist.
    pub region: String,
}

