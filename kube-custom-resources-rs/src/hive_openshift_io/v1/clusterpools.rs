// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/hive/hive.openshift.io/v1/clusterpools.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ClusterPoolSpec defines the desired state of the ClusterPool.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "hive.openshift.io", version = "v1", kind = "ClusterPool", plural = "clusterpools")]
#[kube(namespaced)]
#[kube(status = "ClusterPoolStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ClusterPoolSpec {
    /// Annotations to be applied to new ClusterDeployments created for the pool. ClusterDeployments that have already been claimed will not be affected when this value is modified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// BaseDomain is the base domain to use for all clusters created in this pool.
    #[serde(rename = "baseDomain")]
    pub base_domain: String,
    /// ClaimLifetime defines the lifetimes for claims for the cluster pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimLifetime")]
    pub claim_lifetime: Option<ClusterPoolClaimLifetime>,
    /// HibernateAfter will be applied to new ClusterDeployments created for the pool. HibernateAfter will transition clusters in the clusterpool to hibernating power state after it has been running for the given duration. The time that a cluster has been running is the time since the cluster was installed or the time since the cluster last came out of hibernation. This is a Duration value; see https://pkg.go.dev/time#ParseDuration for accepted formats. Note: due to discrepancies in validation vs parsing, we use a Pattern instead of `Format=duration`. See https://bugzilla.redhat.com/show_bug.cgi?id=2050332 https://github.com/kubernetes/apimachinery/issues/131 https://github.com/kubernetes/apiextensions-apiserver/issues/56
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hibernateAfter")]
    pub hibernate_after: Option<String>,
    /// HibernationConfig configures the hibernation/resume behavior of ClusterDeployments owned by the ClusterPool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hibernationConfig")]
    pub hibernation_config: Option<ClusterPoolHibernationConfig>,
    /// ImageSetRef is a reference to a ClusterImageSet. The release image specified in the ClusterImageSet will be used by clusters created for this cluster pool.
    #[serde(rename = "imageSetRef")]
    pub image_set_ref: ClusterPoolImageSetRef,
    /// InstallAttemptsLimit is the maximum number of times Hive will attempt to install the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installAttemptsLimit")]
    pub install_attempts_limit: Option<i32>,
    /// InstallConfigSecretTemplateRef is a secret with the key install-config.yaml consisting of the content of the install-config.yaml to be used as a template for all clusters in this pool. Cluster specific settings (name, basedomain) will be injected dynamically when the ClusterDeployment install-config Secret is generated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installConfigSecretTemplateRef")]
    pub install_config_secret_template_ref: Option<ClusterPoolInstallConfigSecretTemplateRef>,
    /// Inventory maintains a list of entries consumed by the ClusterPool to customize the default ClusterDeployment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inventory: Option<Vec<ClusterPoolInventory>>,
    /// Labels to be applied to new ClusterDeployments created for the pool. ClusterDeployments that have already been claimed will not be affected when this value is modified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// MaxConcurrent is the maximum number of clusters that will be provisioned or deprovisioned at an time. This includes the claimed clusters being deprovisioned. By default there is no limit.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrent")]
    pub max_concurrent: Option<i32>,
    /// MaxSize is the maximum number of clusters that will be provisioned including clusters that have been claimed and ones waiting to be used. By default there is no limit.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSize")]
    pub max_size: Option<i32>,
    /// Platform encompasses the desired platform for the cluster.
    pub platform: ClusterPoolPlatform,
    /// PullSecretRef is the reference to the secret to use when pulling images.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullSecretRef")]
    pub pull_secret_ref: Option<ClusterPoolPullSecretRef>,
    /// RunningCount is the number of clusters we should keep running. The remainder will be kept hibernated until claimed. By default no clusters will be kept running (all will be hibernated).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runningCount")]
    pub running_count: Option<i32>,
    /// Size is the default number of clusters that we should keep provisioned and waiting for use.
    pub size: i32,
    /// SkipMachinePools allows creating clusterpools where the machinepools are not managed by hive after cluster creation
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipMachinePools")]
    pub skip_machine_pools: Option<bool>,
}

/// ClaimLifetime defines the lifetimes for claims for the cluster pool.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolClaimLifetime {
    /// Default is the default lifetime of the claim when no lifetime is set on the claim itself. This is a Duration value; see https://pkg.go.dev/time#ParseDuration for accepted formats. Note: due to discrepancies in validation vs parsing, we use a Pattern instead of `Format=duration`. See https://bugzilla.redhat.com/show_bug.cgi?id=2050332 https://github.com/kubernetes/apimachinery/issues/131 https://github.com/kubernetes/apiextensions-apiserver/issues/56
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default: Option<String>,
    /// Maximum is the maximum lifetime of the claim after it is assigned a cluster. If the claim still exists when the lifetime has elapsed, the claim will be deleted by Hive. The lifetime of a claim is the mimimum of the lifetimes set by the cluster pool and the claim itself. This is a Duration value; see https://pkg.go.dev/time#ParseDuration for accepted formats. Note: due to discrepancies in validation vs parsing, we use a Pattern instead of `Format=duration`. See https://bugzilla.redhat.com/show_bug.cgi?id=2050332 https://github.com/kubernetes/apimachinery/issues/131 https://github.com/kubernetes/apiextensions-apiserver/issues/56
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maximum: Option<String>,
}

/// HibernationConfig configures the hibernation/resume behavior of ClusterDeployments owned by the ClusterPool.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolHibernationConfig {
    /// ResumeTimeout is the maximum amount of time we will wait for an unclaimed ClusterDeployment to resume from hibernation (e.g. at the behest of runningCount, or in preparation for being claimed). If this time is exceeded, the ClusterDeployment will be considered Broken and we will replace it. The default (unspecified or zero) means no timeout -- we will allow the ClusterDeployment to continue trying to resume "forever". This is a Duration value; see https://pkg.go.dev/time#ParseDuration for accepted formats. Note: due to discrepancies in validation vs parsing, we use a Pattern instead of `Format=duration`. See https://bugzilla.redhat.com/show_bug.cgi?id=2050332 https://github.com/kubernetes/apimachinery/issues/131 https://github.com/kubernetes/apiextensions-apiserver/issues/56
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resumeTimeout")]
    pub resume_timeout: Option<String>,
}

/// ImageSetRef is a reference to a ClusterImageSet. The release image specified in the ClusterImageSet will be used by clusters created for this cluster pool.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolImageSetRef {
    /// Name is the name of the ClusterImageSet that this refers to
    pub name: String,
}

/// InstallConfigSecretTemplateRef is a secret with the key install-config.yaml consisting of the content of the install-config.yaml to be used as a template for all clusters in this pool. Cluster specific settings (name, basedomain) will be injected dynamically when the ClusterDeployment install-config Secret is generated.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolInstallConfigSecretTemplateRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// InventoryEntry maintains a reference to a custom resource consumed by a clusterpool to customize the cluster deployment.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolInventory {
    /// Kind denotes the kind of the referenced resource. The default is ClusterDeploymentCustomization, which is also currently the only supported value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<ClusterPoolInventoryKind>,
    /// Name is the name of the referenced resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// InventoryEntry maintains a reference to a custom resource consumed by a clusterpool to customize the cluster deployment.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterPoolInventoryKind {
    #[serde(rename = "")]
    KopiumEmpty,
    ClusterDeploymentCustomization,
}

/// Platform encompasses the desired platform for the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatform {
    /// AgentBareMetal is the configuration used when performing an Assisted Agent based installation to bare metal.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentBareMetal")]
    pub agent_bare_metal: Option<ClusterPoolPlatformAgentBareMetal>,
    /// AWS is the configuration used when installing on AWS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<ClusterPoolPlatformAws>,
    /// Azure is the configuration used when installing on Azure.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<ClusterPoolPlatformAzure>,
    /// BareMetal is the configuration used when installing on bare metal.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub baremetal: Option<ClusterPoolPlatformBaremetal>,
    /// GCP is the configuration used when installing on Google Cloud Platform.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcp: Option<ClusterPoolPlatformGcp>,
    /// IBMCloud is the configuration used when installing on IBM Cloud
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ibmcloud: Option<ClusterPoolPlatformIbmcloud>,
    /// None indicates platform-agnostic install. https://docs.openshift.com/container-platform/4.7/installing/installing_platform_agnostic/installing-platform-agnostic.html
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub none: Option<ClusterPoolPlatformNone>,
    /// OpenStack is the configuration used when installing on OpenStack
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openstack: Option<ClusterPoolPlatformOpenstack>,
    /// Ovirt is the configuration used when installing on oVirt
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ovirt: Option<ClusterPoolPlatformOvirt>,
    /// VSphere is the configuration used when installing on vSphere
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vsphere: Option<ClusterPoolPlatformVsphere>,
}

/// AgentBareMetal is the configuration used when performing an Assisted Agent based installation to bare metal.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformAgentBareMetal {
    /// AgentSelector is a label selector used for associating relevant custom resources with this cluster. (Agent, BareMetalHost, etc)
    #[serde(rename = "agentSelector")]
    pub agent_selector: ClusterPoolPlatformAgentBareMetalAgentSelector,
}

/// AgentSelector is a label selector used for associating relevant custom resources with this cluster. (Agent, BareMetalHost, etc)
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformAgentBareMetalAgentSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<ClusterPoolPlatformAgentBareMetalAgentSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformAgentBareMetalAgentSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// AWS is the configuration used when installing on AWS.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformAws {
    /// CredentialsAssumeRole refers to the IAM role that must be assumed to obtain AWS account access for the cluster operations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialsAssumeRole")]
    pub credentials_assume_role: Option<ClusterPoolPlatformAwsCredentialsAssumeRole>,
    /// CredentialsSecretRef refers to a secret that contains the AWS account access credentials.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialsSecretRef")]
    pub credentials_secret_ref: Option<ClusterPoolPlatformAwsCredentialsSecretRef>,
    /// PrivateLink allows uses to enable access to the cluster's API server using AWS PrivateLink. AWS PrivateLink includes a pair of VPC Endpoint Service and VPC Endpoint accross AWS accounts and allows clients to connect to services using AWS's internal networking instead of the Internet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateLink")]
    pub private_link: Option<ClusterPoolPlatformAwsPrivateLink>,
    /// Region specifies the AWS region where the cluster will be created.
    pub region: String,
    /// UserTags specifies additional tags for AWS resources created for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userTags")]
    pub user_tags: Option<BTreeMap<String, String>>,
}

/// CredentialsAssumeRole refers to the IAM role that must be assumed to obtain AWS account access for the cluster operations.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformAwsCredentialsAssumeRole {
    /// ExternalID is random string generated by platform so that assume role is protected from confused deputy problem. more info: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalID")]
    pub external_id: Option<String>,
    #[serde(rename = "roleARN")]
    pub role_arn: String,
}

/// CredentialsSecretRef refers to a secret that contains the AWS account access credentials.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformAwsCredentialsSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PrivateLink allows uses to enable access to the cluster's API server using AWS PrivateLink. AWS PrivateLink includes a pair of VPC Endpoint Service and VPC Endpoint accross AWS accounts and allows clients to connect to services using AWS's internal networking instead of the Internet.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformAwsPrivateLink {
    /// AdditionalAllowedPrincipals is a list of additional allowed principal ARNs to be configured for the Private Link cluster's VPC Endpoint Service. ARNs provided as AdditionalAllowedPrincipals will be configured for the cluster's VPC Endpoint Service in addition to the IAM entity used by Hive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalAllowedPrincipals")]
    pub additional_allowed_principals: Option<Vec<String>>,
    pub enabled: bool,
}

/// Azure is the configuration used when installing on Azure.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformAzure {
    /// BaseDomainResourceGroupName specifies the resource group where the azure DNS zone for the base domain is found
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseDomainResourceGroupName")]
    pub base_domain_resource_group_name: Option<String>,
    /// cloudName is the name of the Azure cloud environment which can be used to configure the Azure SDK with the appropriate Azure API endpoints. If empty, the value is equal to "AzurePublicCloud".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudName")]
    pub cloud_name: Option<ClusterPoolPlatformAzureCloudName>,
    /// CredentialsSecretRef refers to a secret that contains the Azure account access credentials.
    #[serde(rename = "credentialsSecretRef")]
    pub credentials_secret_ref: ClusterPoolPlatformAzureCredentialsSecretRef,
    /// Region specifies the Azure region where the cluster will be created.
    pub region: String,
}

/// Azure is the configuration used when installing on Azure.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterPoolPlatformAzureCloudName {
    #[serde(rename = "")]
    KopiumEmpty,
    AzurePublicCloud,
    #[serde(rename = "AzureUSGovernmentCloud")]
    AzureUsGovernmentCloud,
    AzureChinaCloud,
    AzureGermanCloud,
}

/// CredentialsSecretRef refers to a secret that contains the Azure account access credentials.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformAzureCredentialsSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// BareMetal is the configuration used when installing on bare metal.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformBaremetal {
    /// LibvirtSSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to the libvirt provisioning host. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
    #[serde(rename = "libvirtSSHPrivateKeySecretRef")]
    pub libvirt_ssh_private_key_secret_ref: ClusterPoolPlatformBaremetalLibvirtSshPrivateKeySecretRef,
}

/// LibvirtSSHPrivateKeySecretRef is the reference to the secret that contains the private SSH key to use for access to the libvirt provisioning host. The SSH private key is expected to be in the secret data under the "ssh-privatekey" key.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformBaremetalLibvirtSshPrivateKeySecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// GCP is the configuration used when installing on Google Cloud Platform.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformGcp {
    /// CredentialsSecretRef refers to a secret that contains the GCP account access credentials.
    #[serde(rename = "credentialsSecretRef")]
    pub credentials_secret_ref: ClusterPoolPlatformGcpCredentialsSecretRef,
    /// Region specifies the GCP region where the cluster will be created.
    pub region: String,
}

/// CredentialsSecretRef refers to a secret that contains the GCP account access credentials.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformGcpCredentialsSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// IBMCloud is the configuration used when installing on IBM Cloud
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformIbmcloud {
    /// AccountID is the IBM Cloud Account ID. AccountID is DEPRECATED and is gathered via the IBM Cloud API for the provided credentials. This field will be ignored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountID")]
    pub account_id: Option<String>,
    /// CISInstanceCRN is the IBM Cloud Internet Services Instance CRN CISInstanceCRN is DEPRECATED and gathered via the IBM Cloud API for the provided credentials and cluster deployment base domain. This field will be ignored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cisInstanceCRN")]
    pub cis_instance_crn: Option<String>,
    /// CredentialsSecretRef refers to a secret that contains IBM Cloud account access credentials.
    #[serde(rename = "credentialsSecretRef")]
    pub credentials_secret_ref: ClusterPoolPlatformIbmcloudCredentialsSecretRef,
    /// Region specifies the IBM Cloud region where the cluster will be created.
    pub region: String,
}

/// CredentialsSecretRef refers to a secret that contains IBM Cloud account access credentials.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformIbmcloudCredentialsSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// None indicates platform-agnostic install. https://docs.openshift.com/container-platform/4.7/installing/installing_platform_agnostic/installing-platform-agnostic.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformNone {
}

/// OpenStack is the configuration used when installing on OpenStack
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformOpenstack {
    /// CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack. There is additional configuration required for the OpenShift cluster to trust the certificates provided in this secret. The "clouds.yaml" file included in the credentialsSecretRef Secret must also include a reference to the certificate bundle file for the OpenShift cluster being created to trust the OpenStack endpoints. The "clouds.yaml" file must set the "cacert" field to either "/etc/openstack-ca/<key name containing the trust bundle in credentialsSecretRef Secret>" or "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem". 
    ///  For example, """clouds.yaml clouds: shiftstack: auth: ... cacert: "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem" """
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatesSecretRef")]
    pub certificates_secret_ref: Option<ClusterPoolPlatformOpenstackCertificatesSecretRef>,
    /// Cloud will be used to indicate the OS_CLOUD value to use the right section from the clouds.yaml in the CredentialsSecretRef.
    pub cloud: String,
    /// CredentialsSecretRef refers to a secret that contains the OpenStack account access credentials.
    #[serde(rename = "credentialsSecretRef")]
    pub credentials_secret_ref: ClusterPoolPlatformOpenstackCredentialsSecretRef,
    /// TrunkSupport indicates whether or not to use trunk ports in your OpenShift cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trunkSupport")]
    pub trunk_support: Option<bool>,
}

/// CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack. There is additional configuration required for the OpenShift cluster to trust the certificates provided in this secret. The "clouds.yaml" file included in the credentialsSecretRef Secret must also include a reference to the certificate bundle file for the OpenShift cluster being created to trust the OpenStack endpoints. The "clouds.yaml" file must set the "cacert" field to either "/etc/openstack-ca/<key name containing the trust bundle in credentialsSecretRef Secret>" or "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem". 
///  For example, """clouds.yaml clouds: shiftstack: auth: ... cacert: "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem" """
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformOpenstackCertificatesSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// CredentialsSecretRef refers to a secret that contains the OpenStack account access credentials.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformOpenstackCredentialsSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Ovirt is the configuration used when installing on oVirt
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformOvirt {
    /// CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with oVirt.
    #[serde(rename = "certificatesSecretRef")]
    pub certificates_secret_ref: ClusterPoolPlatformOvirtCertificatesSecretRef,
    /// CredentialsSecretRef refers to a secret that contains the oVirt account access credentials with fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
    #[serde(rename = "credentialsSecretRef")]
    pub credentials_secret_ref: ClusterPoolPlatformOvirtCredentialsSecretRef,
    /// The target cluster under which all VMs will run
    pub ovirt_cluster_id: String,
    /// The target network of all the network interfaces of the nodes. Omitting defaults to ovirtmgmt network which is a default network for evert ovirt cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ovirt_network_name: Option<String>,
    /// The target storage domain under which all VM disk would be created.
    pub storage_domain_id: String,
}

/// CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with oVirt.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformOvirtCertificatesSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// CredentialsSecretRef refers to a secret that contains the oVirt account access credentials with fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformOvirtCredentialsSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// VSphere is the configuration used when installing on vSphere
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformVsphere {
    /// CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
    #[serde(rename = "certificatesSecretRef")]
    pub certificates_secret_ref: ClusterPoolPlatformVsphereCertificatesSecretRef,
    /// Cluster is the name of the cluster virtual machines will be cloned into.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// CredentialsSecretRef refers to a secret that contains the vSphere account access credentials: GOVC_USERNAME, GOVC_PASSWORD fields.
    #[serde(rename = "credentialsSecretRef")]
    pub credentials_secret_ref: ClusterPoolPlatformVsphereCredentialsSecretRef,
    /// Datacenter is the name of the datacenter to use in the vCenter.
    pub datacenter: String,
    /// DefaultDatastore is the default datastore to use for provisioning volumes.
    #[serde(rename = "defaultDatastore")]
    pub default_datastore: String,
    /// Folder is the name of the folder that will be used and/or created for virtual machines.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub folder: Option<String>,
    /// Network specifies the name of the network to be used by the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// VCenter is the domain name or IP address of the vCenter.
    #[serde(rename = "vCenter")]
    pub v_center: String,
}

/// CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformVsphereCertificatesSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// CredentialsSecretRef refers to a secret that contains the vSphere account access credentials: GOVC_USERNAME, GOVC_PASSWORD fields.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPlatformVsphereCredentialsSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PullSecretRef is the reference to the secret to use when pulling images.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolPullSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ClusterPoolStatus defines the observed state of ClusterPool
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterPoolStatus {
    /// Conditions includes more detailed status for the cluster pool
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// Ready is the number of unclaimed clusters that are installed and are running and ready to be claimed.
    pub ready: i32,
    /// Size is the number of unclaimed clusters that have been created for the pool.
    pub size: i32,
    /// Standby is the number of unclaimed clusters that are installed, but not running.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub standby: Option<i32>,
}

