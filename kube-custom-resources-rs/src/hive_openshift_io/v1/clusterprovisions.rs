// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/hive/hive.openshift.io/v1/clusterprovisions.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// ClusterProvisionSpec defines the results of provisioning a cluster.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "hive.openshift.io", version = "v1", kind = "ClusterProvision", plural = "clusterprovisions")]
#[kube(namespaced)]
#[kube(status = "ClusterProvisionStatus")]
#[kube(schema = "disabled")]
pub struct ClusterProvisionSpec {
    /// AdminKubeconfigSecretRef references the secret containing the admin kubeconfig for this cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminKubeconfigSecretRef")]
    pub admin_kubeconfig_secret_ref: Option<ClusterProvisionAdminKubeconfigSecretRef>,
    /// AdminPasswordSecretRef references the secret containing the admin username/password which can be used to login to this cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPasswordSecretRef")]
    pub admin_password_secret_ref: Option<ClusterProvisionAdminPasswordSecretRef>,
    /// Attempt is which attempt number of the cluster deployment that this ClusterProvision is
    pub attempt: i64,
    /// ClusterDeploymentRef references the cluster deployment provisioned.
    #[serde(rename = "clusterDeploymentRef")]
    pub cluster_deployment_ref: ClusterProvisionClusterDeploymentRef,
    /// ClusterID is a globally unique identifier for this cluster generated during installation. Used for reporting metrics among other places.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterID")]
    pub cluster_id: Option<String>,
    /// InfraID is an identifier for this cluster generated during installation and used for tagging/naming resources in cloud providers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infraID")]
    pub infra_id: Option<String>,
    /// InstallLog is the log from the installer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installLog")]
    pub install_log: Option<String>,
    /// Metadata is the metadata.json generated by the installer, providing metadata information about the cluster created. NOTE: This is not used because it didn't work (it was always empty). We think because the thing it's storing (ClusterMetadata from installer) is not a runtime.Object, so can't be put in a RawExtension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ClusterProvisionMetadata>,
    /// MetadataJSON is a JSON representation of the ClusterMetadata produced by the installer. We don't use a runtime.RawExtension because ClusterMetadata isn't a runtime.Object. We don't use ClusterMetadata itself because we don't want our API consumers to need to pull in the installer code and its dependencies.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataJSON")]
    pub metadata_json: Option<String>,
    /// PrevClusterID is the cluster ID of the previous failed provision attempt.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prevClusterID")]
    pub prev_cluster_id: Option<String>,
    /// PrevInfraID is the infra ID of the previous failed provision attempt.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prevInfraID")]
    pub prev_infra_id: Option<String>,
    /// PrevProvisionName is the name of the previous failed provision attempt.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prevProvisionName")]
    pub prev_provision_name: Option<String>,
    /// Stage is the stage of provisioning that the cluster deployment has reached.
    pub stage: String,
}

/// AdminKubeconfigSecretRef references the secret containing the admin kubeconfig for this cluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterProvisionAdminKubeconfigSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// AdminPasswordSecretRef references the secret containing the admin username/password which can be used to login to this cluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterProvisionAdminPasswordSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ClusterDeploymentRef references the cluster deployment provisioned.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterProvisionClusterDeploymentRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Metadata is the metadata.json generated by the installer, providing metadata information about the cluster created. NOTE: This is not used because it didn't work (it was always empty). We think because the thing it's storing (ClusterMetadata from installer) is not a runtime.Object, so can't be put in a RawExtension.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterProvisionMetadata {
}

/// ClusterProvisionStatus defines the observed state of ClusterProvision.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterProvisionStatus {
    /// Conditions includes more detailed status for the cluster provision
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<ClusterProvisionStatusConditions>>,
    /// JobRef is the reference to the job performing the provision.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobRef")]
    pub job_ref: Option<ClusterProvisionStatusJobRef>,
}

/// ClusterProvisionCondition contains details for the current condition of a cluster provision
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterProvisionStatusConditions {
    /// LastProbeTime is the last time we probed the condition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastProbeTime")]
    pub last_probe_time: Option<String>,
    /// LastTransitionTime is the last time the condition transitioned from one status to another.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    /// Message is a human-readable message indicating details about last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Reason is a unique, one-word, CamelCase reason for the condition's last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Status is the status of the condition.
    pub status: String,
    /// Type is the type of the condition.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// JobRef is the reference to the job performing the provision.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterProvisionStatusJobRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

