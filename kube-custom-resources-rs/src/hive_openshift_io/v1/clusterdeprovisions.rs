// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/hive/hive.openshift.io/v1/clusterdeprovisions.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ClusterDeprovisionSpec defines the desired state of ClusterDeprovision
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "hive.openshift.io", version = "v1", kind = "ClusterDeprovision", plural = "clusterdeprovisions")]
#[kube(namespaced)]
#[kube(status = "ClusterDeprovisionStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ClusterDeprovisionSpec {
    /// BaseDomain is the DNS base domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseDomain")]
    pub base_domain: Option<String>,
    /// ClusterID is a globally unique identifier for the cluster to deprovision. It will be used if specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterID")]
    pub cluster_id: Option<String>,
    /// ClusterName is the friendly name of the cluster. It is used for subdomains, some resource tagging, and other instances where a friendly name for the cluster is useful.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    /// InfraID is the identifier generated during installation for a cluster. It is used for tagging/naming resources in cloud providers.
    #[serde(rename = "infraID")]
    pub infra_id: String,
    /// Platform contains platform-specific configuration for a ClusterDeprovision
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<ClusterDeprovisionPlatform>,
}

/// Platform contains platform-specific configuration for a ClusterDeprovision
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterDeprovisionPlatform {
    /// AWS contains AWS-specific deprovision settings
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<ClusterDeprovisionPlatformAws>,
    /// Azure contains Azure-specific deprovision settings
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<ClusterDeprovisionPlatformAzure>,
    /// GCP contains GCP-specific deprovision settings
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcp: Option<ClusterDeprovisionPlatformGcp>,
    /// IBMCloud contains IBM Cloud specific deprovision settings
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ibmcloud: Option<ClusterDeprovisionPlatformIbmcloud>,
    /// OpenStack contains OpenStack-specific deprovision settings
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openstack: Option<ClusterDeprovisionPlatformOpenstack>,
    /// Ovirt contains oVirt-specific deprovision settings
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ovirt: Option<ClusterDeprovisionPlatformOvirt>,
    /// VSphere contains VMWare vSphere-specific deprovision settings
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vsphere: Option<ClusterDeprovisionPlatformVsphere>,
}

/// AWS contains AWS-specific deprovision settings
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterDeprovisionPlatformAws {
    /// CredentialsAssumeRole refers to the IAM role that must be assumed to obtain AWS account access for deprovisioning the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialsAssumeRole")]
    pub credentials_assume_role: Option<ClusterDeprovisionPlatformAwsCredentialsAssumeRole>,
    /// CredentialsSecretRef is the AWS account credentials to use for deprovisioning the cluster
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialsSecretRef")]
    pub credentials_secret_ref: Option<ClusterDeprovisionPlatformAwsCredentialsSecretRef>,
    /// HostedZoneRole is the role to assume when performing operations on a hosted zone owned by another account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostedZoneRole")]
    pub hosted_zone_role: Option<String>,
    /// Region is the AWS region for this deprovisioning
    pub region: String,
}

/// CredentialsAssumeRole refers to the IAM role that must be assumed to obtain AWS account access for deprovisioning the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterDeprovisionPlatformAwsCredentialsAssumeRole {
    /// ExternalID is random string generated by platform so that assume role is protected from confused deputy problem. more info: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalID")]
    pub external_id: Option<String>,
    #[serde(rename = "roleARN")]
    pub role_arn: String,
}

/// CredentialsSecretRef is the AWS account credentials to use for deprovisioning the cluster
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterDeprovisionPlatformAwsCredentialsSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Azure contains Azure-specific deprovision settings
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterDeprovisionPlatformAzure {
    /// cloudName is the name of the Azure cloud environment which can be used to configure the Azure SDK with the appropriate Azure API endpoints. If empty, the value is equal to "AzurePublicCloud".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudName")]
    pub cloud_name: Option<ClusterDeprovisionPlatformAzureCloudName>,
    /// CredentialsSecretRef is the Azure account credentials to use for deprovisioning the cluster
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialsSecretRef")]
    pub credentials_secret_ref: Option<ClusterDeprovisionPlatformAzureCredentialsSecretRef>,
    /// ResourceGroupName is the name of the resource group where the cluster was installed. Required for new deprovisions (schema notwithstanding).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroupName")]
    pub resource_group_name: Option<String>,
}

/// Azure contains Azure-specific deprovision settings
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ClusterDeprovisionPlatformAzureCloudName {
    #[serde(rename = "")]
    KopiumEmpty,
    AzurePublicCloud,
    #[serde(rename = "AzureUSGovernmentCloud")]
    AzureUsGovernmentCloud,
    AzureChinaCloud,
    AzureGermanCloud,
}

/// CredentialsSecretRef is the Azure account credentials to use for deprovisioning the cluster
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterDeprovisionPlatformAzureCredentialsSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// GCP contains GCP-specific deprovision settings
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterDeprovisionPlatformGcp {
    /// CredentialsSecretRef is the GCP account credentials to use for deprovisioning the cluster
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialsSecretRef")]
    pub credentials_secret_ref: Option<ClusterDeprovisionPlatformGcpCredentialsSecretRef>,
    /// NetworkProjectID is used for shared VPC setups
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkProjectID")]
    pub network_project_id: Option<String>,
    /// Region is the GCP region for this deprovision
    pub region: String,
}

/// CredentialsSecretRef is the GCP account credentials to use for deprovisioning the cluster
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterDeprovisionPlatformGcpCredentialsSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// IBMCloud contains IBM Cloud specific deprovision settings
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterDeprovisionPlatformIbmcloud {
    /// BaseDomain is the DNS base domain. TODO: Use the non-platform-specific BaseDomain field.
    #[serde(rename = "baseDomain")]
    pub base_domain: String,
    /// CredentialsSecretRef is the IBM Cloud credentials to use for deprovisioning the cluster
    #[serde(rename = "credentialsSecretRef")]
    pub credentials_secret_ref: ClusterDeprovisionPlatformIbmcloudCredentialsSecretRef,
    /// Region specifies the IBM Cloud region
    pub region: String,
}

/// CredentialsSecretRef is the IBM Cloud credentials to use for deprovisioning the cluster
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterDeprovisionPlatformIbmcloudCredentialsSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// OpenStack contains OpenStack-specific deprovision settings
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterDeprovisionPlatformOpenstack {
    /// CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatesSecretRef")]
    pub certificates_secret_ref: Option<ClusterDeprovisionPlatformOpenstackCertificatesSecretRef>,
    /// Cloud is the secion in the clouds.yaml secret below to use for auth/connectivity.
    pub cloud: String,
    /// CredentialsSecretRef is the OpenStack account credentials to use for deprovisioning the cluster
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialsSecretRef")]
    pub credentials_secret_ref: Option<ClusterDeprovisionPlatformOpenstackCredentialsSecretRef>,
}

/// CertificatesSecretRef refers to a secret that contains CA certificates necessary for communicating with the OpenStack.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterDeprovisionPlatformOpenstackCertificatesSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// CredentialsSecretRef is the OpenStack account credentials to use for deprovisioning the cluster
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterDeprovisionPlatformOpenstackCredentialsSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Ovirt contains oVirt-specific deprovision settings
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterDeprovisionPlatformOvirt {
    /// CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with the oVirt.
    #[serde(rename = "certificatesSecretRef")]
    pub certificates_secret_ref: ClusterDeprovisionPlatformOvirtCertificatesSecretRef,
    /// The oVirt cluster ID
    #[serde(rename = "clusterID")]
    pub cluster_id: String,
    /// CredentialsSecretRef is the oVirt account credentials to use for deprovisioning the cluster secret fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
    #[serde(rename = "credentialsSecretRef")]
    pub credentials_secret_ref: ClusterDeprovisionPlatformOvirtCredentialsSecretRef,
}

/// CertificatesSecretRef refers to a secret that contains the oVirt CA certificates necessary for communicating with the oVirt.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterDeprovisionPlatformOvirtCertificatesSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// CredentialsSecretRef is the oVirt account credentials to use for deprovisioning the cluster secret fields: ovirt_url, ovirt_username, ovirt_password, ovirt_ca_bundle
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterDeprovisionPlatformOvirtCredentialsSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// VSphere contains VMWare vSphere-specific deprovision settings
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterDeprovisionPlatformVsphere {
    /// CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
    #[serde(rename = "certificatesSecretRef")]
    pub certificates_secret_ref: ClusterDeprovisionPlatformVsphereCertificatesSecretRef,
    /// CredentialsSecretRef is the vSphere account credentials to use for deprovisioning the cluster
    #[serde(rename = "credentialsSecretRef")]
    pub credentials_secret_ref: ClusterDeprovisionPlatformVsphereCredentialsSecretRef,
    /// VCenter is the vSphere vCenter hostname.
    #[serde(rename = "vCenter")]
    pub v_center: String,
}

/// CertificatesSecretRef refers to a secret that contains the vSphere CA certificates necessary for communicating with the VCenter.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterDeprovisionPlatformVsphereCertificatesSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// CredentialsSecretRef is the vSphere account credentials to use for deprovisioning the cluster
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterDeprovisionPlatformVsphereCredentialsSecretRef {
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ClusterDeprovisionStatus defines the observed state of ClusterDeprovision
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterDeprovisionStatus {
    /// Completed is true when the uninstall has completed successfully
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub completed: Option<bool>,
    /// Conditions includes more detailed status for the cluster deprovision
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
}

