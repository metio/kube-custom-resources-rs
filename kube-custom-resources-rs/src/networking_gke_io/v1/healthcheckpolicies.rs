// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/GoogleCloudPlatform/gke-networking-recipes/networking.gke.io/v1/healthcheckpolicies.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// Spec defines the desired state of HealthCheckPolicy.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "networking.gke.io", version = "v1", kind = "HealthCheckPolicy", plural = "healthcheckpolicies")]
#[kube(namespaced)]
#[kube(status = "HealthCheckPolicyStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct HealthCheckPolicySpec {
    /// Default defines default policy configuration for the targeted resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default: Option<HealthCheckPolicyDefault>,
    /// TargetRef identifies an API object to apply policy to.
    #[serde(rename = "targetRef")]
    pub target_ref: HealthCheckPolicyTargetRef,
}

/// Default defines default policy configuration for the targeted resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HealthCheckPolicyDefault {
    /// How often (in seconds) to send a health check. If not specified, a default value of 5 seconds will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkIntervalSec")]
    pub check_interval_sec: Option<i64>,
    /// Specifies the type of the healthCheck, either TCP, HTTP, HTTPS, HTTP2 or GRPC. Exactly one of the protocol-specific health check field must be specified, which must match type field. Config contains per protocol (i.e. HTTP, HTTPS, HTTP2, TCP, GRPC) configuration. If not specified, health check type defaults to HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<HealthCheckPolicyDefaultConfig>,
    /// A so-far unhealthy instance will be marked healthy after this many consecutive successes. If not specified, a default value of 2 will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthyThreshold")]
    pub healthy_threshold: Option<i64>,
    /// LogConfig configures logging on this health check.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logConfig")]
    pub log_config: Option<HealthCheckPolicyDefaultLogConfig>,
    /// How long (in seconds) to wait before claiming failure. If not specified, a default value of 5 seconds will be used. It is invalid for timeoutSec to have greater value than checkIntervalSec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSec")]
    pub timeout_sec: Option<i64>,
    /// A so-far healthy instance will be marked unhealthy after this many consecutive failures. If not specified, a default value of 2 will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unhealthyThreshold")]
    pub unhealthy_threshold: Option<i64>,
}

/// Specifies the type of the healthCheck, either TCP, HTTP, HTTPS, HTTP2 or GRPC. Exactly one of the protocol-specific health check field must be specified, which must match type field. Config contains per protocol (i.e. HTTP, HTTPS, HTTP2, TCP, GRPC) configuration. If not specified, health check type defaults to HTTP.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HealthCheckPolicyDefaultConfig {
    /// GRPC is the health check configuration of type GRPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcHealthCheck")]
    pub grpc_health_check: Option<HealthCheckPolicyDefaultConfigGrpcHealthCheck>,
    /// HTTP2 is the health check configuration of type HTTP2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http2HealthCheck")]
    pub http2_health_check: Option<HealthCheckPolicyDefaultConfigHttp2HealthCheck>,
    /// HTTP is the health check configuration of type HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHealthCheck")]
    pub http_health_check: Option<HealthCheckPolicyDefaultConfigHttpHealthCheck>,
    /// HTTPS is the health check configuration of type HTTPS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpsHealthCheck")]
    pub https_health_check: Option<HealthCheckPolicyDefaultConfigHttpsHealthCheck>,
    /// TCP is the health check configuration of type TCP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpHealthCheck")]
    pub tcp_health_check: Option<HealthCheckPolicyDefaultConfigTcpHealthCheck>,
    /// Specifies the type of the healthCheck, either TCP, HTTP, HTTPS, HTTP2 or GRPC. Exactly one of the protocol-specific health check field must be specified, which must match type field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<HealthCheckPolicyDefaultConfigType>,
}

/// GRPC is the health check configuration of type GRPC.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HealthCheckPolicyDefaultConfigGrpcHealthCheck {
    /// The gRPC service name for the health check. This field is optional. The value of grpcServiceName has the following meanings by convention: - Empty serviceName means the overall status of all services at the backend. - Non-empty serviceName means the health of that gRPC service, as defined by   the owner of the service. The grpcServiceName can only be ASCII.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcServiceName")]
    pub grpc_service_name: Option<String>,
    /// The TCP port number for the health check request. Valid values are 1 through 65535.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// Port name as defined in InstanceGroup#NamedPort#name. If both port and portName are defined, port takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portName")]
    pub port_name: Option<String>,
    /// Specifies how port is selected for health checking, can be one of following values: 
    ///  USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. 
    ///  If not specified, Protocol health check follows behavior specified in port and portName fields. If neither Port nor PortName is specified, this defaults to USE_SERVING_PORT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portSpecification")]
    pub port_specification: Option<HealthCheckPolicyDefaultConfigGrpcHealthCheckPortSpecification>,
}

/// GRPC is the health check configuration of type GRPC.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum HealthCheckPolicyDefaultConfigGrpcHealthCheckPortSpecification {
    #[serde(rename = "USE_FIXED_PORT")]
    UseFixedPort,
    #[serde(rename = "USE_NAMED_PORT")]
    UseNamedPort,
    #[serde(rename = "USE_SERVING_PORT")]
    UseServingPort,
}

/// HTTP2 is the health check configuration of type HTTP2.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HealthCheckPolicyDefaultConfigHttp2HealthCheck {
    /// Host is the value of the host header in the HTTP health check request. This matches the RFC 1123 definition of a hostname with 1 notable exception that numeric IP addresses are not allowed. If not specified or left empty, the IP on behalf of which this health check is performed will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// The TCP port number for the health check request. Valid values are 1 through 65535.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// Port name as defined in InstanceGroup#NamedPort#name. If both port and portName are defined, port takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portName")]
    pub port_name: Option<String>,
    /// Specifies how port is selected for health checking, can be one of following values: 
    ///  USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. 
    ///  If not specified, Protocol health check follows behavior specified in port and portName fields. If neither Port nor PortName is specified, this defaults to USE_SERVING_PORT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portSpecification")]
    pub port_specification: Option<HealthCheckPolicyDefaultConfigHttp2HealthCheckPortSpecification>,
    /// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. If not specified, this defaults to NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyHeader")]
    pub proxy_header: Option<HealthCheckPolicyDefaultConfigHttp2HealthCheckProxyHeader>,
    /// The request path of the HTTP health check request. If not specified or left empty, a default value of "/" is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestPath")]
    pub request_path: Option<String>,
    /// The string to match anywhere in the first 1024 bytes of the response body. If not specified or left empty, the status code determines health. The response data can only be ASCII.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<String>,
}

/// HTTP2 is the health check configuration of type HTTP2.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum HealthCheckPolicyDefaultConfigHttp2HealthCheckPortSpecification {
    #[serde(rename = "USE_FIXED_PORT")]
    UseFixedPort,
    #[serde(rename = "USE_NAMED_PORT")]
    UseNamedPort,
    #[serde(rename = "USE_SERVING_PORT")]
    UseServingPort,
}

/// HTTP2 is the health check configuration of type HTTP2.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum HealthCheckPolicyDefaultConfigHttp2HealthCheckProxyHeader {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "PROXY_V1")]
    ProxyV1,
}

/// HTTP is the health check configuration of type HTTP.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HealthCheckPolicyDefaultConfigHttpHealthCheck {
    /// Host is the value of the host header in the HTTP health check request. This matches the RFC 1123 definition of a hostname with 1 notable exception that numeric IP addresses are not allowed. If not specified or left empty, the IP on behalf of which this health check is performed will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// The TCP port number for the health check request. Valid values are 1 through 65535.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// Port name as defined in InstanceGroup#NamedPort#name. If both port and portName are defined, port takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portName")]
    pub port_name: Option<String>,
    /// Specifies how port is selected for health checking, can be one of following values: 
    ///  USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. 
    ///  If not specified, Protocol health check follows behavior specified in port and portName fields. If neither Port nor PortName is specified, this defaults to USE_SERVING_PORT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portSpecification")]
    pub port_specification: Option<HealthCheckPolicyDefaultConfigHttpHealthCheckPortSpecification>,
    /// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. If not specified, this defaults to NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyHeader")]
    pub proxy_header: Option<HealthCheckPolicyDefaultConfigHttpHealthCheckProxyHeader>,
    /// The request path of the HTTP health check request. If not specified or left empty, a default value of "/" is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestPath")]
    pub request_path: Option<String>,
    /// The string to match anywhere in the first 1024 bytes of the response body. If not specified or left empty, the status code determines health. The response data can only be ASCII.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<String>,
}

/// HTTP is the health check configuration of type HTTP.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum HealthCheckPolicyDefaultConfigHttpHealthCheckPortSpecification {
    #[serde(rename = "USE_FIXED_PORT")]
    UseFixedPort,
    #[serde(rename = "USE_NAMED_PORT")]
    UseNamedPort,
    #[serde(rename = "USE_SERVING_PORT")]
    UseServingPort,
}

/// HTTP is the health check configuration of type HTTP.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum HealthCheckPolicyDefaultConfigHttpHealthCheckProxyHeader {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "PROXY_V1")]
    ProxyV1,
}

/// HTTPS is the health check configuration of type HTTPS.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HealthCheckPolicyDefaultConfigHttpsHealthCheck {
    /// Host is the value of the host header in the HTTP health check request. This matches the RFC 1123 definition of a hostname with 1 notable exception that numeric IP addresses are not allowed. If not specified or left empty, the IP on behalf of which this health check is performed will be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// The TCP port number for the health check request. Valid values are 1 through 65535.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// Port name as defined in InstanceGroup#NamedPort#name. If both port and portName are defined, port takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portName")]
    pub port_name: Option<String>,
    /// Specifies how port is selected for health checking, can be one of following values: 
    ///  USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. 
    ///  If not specified, Protocol health check follows behavior specified in port and portName fields. If neither Port nor PortName is specified, this defaults to USE_SERVING_PORT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portSpecification")]
    pub port_specification: Option<HealthCheckPolicyDefaultConfigHttpsHealthCheckPortSpecification>,
    /// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. If not specified, this defaults to NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyHeader")]
    pub proxy_header: Option<HealthCheckPolicyDefaultConfigHttpsHealthCheckProxyHeader>,
    /// The request path of the HTTP health check request. If not specified or left empty, a default value of "/" is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestPath")]
    pub request_path: Option<String>,
    /// The string to match anywhere in the first 1024 bytes of the response body. If not specified or left empty, the status code determines health. The response data can only be ASCII.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<String>,
}

/// HTTPS is the health check configuration of type HTTPS.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum HealthCheckPolicyDefaultConfigHttpsHealthCheckPortSpecification {
    #[serde(rename = "USE_FIXED_PORT")]
    UseFixedPort,
    #[serde(rename = "USE_NAMED_PORT")]
    UseNamedPort,
    #[serde(rename = "USE_SERVING_PORT")]
    UseServingPort,
}

/// HTTPS is the health check configuration of type HTTPS.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum HealthCheckPolicyDefaultConfigHttpsHealthCheckProxyHeader {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "PROXY_V1")]
    ProxyV1,
}

/// TCP is the health check configuration of type TCP.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HealthCheckPolicyDefaultConfigTcpHealthCheck {
    /// The TCP port number for the health check request. Valid values are 1 through 65535.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// Port name as defined in InstanceGroup#NamedPort#name. If both port and portName are defined, port takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portName")]
    pub port_name: Option<String>,
    /// Specifies how port is selected for health checking, can be one of following values: 
    ///  USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. 
    ///  If not specified, Protocol health check follows behavior specified in port and portName fields. If neither Port nor PortName is specified, this defaults to USE_SERVING_PORT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portSpecification")]
    pub port_specification: Option<HealthCheckPolicyDefaultConfigTcpHealthCheckPortSpecification>,
    /// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. If not specified, this defaults to NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyHeader")]
    pub proxy_header: Option<HealthCheckPolicyDefaultConfigTcpHealthCheckProxyHeader>,
    /// The application data to send once the TCP connection has been established. If not specified, this defaults to empty. If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
    /// The bytes to match against the beginning of the response data. If not specified or left empty, any response will indicate health. The response data can only be ASCII.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<String>,
}

/// TCP is the health check configuration of type TCP.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum HealthCheckPolicyDefaultConfigTcpHealthCheckPortSpecification {
    #[serde(rename = "USE_FIXED_PORT")]
    UseFixedPort,
    #[serde(rename = "USE_NAMED_PORT")]
    UseNamedPort,
    #[serde(rename = "USE_SERVING_PORT")]
    UseServingPort,
}

/// TCP is the health check configuration of type TCP.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum HealthCheckPolicyDefaultConfigTcpHealthCheckProxyHeader {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "PROXY_V1")]
    ProxyV1,
}

/// Specifies the type of the healthCheck, either TCP, HTTP, HTTPS, HTTP2 or GRPC. Exactly one of the protocol-specific health check field must be specified, which must match type field. Config contains per protocol (i.e. HTTP, HTTPS, HTTP2, TCP, GRPC) configuration. If not specified, health check type defaults to HTTP.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum HealthCheckPolicyDefaultConfigType {
    #[serde(rename = "TCP")]
    Tcp,
    #[serde(rename = "HTTP")]
    Http,
    #[serde(rename = "HTTPS")]
    Https,
    #[serde(rename = "HTTP2")]
    Http2,
    #[serde(rename = "GRPC")]
    Grpc,
}

/// LogConfig configures logging on this health check.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HealthCheckPolicyDefaultLogConfig {
    /// Enabled indicates whether or not to export health check logs. If not specified, this defaults to false, which means health check logging will be disabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// TargetRef identifies an API object to apply policy to.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HealthCheckPolicyTargetRef {
    /// Group is the group of the target resource.
    pub group: String,
    /// Kind is kind of the target resource.
    pub kind: String,
    /// Name is the name of the target resource.
    pub name: String,
    /// Namespace is the namespace of the referent. When unspecified, the local namespace is inferred. Even when policy targets a resource in a different namespace, it MUST only apply to traffic originating from the same namespace as the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Status defines the current state of HealthCheckPolicy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HealthCheckPolicyStatus {
    /// Conditions describe the current conditions of the HealthCheckPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
}

