// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/GoogleCloudPlatform/gke-networking-recipes/networking.gke.io/v1/gcpbackendpolicies.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// Spec defines the desired state of GCPBackendPolicy.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "networking.gke.io", version = "v1", kind = "GCPBackendPolicy", plural = "gcpbackendpolicies")]
#[kube(namespaced)]
#[kube(status = "GCPBackendPolicyStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct GCPBackendPolicySpec {
    /// Default defines default policy configuration for the targeted resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default: Option<GCPBackendPolicyDefault>,
    /// TargetRef identifies an API object to apply policy to.
    #[serde(rename = "targetRef")]
    pub target_ref: GCPBackendPolicyTargetRef,
}

/// Default defines default policy configuration for the targeted resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GCPBackendPolicyDefault {
    /// ConnectionDraining contains configuration for connection draining
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionDraining")]
    pub connection_draining: Option<GCPBackendPolicyDefaultConnectionDraining>,
    /// IAP contains the configurations for Identity-Aware Proxy. Identity-Aware Proxy manages access control policies for backend services associated with a HTTPRoute, so they can be accessed only by authenticated users or applications with correct Identity and Access Management (IAM) role. See https://cloud.google.com/compute/docs/reference/rest/v1/backendServices
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iap: Option<GCPBackendPolicyDefaultIap>,
    /// LoggingConfig contains configuration for logging.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logging: Option<GCPBackendPolicyDefaultLogging>,
    /// SecurityPolicy is a reference to a GCP Cloud Armor SecurityPolicy resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityPolicy")]
    pub security_policy: Option<String>,
    /// SessionAffinityConfig contains configuration for stickiness parameters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionAffinity")]
    pub session_affinity: Option<GCPBackendPolicyDefaultSessionAffinity>,
    /// TimeoutSec is a BackendService parameter. See https://cloud.google.com/compute/docs/reference/rest/v1/backendServices. If the field is omitted, a default value (30s) will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSec")]
    pub timeout_sec: Option<i64>,
}

/// ConnectionDraining contains configuration for connection draining
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GCPBackendPolicyDefaultConnectionDraining {
    /// DrainingTimeoutSec is a BackendService parameter. It is used during removal of VMs from instance groups. This guarantees that for the specified time all existing connections to a VM will remain untouched, but no new connections will be accepted. Set timeout to zero to disable connection draining. Enable the feature by specifying a timeout of up to one hour. If the field is omitted, a default value (0s) will be used. See https://cloud.google.com/compute/docs/reference/rest/v1/backendServices
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "drainingTimeoutSec")]
    pub draining_timeout_sec: Option<i64>,
}

/// IAP contains the configurations for Identity-Aware Proxy. Identity-Aware Proxy manages access control policies for backend services associated with a HTTPRoute, so they can be accessed only by authenticated users or applications with correct Identity and Access Management (IAM) role. See https://cloud.google.com/compute/docs/reference/rest/v1/backendServices
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GCPBackendPolicyDefaultIap {
    /// ClientID is the OAuth2 client ID to use for the authentication flow. See iap.oauth2ClientId in https://cloud.google.com/compute/docs/reference/rest/v1/backendServices ClientID must be set if Enabled is set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientID")]
    pub client_id: Option<String>,
    /// Enabled denotes whether the serving infrastructure will authenticate and authorize all incoming requests. If true, the ClientID and Oauth2ClientSecret fields must be non-empty. If not specified, this defaults to false, which means Identity-Aware Proxy is disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Oauth2ClientSecret contains the OAuth2 client secret to use for the authentication flow. See https://cloud.google.com/compute/docs/reference/rest/v1/backendServices Oauth2ClientSecret must be set if Enabled is set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauth2ClientSecret")]
    pub oauth2_client_secret: Option<GCPBackendPolicyDefaultIapOauth2ClientSecret>,
}

/// Oauth2ClientSecret contains the OAuth2 client secret to use for the authentication flow. See https://cloud.google.com/compute/docs/reference/rest/v1/backendServices Oauth2ClientSecret must be set if Enabled is set to true.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GCPBackendPolicyDefaultIapOauth2ClientSecret {
    /// Name is the reference to the secret resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// LoggingConfig contains configuration for logging.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GCPBackendPolicyDefaultLogging {
    /// Enabled denotes whether to enable logging for the load balancer traffic served by this backend service. If not specified, this defaults to false, which means logging is disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// This field can only be specified if logging is enabled for this backend service. The value of the field must be in range [0, 1e6]. This is converted to a floating point value in the range [0, 1] by dividing by 1e6 for use with the GCE api and interpreted as the proportion of requests that will be logged. By default all requests will be logged.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampleRate")]
    pub sample_rate: Option<i32>,
}

/// SessionAffinityConfig contains configuration for stickiness parameters.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GCPBackendPolicyDefaultSessionAffinity {
    /// CookieTTLSec specifies the lifetime of cookies in seconds. This setting requires GENERATED_COOKIE or HTTP_COOKIE session affinity. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value is two weeks (1,209,600).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cookieTtlSec")]
    pub cookie_ttl_sec: Option<i64>,
    /// Type specifies the type of session affinity to use. If not specified, this defaults to NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<GCPBackendPolicyDefaultSessionAffinityType>,
}

/// SessionAffinityConfig contains configuration for stickiness parameters.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum GCPBackendPolicyDefaultSessionAffinityType {
    #[serde(rename = "CLIENT_IP")]
    ClientIp,
    #[serde(rename = "CLIENT_IP_PORT_PROTO")]
    ClientIpPortProto,
    #[serde(rename = "CLIENT_IP_PROTO")]
    ClientIpProto,
    #[serde(rename = "GENERATED_COOKIE")]
    GeneratedCookie,
    #[serde(rename = "HEADER_FIELD")]
    HeaderField,
    #[serde(rename = "HTTP_COOKIE")]
    HttpCookie,
    #[serde(rename = "NONE")]
    None,
}

/// TargetRef identifies an API object to apply policy to.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GCPBackendPolicyTargetRef {
    /// Group is the group of the target resource.
    pub group: String,
    /// Kind is kind of the target resource.
    pub kind: String,
    /// Name is the name of the target resource.
    pub name: String,
    /// Namespace is the namespace of the referent. When unspecified, the local namespace is inferred. Even when policy targets a resource in a different namespace, it MUST only apply to traffic originating from the same namespace as the policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Status defines the current state of GCPBackendPolicy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct GCPBackendPolicyStatus {
    /// Conditions describe the current conditions of the GCPBackendPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
}

