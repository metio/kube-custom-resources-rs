// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/nginxinc/kubernetes-ingress/k8s.nginx.org/v1/virtualservers.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// VirtualServerSpec is the spec of the VirtualServer resource.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "k8s.nginx.org", version = "v1", kind = "VirtualServer", plural = "virtualservers")]
#[kube(namespaced)]
#[kube(status = "VirtualServerStatus")]
#[kube(schema = "disabled")]
pub struct VirtualServerSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dos: Option<String>,
    /// ExternalDNS defines externaldns sub-resource of a virtual server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalDNS")]
    pub external_dns: Option<VirtualServerExternalDns>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gunzip: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http-snippets")]
    pub http_snippets: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressClassName")]
    pub ingress_class_name: Option<String>,
    /// InternalRoute allows for the configuration of internal routing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalRoute")]
    pub internal_route: Option<bool>,
    /// VirtualServerListener references a custom http and/or https listener defined in GlobalConfiguration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub listener: Option<VirtualServerListener>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policies: Option<Vec<VirtualServerPolicies>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub routes: Option<Vec<VirtualServerRoutes>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "server-snippets")]
    pub server_snippets: Option<String>,
    /// TLS defines TLS configuration for a VirtualServer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<VirtualServerTls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upstreams: Option<Vec<VirtualServerUpstreams>>,
}

/// ExternalDNS defines externaldns sub-resource of a virtual server.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerExternalDns {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// Labels stores labels defined for the Endpoint
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// ProviderSpecific stores provider specific config
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerSpecific")]
    pub provider_specific: Option<Vec<VirtualServerExternalDnsProviderSpecific>>,
    /// TTL for the record
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordTTL")]
    pub record_ttl: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordType")]
    pub record_type: Option<String>,
}

/// ProviderSpecificProperty defines specific property
/// for using with ExternalDNS sub-resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerExternalDnsProviderSpecific {
    /// Name of the property
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value of the property
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// VirtualServerListener references a custom http and/or https listener defined in GlobalConfiguration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerListener {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub https: Option<String>,
}

/// PolicyReference references a policy by name and an optional namespace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerPolicies {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Route defines a route.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutes {
    /// Action defines an action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<VirtualServerRoutesAction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dos: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorPages")]
    pub error_pages: Option<Vec<VirtualServerRoutesErrorPages>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "location-snippets")]
    pub location_snippets: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matches: Option<Vec<VirtualServerRoutesMatches>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policies: Option<Vec<VirtualServerRoutesPolicies>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub route: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub splits: Option<Vec<VirtualServerRoutesSplits>>,
}

/// Action defines an action.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesAction {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pass: Option<String>,
    /// ActionProxy defines a proxy in an Action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<VirtualServerRoutesActionProxy>,
    /// ActionRedirect defines a redirect in an Action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redirect: Option<VirtualServerRoutesActionRedirect>,
    /// ActionReturn defines a return in an Action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "return")]
    pub r#return: Option<VirtualServerRoutesActionReturn>,
}

/// ActionProxy defines a proxy in an Action.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesActionProxy {
    /// ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<VirtualServerRoutesActionProxyRequestHeaders>,
    /// ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeaders")]
    pub response_headers: Option<VirtualServerRoutesActionProxyResponseHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rewritePath")]
    pub rewrite_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upstream: Option<String>,
}

/// ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesActionProxyRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pass: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub set: Option<Vec<VirtualServerRoutesActionProxyRequestHeadersSet>>,
}

/// Header defines an HTTP Header.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesActionProxyRequestHeadersSet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesActionProxyResponseHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<VirtualServerRoutesActionProxyResponseHeadersAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hide: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ignore: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pass: Option<Vec<String>>,
}

/// AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesActionProxyResponseHeadersAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub always: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ActionRedirect defines a redirect in an Action.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesActionRedirect {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// ActionReturn defines a return in an Action.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesActionReturn {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// ErrorPage defines an ErrorPage in a Route.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesErrorPages {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub codes: Option<Vec<i64>>,
    /// ErrorPageRedirect defines a redirect for an ErrorPage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redirect: Option<VirtualServerRoutesErrorPagesRedirect>,
    /// ErrorPageReturn defines a return for an ErrorPage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "return")]
    pub r#return: Option<VirtualServerRoutesErrorPagesReturn>,
}

/// ErrorPageRedirect defines a redirect for an ErrorPage.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesErrorPagesRedirect {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// ErrorPageReturn defines a return for an ErrorPage.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesErrorPagesReturn {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServerRoutesErrorPagesReturnHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Header defines an HTTP Header.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesErrorPagesReturnHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Match defines a match.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesMatches {
    /// Action defines an action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<VirtualServerRoutesMatchesAction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<VirtualServerRoutesMatchesConditions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub splits: Option<Vec<VirtualServerRoutesMatchesSplits>>,
}

/// Action defines an action.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesMatchesAction {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pass: Option<String>,
    /// ActionProxy defines a proxy in an Action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<VirtualServerRoutesMatchesActionProxy>,
    /// ActionRedirect defines a redirect in an Action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redirect: Option<VirtualServerRoutesMatchesActionRedirect>,
    /// ActionReturn defines a return in an Action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "return")]
    pub r#return: Option<VirtualServerRoutesMatchesActionReturn>,
}

/// ActionProxy defines a proxy in an Action.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesMatchesActionProxy {
    /// ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<VirtualServerRoutesMatchesActionProxyRequestHeaders>,
    /// ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeaders")]
    pub response_headers: Option<VirtualServerRoutesMatchesActionProxyResponseHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rewritePath")]
    pub rewrite_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upstream: Option<String>,
}

/// ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesMatchesActionProxyRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pass: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub set: Option<Vec<VirtualServerRoutesMatchesActionProxyRequestHeadersSet>>,
}

/// Header defines an HTTP Header.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesMatchesActionProxyRequestHeadersSet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesMatchesActionProxyResponseHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<VirtualServerRoutesMatchesActionProxyResponseHeadersAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hide: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ignore: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pass: Option<Vec<String>>,
}

/// AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesMatchesActionProxyResponseHeadersAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub always: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ActionRedirect defines a redirect in an Action.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesMatchesActionRedirect {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// ActionReturn defines a return in an Action.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesMatchesActionReturn {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Condition defines a condition in a MatchRule.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesMatchesConditions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub argument: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cookie: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variable: Option<String>,
}

/// Split defines a split.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesMatchesSplits {
    /// Action defines an action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<VirtualServerRoutesMatchesSplitsAction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i64>,
}

/// Action defines an action.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesMatchesSplitsAction {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pass: Option<String>,
    /// ActionProxy defines a proxy in an Action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<VirtualServerRoutesMatchesSplitsActionProxy>,
    /// ActionRedirect defines a redirect in an Action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redirect: Option<VirtualServerRoutesMatchesSplitsActionRedirect>,
    /// ActionReturn defines a return in an Action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "return")]
    pub r#return: Option<VirtualServerRoutesMatchesSplitsActionReturn>,
}

/// ActionProxy defines a proxy in an Action.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesMatchesSplitsActionProxy {
    /// ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<VirtualServerRoutesMatchesSplitsActionProxyRequestHeaders>,
    /// ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeaders")]
    pub response_headers: Option<VirtualServerRoutesMatchesSplitsActionProxyResponseHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rewritePath")]
    pub rewrite_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upstream: Option<String>,
}

/// ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesMatchesSplitsActionProxyRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pass: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub set: Option<Vec<VirtualServerRoutesMatchesSplitsActionProxyRequestHeadersSet>>,
}

/// Header defines an HTTP Header.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesMatchesSplitsActionProxyRequestHeadersSet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesMatchesSplitsActionProxyResponseHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<VirtualServerRoutesMatchesSplitsActionProxyResponseHeadersAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hide: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ignore: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pass: Option<Vec<String>>,
}

/// AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesMatchesSplitsActionProxyResponseHeadersAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub always: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ActionRedirect defines a redirect in an Action.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesMatchesSplitsActionRedirect {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// ActionReturn defines a return in an Action.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesMatchesSplitsActionReturn {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// PolicyReference references a policy by name and an optional namespace.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesPolicies {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Split defines a split.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesSplits {
    /// Action defines an action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<VirtualServerRoutesSplitsAction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i64>,
}

/// Action defines an action.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesSplitsAction {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pass: Option<String>,
    /// ActionProxy defines a proxy in an Action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proxy: Option<VirtualServerRoutesSplitsActionProxy>,
    /// ActionRedirect defines a redirect in an Action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redirect: Option<VirtualServerRoutesSplitsActionRedirect>,
    /// ActionReturn defines a return in an Action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "return")]
    pub r#return: Option<VirtualServerRoutesSplitsActionReturn>,
}

/// ActionProxy defines a proxy in an Action.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesSplitsActionProxy {
    /// ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestHeaders")]
    pub request_headers: Option<VirtualServerRoutesSplitsActionProxyRequestHeaders>,
    /// ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseHeaders")]
    pub response_headers: Option<VirtualServerRoutesSplitsActionProxyResponseHeaders>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rewritePath")]
    pub rewrite_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upstream: Option<String>,
}

/// ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesSplitsActionProxyRequestHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pass: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub set: Option<Vec<VirtualServerRoutesSplitsActionProxyRequestHeadersSet>>,
}

/// Header defines an HTTP Header.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesSplitsActionProxyRequestHeadersSet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesSplitsActionProxyResponseHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<VirtualServerRoutesSplitsActionProxyResponseHeadersAdd>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hide: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ignore: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pass: Option<Vec<String>>,
}

/// AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesSplitsActionProxyResponseHeadersAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub always: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ActionRedirect defines a redirect in an Action.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesSplitsActionRedirect {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// ActionReturn defines a return in an Action.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerRoutesSplitsActionReturn {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// TLS defines TLS configuration for a VirtualServer.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerTls {
    /// CertManager defines a cert manager config for a TLS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cert-manager")]
    pub cert_manager: Option<VirtualServerTlsCertManager>,
    /// TLSRedirect defines a redirect for a TLS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redirect: Option<VirtualServerTlsRedirect>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
}

/// CertManager defines a cert manager config for a TLS.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerTlsCertManager {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cluster-issuer")]
    pub cluster_issuer: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "common-name")]
    pub common_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "issue-temp-cert")]
    pub issue_temp_cert: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "issuer-group")]
    pub issuer_group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "issuer-kind")]
    pub issuer_kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "renew-before")]
    pub renew_before: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub usages: Option<String>,
}

/// TLSRedirect defines a redirect for a TLS.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerTlsRedirect {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basedOn")]
    pub based_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
}

/// Upstream defines an upstream.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerUpstreams {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backup: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupPort")]
    pub backup_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buffer-size")]
    pub buffer_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffering: Option<bool>,
    /// UpstreamBuffers defines Buffer Configuration for an Upstream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buffers: Option<VirtualServerUpstreamsBuffers>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "client-max-body-size")]
    pub client_max_body_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connect-timeout")]
    pub connect_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fail-timeout")]
    pub fail_timeout: Option<String>,
    /// HealthCheck defines the parameters for active Upstream HealthChecks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheck")]
    pub health_check: Option<VirtualServerUpstreamsHealthCheck>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keepalive: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lb-method")]
    pub lb_method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "max-conns")]
    pub max_conns: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "max-fails")]
    pub max_fails: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "next-upstream")]
    pub next_upstream: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "next-upstream-timeout")]
    pub next_upstream_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "next-upstream-tries")]
    pub next_upstream_tries: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ntlm: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// UpstreamQueue defines Queue Configuration for an Upstream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue: Option<VirtualServerUpstreamsQueue>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "read-timeout")]
    pub read_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "send-timeout")]
    pub send_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
    /// SessionCookie defines the parameters for session persistence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionCookie")]
    pub session_cookie: Option<VirtualServerUpstreamsSessionCookie>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slow-start")]
    pub slow_start: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subselector: Option<BTreeMap<String, String>>,
    /// UpstreamTLS defines a TLS configuration for an Upstream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<VirtualServerUpstreamsTls>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "use-cluster-ip")]
    pub use_cluster_ip: Option<bool>,
}

/// UpstreamBuffers defines Buffer Configuration for an Upstream.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerUpstreamsBuffers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub number: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
}

/// HealthCheck defines the parameters for active Upstream HealthChecks.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerUpstreamsHealthCheck {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connect-timeout")]
    pub connect_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fails: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcService")]
    pub grpc_service: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcStatus")]
    pub grpc_status: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<VirtualServerUpstreamsHealthCheckHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jitter: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keepalive-time")]
    pub keepalive_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mandatory: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persistent: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "read-timeout")]
    pub read_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "send-timeout")]
    pub send_timeout: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusMatch")]
    pub status_match: Option<String>,
    /// UpstreamTLS defines a TLS configuration for an Upstream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<VirtualServerUpstreamsHealthCheckTls>,
}

/// Header defines an HTTP Header.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerUpstreamsHealthCheckHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// UpstreamTLS defines a TLS configuration for an Upstream.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerUpstreamsHealthCheckTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
}

/// UpstreamQueue defines Queue Configuration for an Upstream.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerUpstreamsQueue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// SessionCookie defines the parameters for session persistence.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerUpstreamsSessionCookie {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expires: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpOnly")]
    pub http_only: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub samesite: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
}

/// UpstreamTLS defines a TLS configuration for an Upstream.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerUpstreamsTls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
}

/// VirtualServerStatus defines the status for the VirtualServer resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalEndpoints")]
    pub external_endpoints: Option<Vec<VirtualServerStatusExternalEndpoints>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

/// ExternalEndpoint defines the IP/ Hostname and ports used to connect to this resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct VirtualServerStatusExternalEndpoints {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ip: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<String>,
}

