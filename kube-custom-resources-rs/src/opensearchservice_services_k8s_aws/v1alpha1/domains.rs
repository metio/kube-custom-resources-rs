// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/aws-controllers-k8s/opensearchservice-controller/opensearchservice.services.k8s.aws/v1alpha1/domains.yaml --derive=Default --derive=PartialEq
// kopium version: 0.17.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// DomainSpec defines the desired state of Domain.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "opensearchservice.services.k8s.aws", version = "v1alpha1", kind = "Domain", plural = "domains")]
#[kube(namespaced)]
#[kube(status = "DomainStatus")]
#[kube(schema = "disabled")]
pub struct DomainSpec {
    /// IAM access policy as a JSON-formatted string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessPolicies")]
    pub access_policies: Option<String>,
    /// Option to allow references to indices in an HTTP request body. Must be false
    /// when configuring access to individual sub-resources. By default, the value
    /// is true. See Advanced cluster parameters (http://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options)
    /// for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedOptions")]
    pub advanced_options: Option<BTreeMap<String, String>>,
    /// Specifies advanced security options.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedSecurityOptions")]
    pub advanced_security_options: Option<DomainAdvancedSecurityOptions>,
    /// Specifies Auto-Tune options.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoTuneOptions")]
    pub auto_tune_options: Option<DomainAutoTuneOptions>,
    /// Configuration options for a domain. Specifies the instance type and number
    /// of instances in the domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterConfig")]
    pub cluster_config: Option<DomainClusterConfig>,
    /// Options to specify the Cognito user and identity pools for OpenSearch Dashboards
    /// authentication. For more information, see Configuring Amazon Cognito authentication
    /// for OpenSearch Dashboards (http://docs.aws.amazon.com/opensearch-service/latest/developerguide/cognito-auth.html).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cognitoOptions")]
    pub cognito_options: Option<DomainCognitoOptions>,
    /// Options to specify configurations that will be applied to the domain endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainEndpointOptions")]
    pub domain_endpoint_options: Option<DomainDomainEndpointOptions>,
    /// Options to enable, disable, and specify the type and size of EBS storage
    /// volumes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsOptions")]
    pub ebs_options: Option<DomainEbsOptions>,
    /// Options for encryption of data at rest.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionAtRestOptions")]
    pub encryption_at_rest_options: Option<DomainEncryptionAtRestOptions>,
    /// String of format Elasticsearch_X.Y or OpenSearch_X.Y to specify the engine
    /// version for the Amazon OpenSearch Service domain. For example, "OpenSearch_1.0"
    /// or "Elasticsearch_7.9". For more information, see Creating and managing Amazon
    /// OpenSearch Service domains (http://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomains).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineVersion")]
    pub engine_version: Option<String>,
    /// Map of LogType and LogPublishingOption, each containing options to publish
    /// a given type of OpenSearch log.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logPublishingOptions")]
    pub log_publishing_options: Option<BTreeMap<String, DomainLogPublishingOptions>>,
    /// The name of the Amazon OpenSearch Service domain you're creating. Domain
    /// names are unique across the domains owned by an account within an AWS region.
    /// Domain names must start with a lowercase letter and can contain the following
    /// characters: a-z (lowercase), 0-9, and - (hyphen).
    pub name: String,
    /// Node-to-node encryption options.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeToNodeEncryptionOptions")]
    pub node_to_node_encryption_options: Option<DomainNodeToNodeEncryptionOptions>,
    /// A list of Tag added during domain creation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<DomainTags>>,
    /// Options to specify the subnets and security groups for a VPC endpoint. For
    /// more information, see Launching your Amazon OpenSearch Service domains using
    /// a VPC (http://docs.aws.amazon.com/opensearch-service/latest/developerguide/vpc.html).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcOptions")]
    pub vpc_options: Option<DomainVpcOptions>,
}

/// Specifies advanced security options.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainAdvancedSecurityOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "anonymousAuthEnabled")]
    pub anonymous_auth_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalUserDatabaseEnabled")]
    pub internal_user_database_enabled: Option<bool>,
    /// Credentials for the master user: username and password, ARN, or both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUserOptions")]
    pub master_user_options: Option<DomainAdvancedSecurityOptionsMasterUserOptions>,
    /// The SAML application configuration for the domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sAMLOptions")]
    pub s_aml_options: Option<DomainAdvancedSecurityOptionsSAmlOptions>,
}

/// Credentials for the master user: username and password, ARN, or both.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainAdvancedSecurityOptionsMasterUserOptions {
    /// The Amazon Resource Name (ARN) of the domain. See Identifiers for IAM Entities
    /// (http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html) in Using AWS
    /// Identity and Access Management for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUserARN")]
    pub master_user_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUserName")]
    pub master_user_name: Option<String>,
    /// SecretKeyReference combines a k8s corev1.SecretReference with a
    /// specific key within the referred-to Secret
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUserPassword")]
    pub master_user_password: Option<DomainAdvancedSecurityOptionsMasterUserOptionsMasterUserPassword>,
}

/// SecretKeyReference combines a k8s corev1.SecretReference with a
/// specific key within the referred-to Secret
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainAdvancedSecurityOptionsMasterUserOptionsMasterUserPassword {
    /// Key is the key within the secret
    pub key: String,
    /// name is unique within a namespace to reference a secret resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// namespace defines the space within which the secret name must be unique.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// The SAML application configuration for the domain.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainAdvancedSecurityOptionsSAmlOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The SAML identity povider's information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub idp: Option<DomainAdvancedSecurityOptionsSAmlOptionsIdp>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterBackendRole")]
    pub master_backend_role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUserName")]
    pub master_user_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rolesKey")]
    pub roles_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionTimeoutMinutes")]
    pub session_timeout_minutes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectKey")]
    pub subject_key: Option<String>,
}

/// The SAML identity povider's information.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainAdvancedSecurityOptionsSAmlOptionsIdp {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entityID")]
    pub entity_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataContent")]
    pub metadata_content: Option<String>,
}

/// Specifies Auto-Tune options.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainAutoTuneOptions {
    /// The Auto-Tune desired state. Valid values are ENABLED and DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredState")]
    pub desired_state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceSchedules")]
    pub maintenance_schedules: Option<Vec<DomainAutoTuneOptionsMaintenanceSchedules>>,
}

/// Specifies the Auto-Tune maintenance schedule. See Auto-Tune for Amazon OpenSearch
/// Service (https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html)
/// for more information.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainAutoTuneOptionsMaintenanceSchedules {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cronExpressionForRecurrence")]
    pub cron_expression_for_recurrence: Option<String>,
    /// The maintenance schedule duration: duration value and duration unit. See
    /// Auto-Tune for Amazon OpenSearch Service (https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html)
    /// for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<DomainAutoTuneOptionsMaintenanceSchedulesDuration>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startAt")]
    pub start_at: Option<String>,
}

/// The maintenance schedule duration: duration value and duration unit. See
/// Auto-Tune for Amazon OpenSearch Service (https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html)
/// for more information.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainAutoTuneOptionsMaintenanceSchedulesDuration {
    /// The unit of a maintenance schedule duration. Valid value is HOUR. See Auto-Tune
    /// for Amazon OpenSearch Service (https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html)
    /// for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    /// Integer to specify the value of a maintenance schedule duration. See Auto-Tune
    /// for Amazon OpenSearch Service (https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html)
    /// for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<i64>,
}

/// Configuration options for a domain. Specifies the instance type and number
/// of instances in the domain.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainClusterConfig {
    /// Specifies the configuration for cold storage options such as enabled
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coldStorageOptions")]
    pub cold_storage_options: Option<DomainClusterConfigColdStorageOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dedicatedMasterCount")]
    pub dedicated_master_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dedicatedMasterEnabled")]
    pub dedicated_master_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dedicatedMasterType")]
    pub dedicated_master_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceCount")]
    pub instance_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    pub instance_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "warmCount")]
    pub warm_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "warmEnabled")]
    pub warm_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "warmType")]
    pub warm_type: Option<String>,
    /// The zone awareness configuration for the domain cluster, such as the number
    /// of availability zones.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "zoneAwarenessConfig")]
    pub zone_awareness_config: Option<DomainClusterConfigZoneAwarenessConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "zoneAwarenessEnabled")]
    pub zone_awareness_enabled: Option<bool>,
}

/// Specifies the configuration for cold storage options such as enabled
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainClusterConfigColdStorageOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The zone awareness configuration for the domain cluster, such as the number
/// of availability zones.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainClusterConfigZoneAwarenessConfig {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZoneCount")]
    pub availability_zone_count: Option<i64>,
}

/// Options to specify the Cognito user and identity pools for OpenSearch Dashboards
/// authentication. For more information, see Configuring Amazon Cognito authentication
/// for OpenSearch Dashboards (http://docs.aws.amazon.com/opensearch-service/latest/developerguide/cognito-auth.html).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainCognitoOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityPoolID")]
    pub identity_pool_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleARN")]
    pub role_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolID")]
    pub user_pool_id: Option<String>,
}

/// Options to specify configurations that will be applied to the domain endpoint.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainDomainEndpointOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customEndpoint")]
    pub custom_endpoint: Option<String>,
    /// The Amazon Resource Name (ARN) of the domain. See Identifiers for IAM Entities
    /// (http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html) in Using AWS
    /// Identity and Access Management for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customEndpointCertificateARN")]
    pub custom_endpoint_certificate_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customEndpointEnabled")]
    pub custom_endpoint_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforceHTTPS")]
    pub enforce_https: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsSecurityPolicy")]
    pub tls_security_policy: Option<String>,
}

/// Options to enable, disable, and specify the type and size of EBS storage
/// volumes.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainEbsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsEnabled")]
    pub ebs_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iops: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub throughput: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSize")]
    pub volume_size: Option<i64>,
    /// The type of EBS volume, standard, gp2, gp3 or io1. See Configuring EBS-based
    /// Storage (http://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-createupdatedomains.html#opensearch-createdomain-configure-ebs)
    /// for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeType")]
    pub volume_type: Option<String>,
}

/// Options for encryption of data at rest.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainEncryptionAtRestOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyID")]
    pub kms_key_id: Option<String>,
}

/// Map of LogType and LogPublishingOption, each containing options to publish
/// a given type of OpenSearch log.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainLogPublishingOptions {
    /// ARN of the Cloudwatch log group to publish logs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudWatchLogsLogGroupARN")]
    pub cloud_watch_logs_log_group_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Node-to-node encryption options.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainNodeToNodeEncryptionOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// A key value pair for a resource tag.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainTags {
    /// A string of length from 1 to 128 characters that specifies the key for a
    /// tag. Tag keys must be unique for the domain to which they're attached.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// A string of length from 0 to 256 characters that specifies the value for
    /// a tag. Tag values can be null and don't have to be unique in a tag set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Options to specify the subnets and security groups for a VPC endpoint. For
/// more information, see Launching your Amazon OpenSearch Service domains using
/// a VPC (http://docs.aws.amazon.com/opensearch-service/latest/developerguide/vpc.html).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainVpcOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIDs")]
    pub security_group_i_ds: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIDs")]
    pub subnet_i_ds: Option<Vec<String>>,
}

/// DomainStatus defines the observed state of Domain
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainStatus {
    /// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
    /// that is used to contain resource sync state, account ownership,
    /// constructed ARN for the resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ackResourceMetadata")]
    pub ack_resource_metadata: Option<DomainStatusAckResourceMetadata>,
    /// Specifies change details of the domain configuration change.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "changeProgressDetails")]
    pub change_progress_details: Option<DomainStatusChangeProgressDetails>,
    /// All CRS managed by ACK have a common `Status.Conditions` member that
    /// contains a collection of `ackv1alpha1.Condition` objects that describe
    /// the various terminal states of the CR and its backend AWS service API
    /// resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// The domain creation status. True if the creation of a domain is complete.
    /// False if domain creation is still in progress.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<bool>,
    /// The domain deletion status. True if a delete request has been received for
    /// the domain but resource cleanup is still in progress. False if the domain
    /// has not been deleted. Once domain deletion is complete, the status of the
    /// domain is no longer returned.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    /// The unique identifier for the specified domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainID")]
    pub domain_id: Option<String>,
    /// The domain endpoint that you use to submit index and search requests.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// Map containing the domain endpoints used to submit index and search requests.
    /// Example key, value: 'vpc','vpc-endpoint-h2dsd34efgyghrtguk5gt6j2foh4.us-east-1.es.amazonaws.com'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<BTreeMap<String, String>>,
    /// The status of the domain configuration. True if Amazon OpenSearch Service
    /// is processing configuration changes. False if the configuration is active.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processing: Option<bool>,
    /// The current status of the domain's service software.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSoftwareOptions")]
    pub service_software_options: Option<DomainStatusServiceSoftwareOptions>,
    /// The status of the SnapshotOptions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotOptions")]
    pub snapshot_options: Option<DomainStatusSnapshotOptions>,
    /// The status of a domain version upgrade. True if Amazon OpenSearch Service
    /// is undergoing a version upgrade. False if the configuration is active.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upgradeProcessing")]
    pub upgrade_processing: Option<bool>,
}

/// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
/// that is used to contain resource sync state, account ownership,
/// constructed ARN for the resource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainStatusAckResourceMetadata {
    /// ARN is the Amazon Resource Name for the resource. This is a
    /// globally-unique identifier and is set only by the ACK service controller
    /// once the controller has orchestrated the creation of the resource OR
    /// when it has verified that an "adopted" resource (a resource where the
    /// ARN annotation was set by the Kubernetes user on the CR) exists and
    /// matches the supplied CR's Spec field values.
    /// TODO(vijat@): Find a better strategy for resources that do not have ARN in CreateOutputResponse
    /// https://github.com/aws/aws-controllers-k8s/issues/270
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// OwnerAccountID is the AWS Account ID of the account that owns the
    /// backend AWS service API resource.
    #[serde(rename = "ownerAccountID")]
    pub owner_account_id: String,
    /// Region is the AWS region in which the resource exists or will exist.
    pub region: String,
}

/// Specifies change details of the domain configuration change.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainStatusChangeProgressDetails {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "changeID")]
    pub change_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}

/// The current status of the domain's service software.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainStatusServiceSoftwareOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "automatedUpdateDate")]
    pub automated_update_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cancellable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "currentVersion")]
    pub current_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "newVersion")]
    pub new_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "optionalDeployment")]
    pub optional_deployment: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateAvailable")]
    pub update_available: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateStatus")]
    pub update_status: Option<String>,
}

/// The status of the SnapshotOptions.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DomainStatusSnapshotOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "automatedSnapshotStartHour")]
    pub automated_snapshot_start_hour: Option<i64>,
}

