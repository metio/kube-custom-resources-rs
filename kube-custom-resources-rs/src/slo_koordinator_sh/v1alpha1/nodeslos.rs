// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/koordinator-sh/koordinator/slo.koordinator.sh/v1alpha1/nodeslos.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;

/// NodeSLOSpec defines the desired state of NodeSLO
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "slo.koordinator.sh", version = "v1alpha1", kind = "NodeSLO", plural = "nodeslos")]
#[kube(status = "NodeSLOStatus")]
#[kube(schema = "disabled")]
pub struct NodeSLOSpec {
    /// CPU Burst Strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuBurstStrategy")]
    pub cpu_burst_strategy: Option<NodeSLOCpuBurstStrategy>,
    /// Third party extensions for NodeSLO
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extensions: Option<BTreeMap<String, serde_json::Value>>,
    /// QoS management for out-of-band applications
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostApplications")]
    pub host_applications: Option<Vec<NodeSLOHostApplications>>,
    /// QoS config strategy for pods of different qos-class
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceQOSStrategy")]
    pub resource_qos_strategy: Option<NodeSLOResourceQosStrategy>,
    /// BE pods will be limited if node resource usage overload
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceUsedThresholdWithBE")]
    pub resource_used_threshold_with_be: Option<NodeSLOResourceUsedThresholdWithBe>,
    /// node global system config
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "systemStrategy")]
    pub system_strategy: Option<NodeSLOSystemStrategy>,
}

/// CPU Burst Strategy
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOCpuBurstStrategy {
    /// pod cfs quota scale up ceil percentage, default = 300 (300%)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cfsQuotaBurstPercent")]
    pub cfs_quota_burst_percent: Option<i64>,
    /// specifies a period of time for pod can use at burst, default = -1 (unlimited)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cfsQuotaBurstPeriodSeconds")]
    pub cfs_quota_burst_period_seconds: Option<i64>,
    /// cpu burst percentage for setting cpu.cfs_burst_us, legal range: [0, 10000], default as 1000 (1000%)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuBurstPercent")]
    pub cpu_burst_percent: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
    /// scale down cfs quota if node cpu overload, default = 50
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sharePoolThresholdPercent")]
    pub share_pool_threshold_percent: Option<i64>,
}

/// HostApplicationSpec describes the QoS management for out-out-band applications on node
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOHostApplications {
    /// Optional, defines the host cgroup configuration, use default if not specified according to priority and qos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cgroupPath")]
    pub cgroup_path: Option<NodeSLOHostApplicationsCgroupPath>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Priority class of the application
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<String>,
    /// QoS class of the application
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qos: Option<String>,
    /// QoS Strategy of host application
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<NodeSLOHostApplicationsStrategy>,
}

/// Optional, defines the host cgroup configuration, use default if not specified according to priority and qos
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOHostApplicationsCgroupPath {
    /// cgroup base dir, the format is various across cgroup drivers
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub base: Option<String>,
    /// cgroup parent path under base dir
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parentDir")]
    pub parent_dir: Option<String>,
    /// cgroup relative path under parent dir
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "relativePath")]
    pub relative_path: Option<String>,
}

/// QoS Strategy of host application
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOHostApplicationsStrategy {
}

/// QoS config strategy for pods of different qos-class
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategy {
    /// ResourceQOS for BE pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "beClass")]
    pub be_class: Option<NodeSLOResourceQosStrategyBeClass>,
    /// ResourceQOS for root cgroup.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cgroupRoot")]
    pub cgroup_root: Option<NodeSLOResourceQosStrategyCgroupRoot>,
    /// ResourceQOS for LS pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lsClass")]
    pub ls_class: Option<NodeSLOResourceQosStrategyLsClass>,
    /// ResourceQOS for LSR pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lsrClass")]
    pub lsr_class: Option<NodeSLOResourceQosStrategyLsrClass>,
    /// Policies of pod QoS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policies: Option<NodeSLOResourceQosStrategyPolicies>,
    /// ResourceQOS for system pods
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "systemClass")]
    pub system_class: Option<NodeSLOResourceQosStrategySystemClass>,
}

/// ResourceQOS for BE pods.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyBeClass {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blkioQOS")]
    pub blkio_qos: Option<NodeSLOResourceQosStrategyBeClassBlkioQos>,
    /// CPUQOSCfg stores node-level config of cpu qos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuQOS")]
    pub cpu_qos: Option<NodeSLOResourceQosStrategyBeClassCpuQos>,
    /// MemoryQOSCfg stores node-level config of memory qos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryQOS")]
    pub memory_qos: Option<NodeSLOResourceQosStrategyBeClassMemoryQos>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkQOS")]
    pub network_qos: Option<NodeSLOResourceQosStrategyBeClassNetworkQos>,
    /// ResctrlQOSCfg stores node-level config of resctrl qos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resctrlQOS")]
    pub resctrl_qos: Option<NodeSLOResourceQosStrategyBeClassResctrlQos>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyBeClassBlkioQos {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocks: Option<Vec<NodeSLOResourceQosStrategyBeClassBlkioQosBlocks>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyBeClassBlkioQosBlocks {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ioCfg")]
    pub io_cfg: Option<NodeSLOResourceQosStrategyBeClassBlkioQosBlocksIoCfg>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyBeClassBlkioQosBlocksIoCfg {
    /// This field is used to set the weight of a sub-group. Default value: 100. Valid values: 1 to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ioWeightPercent")]
    pub io_weight_percent: Option<i64>,
    /// Throttling of throughput The value is set to 0, which indicates that the feature is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readBPS")]
    pub read_bps: Option<i64>,
    /// Throttling of IOPS The value is set to 0, which indicates that the feature is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readIOPS")]
    pub read_iops: Option<i64>,
    /// Configure the weight-based throttling feature of blk-iocost Only used for RootClass After blk-iocost is enabled, the kernel calculates the proportion of requests that exceed the read or write latency threshold out of all requests. When the proportion is greater than the read or write latency percentile (95%), the kernel considers the disk to be saturated and reduces the rate at which requests are sent to the disk. the read latency threshold. Unit: microseconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readLatency")]
    pub read_latency: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeBPS")]
    pub write_bps: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeIOPS")]
    pub write_iops: Option<i64>,
    /// the write latency threshold. Unit: microseconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeLatency")]
    pub write_latency: Option<i64>,
}

/// CPUQOSCfg stores node-level config of cpu qos
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyBeClassCpuQos {
    /// whether pods of the QoS class can expel the cgroup idle pods at the SMT-level. default = false If set to true, pods of this QoS will use a dedicated core sched group for noise clean with the SchedIdle pods. NOTE: It takes effect if cpuPolicy = "coreSched".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreExpeller")]
    pub core_expeller: Option<bool>,
    /// Enable indicates whether the cpu qos is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// group identity value for pods, default = 0 NOTE: It takes effect if cpuPolicy = "groupIdentity".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupIdentity")]
    pub group_identity: Option<i64>,
    /// cpu.idle value for pods, default = 0. `1` means using SCHED_IDLE. CGroup Idle (introduced since mainline Linux 5.15): https://lore.kernel.org/lkml/162971078674.25758.15464079371945307825.tip-bot2@tip-bot2/#r NOTE: It takes effect if cpuPolicy = "coreSched".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedIdle")]
    pub sched_idle: Option<i64>,
}

/// MemoryQOSCfg stores node-level config of memory qos
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyBeClassMemoryQos {
    /// Enable indicates whether the memory qos is enabled (default: false). This field is used for node-level control, while pod-level configuration is done with MemoryQOS and `Policy` instead of an `Enable` option. Please view the differences between MemoryQOSCfg and PodMemoryQOSConfig structs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// LowLimitPercent specifies the lowLimitFactor percentage to calculate `memory.low`, which TRIES BEST protecting memory from global reclamation when memory usage does not exceed the low limit unless no unprotected memcg can be reclaimed. NOTE: `memory.low` should be larger than `memory.min`. If spec.requests.memory == spec.limits.memory, pod `memory.low` and `memory.high` become invalid, while `memory.wmark_ratio` is still in effect. Close: 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lowLimitPercent")]
    pub low_limit_percent: Option<i64>,
    /// memcg qos If enabled, memcg qos will be set by the agent, where some fields are implicitly calculated from pod spec. 1. `memory.min` := spec.requests.memory * minLimitFactor / 100 (use 0 if requests.memory is not set) 2. `memory.low` := spec.requests.memory * lowLimitFactor / 100 (use 0 if requests.memory is not set) 3. `memory.limit_in_bytes` := spec.limits.memory (set $node.allocatable.memory if limits.memory is not set) 4. `memory.high` := floor[(spec.requests.memory + throttlingFactor / 100 * (memory.limit_in_bytes or node allocatable memory - spec.requests.memory))/pageSize] * pageSize MinLimitPercent specifies the minLimitFactor percentage to calculate `memory.min`, which protects memory from global reclamation when memory usage does not exceed the min limit. Close: 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minLimitPercent")]
    pub min_limit_percent: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oomKillGroup")]
    pub oom_kill_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
    /// TODO: enhance the usages of oom priority and oom kill group
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityEnable")]
    pub priority_enable: Option<i64>,
    /// ThrottlingPercent specifies the throttlingFactor percentage to calculate `memory.high` with pod memory.limits or node allocatable memory, which triggers memcg direct reclamation when memory usage exceeds. Lower the factor brings more heavier reclaim pressure. Close: 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throttlingPercent")]
    pub throttling_percent: Option<i64>,
    /// wmark_min_adj (Anolis OS required) WmarkMinAdj specifies `memory.wmark_min_adj` which adjusts per-memcg threshold for global memory reclamation. Lower the factor brings later reclamation. The adjustment uses different formula for different value range. [-25, 0)：global_wmark_min' = global_wmark_min + (global_wmark_min - 0) * wmarkMinAdj (0, 50]：global_wmark_min' = global_wmark_min + (global_wmark_low - global_wmark_min) * wmarkMinAdj Close: [LSR:0, LS:0, BE:0]. Recommended: [LSR:-25, LS:-25, BE:50].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wmarkMinAdj")]
    pub wmark_min_adj: Option<i64>,
    /// wmark_ratio (Anolis OS required) Async memory reclamation is triggered when cgroup memory usage exceeds `memory.wmark_high` and the reclamation stops when usage is below `memory.wmark_low`. Basically, `memory.wmark_high` := min(memory.high, memory.limit_in_bytes) * memory.memory.wmark_ratio `memory.wmark_low` := min(memory.high, memory.limit_in_bytes) * (memory.wmark_ratio - memory.wmark_scale_factor) WmarkRatio specifies `memory.wmark_ratio` that help calculate `memory.wmark_high`, which triggers async memory reclamation when memory usage exceeds. Close: 0. Recommended: 95.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wmarkRatio")]
    pub wmark_ratio: Option<i64>,
    /// WmarkScalePermill specifies `memory.wmark_scale_factor` that helps calculate `memory.wmark_low`, which stops async memory reclamation when memory usage belows. Close: 50. Recommended: 20.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wmarkScalePermill")]
    pub wmark_scale_permill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyBeClassNetworkQos {
    /// EgressLimit describes the maximum network bandwidth can be used in the egress direction, unit: bps(bytes per second), two expressions are supported，int and string, int: percentage based on total bandwidth，valid in 0-100 string: a specific network bandwidth value, eg: 50M.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egressLimit")]
    pub egress_limit: Option<IntOrString>,
    /// EgressRequest describes the minimum network bandwidth guaranteed in the egress direction. unit: bps(bytes per second), two expressions are supported，int and string, int: percentage based on total bandwidth，valid in 0-100 string: a specific network bandwidth value, eg: 50M.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egressRequest")]
    pub egress_request: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// IngressLimit describes the maximum network bandwidth can be used in the ingress direction, unit: bps(bytes per second), two expressions are supported，int and string, int: percentage based on total bandwidth，valid in 0-100 string: a specific network bandwidth value, eg: 50M.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressLimit")]
    pub ingress_limit: Option<IntOrString>,
    /// IngressRequest describes the minimum network bandwidth guaranteed in the ingress direction. unit: bps(bytes per second), two expressions are supported，int and string, int: percentage based on total bandwidth，valid in 0-100 string: a specific network bandwidth value, eg: 50M.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressRequest")]
    pub ingress_request: Option<IntOrString>,
}

/// ResctrlQOSCfg stores node-level config of resctrl qos
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyBeClassResctrlQos {
    /// LLC available range end for pods by percentage
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catRangeEndPercent")]
    pub cat_range_end_percent: Option<i64>,
    /// LLC available range start for pods by percentage
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catRangeStartPercent")]
    pub cat_range_start_percent: Option<i64>,
    /// Enable indicates whether the resctrl qos is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// MBA percent
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mbaPercent")]
    pub mba_percent: Option<i64>,
}

/// ResourceQOS for root cgroup.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyCgroupRoot {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blkioQOS")]
    pub blkio_qos: Option<NodeSLOResourceQosStrategyCgroupRootBlkioQos>,
    /// CPUQOSCfg stores node-level config of cpu qos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuQOS")]
    pub cpu_qos: Option<NodeSLOResourceQosStrategyCgroupRootCpuQos>,
    /// MemoryQOSCfg stores node-level config of memory qos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryQOS")]
    pub memory_qos: Option<NodeSLOResourceQosStrategyCgroupRootMemoryQos>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkQOS")]
    pub network_qos: Option<NodeSLOResourceQosStrategyCgroupRootNetworkQos>,
    /// ResctrlQOSCfg stores node-level config of resctrl qos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resctrlQOS")]
    pub resctrl_qos: Option<NodeSLOResourceQosStrategyCgroupRootResctrlQos>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyCgroupRootBlkioQos {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocks: Option<Vec<NodeSLOResourceQosStrategyCgroupRootBlkioQosBlocks>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyCgroupRootBlkioQosBlocks {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ioCfg")]
    pub io_cfg: Option<NodeSLOResourceQosStrategyCgroupRootBlkioQosBlocksIoCfg>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyCgroupRootBlkioQosBlocksIoCfg {
    /// This field is used to set the weight of a sub-group. Default value: 100. Valid values: 1 to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ioWeightPercent")]
    pub io_weight_percent: Option<i64>,
    /// Throttling of throughput The value is set to 0, which indicates that the feature is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readBPS")]
    pub read_bps: Option<i64>,
    /// Throttling of IOPS The value is set to 0, which indicates that the feature is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readIOPS")]
    pub read_iops: Option<i64>,
    /// Configure the weight-based throttling feature of blk-iocost Only used for RootClass After blk-iocost is enabled, the kernel calculates the proportion of requests that exceed the read or write latency threshold out of all requests. When the proportion is greater than the read or write latency percentile (95%), the kernel considers the disk to be saturated and reduces the rate at which requests are sent to the disk. the read latency threshold. Unit: microseconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readLatency")]
    pub read_latency: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeBPS")]
    pub write_bps: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeIOPS")]
    pub write_iops: Option<i64>,
    /// the write latency threshold. Unit: microseconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeLatency")]
    pub write_latency: Option<i64>,
}

/// CPUQOSCfg stores node-level config of cpu qos
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyCgroupRootCpuQos {
    /// whether pods of the QoS class can expel the cgroup idle pods at the SMT-level. default = false If set to true, pods of this QoS will use a dedicated core sched group for noise clean with the SchedIdle pods. NOTE: It takes effect if cpuPolicy = "coreSched".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreExpeller")]
    pub core_expeller: Option<bool>,
    /// Enable indicates whether the cpu qos is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// group identity value for pods, default = 0 NOTE: It takes effect if cpuPolicy = "groupIdentity".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupIdentity")]
    pub group_identity: Option<i64>,
    /// cpu.idle value for pods, default = 0. `1` means using SCHED_IDLE. CGroup Idle (introduced since mainline Linux 5.15): https://lore.kernel.org/lkml/162971078674.25758.15464079371945307825.tip-bot2@tip-bot2/#r NOTE: It takes effect if cpuPolicy = "coreSched".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedIdle")]
    pub sched_idle: Option<i64>,
}

/// MemoryQOSCfg stores node-level config of memory qos
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyCgroupRootMemoryQos {
    /// Enable indicates whether the memory qos is enabled (default: false). This field is used for node-level control, while pod-level configuration is done with MemoryQOS and `Policy` instead of an `Enable` option. Please view the differences between MemoryQOSCfg and PodMemoryQOSConfig structs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// LowLimitPercent specifies the lowLimitFactor percentage to calculate `memory.low`, which TRIES BEST protecting memory from global reclamation when memory usage does not exceed the low limit unless no unprotected memcg can be reclaimed. NOTE: `memory.low` should be larger than `memory.min`. If spec.requests.memory == spec.limits.memory, pod `memory.low` and `memory.high` become invalid, while `memory.wmark_ratio` is still in effect. Close: 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lowLimitPercent")]
    pub low_limit_percent: Option<i64>,
    /// memcg qos If enabled, memcg qos will be set by the agent, where some fields are implicitly calculated from pod spec. 1. `memory.min` := spec.requests.memory * minLimitFactor / 100 (use 0 if requests.memory is not set) 2. `memory.low` := spec.requests.memory * lowLimitFactor / 100 (use 0 if requests.memory is not set) 3. `memory.limit_in_bytes` := spec.limits.memory (set $node.allocatable.memory if limits.memory is not set) 4. `memory.high` := floor[(spec.requests.memory + throttlingFactor / 100 * (memory.limit_in_bytes or node allocatable memory - spec.requests.memory))/pageSize] * pageSize MinLimitPercent specifies the minLimitFactor percentage to calculate `memory.min`, which protects memory from global reclamation when memory usage does not exceed the min limit. Close: 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minLimitPercent")]
    pub min_limit_percent: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oomKillGroup")]
    pub oom_kill_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
    /// TODO: enhance the usages of oom priority and oom kill group
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityEnable")]
    pub priority_enable: Option<i64>,
    /// ThrottlingPercent specifies the throttlingFactor percentage to calculate `memory.high` with pod memory.limits or node allocatable memory, which triggers memcg direct reclamation when memory usage exceeds. Lower the factor brings more heavier reclaim pressure. Close: 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throttlingPercent")]
    pub throttling_percent: Option<i64>,
    /// wmark_min_adj (Anolis OS required) WmarkMinAdj specifies `memory.wmark_min_adj` which adjusts per-memcg threshold for global memory reclamation. Lower the factor brings later reclamation. The adjustment uses different formula for different value range. [-25, 0)：global_wmark_min' = global_wmark_min + (global_wmark_min - 0) * wmarkMinAdj (0, 50]：global_wmark_min' = global_wmark_min + (global_wmark_low - global_wmark_min) * wmarkMinAdj Close: [LSR:0, LS:0, BE:0]. Recommended: [LSR:-25, LS:-25, BE:50].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wmarkMinAdj")]
    pub wmark_min_adj: Option<i64>,
    /// wmark_ratio (Anolis OS required) Async memory reclamation is triggered when cgroup memory usage exceeds `memory.wmark_high` and the reclamation stops when usage is below `memory.wmark_low`. Basically, `memory.wmark_high` := min(memory.high, memory.limit_in_bytes) * memory.memory.wmark_ratio `memory.wmark_low` := min(memory.high, memory.limit_in_bytes) * (memory.wmark_ratio - memory.wmark_scale_factor) WmarkRatio specifies `memory.wmark_ratio` that help calculate `memory.wmark_high`, which triggers async memory reclamation when memory usage exceeds. Close: 0. Recommended: 95.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wmarkRatio")]
    pub wmark_ratio: Option<i64>,
    /// WmarkScalePermill specifies `memory.wmark_scale_factor` that helps calculate `memory.wmark_low`, which stops async memory reclamation when memory usage belows. Close: 50. Recommended: 20.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wmarkScalePermill")]
    pub wmark_scale_permill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyCgroupRootNetworkQos {
    /// EgressLimit describes the maximum network bandwidth can be used in the egress direction, unit: bps(bytes per second), two expressions are supported，int and string, int: percentage based on total bandwidth，valid in 0-100 string: a specific network bandwidth value, eg: 50M.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egressLimit")]
    pub egress_limit: Option<IntOrString>,
    /// EgressRequest describes the minimum network bandwidth guaranteed in the egress direction. unit: bps(bytes per second), two expressions are supported，int and string, int: percentage based on total bandwidth，valid in 0-100 string: a specific network bandwidth value, eg: 50M.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egressRequest")]
    pub egress_request: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// IngressLimit describes the maximum network bandwidth can be used in the ingress direction, unit: bps(bytes per second), two expressions are supported，int and string, int: percentage based on total bandwidth，valid in 0-100 string: a specific network bandwidth value, eg: 50M.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressLimit")]
    pub ingress_limit: Option<IntOrString>,
    /// IngressRequest describes the minimum network bandwidth guaranteed in the ingress direction. unit: bps(bytes per second), two expressions are supported，int and string, int: percentage based on total bandwidth，valid in 0-100 string: a specific network bandwidth value, eg: 50M.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressRequest")]
    pub ingress_request: Option<IntOrString>,
}

/// ResctrlQOSCfg stores node-level config of resctrl qos
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyCgroupRootResctrlQos {
    /// LLC available range end for pods by percentage
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catRangeEndPercent")]
    pub cat_range_end_percent: Option<i64>,
    /// LLC available range start for pods by percentage
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catRangeStartPercent")]
    pub cat_range_start_percent: Option<i64>,
    /// Enable indicates whether the resctrl qos is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// MBA percent
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mbaPercent")]
    pub mba_percent: Option<i64>,
}

/// ResourceQOS for LS pods.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyLsClass {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blkioQOS")]
    pub blkio_qos: Option<NodeSLOResourceQosStrategyLsClassBlkioQos>,
    /// CPUQOSCfg stores node-level config of cpu qos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuQOS")]
    pub cpu_qos: Option<NodeSLOResourceQosStrategyLsClassCpuQos>,
    /// MemoryQOSCfg stores node-level config of memory qos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryQOS")]
    pub memory_qos: Option<NodeSLOResourceQosStrategyLsClassMemoryQos>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkQOS")]
    pub network_qos: Option<NodeSLOResourceQosStrategyLsClassNetworkQos>,
    /// ResctrlQOSCfg stores node-level config of resctrl qos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resctrlQOS")]
    pub resctrl_qos: Option<NodeSLOResourceQosStrategyLsClassResctrlQos>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyLsClassBlkioQos {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocks: Option<Vec<NodeSLOResourceQosStrategyLsClassBlkioQosBlocks>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyLsClassBlkioQosBlocks {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ioCfg")]
    pub io_cfg: Option<NodeSLOResourceQosStrategyLsClassBlkioQosBlocksIoCfg>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyLsClassBlkioQosBlocksIoCfg {
    /// This field is used to set the weight of a sub-group. Default value: 100. Valid values: 1 to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ioWeightPercent")]
    pub io_weight_percent: Option<i64>,
    /// Throttling of throughput The value is set to 0, which indicates that the feature is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readBPS")]
    pub read_bps: Option<i64>,
    /// Throttling of IOPS The value is set to 0, which indicates that the feature is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readIOPS")]
    pub read_iops: Option<i64>,
    /// Configure the weight-based throttling feature of blk-iocost Only used for RootClass After blk-iocost is enabled, the kernel calculates the proportion of requests that exceed the read or write latency threshold out of all requests. When the proportion is greater than the read or write latency percentile (95%), the kernel considers the disk to be saturated and reduces the rate at which requests are sent to the disk. the read latency threshold. Unit: microseconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readLatency")]
    pub read_latency: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeBPS")]
    pub write_bps: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeIOPS")]
    pub write_iops: Option<i64>,
    /// the write latency threshold. Unit: microseconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeLatency")]
    pub write_latency: Option<i64>,
}

/// CPUQOSCfg stores node-level config of cpu qos
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyLsClassCpuQos {
    /// whether pods of the QoS class can expel the cgroup idle pods at the SMT-level. default = false If set to true, pods of this QoS will use a dedicated core sched group for noise clean with the SchedIdle pods. NOTE: It takes effect if cpuPolicy = "coreSched".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreExpeller")]
    pub core_expeller: Option<bool>,
    /// Enable indicates whether the cpu qos is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// group identity value for pods, default = 0 NOTE: It takes effect if cpuPolicy = "groupIdentity".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupIdentity")]
    pub group_identity: Option<i64>,
    /// cpu.idle value for pods, default = 0. `1` means using SCHED_IDLE. CGroup Idle (introduced since mainline Linux 5.15): https://lore.kernel.org/lkml/162971078674.25758.15464079371945307825.tip-bot2@tip-bot2/#r NOTE: It takes effect if cpuPolicy = "coreSched".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedIdle")]
    pub sched_idle: Option<i64>,
}

/// MemoryQOSCfg stores node-level config of memory qos
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyLsClassMemoryQos {
    /// Enable indicates whether the memory qos is enabled (default: false). This field is used for node-level control, while pod-level configuration is done with MemoryQOS and `Policy` instead of an `Enable` option. Please view the differences between MemoryQOSCfg and PodMemoryQOSConfig structs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// LowLimitPercent specifies the lowLimitFactor percentage to calculate `memory.low`, which TRIES BEST protecting memory from global reclamation when memory usage does not exceed the low limit unless no unprotected memcg can be reclaimed. NOTE: `memory.low` should be larger than `memory.min`. If spec.requests.memory == spec.limits.memory, pod `memory.low` and `memory.high` become invalid, while `memory.wmark_ratio` is still in effect. Close: 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lowLimitPercent")]
    pub low_limit_percent: Option<i64>,
    /// memcg qos If enabled, memcg qos will be set by the agent, where some fields are implicitly calculated from pod spec. 1. `memory.min` := spec.requests.memory * minLimitFactor / 100 (use 0 if requests.memory is not set) 2. `memory.low` := spec.requests.memory * lowLimitFactor / 100 (use 0 if requests.memory is not set) 3. `memory.limit_in_bytes` := spec.limits.memory (set $node.allocatable.memory if limits.memory is not set) 4. `memory.high` := floor[(spec.requests.memory + throttlingFactor / 100 * (memory.limit_in_bytes or node allocatable memory - spec.requests.memory))/pageSize] * pageSize MinLimitPercent specifies the minLimitFactor percentage to calculate `memory.min`, which protects memory from global reclamation when memory usage does not exceed the min limit. Close: 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minLimitPercent")]
    pub min_limit_percent: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oomKillGroup")]
    pub oom_kill_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
    /// TODO: enhance the usages of oom priority and oom kill group
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityEnable")]
    pub priority_enable: Option<i64>,
    /// ThrottlingPercent specifies the throttlingFactor percentage to calculate `memory.high` with pod memory.limits or node allocatable memory, which triggers memcg direct reclamation when memory usage exceeds. Lower the factor brings more heavier reclaim pressure. Close: 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throttlingPercent")]
    pub throttling_percent: Option<i64>,
    /// wmark_min_adj (Anolis OS required) WmarkMinAdj specifies `memory.wmark_min_adj` which adjusts per-memcg threshold for global memory reclamation. Lower the factor brings later reclamation. The adjustment uses different formula for different value range. [-25, 0)：global_wmark_min' = global_wmark_min + (global_wmark_min - 0) * wmarkMinAdj (0, 50]：global_wmark_min' = global_wmark_min + (global_wmark_low - global_wmark_min) * wmarkMinAdj Close: [LSR:0, LS:0, BE:0]. Recommended: [LSR:-25, LS:-25, BE:50].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wmarkMinAdj")]
    pub wmark_min_adj: Option<i64>,
    /// wmark_ratio (Anolis OS required) Async memory reclamation is triggered when cgroup memory usage exceeds `memory.wmark_high` and the reclamation stops when usage is below `memory.wmark_low`. Basically, `memory.wmark_high` := min(memory.high, memory.limit_in_bytes) * memory.memory.wmark_ratio `memory.wmark_low` := min(memory.high, memory.limit_in_bytes) * (memory.wmark_ratio - memory.wmark_scale_factor) WmarkRatio specifies `memory.wmark_ratio` that help calculate `memory.wmark_high`, which triggers async memory reclamation when memory usage exceeds. Close: 0. Recommended: 95.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wmarkRatio")]
    pub wmark_ratio: Option<i64>,
    /// WmarkScalePermill specifies `memory.wmark_scale_factor` that helps calculate `memory.wmark_low`, which stops async memory reclamation when memory usage belows. Close: 50. Recommended: 20.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wmarkScalePermill")]
    pub wmark_scale_permill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyLsClassNetworkQos {
    /// EgressLimit describes the maximum network bandwidth can be used in the egress direction, unit: bps(bytes per second), two expressions are supported，int and string, int: percentage based on total bandwidth，valid in 0-100 string: a specific network bandwidth value, eg: 50M.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egressLimit")]
    pub egress_limit: Option<IntOrString>,
    /// EgressRequest describes the minimum network bandwidth guaranteed in the egress direction. unit: bps(bytes per second), two expressions are supported，int and string, int: percentage based on total bandwidth，valid in 0-100 string: a specific network bandwidth value, eg: 50M.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egressRequest")]
    pub egress_request: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// IngressLimit describes the maximum network bandwidth can be used in the ingress direction, unit: bps(bytes per second), two expressions are supported，int and string, int: percentage based on total bandwidth，valid in 0-100 string: a specific network bandwidth value, eg: 50M.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressLimit")]
    pub ingress_limit: Option<IntOrString>,
    /// IngressRequest describes the minimum network bandwidth guaranteed in the ingress direction. unit: bps(bytes per second), two expressions are supported，int and string, int: percentage based on total bandwidth，valid in 0-100 string: a specific network bandwidth value, eg: 50M.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressRequest")]
    pub ingress_request: Option<IntOrString>,
}

/// ResctrlQOSCfg stores node-level config of resctrl qos
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyLsClassResctrlQos {
    /// LLC available range end for pods by percentage
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catRangeEndPercent")]
    pub cat_range_end_percent: Option<i64>,
    /// LLC available range start for pods by percentage
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catRangeStartPercent")]
    pub cat_range_start_percent: Option<i64>,
    /// Enable indicates whether the resctrl qos is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// MBA percent
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mbaPercent")]
    pub mba_percent: Option<i64>,
}

/// ResourceQOS for LSR pods.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyLsrClass {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blkioQOS")]
    pub blkio_qos: Option<NodeSLOResourceQosStrategyLsrClassBlkioQos>,
    /// CPUQOSCfg stores node-level config of cpu qos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuQOS")]
    pub cpu_qos: Option<NodeSLOResourceQosStrategyLsrClassCpuQos>,
    /// MemoryQOSCfg stores node-level config of memory qos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryQOS")]
    pub memory_qos: Option<NodeSLOResourceQosStrategyLsrClassMemoryQos>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkQOS")]
    pub network_qos: Option<NodeSLOResourceQosStrategyLsrClassNetworkQos>,
    /// ResctrlQOSCfg stores node-level config of resctrl qos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resctrlQOS")]
    pub resctrl_qos: Option<NodeSLOResourceQosStrategyLsrClassResctrlQos>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyLsrClassBlkioQos {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocks: Option<Vec<NodeSLOResourceQosStrategyLsrClassBlkioQosBlocks>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyLsrClassBlkioQosBlocks {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ioCfg")]
    pub io_cfg: Option<NodeSLOResourceQosStrategyLsrClassBlkioQosBlocksIoCfg>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyLsrClassBlkioQosBlocksIoCfg {
    /// This field is used to set the weight of a sub-group. Default value: 100. Valid values: 1 to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ioWeightPercent")]
    pub io_weight_percent: Option<i64>,
    /// Throttling of throughput The value is set to 0, which indicates that the feature is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readBPS")]
    pub read_bps: Option<i64>,
    /// Throttling of IOPS The value is set to 0, which indicates that the feature is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readIOPS")]
    pub read_iops: Option<i64>,
    /// Configure the weight-based throttling feature of blk-iocost Only used for RootClass After blk-iocost is enabled, the kernel calculates the proportion of requests that exceed the read or write latency threshold out of all requests. When the proportion is greater than the read or write latency percentile (95%), the kernel considers the disk to be saturated and reduces the rate at which requests are sent to the disk. the read latency threshold. Unit: microseconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readLatency")]
    pub read_latency: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeBPS")]
    pub write_bps: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeIOPS")]
    pub write_iops: Option<i64>,
    /// the write latency threshold. Unit: microseconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeLatency")]
    pub write_latency: Option<i64>,
}

/// CPUQOSCfg stores node-level config of cpu qos
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyLsrClassCpuQos {
    /// whether pods of the QoS class can expel the cgroup idle pods at the SMT-level. default = false If set to true, pods of this QoS will use a dedicated core sched group for noise clean with the SchedIdle pods. NOTE: It takes effect if cpuPolicy = "coreSched".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreExpeller")]
    pub core_expeller: Option<bool>,
    /// Enable indicates whether the cpu qos is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// group identity value for pods, default = 0 NOTE: It takes effect if cpuPolicy = "groupIdentity".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupIdentity")]
    pub group_identity: Option<i64>,
    /// cpu.idle value for pods, default = 0. `1` means using SCHED_IDLE. CGroup Idle (introduced since mainline Linux 5.15): https://lore.kernel.org/lkml/162971078674.25758.15464079371945307825.tip-bot2@tip-bot2/#r NOTE: It takes effect if cpuPolicy = "coreSched".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedIdle")]
    pub sched_idle: Option<i64>,
}

/// MemoryQOSCfg stores node-level config of memory qos
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyLsrClassMemoryQos {
    /// Enable indicates whether the memory qos is enabled (default: false). This field is used for node-level control, while pod-level configuration is done with MemoryQOS and `Policy` instead of an `Enable` option. Please view the differences between MemoryQOSCfg and PodMemoryQOSConfig structs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// LowLimitPercent specifies the lowLimitFactor percentage to calculate `memory.low`, which TRIES BEST protecting memory from global reclamation when memory usage does not exceed the low limit unless no unprotected memcg can be reclaimed. NOTE: `memory.low` should be larger than `memory.min`. If spec.requests.memory == spec.limits.memory, pod `memory.low` and `memory.high` become invalid, while `memory.wmark_ratio` is still in effect. Close: 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lowLimitPercent")]
    pub low_limit_percent: Option<i64>,
    /// memcg qos If enabled, memcg qos will be set by the agent, where some fields are implicitly calculated from pod spec. 1. `memory.min` := spec.requests.memory * minLimitFactor / 100 (use 0 if requests.memory is not set) 2. `memory.low` := spec.requests.memory * lowLimitFactor / 100 (use 0 if requests.memory is not set) 3. `memory.limit_in_bytes` := spec.limits.memory (set $node.allocatable.memory if limits.memory is not set) 4. `memory.high` := floor[(spec.requests.memory + throttlingFactor / 100 * (memory.limit_in_bytes or node allocatable memory - spec.requests.memory))/pageSize] * pageSize MinLimitPercent specifies the minLimitFactor percentage to calculate `memory.min`, which protects memory from global reclamation when memory usage does not exceed the min limit. Close: 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minLimitPercent")]
    pub min_limit_percent: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oomKillGroup")]
    pub oom_kill_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
    /// TODO: enhance the usages of oom priority and oom kill group
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityEnable")]
    pub priority_enable: Option<i64>,
    /// ThrottlingPercent specifies the throttlingFactor percentage to calculate `memory.high` with pod memory.limits or node allocatable memory, which triggers memcg direct reclamation when memory usage exceeds. Lower the factor brings more heavier reclaim pressure. Close: 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throttlingPercent")]
    pub throttling_percent: Option<i64>,
    /// wmark_min_adj (Anolis OS required) WmarkMinAdj specifies `memory.wmark_min_adj` which adjusts per-memcg threshold for global memory reclamation. Lower the factor brings later reclamation. The adjustment uses different formula for different value range. [-25, 0)：global_wmark_min' = global_wmark_min + (global_wmark_min - 0) * wmarkMinAdj (0, 50]：global_wmark_min' = global_wmark_min + (global_wmark_low - global_wmark_min) * wmarkMinAdj Close: [LSR:0, LS:0, BE:0]. Recommended: [LSR:-25, LS:-25, BE:50].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wmarkMinAdj")]
    pub wmark_min_adj: Option<i64>,
    /// wmark_ratio (Anolis OS required) Async memory reclamation is triggered when cgroup memory usage exceeds `memory.wmark_high` and the reclamation stops when usage is below `memory.wmark_low`. Basically, `memory.wmark_high` := min(memory.high, memory.limit_in_bytes) * memory.memory.wmark_ratio `memory.wmark_low` := min(memory.high, memory.limit_in_bytes) * (memory.wmark_ratio - memory.wmark_scale_factor) WmarkRatio specifies `memory.wmark_ratio` that help calculate `memory.wmark_high`, which triggers async memory reclamation when memory usage exceeds. Close: 0. Recommended: 95.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wmarkRatio")]
    pub wmark_ratio: Option<i64>,
    /// WmarkScalePermill specifies `memory.wmark_scale_factor` that helps calculate `memory.wmark_low`, which stops async memory reclamation when memory usage belows. Close: 50. Recommended: 20.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wmarkScalePermill")]
    pub wmark_scale_permill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyLsrClassNetworkQos {
    /// EgressLimit describes the maximum network bandwidth can be used in the egress direction, unit: bps(bytes per second), two expressions are supported，int and string, int: percentage based on total bandwidth，valid in 0-100 string: a specific network bandwidth value, eg: 50M.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egressLimit")]
    pub egress_limit: Option<IntOrString>,
    /// EgressRequest describes the minimum network bandwidth guaranteed in the egress direction. unit: bps(bytes per second), two expressions are supported，int and string, int: percentage based on total bandwidth，valid in 0-100 string: a specific network bandwidth value, eg: 50M.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egressRequest")]
    pub egress_request: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// IngressLimit describes the maximum network bandwidth can be used in the ingress direction, unit: bps(bytes per second), two expressions are supported，int and string, int: percentage based on total bandwidth，valid in 0-100 string: a specific network bandwidth value, eg: 50M.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressLimit")]
    pub ingress_limit: Option<IntOrString>,
    /// IngressRequest describes the minimum network bandwidth guaranteed in the ingress direction. unit: bps(bytes per second), two expressions are supported，int and string, int: percentage based on total bandwidth，valid in 0-100 string: a specific network bandwidth value, eg: 50M.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressRequest")]
    pub ingress_request: Option<IntOrString>,
}

/// ResctrlQOSCfg stores node-level config of resctrl qos
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyLsrClassResctrlQos {
    /// LLC available range end for pods by percentage
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catRangeEndPercent")]
    pub cat_range_end_percent: Option<i64>,
    /// LLC available range start for pods by percentage
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catRangeStartPercent")]
    pub cat_range_start_percent: Option<i64>,
    /// Enable indicates whether the resctrl qos is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// MBA percent
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mbaPercent")]
    pub mba_percent: Option<i64>,
}

/// Policies of pod QoS.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategyPolicies {
    /// applied policy for the CPU QoS, default = "groupIdentity"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuPolicy")]
    pub cpu_policy: Option<String>,
}

/// ResourceQOS for system pods
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategySystemClass {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blkioQOS")]
    pub blkio_qos: Option<NodeSLOResourceQosStrategySystemClassBlkioQos>,
    /// CPUQOSCfg stores node-level config of cpu qos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuQOS")]
    pub cpu_qos: Option<NodeSLOResourceQosStrategySystemClassCpuQos>,
    /// MemoryQOSCfg stores node-level config of memory qos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryQOS")]
    pub memory_qos: Option<NodeSLOResourceQosStrategySystemClassMemoryQos>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkQOS")]
    pub network_qos: Option<NodeSLOResourceQosStrategySystemClassNetworkQos>,
    /// ResctrlQOSCfg stores node-level config of resctrl qos
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resctrlQOS")]
    pub resctrl_qos: Option<NodeSLOResourceQosStrategySystemClassResctrlQos>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategySystemClassBlkioQos {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocks: Option<Vec<NodeSLOResourceQosStrategySystemClassBlkioQosBlocks>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategySystemClassBlkioQosBlocks {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ioCfg")]
    pub io_cfg: Option<NodeSLOResourceQosStrategySystemClassBlkioQosBlocksIoCfg>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategySystemClassBlkioQosBlocksIoCfg {
    /// This field is used to set the weight of a sub-group. Default value: 100. Valid values: 1 to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ioWeightPercent")]
    pub io_weight_percent: Option<i64>,
    /// Throttling of throughput The value is set to 0, which indicates that the feature is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readBPS")]
    pub read_bps: Option<i64>,
    /// Throttling of IOPS The value is set to 0, which indicates that the feature is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readIOPS")]
    pub read_iops: Option<i64>,
    /// Configure the weight-based throttling feature of blk-iocost Only used for RootClass After blk-iocost is enabled, the kernel calculates the proportion of requests that exceed the read or write latency threshold out of all requests. When the proportion is greater than the read or write latency percentile (95%), the kernel considers the disk to be saturated and reduces the rate at which requests are sent to the disk. the read latency threshold. Unit: microseconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readLatency")]
    pub read_latency: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeBPS")]
    pub write_bps: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeIOPS")]
    pub write_iops: Option<i64>,
    /// the write latency threshold. Unit: microseconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeLatency")]
    pub write_latency: Option<i64>,
}

/// CPUQOSCfg stores node-level config of cpu qos
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategySystemClassCpuQos {
    /// whether pods of the QoS class can expel the cgroup idle pods at the SMT-level. default = false If set to true, pods of this QoS will use a dedicated core sched group for noise clean with the SchedIdle pods. NOTE: It takes effect if cpuPolicy = "coreSched".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreExpeller")]
    pub core_expeller: Option<bool>,
    /// Enable indicates whether the cpu qos is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// group identity value for pods, default = 0 NOTE: It takes effect if cpuPolicy = "groupIdentity".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupIdentity")]
    pub group_identity: Option<i64>,
    /// cpu.idle value for pods, default = 0. `1` means using SCHED_IDLE. CGroup Idle (introduced since mainline Linux 5.15): https://lore.kernel.org/lkml/162971078674.25758.15464079371945307825.tip-bot2@tip-bot2/#r NOTE: It takes effect if cpuPolicy = "coreSched".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedIdle")]
    pub sched_idle: Option<i64>,
}

/// MemoryQOSCfg stores node-level config of memory qos
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategySystemClassMemoryQos {
    /// Enable indicates whether the memory qos is enabled (default: false). This field is used for node-level control, while pod-level configuration is done with MemoryQOS and `Policy` instead of an `Enable` option. Please view the differences between MemoryQOSCfg and PodMemoryQOSConfig structs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// LowLimitPercent specifies the lowLimitFactor percentage to calculate `memory.low`, which TRIES BEST protecting memory from global reclamation when memory usage does not exceed the low limit unless no unprotected memcg can be reclaimed. NOTE: `memory.low` should be larger than `memory.min`. If spec.requests.memory == spec.limits.memory, pod `memory.low` and `memory.high` become invalid, while `memory.wmark_ratio` is still in effect. Close: 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lowLimitPercent")]
    pub low_limit_percent: Option<i64>,
    /// memcg qos If enabled, memcg qos will be set by the agent, where some fields are implicitly calculated from pod spec. 1. `memory.min` := spec.requests.memory * minLimitFactor / 100 (use 0 if requests.memory is not set) 2. `memory.low` := spec.requests.memory * lowLimitFactor / 100 (use 0 if requests.memory is not set) 3. `memory.limit_in_bytes` := spec.limits.memory (set $node.allocatable.memory if limits.memory is not set) 4. `memory.high` := floor[(spec.requests.memory + throttlingFactor / 100 * (memory.limit_in_bytes or node allocatable memory - spec.requests.memory))/pageSize] * pageSize MinLimitPercent specifies the minLimitFactor percentage to calculate `memory.min`, which protects memory from global reclamation when memory usage does not exceed the min limit. Close: 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minLimitPercent")]
    pub min_limit_percent: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oomKillGroup")]
    pub oom_kill_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
    /// TODO: enhance the usages of oom priority and oom kill group
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityEnable")]
    pub priority_enable: Option<i64>,
    /// ThrottlingPercent specifies the throttlingFactor percentage to calculate `memory.high` with pod memory.limits or node allocatable memory, which triggers memcg direct reclamation when memory usage exceeds. Lower the factor brings more heavier reclaim pressure. Close: 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throttlingPercent")]
    pub throttling_percent: Option<i64>,
    /// wmark_min_adj (Anolis OS required) WmarkMinAdj specifies `memory.wmark_min_adj` which adjusts per-memcg threshold for global memory reclamation. Lower the factor brings later reclamation. The adjustment uses different formula for different value range. [-25, 0)：global_wmark_min' = global_wmark_min + (global_wmark_min - 0) * wmarkMinAdj (0, 50]：global_wmark_min' = global_wmark_min + (global_wmark_low - global_wmark_min) * wmarkMinAdj Close: [LSR:0, LS:0, BE:0]. Recommended: [LSR:-25, LS:-25, BE:50].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wmarkMinAdj")]
    pub wmark_min_adj: Option<i64>,
    /// wmark_ratio (Anolis OS required) Async memory reclamation is triggered when cgroup memory usage exceeds `memory.wmark_high` and the reclamation stops when usage is below `memory.wmark_low`. Basically, `memory.wmark_high` := min(memory.high, memory.limit_in_bytes) * memory.memory.wmark_ratio `memory.wmark_low` := min(memory.high, memory.limit_in_bytes) * (memory.wmark_ratio - memory.wmark_scale_factor) WmarkRatio specifies `memory.wmark_ratio` that help calculate `memory.wmark_high`, which triggers async memory reclamation when memory usage exceeds. Close: 0. Recommended: 95.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wmarkRatio")]
    pub wmark_ratio: Option<i64>,
    /// WmarkScalePermill specifies `memory.wmark_scale_factor` that helps calculate `memory.wmark_low`, which stops async memory reclamation when memory usage belows. Close: 50. Recommended: 20.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wmarkScalePermill")]
    pub wmark_scale_permill: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategySystemClassNetworkQos {
    /// EgressLimit describes the maximum network bandwidth can be used in the egress direction, unit: bps(bytes per second), two expressions are supported，int and string, int: percentage based on total bandwidth，valid in 0-100 string: a specific network bandwidth value, eg: 50M.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egressLimit")]
    pub egress_limit: Option<IntOrString>,
    /// EgressRequest describes the minimum network bandwidth guaranteed in the egress direction. unit: bps(bytes per second), two expressions are supported，int and string, int: percentage based on total bandwidth，valid in 0-100 string: a specific network bandwidth value, eg: 50M.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egressRequest")]
    pub egress_request: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// IngressLimit describes the maximum network bandwidth can be used in the ingress direction, unit: bps(bytes per second), two expressions are supported，int and string, int: percentage based on total bandwidth，valid in 0-100 string: a specific network bandwidth value, eg: 50M.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressLimit")]
    pub ingress_limit: Option<IntOrString>,
    /// IngressRequest describes the minimum network bandwidth guaranteed in the ingress direction. unit: bps(bytes per second), two expressions are supported，int and string, int: percentage based on total bandwidth，valid in 0-100 string: a specific network bandwidth value, eg: 50M.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressRequest")]
    pub ingress_request: Option<IntOrString>,
}

/// ResctrlQOSCfg stores node-level config of resctrl qos
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceQosStrategySystemClassResctrlQos {
    /// LLC available range end for pods by percentage
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catRangeEndPercent")]
    pub cat_range_end_percent: Option<i64>,
    /// LLC available range start for pods by percentage
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catRangeStartPercent")]
    pub cat_range_start_percent: Option<i64>,
    /// Enable indicates whether the resctrl qos is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// MBA percent
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mbaPercent")]
    pub mba_percent: Option<i64>,
}

/// BE pods will be limited if node resource usage overload
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOResourceUsedThresholdWithBe {
    /// be.satisfactionRate = be.CPURealLimit/be.CPURequest; be.cpuUsage = be.CPUUsed/be.CPURealLimit if be.satisfactionRate < CPUEvictBESatisfactionLowerPercent/100 && be.usage >= CPUEvictBEUsageThresholdPercent/100, then start to evict pod, and will evict to ${CPUEvictBESatisfactionUpperPercent}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuEvictBESatisfactionLowerPercent")]
    pub cpu_evict_be_satisfaction_lower_percent: Option<i64>,
    /// be.satisfactionRate = be.CPURealLimit/be.CPURequest if be.satisfactionRate > CPUEvictBESatisfactionUpperPercent/100, then stop to evict.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuEvictBESatisfactionUpperPercent")]
    pub cpu_evict_be_satisfaction_upper_percent: Option<i64>,
    /// if be.cpuUsage >= CPUEvictBEUsageThresholdPercent/100, then start to calculate the resources need to be released.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuEvictBEUsageThresholdPercent")]
    pub cpu_evict_be_usage_threshold_percent: Option<i64>,
    /// CPUEvictPolicy defines the policy for the BECPUEvict feature. Default: `evictByRealLimit`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuEvictPolicy")]
    pub cpu_evict_policy: Option<String>,
    /// when avg(cpuusage) > CPUEvictThresholdPercent, will start to evict pod by cpu, and avg(cpuusage) is calculated based on the most recent CPUEvictTimeWindowSeconds data
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuEvictTimeWindowSeconds")]
    pub cpu_evict_time_window_seconds: Option<i64>,
    /// CPUSuppressPolicy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuSuppressPolicy")]
    pub cpu_suppress_policy: Option<String>,
    /// cpu suppress threshold percentage (0,100), default = 65
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuSuppressThresholdPercent")]
    pub cpu_suppress_threshold_percent: Option<i64>,
    /// whether the strategy is enabled, default = false
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// lower: memory release util usage under MemoryEvictLowerPercent, default = MemoryEvictThresholdPercent - 2
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryEvictLowerPercent")]
    pub memory_evict_lower_percent: Option<i64>,
    /// upper: memory evict threshold percentage (0,100), default = 70
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryEvictThresholdPercent")]
    pub memory_evict_threshold_percent: Option<i64>,
}

/// node global system config
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOSystemStrategy {
    /// /sys/kernel/mm/memcg_reaper/reap_background
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memcgReapBackGround")]
    pub memcg_reap_back_ground: Option<i64>,
    /// for /proc/sys/vm/min_free_kbytes, min_free_kbytes = minFreeKbytesFactor * nodeTotalMemory /10000
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minFreeKbytesFactor")]
    pub min_free_kbytes_factor: Option<i64>,
    /// TotalNetworkBandwidth indicates the overall network bandwidth, cluster manager can set this field, and default value taken from /sys/class/net/${NIC_NAME}/speed, unit: Mbps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalNetworkBandwidth")]
    pub total_network_bandwidth: Option<IntOrString>,
    /// /proc/sys/vm/watermark_scale_factor
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "watermarkScaleFactor")]
    pub watermark_scale_factor: Option<i64>,
}

/// NodeSLOStatus defines the observed state of NodeSLO
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeSLOStatus {
}

