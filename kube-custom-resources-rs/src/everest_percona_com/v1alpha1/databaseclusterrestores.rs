// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/percona/everest-operator/everest.percona.com/v1alpha1/databaseclusterrestores.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// DatabaseClusterRestoreSpec defines the desired state of DatabaseClusterRestore.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "everest.percona.com", version = "v1alpha1", kind = "DatabaseClusterRestore", plural = "databaseclusterrestores")]
#[kube(namespaced)]
#[kube(status = "DatabaseClusterRestoreStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct DatabaseClusterRestoreSpec {
    /// DataSource defines a data source for restoration.
    #[serde(rename = "dataSource")]
    pub data_source: DatabaseClusterRestoreDataSource,
    /// DBClusterName defines the cluster name to restore.
    #[serde(rename = "dbClusterName")]
    pub db_cluster_name: String,
}

/// DataSource defines a data source for restoration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseClusterRestoreDataSource {
    /// BackupSource is the backup source to restore from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupSource")]
    pub backup_source: Option<DatabaseClusterRestoreDataSourceBackupSource>,
    /// DBClusterBackupName is the name of the DB cluster backup to restore from
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbClusterBackupName")]
    pub db_cluster_backup_name: Option<String>,
    /// PITR is the point-in-time recovery configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pitr: Option<DatabaseClusterRestoreDataSourcePitr>,
}

/// BackupSource is the backup source to restore from
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseClusterRestoreDataSourceBackupSource {
    /// BackupStorageName is the name of the BackupStorage used for backups.
    #[serde(rename = "backupStorageName")]
    pub backup_storage_name: String,
    /// Path is the path to the backup file/directory.
    pub path: String,
}

/// PITR is the point-in-time recovery configuration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseClusterRestoreDataSourcePitr {
    /// Date is the UTC date to recover to. The accepted format: "2006-01-02T15:04:05Z".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    /// Type is the type of recovery.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<DatabaseClusterRestoreDataSourcePitrType>,
}

/// PITR is the point-in-time recovery configuration
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DatabaseClusterRestoreDataSourcePitrType {
    #[serde(rename = "date")]
    Date,
    #[serde(rename = "latest")]
    Latest,
}

/// DatabaseClusterRestoreStatus defines the observed state of DatabaseClusterRestore.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DatabaseClusterRestoreStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub completed: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// RestoreState represents state of restoration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

