// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/aws-controllers-k8s/sqs-controller/sqs.services.k8s.aws/v1alpha1/queues.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// QueueSpec defines the desired state of Queue.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "sqs.services.k8s.aws", version = "v1alpha1", kind = "Queue", plural = "queues")]
#[kube(namespaced)]
#[kube(status = "QueueStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct QueueSpec {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentBasedDeduplication")]
    pub content_based_deduplication: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delaySeconds")]
    pub delay_seconds: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fifoQueue")]
    pub fifo_queue: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsDataKeyReusePeriodSeconds")]
    pub kms_data_key_reuse_period_seconds: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsMasterKeyID")]
    pub kms_master_key_id: Option<String>,
    /// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference
    /// type to provide more user friendly syntax for references using 'from' field
    /// Ex:
    /// APIIDRef:
    /// 
    /// 
    /// 	from:
    /// 	  name: my-api
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsMasterKeyRef")]
    pub kms_master_key_ref: Option<QueueKmsMasterKeyRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumMessageSize")]
    pub maximum_message_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageRetentionPeriod")]
    pub message_retention_period: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
    /// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference
    /// type to provide more user friendly syntax for references using 'from' field
    /// Ex:
    /// APIIDRef:
    /// 
    /// 
    /// 	from:
    /// 	  name: my-api
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyRef")]
    pub policy_ref: Option<QueuePolicyRef>,
    #[serde(rename = "queueName")]
    pub queue_name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "receiveMessageWaitTimeSeconds")]
    pub receive_message_wait_time_seconds: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redriveAllowPolicy")]
    pub redrive_allow_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redrivePolicy")]
    pub redrive_policy: Option<String>,
    /// Add cost allocation tags to the specified Amazon SQS queue. For an overview,
    /// see Tagging Your Amazon SQS Queues (https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html)
    /// in the Amazon SQS Developer Guide.
    /// 
    /// 
    /// When you use queue tags, keep the following guidelines in mind:
    /// 
    /// 
    ///    * Adding more than 50 tags to a queue isn't recommended.
    /// 
    /// 
    ///    * Tags don't have any semantic meaning. Amazon SQS interprets tags as
    ///    character strings.
    /// 
    /// 
    ///    * Tags are case-sensitive.
    /// 
    /// 
    ///    * A new tag with a key identical to that of an existing tag overwrites
    ///    the existing tag.
    /// 
    /// 
    /// For a full list of tag restrictions, see Quotas related to queues (https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues)
    /// in the Amazon SQS Developer Guide.
    /// 
    /// 
    /// To be able to tag a queue on creation, you must have the sqs:CreateQueue
    /// and sqs:TagQueue permissions.
    /// 
    /// 
    /// Cross-account permissions don't apply to this action. For more information,
    /// see Grant cross-account permissions to a role and a username (https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name)
    /// in the Amazon SQS Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "visibilityTimeout")]
    pub visibility_timeout: Option<String>,
}

/// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference
/// type to provide more user friendly syntax for references using 'from' field
/// Ex:
/// APIIDRef:
/// 
/// 
/// 	from:
/// 	  name: my-api
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct QueueKmsMasterKeyRef {
    /// AWSResourceReference provides all the values necessary to reference another
    /// k8s resource for finding the identifier(Id/ARN/Name)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<QueueKmsMasterKeyRefFrom>,
}

/// AWSResourceReference provides all the values necessary to reference another
/// k8s resource for finding the identifier(Id/ARN/Name)
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct QueueKmsMasterKeyRefFrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference
/// type to provide more user friendly syntax for references using 'from' field
/// Ex:
/// APIIDRef:
/// 
/// 
/// 	from:
/// 	  name: my-api
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct QueuePolicyRef {
    /// AWSResourceReference provides all the values necessary to reference another
    /// k8s resource for finding the identifier(Id/ARN/Name)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<QueuePolicyRefFrom>,
}

/// AWSResourceReference provides all the values necessary to reference another
/// k8s resource for finding the identifier(Id/ARN/Name)
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct QueuePolicyRefFrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// QueueStatus defines the observed state of Queue
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct QueueStatus {
    /// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
    /// that is used to contain resource sync state, account ownership,
    /// constructed ARN for the resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ackResourceMetadata")]
    pub ack_resource_metadata: Option<QueueStatusAckResourceMetadata>,
    /// All CRS managed by ACK have a common `Status.Conditions` member that
    /// contains a collection of `ackv1alpha1.Condition` objects that describe
    /// the various terminal states of the CR and its backend AWS service API
    /// resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queueARN")]
    pub queue_arn: Option<String>,
    /// The URL of the created Amazon SQS queue.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queueURL")]
    pub queue_url: Option<String>,
}

/// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
/// that is used to contain resource sync state, account ownership,
/// constructed ARN for the resource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct QueueStatusAckResourceMetadata {
    /// ARN is the Amazon Resource Name for the resource. This is a
    /// globally-unique identifier and is set only by the ACK service controller
    /// once the controller has orchestrated the creation of the resource OR
    /// when it has verified that an "adopted" resource (a resource where the
    /// ARN annotation was set by the Kubernetes user on the CR) exists and
    /// matches the supplied CR's Spec field values.
    /// TODO(vijat@): Find a better strategy for resources that do not have ARN in CreateOutputResponse
    /// https://github.com/aws/aws-controllers-k8s/issues/270
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// OwnerAccountID is the AWS Account ID of the account that owns the
    /// backend AWS service API resource.
    #[serde(rename = "ownerAccountID")]
    pub owner_account_id: String,
    /// Region is the AWS region in which the resource exists or will exist.
    pub region: String,
}

