// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/api/authorization.openshift.io/v1/rolebindingrestrictions.yaml --derive=Default --derive=PartialEq
// kopium version: 0.17.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// Spec defines the matcher.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "authorization.openshift.io", version = "v1", kind = "RoleBindingRestriction", plural = "rolebindingrestrictions")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
pub struct RoleBindingRestrictionSpec {
    /// GroupRestriction matches against group subjects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grouprestriction: Option<RoleBindingRestrictionGrouprestriction>,
    /// ServiceAccountRestriction matches against service-account subjects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub serviceaccountrestriction: Option<RoleBindingRestrictionServiceaccountrestriction>,
    /// UserRestriction matches against user subjects.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub userrestriction: Option<RoleBindingRestrictionUserrestriction>,
}

/// GroupRestriction matches against group subjects.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RoleBindingRestrictionGrouprestriction {
    /// Groups is a list of groups used to match against an individual user's groups. If the user is a member of one of the whitelisted groups, the user is allowed to be bound to a role.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<String>>,
    /// Selectors specifies a list of label selectors over group labels.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<RoleBindingRestrictionGrouprestrictionLabels>>,
}

/// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RoleBindingRestrictionGrouprestrictionLabels {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<RoleBindingRestrictionGrouprestrictionLabelsMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RoleBindingRestrictionGrouprestrictionLabelsMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// ServiceAccountRestriction matches against service-account subjects.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RoleBindingRestrictionServiceaccountrestriction {
    /// Namespaces specifies a list of literal namespace names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    /// ServiceAccounts specifies a list of literal service-account names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub serviceaccounts: Option<Vec<RoleBindingRestrictionServiceaccountrestrictionServiceaccounts>>,
}

/// ServiceAccountReference specifies a service account and namespace by their names.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RoleBindingRestrictionServiceaccountrestrictionServiceaccounts {
    /// Name is the name of the service account.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace is the namespace of the service account.  Service accounts from inside the whitelisted namespaces are allowed to be bound to roles.  If Namespace is empty, then the namespace of the RoleBindingRestriction in which the ServiceAccountReference is embedded is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// UserRestriction matches against user subjects.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RoleBindingRestrictionUserrestriction {
    /// Groups specifies a list of literal group names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<String>>,
    /// Selectors specifies a list of label selectors over user labels.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<RoleBindingRestrictionUserrestrictionLabels>>,
    /// Users specifies a list of literal user names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<String>>,
}

/// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RoleBindingRestrictionUserrestrictionLabels {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<RoleBindingRestrictionUserrestrictionLabelsMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct RoleBindingRestrictionUserrestrictionLabelsMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

