// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/api/samples.operator.openshift.io/v1/configs.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// ConfigSpec contains the desired configuration and state for the Samples Operator, controlling various behavior around the imagestreams and templates it creates/updates in the openshift namespace.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "samples.operator.openshift.io", version = "v1", kind = "Config", plural = "configs")]
#[kube(status = "ConfigStatus")]
#[kube(schema = "disabled")]
pub struct ConfigSpec {
    /// architectures determine which hardware architecture(s) to install, where x86_64, ppc64le, and s390x are the only supported choices currently.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub architectures: Option<Vec<String>>,
    /// managementState is top level on/off type of switch for all operators. When "Managed", this operator processes config and manipulates the samples accordingly. When "Unmanaged", this operator ignores any updates to the resources it watches. When "Removed", it reacts that same wasy as it does if the Config object is deleted, meaning any ImageStreams or Templates it manages (i.e. it honors the skipped lists) and the registry secret are deleted, along with the ConfigMap in the operator's namespace that represents the last config used to manipulate the samples,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementState")]
    pub management_state: Option<String>,
    /// samplesRegistry allows for the specification of which registry is accessed by the ImageStreams for their image content.  Defaults on the content in https://github.com/openshift/library that are pulled into this github repository, but based on our pulling only ocp content it typically defaults to registry.redhat.io.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "samplesRegistry")]
    pub samples_registry: Option<String>,
    /// skippedImagestreams specifies names of image streams that should NOT be created/updated.  Admins can use this to allow them to delete content they don’t want.  They will still have to manually delete the content but the operator will not recreate(or update) anything listed here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skippedImagestreams")]
    pub skipped_imagestreams: Option<Vec<String>>,
    /// skippedTemplates specifies names of templates that should NOT be created/updated.  Admins can use this to allow them to delete content they don’t want.  They will still have to manually delete the content but the operator will not recreate(or update) anything listed here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skippedTemplates")]
    pub skipped_templates: Option<Vec<String>>,
}

/// ConfigStatus contains the actual configuration in effect, as well as various details that describe the state of the Samples Operator.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ConfigStatus {
    /// architectures determine which hardware architecture(s) to install, where x86_64 and ppc64le are the supported choices.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub architectures: Option<Vec<String>>,
    /// conditions represents the available maintenance status of the sample imagestreams and templates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<ConfigStatusConditions>>,
    /// managementState reflects the current operational status of the on/off switch for the operator.  This operator compares the ManagementState as part of determining that we are turning the operator back on (i.e. "Managed") when it was previously "Unmanaged".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementState")]
    pub management_state: Option<String>,
    /// samplesRegistry allows for the specification of which registry is accessed by the ImageStreams for their image content.  Defaults on the content in https://github.com/openshift/library that are pulled into this github repository, but based on our pulling only ocp content it typically defaults to registry.redhat.io.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "samplesRegistry")]
    pub samples_registry: Option<String>,
    /// skippedImagestreams specifies names of image streams that should NOT be created/updated.  Admins can use this to allow them to delete content they don’t want.  They will still have to manually delete the content but the operator will not recreate(or update) anything listed here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skippedImagestreams")]
    pub skipped_imagestreams: Option<Vec<String>>,
    /// skippedTemplates specifies names of templates that should NOT be created/updated.  Admins can use this to allow them to delete content they don’t want.  They will still have to manually delete the content but the operator will not recreate(or update) anything listed here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skippedTemplates")]
    pub skipped_templates: Option<Vec<String>>,
    /// version is the value of the operator's payload based version indicator when it was last successfully processed
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// ConfigCondition captures various conditions of the Config as entries are processed.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ConfigStatusConditions {
    /// lastTransitionTime is the last time the condition transitioned from one status to another.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    /// lastUpdateTime is the last time this condition was updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastUpdateTime")]
    pub last_update_time: Option<String>,
    /// message is a human readable message indicating details about the transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// reason is what caused the condition's last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// status of the condition, one of True, False, Unknown.
    pub status: String,
    /// type of condition.
    #[serde(rename = "type")]
    pub r#type: String,
}

