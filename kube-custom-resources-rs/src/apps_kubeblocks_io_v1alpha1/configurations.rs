// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/apecloud/kubeblocks/apps.kubeblocks.io/v1alpha1/configurations.yaml --derive=PartialEq
// kopium version: 0.16.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// ConfigurationSpec defines the desired state of Configuration
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "apps.kubeblocks.io", version = "v1alpha1", kind = "Configuration", plural = "configurations")]
#[kube(namespaced)]
#[kube(status = "ConfigurationStatus")]
#[kube(schema = "disabled")]
pub struct ConfigurationSpec {
    /// clusterRef references Cluster name.
    #[serde(rename = "clusterRef")]
    pub cluster_ref: String,
    /// componentName is cluster component name.
    #[serde(rename = "componentName")]
    pub component_name: String,
    /// customConfigurationItems describes user-defined config template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configItemDetails")]
    pub config_item_details: Option<Vec<ConfigurationConfigItemDetails>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ConfigurationConfigItemDetails {
    /// configFileParams is used to set the parameters to be updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configFileParams")]
    pub config_file_params: Option<BTreeMap<String, ConfigurationConfigItemDetailsConfigFileParams>>,
    /// configSpec is used to set the configuration template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configSpec")]
    pub config_spec: Option<ConfigurationConfigItemDetailsConfigSpec>,
    /// Specify the configuration template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "importTemplateRef")]
    pub import_template_ref: Option<ConfigurationConfigItemDetailsImportTemplateRef>,
    /// Specify the name of configuration template.
    pub name: String,
    /// version is the version of configuration template.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// configFileParams is used to set the parameters to be updated.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ConfigurationConfigItemDetailsConfigFileParams {
    /// fileContent indicates the configuration file content.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// updated parameters for a single configuration file.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<BTreeMap<String, String>>,
}

/// configSpec is used to set the configuration template.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ConfigurationConfigItemDetailsConfigSpec {
    /// asEnvFrom is optional: the list of containers will be injected into EnvFrom.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asEnvFrom")]
    pub as_env_from: Option<Vec<String>>,
    /// Specify the name of the referenced the configuration constraints object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "constraintRef")]
    pub constraint_ref: Option<String>,
    /// defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i32>,
    /// Specify a list of keys. If empty, ConfigConstraint takes effect for all keys in configmap.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keys: Option<Vec<String>>,
    /// lazyRenderedConfigSpec is optional: specify the secondary rendered config spec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "legacyRenderedConfigSpec")]
    pub legacy_rendered_config_spec: Option<ConfigurationConfigItemDetailsConfigSpecLegacyRenderedConfigSpec>,
    /// Specify the name of configuration template.
    pub name: String,
    /// Specify the namespace of the referenced the configuration template ConfigMap object. An empty namespace is equivalent to the "default" namespace.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Specify the name of the referenced the configuration template ConfigMap object.
    #[serde(rename = "templateRef")]
    pub template_ref: String,
    /// volumeName is the volume name of PodTemplate, which the configuration file produced through the configuration template will be mounted to the corresponding volume. Must be a DNS_LABEL name. The volume name must be defined in podSpec.containers[*].volumeMounts.
    #[serde(rename = "volumeName")]
    pub volume_name: String,
}

/// lazyRenderedConfigSpec is optional: specify the secondary rendered config spec.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ConfigurationConfigItemDetailsConfigSpecLegacyRenderedConfigSpec {
    /// Specify the namespace of the referenced the configuration template ConfigMap object. An empty namespace is equivalent to the "default" namespace.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// policy defines how to merge external imported templates into component templates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConfigurationConfigItemDetailsConfigSpecLegacyRenderedConfigSpecPolicy>,
    /// Specify the name of the referenced the configuration template ConfigMap object.
    #[serde(rename = "templateRef")]
    pub template_ref: String,
}

/// lazyRenderedConfigSpec is optional: specify the secondary rendered config spec.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ConfigurationConfigItemDetailsConfigSpecLegacyRenderedConfigSpecPolicy {
    #[serde(rename = "patch")]
    Patch,
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "none")]
    None,
}

/// Specify the configuration template.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ConfigurationConfigItemDetailsImportTemplateRef {
    /// Specify the namespace of the referenced the configuration template ConfigMap object. An empty namespace is equivalent to the "default" namespace.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// policy defines how to merge external imported templates into component templates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConfigurationConfigItemDetailsImportTemplateRefPolicy>,
    /// Specify the name of the referenced the configuration template ConfigMap object.
    #[serde(rename = "templateRef")]
    pub template_ref: String,
}

/// Specify the configuration template.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ConfigurationConfigItemDetailsImportTemplateRefPolicy {
    #[serde(rename = "patch")]
    Patch,
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "none")]
    None,
}

/// ConfigurationStatus defines the observed state of Configuration
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ConfigurationStatus {
    /// conditions describes opsRequest detail status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<ConfigurationStatusConditions>>,
    /// configurationStatus describes the status of the component reconfiguring.
    #[serde(rename = "configurationStatus")]
    pub configuration_status: Vec<ConfigurationStatusConfigurationStatus>,
    /// message field describes the reasons of abnormal status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// observedGeneration is the latest generation observed for this ClusterDefinition. It refers to the ConfigConstraint's generation, which is updated by the API Server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ConfigurationStatusConditions {
    /// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// message is a human readable message indicating details about the transition. This may be an empty string.
    pub message: String,
    /// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    pub reason: String,
    /// status of the condition, one of True, False, Unknown.
    pub status: ConfigurationStatusConditionsStatus,
    /// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ConfigurationStatusConditionsStatus {
    True,
    False,
    Unknown,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ConfigurationStatusConfigurationStatus {
    /// lastDoneRevision is the last done revision of configurationItem.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastDoneRevision")]
    pub last_done_revision: Option<String>,
    /// message field describes the reasons of abnormal status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// name is a config template name.
    pub name: String,
    /// phase is status of configurationItem.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<ConfigurationStatusConfigurationStatusPhase>,
    /// reconcileDetail describes the details of the configuration change execution.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reconcileDetail")]
    pub reconcile_detail: Option<ConfigurationStatusConfigurationStatusReconcileDetail>,
    /// updateRevision is the update revision of configurationItem.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateRevision")]
    pub update_revision: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ConfigurationStatusConfigurationStatusPhase {
    Creating,
    Init,
    Running,
    Pending,
    Merged,
    MergeFailed,
    FailedAndPause,
    Upgrading,
    Deleting,
    FailedAndRetry,
    Finished,
}

/// reconcileDetail describes the details of the configuration change execution.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ConfigurationStatusConfigurationStatusReconcileDetail {
    /// currentRevision is the current revision of configurationItem.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "currentRevision")]
    pub current_revision: Option<String>,
    /// errMessage is the error message when the configuration change execution fails.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errMessage")]
    pub err_message: Option<String>,
    /// execResult is the result of the latest execution.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "execResult")]
    pub exec_result: Option<String>,
    /// expectedCount is the number of pods that need to be executed for configuration changes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expectedCount")]
    pub expected_count: Option<i32>,
    /// policy is the policy of the latest execution.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
    /// succeedCount is the number of pods for which configuration changes were successfully executed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "succeedCount")]
    pub succeed_count: Option<i32>,
}

