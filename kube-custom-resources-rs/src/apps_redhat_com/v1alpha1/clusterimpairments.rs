// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/redhat-performance/cluster-impairment-operator/apps.redhat.com/v1alpha1/clusterimpairments.yaml --derive=Default --derive=PartialEq
// kopium version: 0.19.0

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// Spec defines the desired state of ClusterImpairment
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "apps.redhat.com", version = "v1alpha1", kind = "ClusterImpairment", plural = "clusterimpairments")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ClusterImpairmentSpec {
    /// The duration of the impairment in seconds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<i64>,
    /// The configuration section that specifies the egress impairments.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub egress: Option<ClusterImpairmentEgress>,
    /// The configuration section that specifies the ingress impairments.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingress: Option<ClusterImpairmentIngress>,
    /// All interfaces that the impairments should be applied to. Must be valid interfaces or the impairments will fail to apply.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interfaces: Option<Vec<String>>,
    /// The configuration section that specifies the link flapping impairments.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linkFlapping")]
    pub link_flapping: Option<ClusterImpairmentLinkFlapping>,
    /// The configuration section that specifies the node selector that should be applied to the daemonset. Default: worker nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<ClusterImpairmentNodeSelector>,
    /// The delay (in seconds) before starting the impairments. At least 5 seconds recommended for Kubernetes and for synchronization of the impairments.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startDelay")]
    pub start_delay: Option<i64>,
}

/// The configuration section that specifies the egress impairments.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterImpairmentEgress {
    /// The bandwidth limit in kbit/sec
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bandwidth: Option<i64>,
    /// The percent of packets that are corrupted
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub corruption: Option<f64>,
    /// Advanced corruption options
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "corruptionOptions")]
    pub corruption_options: Option<ClusterImpairmentEgressCorruptionOptions>,
    /// The percent of packets duplicated
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duplication: Option<f64>,
    /// Advanced duplication options
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "duplicationOptions")]
    pub duplication_options: Option<ClusterImpairmentEgressDuplicationOptions>,
    /// The latency applied in ms
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub latency: Option<f64>,
    /// Advanced latency options. Example: jitter
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "latencyOptions")]
    pub latency_options: Option<ClusterImpairmentEgressLatencyOptions>,
    /// The packet loss in percent
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub loss: Option<f64>,
    /// Advanced packet loss options
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lossOptions")]
    pub loss_options: Option<ClusterImpairmentEgressLossOptions>,
}

/// Advanced corruption options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterImpairmentEgressCorruptionOptions {
    /// The correlation between sequential corruption values
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<f64>,
}

/// Advanced duplication options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterImpairmentEgressDuplicationOptions {
    /// The correlation between sequential duplication values
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<f64>,
}

/// Advanced latency options. Example: jitter
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterImpairmentEgressLatencyOptions {
    /// The way the jitter is distributed. Options: Normal, Uniform, Pareto, Paretonormal
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    /// Variation in the latency that follows the specified distribution.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jitter: Option<f64>,
    /// The correlation between sequential jitter values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jitterCorrelation")]
    pub jitter_correlation: Option<f64>,
    /// The percentage of packets that are not delayed, causing reordering
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reorder: Option<f64>,
    /// The correlation between sequential reorder values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reorderCorrelation")]
    pub reorder_correlation: Option<f64>,
}

/// Advanced packet loss options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterImpairmentEgressLossOptions {
    /// The correlation between sequential packet loss values
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<f64>,
}

/// The configuration section that specifies the ingress impairments.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterImpairmentIngress {
    /// The bandwidth limit in kbit/sec
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bandwidth: Option<i64>,
    /// The percent of packets that are corrupted
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub corruption: Option<f64>,
    /// Advanced corruption options
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "corruptionOptions")]
    pub corruption_options: Option<ClusterImpairmentIngressCorruptionOptions>,
    /// The percent of packets duplicated
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duplication: Option<f64>,
    /// Advanced duplication options
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "duplicationOptions")]
    pub duplication_options: Option<ClusterImpairmentIngressDuplicationOptions>,
    /// The latency applied in ms
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub latency: Option<f64>,
    /// Advanced latency options. Example: jitter
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "latencyOptions")]
    pub latency_options: Option<ClusterImpairmentIngressLatencyOptions>,
    /// The packet loss in percent
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub loss: Option<f64>,
    /// Advanced packet loss options
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lossOptions")]
    pub loss_options: Option<ClusterImpairmentIngressLossOptions>,
}

/// Advanced corruption options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterImpairmentIngressCorruptionOptions {
    /// The correlation between sequential corruption values
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<f64>,
}

/// Advanced duplication options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterImpairmentIngressDuplicationOptions {
    /// The correlation between sequential duplication values
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<f64>,
}

/// Advanced latency options. Example: jitter
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterImpairmentIngressLatencyOptions {
    /// The way the jitter is distributed. Options: Normal, Uniform, Pareto, Paretonormal
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    /// Variation in the latency that follows the specified distribution.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jitter: Option<f64>,
    /// The correlation between sequential jitter values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jitterCorrelation")]
    pub jitter_correlation: Option<f64>,
    /// The percentage of packets that are not delayed, causing reordering
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reorder: Option<f64>,
    /// The correlation between sequential reorder values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reorderCorrelation")]
    pub reorder_correlation: Option<f64>,
}

/// Advanced packet loss options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterImpairmentIngressLossOptions {
    /// The correlation between sequential packet loss values
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub correlation: Option<f64>,
}

/// The configuration section that specifies the link flapping impairments.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterImpairmentLinkFlapping {
    /// The duration that the link should be disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "downTime")]
    pub down_time: Option<i64>,
    /// Whether to enable link flapping.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// The duration that the link should be enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upTime")]
    pub up_time: Option<i64>,
}

/// The configuration section that specifies the node selector that should be applied to the daemonset. Default: worker nodes.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ClusterImpairmentNodeSelector {
    /// The key for the node selector
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The value for the node selector
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

