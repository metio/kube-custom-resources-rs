// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --derive Default --derive PartialEq --docs --filename ./crd-catalog/aws-controllers-k8s/ec2-controller/ec2.services.k8s.aws/v1alpha1/instances.yaml
// kopium version: 0.16.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// InstanceSpec defines the desired state of Instance. 
///  Describes an instance.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "ec2.services.k8s.aws", version = "v1alpha1", kind = "Instance", plural = "instances")]
#[kube(namespaced)]
#[kube(status = "InstanceStatus")]
#[kube(schema = "disabled")]
pub struct InstanceSpec {
    /// The block device mapping, which defines the EBS volumes and instance store volumes to attach to the instance at launch. For more information, see Block device mappings (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html) in the Amazon EC2 User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockDeviceMappings")]
    pub block_device_mappings: Option<Vec<InstanceBlockDeviceMappings>>,
    /// Information about the Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to open, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationSpecification")]
    pub capacity_reservation_specification: Option<InstanceCapacityReservationSpecification>,
    /// The CPU options for the instance. For more information, see Optimize CPU options (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html) in the Amazon EC2 User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuOptions")]
    pub cpu_options: Option<InstanceCpuOptions>,
    /// The credit option for CPU usage of the burstable performance instance. Valid values are standard and unlimited. To change this attribute after launch, use ModifyInstanceCreditSpecification (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceCreditSpecification.html). For more information, see Burstable performance instances (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html) in the Amazon EC2 User Guide. 
    ///  Default: standard (T2 instances) or unlimited (T3/T3a/T4g instances) 
    ///  For T3 instances with host tenancy, only standard is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creditSpecification")]
    pub credit_specification: Option<InstanceCreditSpecification>,
    /// Indicates whether an instance is enabled for stop protection. For more information, see Stop protection (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableAPIStop")]
    pub disable_api_stop: Option<bool>,
    /// If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use ModifyInstanceAttribute (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html). Alternatively, if you set InstanceInitiatedShutdownBehavior to terminate, you can terminate the instance by running the shutdown command from the instance. 
    ///  Default: false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableAPITermination")]
    pub disable_api_termination: Option<bool>,
    /// Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance. 
    ///  Default: false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ebsOptimized")]
    pub ebs_optimized: Option<bool>,
    /// An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource that you can attach to your Windows instance to accelerate the graphics performance of your applications. For more information, see Amazon EC2 Elastic GPUs (https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html) in the Amazon EC2 User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticGPUSpecification")]
    pub elastic_gpu_specification: Option<Vec<InstanceElasticGpuSpecification>>,
    /// An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads. 
    ///  You cannot specify accelerators from different generations in the same request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticInferenceAccelerators")]
    pub elastic_inference_accelerators: Option<Vec<InstanceElasticInferenceAccelerators>>,
    /// Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves. For more information, see What is Amazon Web Services Nitro Enclaves? (https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html) in the Amazon Web Services Nitro Enclaves User Guide. 
    ///  You can't enable Amazon Web Services Nitro Enclaves and hibernation on the same instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enclaveOptions")]
    pub enclave_options: Option<InstanceEnclaveOptions>,
    /// Indicates whether an instance is enabled for hibernation. For more information, see Hibernate your instance (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html) in the Amazon EC2 User Guide. 
    ///  You can't enable hibernation and Amazon Web Services Nitro Enclaves on the same instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hibernationOptions")]
    pub hibernation_options: Option<InstanceHibernationOptions>,
    /// The name or Amazon Resource Name (ARN) of an IAM instance profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamInstanceProfile")]
    pub iam_instance_profile: Option<InstanceIamInstanceProfile>,
    /// The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageID")]
    pub image_id: Option<String>,
    /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown). 
    ///  Default: stop
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceInitiatedShutdownBehavior")]
    pub instance_initiated_shutdown_behavior: Option<String>,
    /// The market (purchasing) option for the instances. 
    ///  For RunInstances, persistent Spot Instance requests are only supported when InstanceInterruptionBehavior is set to either hibernate or stop.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceMarketOptions")]
    pub instance_market_options: Option<InstanceInstanceMarketOptions>,
    /// The instance type. For more information, see Instance types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the Amazon EC2 User Guide. 
    ///  Default: m1.small
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    pub instance_type: Option<String>,
    /// [EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch. 
    ///  You cannot specify this option and the network interfaces option in the same request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6AddressCount")]
    pub ipv6_address_count: Option<i64>,
    /// [EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch. 
    ///  You cannot specify this option and the network interfaces option in the same request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6Addresses")]
    pub ipv6_addresses: Option<Vec<InstanceIpv6Addresses>>,
    /// The ID of the kernel. 
    ///  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html) in the Amazon EC2 User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kernelID")]
    pub kernel_id: Option<String>,
    /// The name of the key pair. You can create a key pair using CreateKeyPair (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html) or ImportKeyPair (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html). 
    ///  If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyName")]
    pub key_name: Option<String>,
    /// The launch template to use to launch the instances. Any parameters that you specify in RunInstances override the same parameters in the launch template. You can specify either the name or ID of a launch template, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplate")]
    pub launch_template: Option<InstanceLaunchTemplate>,
    /// The license configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "licenseSpecifications")]
    pub license_specifications: Option<Vec<InstanceLicenseSpecifications>>,
    /// The maintenance and recovery options for the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceOptions")]
    pub maintenance_options: Option<InstanceMaintenanceOptions>,
    /// The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above MinCount. 
    ///  Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see How many instances can I run in Amazon EC2 (http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2) in the Amazon EC2 FAQ.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxCount")]
    pub max_count: Option<i64>,
    /// The metadata options for the instance. For more information, see Instance metadata and user data (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataOptions")]
    pub metadata_options: Option<InstanceMetadataOptions>,
    /// The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances. 
    ///  Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see How many instances can I run in Amazon EC2 (http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2) in the Amazon EC2 General FAQ.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minCount")]
    pub min_count: Option<i64>,
    /// Specifies whether detailed monitoring is enabled for the instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub monitoring: Option<InstanceMonitoring>,
    /// The network interfaces to associate with the instance. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaces")]
    pub network_interfaces: Option<Vec<InstanceNetworkInterfaces>>,
    /// The placement for the instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub placement: Option<InstancePlacement>,
    /// The options for the instance hostname. The default values are inherited from the subnet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateDNSNameOptions")]
    pub private_dns_name_options: Option<InstancePrivateDnsNameOptions>,
    /// [EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet. 
    ///  Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request. 
    ///  You cannot specify this option and the network interfaces option in the same request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateIPAddress")]
    pub private_ip_address: Option<String>,
    /// The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, go to the Amazon Web Services Resource Center and search for the kernel ID. 
    ///  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html) in the Amazon EC2 User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ramDiskID")]
    pub ram_disk_id: Option<String>,
    /// The IDs of the security groups. You can create a security group using CreateSecurityGroup (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html). 
    ///  If you specify a network interface, you must specify any security groups as part of the network interface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIDs")]
    pub security_group_i_ds: Option<Vec<String>>,
    /// [EC2-Classic, default VPC] The names of the security groups. For a nondefault VPC, you must use security group IDs instead. 
    ///  If you specify a network interface, you must specify any security groups as part of the network interface. 
    ///  Default: Amazon EC2 uses the default security group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroups")]
    pub security_groups: Option<Vec<String>>,
    /// [EC2-VPC] The ID of the subnet to launch the instance into. 
    ///  If you specify a network interface, you must specify any subnets as part of the network interface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetID")]
    pub subnet_id: Option<String>,
    /// The tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<InstanceTags>>,
    /// The user data script to make available to the instance. For more information, see Run commands on your Linux instance at launch (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html) and Run commands on your Windows instance at launch (https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-user-data.html). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userData")]
    pub user_data: Option<String>,
}

/// Describes a block device mapping, which defines the EBS volumes and instance store volumes to attach to an instance at launch.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceBlockDeviceMappings {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    pub device_name: Option<String>,
    /// Describes a block device for an EBS volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ebs: Option<InstanceBlockDeviceMappingsEbs>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDevice")]
    pub no_device: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualName")]
    pub virtual_name: Option<String>,
}

/// Describes a block device for an EBS volume.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceBlockDeviceMappingsEbs {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    pub delete_on_termination: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encrypted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iops: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyID")]
    pub kms_key_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outpostARN")]
    pub outpost_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotID")]
    pub snapshot_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub throughput: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeSize")]
    pub volume_size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeType")]
    pub volume_type: Option<String>,
}

/// Information about the Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to open, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceCapacityReservationSpecification {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationPreference")]
    pub capacity_reservation_preference: Option<String>,
    /// Describes a target Capacity Reservation or Capacity Reservation group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationTarget")]
    pub capacity_reservation_target: Option<InstanceCapacityReservationSpecificationCapacityReservationTarget>,
}

/// Describes a target Capacity Reservation or Capacity Reservation group.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceCapacityReservationSpecificationCapacityReservationTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationID")]
    pub capacity_reservation_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationResourceGroupARN")]
    pub capacity_reservation_resource_group_arn: Option<String>,
}

/// The CPU options for the instance. For more information, see Optimize CPU options (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html) in the Amazon EC2 User Guide.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceCpuOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreCount")]
    pub core_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threadsPerCore")]
    pub threads_per_core: Option<i64>,
}

/// The credit option for CPU usage of the burstable performance instance. Valid values are standard and unlimited. To change this attribute after launch, use ModifyInstanceCreditSpecification (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceCreditSpecification.html). For more information, see Burstable performance instances (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html) in the Amazon EC2 User Guide. 
///  Default: standard (T2 instances) or unlimited (T3/T3a/T4g instances) 
///  For T3 instances with host tenancy, only standard is supported.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceCreditSpecification {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuCredits")]
    pub cpu_credits: Option<String>,
}

/// A specification for an Elastic Graphics accelerator.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceElasticGpuSpecification {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type_")]
    pub r#type: Option<String>,
}

/// Describes an elastic inference accelerator.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceElasticInferenceAccelerators {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type_")]
    pub r#type: Option<String>,
}

/// Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves. For more information, see What is Amazon Web Services Nitro Enclaves? (https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html) in the Amazon Web Services Nitro Enclaves User Guide. 
///  You can't enable Amazon Web Services Nitro Enclaves and hibernation on the same instance.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceEnclaveOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Indicates whether an instance is enabled for hibernation. For more information, see Hibernate your instance (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html) in the Amazon EC2 User Guide. 
///  You can't enable hibernation and Amazon Web Services Nitro Enclaves on the same instance.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceHibernationOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configured: Option<bool>,
}

/// The name or Amazon Resource Name (ARN) of an IAM instance profile.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceIamInstanceProfile {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// The market (purchasing) option for the instances. 
///  For RunInstances, persistent Spot Instance requests are only supported when InstanceInterruptionBehavior is set to either hibernate or stop.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceInstanceMarketOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "marketType")]
    pub market_type: Option<String>,
    /// The options for Spot Instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotOptions")]
    pub spot_options: Option<InstanceInstanceMarketOptionsSpotOptions>,
}

/// The options for Spot Instances.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceInstanceMarketOptionsSpotOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockDurationMinutes")]
    pub block_duration_minutes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceInterruptionBehavior")]
    pub instance_interruption_behavior: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPrice")]
    pub max_price: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotInstanceType")]
    pub spot_instance_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validUntil")]
    pub valid_until: Option<String>,
}

/// Describes an IPv6 address.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceIpv6Addresses {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6Address")]
    pub ipv6_address: Option<String>,
}

/// The launch template to use to launch the instances. Any parameters that you specify in RunInstances override the same parameters in the launch template. You can specify either the name or ID of a launch template, but not both.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceLaunchTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateID")]
    pub launch_template_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateName")]
    pub launch_template_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// Describes a license configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceLicenseSpecifications {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "licenseConfigurationARN")]
    pub license_configuration_arn: Option<String>,
}

/// The maintenance and recovery options for the instance.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceMaintenanceOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoRecovery")]
    pub auto_recovery: Option<String>,
}

/// The metadata options for the instance. For more information, see Instance metadata and user data (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceMetadataOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpEndpoint")]
    pub http_endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpProtocolIPv6")]
    pub http_protocol_i_pv6: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpPutResponseHopLimit")]
    pub http_put_response_hop_limit: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpTokens")]
    pub http_tokens: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceMetadataTags")]
    pub instance_metadata_tags: Option<String>,
}

/// Specifies whether detailed monitoring is enabled for the instance.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceMonitoring {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Describes a network interface.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceNetworkInterfaces {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associateCarrierIPAddress")]
    pub associate_carrier_ip_address: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associatePublicIPAddress")]
    pub associate_public_ip_address: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteOnTermination")]
    pub delete_on_termination: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceIndex")]
    pub device_index: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "interfaceType")]
    pub interface_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4PrefixCount")]
    pub ipv4_prefix_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4Prefixes")]
    pub ipv4_prefixes: Option<Vec<InstanceNetworkInterfacesIpv4Prefixes>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6AddressCount")]
    pub ipv6_address_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6Addresses")]
    pub ipv6_addresses: Option<Vec<InstanceNetworkInterfacesIpv6Addresses>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6PrefixCount")]
    pub ipv6_prefix_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6Prefixes")]
    pub ipv6_prefixes: Option<Vec<InstanceNetworkInterfacesIpv6Prefixes>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkCardIndex")]
    pub network_card_index: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaceID")]
    pub network_interface_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateIPAddress")]
    pub private_ip_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateIPAddresses")]
    pub private_ip_addresses: Option<Vec<InstanceNetworkInterfacesPrivateIpAddresses>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondaryPrivateIPAddressCount")]
    pub secondary_private_ip_address_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetID")]
    pub subnet_id: Option<String>,
}

/// Describes the IPv4 prefix option for a network interface.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceNetworkInterfacesIpv4Prefixes {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4Prefix")]
    pub ipv4_prefix: Option<String>,
}

/// Describes an IPv6 address.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceNetworkInterfacesIpv6Addresses {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6Address")]
    pub ipv6_address: Option<String>,
}

/// Describes the IPv4 prefix option for a network interface.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceNetworkInterfacesIpv6Prefixes {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6Prefix")]
    pub ipv6_prefix: Option<String>,
}

/// Describes a secondary private IPv4 address for a network interface.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceNetworkInterfacesPrivateIpAddresses {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub primary: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateIPAddress")]
    pub private_ip_address: Option<String>,
}

/// The placement for the instance.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstancePlacement {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    pub availability_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupName")]
    pub group_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostID")]
    pub host_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostResourceGroupARN")]
    pub host_resource_group_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "partitionNumber")]
    pub partition_number: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spreadDomain")]
    pub spread_domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tenancy: Option<String>,
}

/// The options for the instance hostname. The default values are inherited from the subnet.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstancePrivateDnsNameOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableResourceNameDNSAAAARecord")]
    pub enable_resource_name_dnsaaaa_record: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableResourceNameDNSARecord")]
    pub enable_resource_name_dnsa_record: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostnameType")]
    pub hostname_type: Option<String>,
}

/// Describes a tag.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceTags {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// InstanceStatus defines the observed state of Instance
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceStatus {
    /// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member that is used to contain resource sync state, account ownership, constructed ARN for the resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ackResourceMetadata")]
    pub ack_resource_metadata: Option<InstanceStatusAckResourceMetadata>,
    /// The AMI launch index, which can be used to find this instance in the launch group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amiLaunchIndex")]
    pub ami_launch_index: Option<i64>,
    /// The architecture of the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub architecture: Option<String>,
    /// The boot mode of the instance. For more information, see Boot modes (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html) in the Amazon EC2 User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootMode")]
    pub boot_mode: Option<String>,
    /// The ID of the Capacity Reservation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityReservationID")]
    pub capacity_reservation_id: Option<String>,
    /// All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<InstanceStatusConditions>>,
    /// The Elastic GPU associated with the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticGPUAssociations")]
    pub elastic_gpu_associations: Option<Vec<InstanceStatusElasticGpuAssociations>>,
    /// The elastic inference accelerator associated with the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticInferenceAcceleratorAssociations")]
    pub elastic_inference_accelerator_associations: Option<Vec<InstanceStatusElasticInferenceAcceleratorAssociations>>,
    /// Specifies whether enhanced networking with ENA is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enaSupport")]
    pub ena_support: Option<bool>,
    /// The hypervisor type of the instance. The value xen is used for both Xen and Nitro hypervisors.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hypervisor: Option<String>,
    /// The ID of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceID")]
    pub instance_id: Option<String>,
    /// Indicates whether this is a Spot Instance or a Scheduled Instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceLifecycle")]
    pub instance_lifecycle: Option<String>,
    /// The IPv6 address assigned to the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6Address")]
    pub ipv6_address: Option<String>,
    /// The time the instance was launched.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTime")]
    pub launch_time: Option<String>,
    /// The license configurations for the instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub licenses: Option<Vec<InstanceStatusLicenses>>,
    /// The Amazon Resource Name (ARN) of the Outpost.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outpostARN")]
    pub outpost_arn: Option<String>,
    /// The value is Windows for Windows instances; otherwise blank.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<String>,
    /// The platform details value for the instance. For more information, see AMI billing information fields (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/billing-info-fields.html) in the Amazon EC2 User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "platformDetails")]
    pub platform_details: Option<String>,
    /// (IPv4 only) The private DNS hostname name assigned to the instance. This DNS hostname can only be used inside the Amazon EC2 network. This name is not available until the instance enters the running state. 
    ///  [EC2-VPC] The Amazon-provided DNS server resolves Amazon-provided private DNS hostnames if you've enabled DNS resolution and DNS hostnames in your VPC. If you are not using the Amazon-provided DNS server in your VPC, your custom domain name servers must resolve the hostname as appropriate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateDNSName")]
    pub private_dns_name: Option<String>,
    /// The product codes attached to this instance, if applicable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "productCodes")]
    pub product_codes: Option<Vec<InstanceStatusProductCodes>>,
    /// (IPv4 only) The public DNS name assigned to the instance. This name is not available until the instance enters the running state. For EC2-VPC, this name is only available if you've enabled DNS hostnames for your VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicDNSName")]
    pub public_dns_name: Option<String>,
    /// The public IPv4 address, or the Carrier IP address assigned to the instance, if applicable. 
    ///  A Carrier IP address only applies to an instance launched in a subnet associated with a Wavelength Zone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicIPAddress")]
    pub public_ip_address: Option<String>,
    /// The device name of the root device volume (for example, /dev/sda1).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootDeviceName")]
    pub root_device_name: Option<String>,
    /// The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootDeviceType")]
    pub root_device_type: Option<String>,
    /// Indicates whether source/destination checking is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDestCheck")]
    pub source_dest_check: Option<bool>,
    /// If the request is a Spot Instance request, the ID of the request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotInstanceRequestID")]
    pub spot_instance_request_id: Option<String>,
    /// Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sriovNetSupport")]
    pub sriov_net_support: Option<String>,
    /// The current state of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<InstanceStatusState>,
    /// The reason for the most recent state transition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stateReason")]
    pub state_reason: Option<InstanceStatusStateReason>,
    /// The reason for the most recent state transition. This might be an empty string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stateTransitionReason")]
    pub state_transition_reason: Option<String>,
    /// If the instance is configured for NitroTPM support, the value is v2.0. For more information, see NitroTPM (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitrotpm.html) in the Amazon EC2 User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tpmSupport")]
    pub tpm_support: Option<String>,
    /// The usage operation value for the instance. For more information, see AMI billing information fields (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/billing-info-fields.html) in the Amazon EC2 User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usageOperation")]
    pub usage_operation: Option<String>,
    /// The time that the usage operation was last updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usageOperationUpdateTime")]
    pub usage_operation_update_time: Option<String>,
    /// The virtualization type of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualizationType")]
    pub virtualization_type: Option<String>,
    /// [EC2-VPC] The ID of the VPC in which the instance is running.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcID")]
    pub vpc_id: Option<String>,
}

/// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member that is used to contain resource sync state, account ownership, constructed ARN for the resource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceStatusAckResourceMetadata {
    /// ARN is the Amazon Resource Name for the resource. This is a globally-unique identifier and is set only by the ACK service controller once the controller has orchestrated the creation of the resource OR when it has verified that an "adopted" resource (a resource where the ARN annotation was set by the Kubernetes user on the CR) exists and matches the supplied CR's Spec field values. TODO(vijat@): Find a better strategy for resources that do not have ARN in CreateOutputResponse https://github.com/aws/aws-controllers-k8s/issues/270
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// OwnerAccountID is the AWS Account ID of the account that owns the backend AWS service API resource.
    #[serde(rename = "ownerAccountID")]
    pub owner_account_id: String,
    /// Region is the AWS region in which the resource exists or will exist.
    pub region: String,
}

/// Condition is the common struct used by all CRDs managed by ACK service controllers to indicate terminal states  of the CR and its backend AWS service API resource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceStatusConditions {
    /// Last time the condition transitioned from one status to another.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    /// A human readable message indicating details about the transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// The reason for the condition's last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Status of the condition, one of True, False, Unknown.
    pub status: String,
    /// Type is the type of the Condition
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Describes the association between an instance and an Elastic Graphics accelerator.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceStatusElasticGpuAssociations {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticGPUAssociationID")]
    pub elastic_gpu_association_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticGPUAssociationState")]
    pub elastic_gpu_association_state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticGPUAssociationTime")]
    pub elastic_gpu_association_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticGPUID")]
    pub elastic_gpuid: Option<String>,
}

/// Describes the association between an instance and an elastic inference accelerator.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceStatusElasticInferenceAcceleratorAssociations {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticInferenceAcceleratorARN")]
    pub elastic_inference_accelerator_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticInferenceAcceleratorAssociationID")]
    pub elastic_inference_accelerator_association_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticInferenceAcceleratorAssociationState")]
    pub elastic_inference_accelerator_association_state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticInferenceAcceleratorAssociationTime")]
    pub elastic_inference_accelerator_association_time: Option<String>,
}

/// Describes a license configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceStatusLicenses {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "licenseConfigurationARN")]
    pub license_configuration_arn: Option<String>,
}

/// Describes a product code.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceStatusProductCodes {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "productCodeID")]
    pub product_code_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "productCodeType")]
    pub product_code_type: Option<String>,
}

/// The current state of the instance.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceStatusState {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// The reason for the most recent state transition.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct InstanceStatusStateReason {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}

