// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kubev2v/forklift/forklift.konveyor.io/v1beta1/hooks.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// Hook specification.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "forklift.konveyor.io", version = "v1beta1", kind = "Hook", plural = "hooks")]
#[kube(namespaced)]
#[kube(status = "HookStatus")]
#[kube(schema = "disabled")]
pub struct HookSpec {
    /// Hook deadline in seconds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deadline: Option<i64>,
    /// Image to run.
    pub image: String,
    /// A base64 encoded Ansible playbook.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub playbook: Option<String>,
    /// Service account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
}

/// Hook status.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HookStatus {
    /// List of conditions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<HookStatusConditions>>,
    /// The most recent generation observed by the controller.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

/// Condition
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HookStatusConditions {
    /// The condition category.
    pub category: String,
    /// The condition is durable - never un-staged.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub durable: Option<bool>,
    /// A list of items referenced in the `Message`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<String>>,
    /// When the last status transition occurred.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// The human readable description of the condition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// The reason for the condition or transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// The condition status [true,false].
    pub status: String,
    /// The condition type.
    #[serde(rename = "type")]
    pub r#type: String,
}

