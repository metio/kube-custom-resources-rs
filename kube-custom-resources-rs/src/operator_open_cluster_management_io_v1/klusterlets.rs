// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --derive Default --derive PartialEq --docs --filename ./crd-catalog/open-cluster-management-io/registration-operator/operator.open-cluster-management.io/v1/klusterlets.yaml
// kopium version: 0.16.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// Spec represents the desired deployment configuration of Klusterlet agent.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "operator.open-cluster-management.io", version = "v1", kind = "Klusterlet", plural = "klusterlets")]
#[kube(status = "KlusterletStatus")]
#[kube(schema = "disabled")]
pub struct KlusterletSpec {
    /// ClusterName is the name of the managed cluster to be created on hub. The Klusterlet agent generates a random name if it is not set, or discovers the appropriate cluster name on OpenShift.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    /// DeployOption contains the options of deploying a klusterlet
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deployOption")]
    pub deploy_option: Option<KlusterletDeployOption>,
    /// ExternalServerURLs represents the a list of apiserver urls and ca bundles that is accessible externally If it is set empty, managed cluster has no externally accessible url that hub cluster can visit.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalServerURLs")]
    pub external_server_ur_ls: Option<Vec<KlusterletExternalServerUrLs>>,
    /// HubApiServerHostAlias contains the host alias for hub api server. registration-agent and work-agent will use it to communicate with hub api server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hubApiServerHostAlias")]
    pub hub_api_server_host_alias: Option<KlusterletHubApiServerHostAlias>,
    /// Namespace is the namespace to deploy the agent on the managed cluster. The namespace must have a prefix of "open-cluster-management-", and if it is not set, the namespace of "open-cluster-management-agent" is used to deploy agent. In addition, the add-ons are deployed to the namespace of "{Namespace}-addon". In the Hosted mode, this namespace still exists on the managed cluster to contain necessary resources, like service accounts, roles and rolebindings, while the agent is deployed to the namespace with the same name as klusterlet on the management cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// NodePlacement enables explicit control over the scheduling of the deployed pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePlacement")]
    pub node_placement: Option<KlusterletNodePlacement>,
    /// RegistrationConfiguration contains the configuration of registration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registrationConfiguration")]
    pub registration_configuration: Option<KlusterletRegistrationConfiguration>,
    /// RegistrationImagePullSpec represents the desired image configuration of registration agent. quay.io/open-cluster-management.io/registration:latest will be used if unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "registrationImagePullSpec")]
    pub registration_image_pull_spec: Option<String>,
    /// WorkConfiguration contains the configuration of work
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workConfiguration")]
    pub work_configuration: Option<KlusterletWorkConfiguration>,
    /// WorkImagePullSpec represents the desired image configuration of work agent. quay.io/open-cluster-management.io/work:latest will be used if unspecified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workImagePullSpec")]
    pub work_image_pull_spec: Option<String>,
}

/// DeployOption contains the options of deploying a klusterlet
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KlusterletDeployOption {
    /// Mode can be Default or Hosted. It is Default mode if not specified In Default mode, all klusterlet related resources are deployed on the managed cluster. In Hosted mode, only crd and configurations are installed on the spoke/managed cluster. Controllers run in another cluster (defined as management-cluster) and connect to the mangaged cluster with the kubeconfig in secret of "external-managed-kubeconfig"(a kubeconfig of managed-cluster with cluster-admin permission). Note: Do not modify the Mode field once it's applied.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
}

/// ServerURL represents the apiserver url and ca bundle that is accessible externally
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KlusterletExternalServerUrLs {
    /// CABundle is the ca bundle to connect to apiserver of the managed cluster. System certs are used if it is not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caBundle")]
    pub ca_bundle: Option<String>,
    /// URL is the url of apiserver endpoint of the managed cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// HubApiServerHostAlias contains the host alias for hub api server. registration-agent and work-agent will use it to communicate with hub api server.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KlusterletHubApiServerHostAlias {
    /// Hostname for the above IP address.
    pub hostname: String,
    /// IP address of the host file entry.
    pub ip: String,
}

/// NodePlacement enables explicit control over the scheduling of the deployed pods.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KlusterletNodePlacement {
    /// NodeSelector defines which Nodes the Pods are scheduled on. The default is an empty list.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// Tolerations is attached by pods to tolerate any taint that matches the triple <key,value,effect> using the matching operator <operator>. The default is an empty list.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<KlusterletNodePlacementTolerations>>,
}

/// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KlusterletNodePlacementTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// RegistrationConfiguration contains the configuration of registration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KlusterletRegistrationConfiguration {
    /// clientCertExpirationSeconds represents the seconds of a client certificate to expire. If it is not set or 0, the default duration seconds will be set by the hub cluster. If the value is larger than the max signing duration seconds set on the hub cluster, the max signing duration seconds will be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertExpirationSeconds")]
    pub client_cert_expiration_seconds: Option<i32>,
    /// FeatureGates represents the list of feature gates for registration If it is set empty, default feature gates will be used. If it is set, featuregate/Foo is an example of one item in FeatureGates: 1. If featuregate/Foo does not exist, registration-operator will discard it 2. If featuregate/Foo exists and is false by default. It is now possible to set featuregate/Foo=[false|true] 3. If featuregate/Foo exists and is true by default. If a cluster-admin upgrading from 1 to 2 wants to continue having featuregate/Foo=false, he can set featuregate/Foo=false before upgrading. Let's say the cluster-admin wants featuregate/Foo=false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featureGates")]
    pub feature_gates: Option<Vec<KlusterletRegistrationConfigurationFeatureGates>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KlusterletRegistrationConfigurationFeatureGates {
    /// Feature is the key of feature gate. e.g. featuregate/Foo.
    pub feature: String,
    /// Mode is either Enable, Disable, "" where "" is Disable by default. In Enable mode, a valid feature gate `featuregate/Foo` will be set to "--featuregate/Foo=true". In Disable mode, a valid feature gate `featuregate/Foo` will be set to "--featuregate/Foo=false".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<KlusterletRegistrationConfigurationFeatureGatesMode>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KlusterletRegistrationConfigurationFeatureGatesMode {
    Enable,
    Disable,
}

/// WorkConfiguration contains the configuration of work
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KlusterletWorkConfiguration {
    /// FeatureGates represents the list of feature gates for work If it is set empty, default feature gates will be used. If it is set, featuregate/Foo is an example of one item in FeatureGates: 1. If featuregate/Foo does not exist, registration-operator will discard it 2. If featuregate/Foo exists and is false by default. It is now possible to set featuregate/Foo=[false|true] 3. If featuregate/Foo exists and is true by default. If a cluster-admin upgrading from 1 to 2 wants to continue having featuregate/Foo=false, he can set featuregate/Foo=false before upgrading. Let's say the cluster-admin wants featuregate/Foo=false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featureGates")]
    pub feature_gates: Option<Vec<KlusterletWorkConfigurationFeatureGates>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KlusterletWorkConfigurationFeatureGates {
    /// Feature is the key of feature gate. e.g. featuregate/Foo.
    pub feature: String,
    /// Mode is either Enable, Disable, "" where "" is Disable by default. In Enable mode, a valid feature gate `featuregate/Foo` will be set to "--featuregate/Foo=true". In Disable mode, a valid feature gate `featuregate/Foo` will be set to "--featuregate/Foo=false".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<KlusterletWorkConfigurationFeatureGatesMode>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KlusterletWorkConfigurationFeatureGatesMode {
    Enable,
    Disable,
}

/// Status represents the current status of Klusterlet agent.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KlusterletStatus {
    /// Conditions contain the different condition statuses for this Klusterlet. Valid condition types are: Applied: Components have been applied in the managed cluster. Available: Components in the managed cluster are available and ready to serve. Progressing: Components in the managed cluster are in a transitioning state. Degraded: Components in the managed cluster do not match the desired configuration and only provide degraded service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<KlusterletStatusConditions>>,
    /// Generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generations: Option<Vec<KlusterletStatusGenerations>>,
    /// ObservedGeneration is the last generation change you've dealt with
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// RelatedResources are used to track the resources that are related to this Klusterlet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "relatedResources")]
    pub related_resources: Option<Vec<KlusterletStatusRelatedResources>>,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KlusterletStatusConditions {
    /// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// message is a human readable message indicating details about the transition. This may be an empty string.
    pub message: String,
    /// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    pub reason: String,
    /// status of the condition, one of True, False, Unknown.
    pub status: KlusterletStatusConditionsStatus,
    /// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KlusterletStatusConditionsStatus {
    True,
    False,
    Unknown,
}

/// GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made. The definition matches the GenerationStatus defined in github.com/openshift/api/v1
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KlusterletStatusGenerations {
    /// group is the group of the resource that you're tracking
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// lastGeneration is the last generation of the resource that controller applies
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastGeneration")]
    pub last_generation: Option<i64>,
    /// name is the name of the resource that you're tracking
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// namespace is where the resource that you're tracking is
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// resource is the resource type of the resource that you're tracking
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
    /// version is the version of the resource that you're tracking
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// RelatedResourceMeta represents the resource that is managed by an operator
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct KlusterletStatusRelatedResources {
    /// group is the group of the resource that you're tracking
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// name is the name of the resource that you're tracking
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// namespace is where the thing you're tracking is
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// resource is the resource type of the resource that you're tracking
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
    /// version is the version of the thing you're tracking
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

