// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/ctron/ditto-operator/iot.eclipse.org/v1alpha1/dittos.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "iot.eclipse.org", version = "v1alpha1", kind = "Ditto", plural = "dittos")]
#[kube(namespaced)]
#[kube(status = "DittoStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct DittoSpec {
    /// Create the default "ditto" user when initially deploying.
    /// 
    /// This has no effect when using OAuth2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createDefaultUser")]
    pub create_default_user: Option<bool>,
    /// Devops endpoint
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub devops: Option<DittoDevops>,
    /// Don't expose infra endpoints
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableInfraProxy")]
    pub disable_infra_proxy: Option<bool>,
    /// Allow disabling the welcome page
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableWelcomePage")]
    pub disable_welcome_page: Option<bool>,
    /// Configure ingress options
    /// 
    /// If the field is missing, no ingress resource is being created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingress: Option<DittoIngress>,
    /// Kafka options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kafka: Option<DittoKafka>,
    /// Enable and configure keycloak integration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keycloak: Option<DittoKeycloak>,
    /// Metrics configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics: Option<DittoMetrics>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mongoDb")]
    pub mongo_db: Option<DittoMongoDb>,
    /// Provide additional OAuth configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth: Option<DittoOauth>,
    /// Influence some options of the hosted OpenAPI spec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openApi")]
    pub open_api: Option<DittoOpenApi>,
    /// Override the imagePullPolicy
    /// 
    /// By default this will use Always if the image version is ":latest" and IfNotPresent otherwise
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullPolicy")]
    pub pull_policy: Option<String>,
    /// Allow to override the Ditto container registry
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registry: Option<String>,
    /// Services configuration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<DittoServices>,
    /// Influence some options of the hosted SwaggerUI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "swaggerUi")]
    pub swagger_ui: Option<DittoSwaggerUi>,
    /// Allow to override the Ditto image version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// Devops endpoint
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoDevops {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expose: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<DittoDevopsPassword>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusPassword")]
    pub status_password: Option<DittoDevopsStatusPassword>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoDevopsPassword {
    /// Selects a key from a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<DittoDevopsPasswordConfigMap>,
    /// SecretKeySelector selects a key of a Secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<DittoDevopsPasswordSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Selects a key from a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoDevopsPasswordConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// SecretKeySelector selects a key of a Secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoDevopsPasswordSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoDevopsStatusPassword {
    /// Selects a key from a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<DittoDevopsStatusPasswordConfigMap>,
    /// SecretKeySelector selects a key of a Secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<DittoDevopsStatusPasswordSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Selects a key from a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoDevopsStatusPasswordConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// SecretKeySelector selects a key of a Secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoDevopsStatusPasswordSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Configure ingress options
/// 
/// If the field is missing, no ingress resource is being created.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoIngress {
    /// Annotations which should be applied to the ingress resources.
    /// 
    /// The annotations will be set to the resource, not merged. All changes done on the ingress resource itself will be overridden.
    /// 
    /// If no annotations are configured, reasonable defaults will be used instead. You can prevent this by setting a single dummy annotation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// The optional ingress class name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "className")]
    pub class_name: Option<String>,
    /// The host of the ingress resource.
    /// 
    /// This is required if the ingress resource should be created by the operator
    pub host: String,
}

/// Kafka options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoKafka {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consumerThrottlingLimit")]
    pub consumer_throttling_limit: Option<u32>,
}

/// Enable and configure keycloak integration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoKeycloak {
    #[serde(rename = "clientId")]
    pub client_id: DittoKeycloakClientId,
    #[serde(rename = "clientSecret")]
    pub client_secret: DittoKeycloakClientSecret,
    /// Description of this login option.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableProxy")]
    pub disable_proxy: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<String>>,
    /// Label when referencing this login option.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    pub realm: String,
    /// Allow overriding the redirect URL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redirectUrl")]
    pub redirect_url: Option<String>,
    pub url: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoKeycloakClientId {
    /// Selects a key from a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<DittoKeycloakClientIdConfigMap>,
    /// SecretKeySelector selects a key of a Secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<DittoKeycloakClientIdSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Selects a key from a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoKeycloakClientIdConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// SecretKeySelector selects a key of a Secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoKeycloakClientIdSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoKeycloakClientSecret {
    /// Selects a key from a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<DittoKeycloakClientSecretConfigMap>,
    /// SecretKeySelector selects a key of a Secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<DittoKeycloakClientSecretSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Selects a key from a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoKeycloakClientSecretConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// SecretKeySelector selects a key of a Secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoKeycloakClientSecretSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Metrics configuration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoMetrics {
    /// Enable metrics integration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoMongoDb {
    /// The optional database name used to connect, defaults to "ditto".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub database: Option<DittoMongoDbDatabase>,
    /// The hostname of the MongoDB instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// The password used to connect to the MongoDB instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<DittoMongoDbPassword>,
    /// The port name of the MongoDB instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<u16>,
    /// The username used to connect to the MongoDB instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<DittoMongoDbUsername>,
}

/// The optional database name used to connect, defaults to "ditto".
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoMongoDbDatabase {
    /// Selects a key from a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<DittoMongoDbDatabaseConfigMap>,
    /// SecretKeySelector selects a key of a Secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<DittoMongoDbDatabaseSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Selects a key from a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoMongoDbDatabaseConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// SecretKeySelector selects a key of a Secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoMongoDbDatabaseSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The password used to connect to the MongoDB instance.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoMongoDbPassword {
    /// Selects a key from a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<DittoMongoDbPasswordConfigMap>,
    /// SecretKeySelector selects a key of a Secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<DittoMongoDbPasswordSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Selects a key from a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoMongoDbPasswordConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// SecretKeySelector selects a key of a Secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoMongoDbPasswordSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// The username used to connect to the MongoDB instance.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoMongoDbUsername {
    /// Selects a key from a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<DittoMongoDbUsernameConfigMap>,
    /// SecretKeySelector selects a key of a Secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<DittoMongoDbUsernameSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Selects a key from a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoMongoDbUsernameConfigMap {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// SecretKeySelector selects a key of a Secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoMongoDbUsernameSecret {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Provide additional OAuth configuration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoOauth {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuers: Option<BTreeMap<String, DittoOauthIssuers>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoOauthIssuers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subjects: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// Influence some options of the hosted OpenAPI spec.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoOpenApi {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverLabel")]
    pub server_label: Option<String>,
}

/// Services configuration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoServices {
    /// The concierge service
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub concierge: Option<DittoServicesConcierge>,
    /// The connectivity service
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connectivity: Option<DittoServicesConnectivity>,
    /// The gateway service
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gateway: Option<DittoServicesGateway>,
    /// The policies service
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policies: Option<DittoServicesPolicies>,
    /// The things service
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub things: Option<DittoServicesThings>,
    /// The things search service
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thingsSearch")]
    pub things_search: Option<DittoServicesThingsSearch>,
}

/// The concierge service
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoServicesConcierge {
    /// Additional system properties, which will be appended to the list of system properties.
    /// 
    /// Note: Setting arbitrary system properties may break the deployment and may also not be compatible with future versions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalProperties")]
    pub additional_properties: Option<BTreeMap<String, String>>,
    /// Allow configuring the application log level.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appLogLevel")]
    pub app_log_level: Option<DittoServicesConciergeAppLogLevel>,
    /// Allow configuring all log levels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<DittoServicesConciergeLogLevel>,
    /// Number of replicas. Defaults to one.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<u32>,
    /// Service resource limits
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<DittoServicesConciergeResources>,
    /// Allow configuring the root log level.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootLogLevel")]
    pub root_log_level: Option<DittoServicesConciergeRootLogLevel>,
}

/// The concierge service
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DittoServicesConciergeAppLogLevel {
    #[serde(rename = "trace")]
    Trace,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warn")]
    Warn,
    #[serde(rename = "error")]
    Error,
}

/// The concierge service
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DittoServicesConciergeLogLevel {
    #[serde(rename = "trace")]
    Trace,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warn")]
    Warn,
    #[serde(rename = "error")]
    Error,
}

/// Service resource limits
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoServicesConciergeResources {
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, String>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, String>>,
}

/// The concierge service
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DittoServicesConciergeRootLogLevel {
    #[serde(rename = "trace")]
    Trace,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warn")]
    Warn,
    #[serde(rename = "error")]
    Error,
}

/// The connectivity service
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoServicesConnectivity {
    /// Additional system properties, which will be appended to the list of system properties.
    /// 
    /// Note: Setting arbitrary system properties may break the deployment and may also not be compatible with future versions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalProperties")]
    pub additional_properties: Option<BTreeMap<String, String>>,
    /// Allow configuring the application log level.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appLogLevel")]
    pub app_log_level: Option<DittoServicesConnectivityAppLogLevel>,
    /// Allow configuring all log levels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<DittoServicesConnectivityLogLevel>,
    /// Number of replicas. Defaults to one.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<u32>,
    /// Service resource limits
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<DittoServicesConnectivityResources>,
    /// Allow configuring the root log level.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootLogLevel")]
    pub root_log_level: Option<DittoServicesConnectivityRootLogLevel>,
}

/// The connectivity service
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DittoServicesConnectivityAppLogLevel {
    #[serde(rename = "trace")]
    Trace,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warn")]
    Warn,
    #[serde(rename = "error")]
    Error,
}

/// The connectivity service
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DittoServicesConnectivityLogLevel {
    #[serde(rename = "trace")]
    Trace,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warn")]
    Warn,
    #[serde(rename = "error")]
    Error,
}

/// Service resource limits
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoServicesConnectivityResources {
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, String>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, String>>,
}

/// The connectivity service
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DittoServicesConnectivityRootLogLevel {
    #[serde(rename = "trace")]
    Trace,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warn")]
    Warn,
    #[serde(rename = "error")]
    Error,
}

/// The gateway service
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoServicesGateway {
    /// Additional system properties, which will be appended to the list of system properties.
    /// 
    /// Note: Setting arbitrary system properties may break the deployment and may also not be compatible with future versions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalProperties")]
    pub additional_properties: Option<BTreeMap<String, String>>,
    /// Allow configuring the application log level.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appLogLevel")]
    pub app_log_level: Option<DittoServicesGatewayAppLogLevel>,
    /// Allow configuring all log levels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<DittoServicesGatewayLogLevel>,
    /// Number of replicas. Defaults to one.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<u32>,
    /// Service resource limits
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<DittoServicesGatewayResources>,
    /// Allow configuring the root log level.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootLogLevel")]
    pub root_log_level: Option<DittoServicesGatewayRootLogLevel>,
}

/// The gateway service
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DittoServicesGatewayAppLogLevel {
    #[serde(rename = "trace")]
    Trace,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warn")]
    Warn,
    #[serde(rename = "error")]
    Error,
}

/// The gateway service
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DittoServicesGatewayLogLevel {
    #[serde(rename = "trace")]
    Trace,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warn")]
    Warn,
    #[serde(rename = "error")]
    Error,
}

/// Service resource limits
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoServicesGatewayResources {
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, String>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, String>>,
}

/// The gateway service
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DittoServicesGatewayRootLogLevel {
    #[serde(rename = "trace")]
    Trace,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warn")]
    Warn,
    #[serde(rename = "error")]
    Error,
}

/// The policies service
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoServicesPolicies {
    /// Additional system properties, which will be appended to the list of system properties.
    /// 
    /// Note: Setting arbitrary system properties may break the deployment and may also not be compatible with future versions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalProperties")]
    pub additional_properties: Option<BTreeMap<String, String>>,
    /// Allow configuring the application log level.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appLogLevel")]
    pub app_log_level: Option<DittoServicesPoliciesAppLogLevel>,
    /// Allow configuring all log levels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<DittoServicesPoliciesLogLevel>,
    /// Number of replicas. Defaults to one.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<u32>,
    /// Service resource limits
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<DittoServicesPoliciesResources>,
    /// Allow configuring the root log level.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootLogLevel")]
    pub root_log_level: Option<DittoServicesPoliciesRootLogLevel>,
}

/// The policies service
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DittoServicesPoliciesAppLogLevel {
    #[serde(rename = "trace")]
    Trace,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warn")]
    Warn,
    #[serde(rename = "error")]
    Error,
}

/// The policies service
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DittoServicesPoliciesLogLevel {
    #[serde(rename = "trace")]
    Trace,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warn")]
    Warn,
    #[serde(rename = "error")]
    Error,
}

/// Service resource limits
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoServicesPoliciesResources {
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, String>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, String>>,
}

/// The policies service
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DittoServicesPoliciesRootLogLevel {
    #[serde(rename = "trace")]
    Trace,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warn")]
    Warn,
    #[serde(rename = "error")]
    Error,
}

/// The things service
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoServicesThings {
    /// Additional system properties, which will be appended to the list of system properties.
    /// 
    /// Note: Setting arbitrary system properties may break the deployment and may also not be compatible with future versions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalProperties")]
    pub additional_properties: Option<BTreeMap<String, String>>,
    /// Allow configuring the application log level.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appLogLevel")]
    pub app_log_level: Option<DittoServicesThingsAppLogLevel>,
    /// Allow configuring all log levels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<DittoServicesThingsLogLevel>,
    /// Number of replicas. Defaults to one.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<u32>,
    /// Service resource limits
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<DittoServicesThingsResources>,
    /// Allow configuring the root log level.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootLogLevel")]
    pub root_log_level: Option<DittoServicesThingsRootLogLevel>,
}

/// The things service
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DittoServicesThingsAppLogLevel {
    #[serde(rename = "trace")]
    Trace,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warn")]
    Warn,
    #[serde(rename = "error")]
    Error,
}

/// The things service
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DittoServicesThingsLogLevel {
    #[serde(rename = "trace")]
    Trace,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warn")]
    Warn,
    #[serde(rename = "error")]
    Error,
}

/// Service resource limits
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoServicesThingsResources {
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, String>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, String>>,
}

/// The things service
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DittoServicesThingsRootLogLevel {
    #[serde(rename = "trace")]
    Trace,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warn")]
    Warn,
    #[serde(rename = "error")]
    Error,
}

/// The things search service
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoServicesThingsSearch {
    /// Additional system properties, which will be appended to the list of system properties.
    /// 
    /// Note: Setting arbitrary system properties may break the deployment and may also not be compatible with future versions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalProperties")]
    pub additional_properties: Option<BTreeMap<String, String>>,
    /// Allow configuring the application log level.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appLogLevel")]
    pub app_log_level: Option<DittoServicesThingsSearchAppLogLevel>,
    /// Allow configuring all log levels.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<DittoServicesThingsSearchLogLevel>,
    /// Number of replicas. Defaults to one.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<u32>,
    /// Service resource limits
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<DittoServicesThingsSearchResources>,
    /// Allow configuring the root log level.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootLogLevel")]
    pub root_log_level: Option<DittoServicesThingsSearchRootLogLevel>,
}

/// The things search service
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DittoServicesThingsSearchAppLogLevel {
    #[serde(rename = "trace")]
    Trace,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warn")]
    Warn,
    #[serde(rename = "error")]
    Error,
}

/// The things search service
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DittoServicesThingsSearchLogLevel {
    #[serde(rename = "trace")]
    Trace,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warn")]
    Warn,
    #[serde(rename = "error")]
    Error,
}

/// Service resource limits
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoServicesThingsSearchResources {
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, String>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, String>>,
}

/// The things search service
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DittoServicesThingsSearchRootLogLevel {
    #[serde(rename = "trace")]
    Trace,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warn")]
    Warn,
    #[serde(rename = "error")]
    Error,
}

/// Influence some options of the hosted SwaggerUI.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoSwaggerUi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DittoStatus {
    /// Status conditions
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// An optional message
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// The phase the deployment is in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
}

