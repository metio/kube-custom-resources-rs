// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/apache/camel-k/camel.apache.org/v1/integrationprofiles.yaml --derive=Default --derive=PartialEq
// kopium version: 0.18.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// IntegrationProfileSpec applies user defined settings to the IntegrationProfile.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "camel.apache.org", version = "v1", kind = "IntegrationProfile", plural = "integrationprofiles")]
#[kube(namespaced)]
#[kube(status = "IntegrationProfileStatus")]
#[kube(schema = "disabled")]
pub struct IntegrationProfileSpec {
    /// specify how to build the Integration/IntegrationKits
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub build: Option<IntegrationProfileBuild>,
    /// configuration to be executed to all Kamelets controlled by this IntegrationProfile
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kamelet: Option<IntegrationProfileKamelet>,
    /// list of traits to be executed for all the Integration/IntegrationKits built from this IntegrationProfile
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub traits: Option<IntegrationProfileTraits>,
}

/// specify how to build the Integration/IntegrationKits
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileBuild {
    /// a base image that can be used as base layer for all images. It can be useful if you want to provide some custom base image with further utility software
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseImage")]
    pub base_image: Option<String>,
    /// Maven configuration used to build the Camel/Camel-Quarkus applications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maven: Option<IntegrationProfileBuildMaven>,
    /// the image registry used to push/pull Integration images
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registry: Option<IntegrationProfileBuildRegistry>,
    /// the runtime used. Likely Camel Quarkus (we used to have main runtime which has been discontinued since version 1.5)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeProvider")]
    pub runtime_provider: Option<String>,
    /// the Camel K Runtime dependency version
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeVersion")]
    pub runtime_version: Option<String>,
    /// how much time to wait before time out the pipeline process
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Maven configuration used to build the Camel/Camel-Quarkus applications
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileBuildMaven {
    /// The Secrets name and key, containing the CA certificate(s) used to connect to remote Maven repositories. It can contain X.509 certificates, and PKCS#7 formatted certificate chains. A JKS formatted keystore is automatically created to store the CA certificate(s), and configured to be used as a trusted certificate(s) by the Maven commands. Note that the root CA certificates are also imported into the created keystore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caSecrets")]
    pub ca_secrets: Option<Vec<IntegrationProfileBuildMavenCaSecrets>>,
    /// The CLI options that are appended to the list of arguments for Maven commands, e.g., `-V,--no-transfer-progress,-Dstyle.color=never`. See https://maven.apache.org/ref/3.8.4/maven-embedder/cli.html.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cliOptions")]
    pub cli_options: Option<Vec<String>>,
    /// The Maven build extensions. See https://maven.apache.org/guides/mini/guide-using-extensions.html.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<IntegrationProfileBuildMavenExtension>>,
    /// The path of the local Maven repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRepository")]
    pub local_repository: Option<String>,
    /// A reference to the ConfigMap or Secret key that contains the Maven profile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profiles: Option<Vec<IntegrationProfileBuildMavenProfiles>>,
    /// The Maven properties.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<BTreeMap<String, String>>,
    /// A reference to the ConfigMap or Secret key that contains the Maven settings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<IntegrationProfileBuildMavenSettings>,
    /// A reference to the ConfigMap or Secret key that contains the security of the Maven settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "settingsSecurity")]
    pub settings_security: Option<IntegrationProfileBuildMavenSettingsSecurity>,
}

/// SecretKeySelector selects a key of a Secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileBuildMavenCaSecrets {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// MavenArtifact defines a GAV (Group:Artifact:Type:Version:Classifier) Maven artifact.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileBuildMavenExtension {
    /// Maven Artifact
    #[serde(rename = "artifactId")]
    pub artifact_id: String,
    /// Maven Classifier
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub classifier: Option<String>,
    /// Maven Group
    #[serde(rename = "groupId")]
    pub group_id: String,
    /// Maven Type
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// Maven Version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// ValueSource --.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileBuildMavenProfiles {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<IntegrationProfileBuildMavenProfilesConfigMapKeyRef>,
    /// Selects a key of a secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<IntegrationProfileBuildMavenProfilesSecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileBuildMavenProfilesConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a key of a secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileBuildMavenProfilesSecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// A reference to the ConfigMap or Secret key that contains the Maven settings.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileBuildMavenSettings {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<IntegrationProfileBuildMavenSettingsConfigMapKeyRef>,
    /// Selects a key of a secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<IntegrationProfileBuildMavenSettingsSecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileBuildMavenSettingsConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a key of a secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileBuildMavenSettingsSecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// A reference to the ConfigMap or Secret key that contains the security of the Maven settings.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileBuildMavenSettingsSecurity {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<IntegrationProfileBuildMavenSettingsSecurityConfigMapKeyRef>,
    /// Selects a key of a secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<IntegrationProfileBuildMavenSettingsSecuritySecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileBuildMavenSettingsSecurityConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a key of a secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileBuildMavenSettingsSecuritySecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// the image registry used to push/pull Integration images
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileBuildRegistry {
    /// the URI to access
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// the configmap which stores the Certificate Authority
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<String>,
    /// if the container registry is insecure (ie, http only)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    /// the registry organization
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    /// the secret where credentials are stored
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
}

/// configuration to be executed to all Kamelets controlled by this IntegrationProfile
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileKamelet {
    /// remote repository used to retrieve Kamelet catalog
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repositories: Option<Vec<IntegrationProfileKameletRepositories>>,
}

/// KameletRepositorySpec defines the location of the Kamelet catalog to use.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileKameletRepositories {
    /// the remote repository in the format github:ORG/REPO/PATH_TO_KAMELETS_FOLDER
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// list of traits to be executed for all the Integration/IntegrationKits built from this IntegrationProfile
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraits {
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "3scale")]
    pub r#_3scale: Option<IntegrationProfileTraits3scale>,
    /// The extension point with addon traits
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addons: Option<BTreeMap<String, IntegrationProfileTraitsAddons>>,
    /// The configuration of Affinity trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<IntegrationProfileTraitsAffinity>,
    /// The configuration of Builder trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub builder: Option<IntegrationProfileTraitsBuilder>,
    /// The configuration of Camel trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub camel: Option<IntegrationProfileTraitsCamel>,
    /// The configuration of Container trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<IntegrationProfileTraitsContainer>,
    /// The configuration of Cron trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cron: Option<IntegrationProfileTraitsCron>,
    /// The configuration of Dependencies trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dependencies: Option<IntegrationProfileTraitsDependencies>,
    /// The configuration of Deployer trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployer: Option<IntegrationProfileTraitsDeployer>,
    /// The configuration of Deployment trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<IntegrationProfileTraitsDeployment>,
    /// The configuration of Environment trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<IntegrationProfileTraitsEnvironment>,
    /// The configuration of Error Handler trait
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "error-handler")]
    pub error_handler: Option<IntegrationProfileTraitsErrorHandler>,
    /// The configuration of GC trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gc: Option<IntegrationProfileTraitsGc>,
    /// The configuration of Health trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health: Option<IntegrationProfileTraitsHealth>,
    /// The configuration of Ingress trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingress: Option<IntegrationProfileTraitsIngress>,
    /// The configuration of Istio trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub istio: Option<IntegrationProfileTraitsIstio>,
    /// The configuration of Jolokia trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jolokia: Option<IntegrationProfileTraitsJolokia>,
    /// The configuration of JVM trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jvm: Option<IntegrationProfileTraitsJvm>,
    /// The configuration of Kamelets trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kamelets: Option<IntegrationProfileTraitsKamelets>,
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keda: Option<IntegrationProfileTraitsKeda>,
    /// The configuration of Knative trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub knative: Option<IntegrationProfileTraitsKnative>,
    /// The configuration of Knative Service trait
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "knative-service")]
    pub knative_service: Option<IntegrationProfileTraitsKnativeService>,
    /// The configuration of Logging trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logging: Option<IntegrationProfileTraitsLogging>,
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub master: Option<IntegrationProfileTraitsMaster>,
    /// The configuration of Mount trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mount: Option<IntegrationProfileTraitsMount>,
    /// The configuration of OpenAPI trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openapi: Option<IntegrationProfileTraitsOpenapi>,
    /// The configuration of Owner trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<IntegrationProfileTraitsOwner>,
    /// The configuration of PDB trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pdb: Option<IntegrationProfileTraitsPdb>,
    /// The configuration of Platform trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<IntegrationProfileTraitsPlatform>,
    /// The configuration of Pod trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod: Option<IntegrationProfileTraitsPod>,
    /// The configuration of Prometheus trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prometheus: Option<IntegrationProfileTraitsPrometheus>,
    /// The configuration of Pull Secret trait
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pull-secret")]
    pub pull_secret: Option<IntegrationProfileTraitsPullSecret>,
    /// The configuration of Quarkus trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quarkus: Option<IntegrationProfileTraitsQuarkus>,
    /// The configuration of Registry trait Deprecated: use jvm trait or read documentation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registry: Option<IntegrationProfileTraitsRegistry>,
    /// The configuration of Route trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub route: Option<IntegrationProfileTraitsRoute>,
    /// The configuration of Service trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<IntegrationProfileTraitsService>,
    /// The configuration of Service Binding trait
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "service-binding")]
    pub service_binding: Option<IntegrationProfileTraitsServiceBinding>,
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strimzi: Option<IntegrationProfileTraitsStrimzi>,
    /// The configuration of Toleration trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub toleration: Option<IntegrationProfileTraitsToleration>,
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing: Option<IntegrationProfileTraitsTracing>,
}

/// Deprecated: for backward compatibility.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraits3scale {
    /// TraitConfiguration parameters configuration
    pub configuration: BTreeMap<String, serde_json::Value>,
}

/// The configuration of Affinity trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsAffinity {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Defines a set of nodes the integration pod(s) are eligible to be scheduled on, based on labels on the node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinityLabels")]
    pub node_affinity_labels: Option<Vec<String>>,
    /// Always co-locates multiple replicas of the integration in the same node (default `false`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinity")]
    pub pod_affinity: Option<bool>,
    /// Defines a set of pods (namely those matching the label selector, relative to the given namespace) that the integration pod(s) should be co-located with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinityLabels")]
    pub pod_affinity_labels: Option<Vec<String>>,
    /// Never co-locates multiple replicas of the integration in the same node (default `false`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinity")]
    pub pod_anti_affinity: Option<bool>,
    /// Defines a set of pods (namely those matching the label selector, relative to the given namespace) that the integration pod(s) should not be co-located with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinityLabels")]
    pub pod_anti_affinity_labels: Option<Vec<String>>,
}

/// The configuration of Builder trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsBuilder {
    /// When using `pod` strategy, annotation to use for the builder pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Specify a base image
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseImage")]
    pub base_image: Option<String>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Use the incremental image build option, to reuse existing containers (default `true`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "incrementalImageBuild")]
    pub incremental_image_build: Option<bool>,
    /// When using `pod` strategy, the maximum amount of CPU required by the pod builder. Deprecated: use TasksRequestCPU instead with task name `builder`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitCPU")]
    pub limit_cpu: Option<String>,
    /// When using `pod` strategy, the maximum amount of memory required by the pod builder. Deprecated: use TasksRequestCPU instead with task name `builder`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitMemory")]
    pub limit_memory: Option<String>,
    /// A list of references pointing to configmaps/secrets that contains a maven profile. The content of the maven profile is expected to be a text containing a valid maven profile starting with `<profile>` and ending with `</profile>` that will be integrated as an inline profile in the POM. Syntax: [configmap|secret]:name[/key], where name represents the resource name, key optionally represents the resource key to be filtered (default key value = profile.xml).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mavenProfiles")]
    pub maven_profiles: Option<Vec<String>>,
    /// Defines a set of nodes the builder pod is eligible to be scheduled on, based on labels on the node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// The build order strategy to use, either `dependencies`, `fifo` or `sequential` (default `sequential`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orderStrategy")]
    pub order_strategy: Option<IntegrationProfileTraitsBuilderOrderStrategy>,
    /// The list of manifest platforms to use to build a container image (default `linux/amd64`).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platforms: Option<Vec<String>>,
    /// A list of properties to be provided to the build task
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<String>>,
    /// When using `pod` strategy, the minimum amount of CPU required by the pod builder. Deprecated: use TasksRequestCPU instead with task name `builder`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCPU")]
    pub request_cpu: Option<String>,
    /// When using `pod` strategy, the minimum amount of memory required by the pod builder. Deprecated: use TasksRequestCPU instead with task name `builder`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMemory")]
    pub request_memory: Option<String>,
    /// The strategy to use, either `pod` or `routine` (default `routine`)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<IntegrationProfileTraitsBuilderStrategy>,
    /// A list of tasks to be executed (available only when using `pod` strategy) with format `<name>;<container-image>;<container-command>`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tasks: Option<Vec<String>>,
    /// A list of tasks sorted by the order of execution in a csv format, ie, `<taskName1>,<taskName2>,...`. Mind that you must include also the operator tasks (`builder`, `quarkus-native`, `package`, `jib`, `s2i`) if you need to execute them. Useful only with `pod` strategy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tasksFilter")]
    pub tasks_filter: Option<String>,
    /// A list of limit cpu configuration for the specific task with format `<task-name>:<limit-cpu-conf>`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tasksLimitCPU")]
    pub tasks_limit_cpu: Option<Vec<String>>,
    /// A list of limit memory configuration for the specific task with format `<task-name>:<limit-memory-conf>`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tasksLimitMemory")]
    pub tasks_limit_memory: Option<Vec<String>>,
    /// A list of request cpu configuration for the specific task with format `<task-name>:<request-cpu-conf>`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tasksRequestCPU")]
    pub tasks_request_cpu: Option<Vec<String>>,
    /// A list of request memory configuration for the specific task with format `<task-name>:<request-memory-conf>`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tasksRequestMemory")]
    pub tasks_request_memory: Option<Vec<String>>,
    /// Enable verbose logging on build components that support it (e.g. Kaniko build pod). Deprecated no longer in use
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verbose: Option<bool>,
}

/// The configuration of Builder trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileTraitsBuilderOrderStrategy {
    #[serde(rename = "dependencies")]
    Dependencies,
    #[serde(rename = "fifo")]
    Fifo,
    #[serde(rename = "sequential")]
    Sequential,
}

/// The configuration of Builder trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileTraitsBuilderStrategy {
    #[serde(rename = "pod")]
    Pod,
    #[serde(rename = "routine")]
    Routine,
}

/// The configuration of Camel trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsCamel {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// A list of properties to be provided to the Integration runtime
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<String>>,
    /// The camel-k-runtime version to use for the integration. It overrides the default version set in the Integration Platform. You can use a fixed version (for example "3.2.3") or a semantic version (for example "3.x") which will try to resolve to the best matching Catalog existing on the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeVersion")]
    pub runtime_version: Option<String>,
}

/// The configuration of Container trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsContainer {
    /// To automatically enable the trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Can be used to enable/disable exposure via kubernetes Service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expose: Option<bool>,
    /// The main container image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// The pull policy: Always|Never|IfNotPresent
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<IntegrationProfileTraitsContainerImagePullPolicy>,
    /// The maximum amount of CPU required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitCPU")]
    pub limit_cpu: Option<String>,
    /// The maximum amount of memory required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitMemory")]
    pub limit_memory: Option<String>,
    /// The main container name. It's named `integration` by default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// To configure a different port exposed by the container (default `8080`).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// To configure a different port name for the port exposed by the container. It defaults to `http` only when the `expose` parameter is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portName")]
    pub port_name: Option<String>,
    /// The minimum amount of CPU required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCPU")]
    pub request_cpu: Option<String>,
    /// The minimum amount of memory required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMemory")]
    pub request_memory: Option<String>,
    /// To configure under which service port the container port is to be exposed (default `80`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servicePort")]
    pub service_port: Option<i64>,
    /// To configure under which service port name the container port is to be exposed (default `http`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servicePortName")]
    pub service_port_name: Option<String>,
}

/// The configuration of Container trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileTraitsContainerImagePullPolicy {
    Always,
    Never,
    IfNotPresent,
}

/// The configuration of Cron trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsCron {
    /// Specifies the duration in seconds, relative to the start time, that the job may be continuously active before it is considered to be failed. It defaults to 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activeDeadlineSeconds")]
    pub active_deadline_seconds: Option<i64>,
    /// Automatically deploy the integration as CronJob when all routes are either starting from a periodic consumer (only `cron`, `timer` and `quartz` are supported) or a passive consumer (e.g. `direct` is a passive consumer). 
    ///  It's required that all periodic consumers have the same period, and it can be expressed as cron schedule (e.g. `1m` can be expressed as `0/1 * * * *`, while `35m` or `50s` cannot).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Specifies the number of retries before marking the job failed. It defaults to 2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backoffLimit")]
    pub backoff_limit: Option<i32>,
    /// A comma separated list of the Camel components that need to be customized in order for them to work when the schedule is triggered externally by Kubernetes. A specific customizer is activated for each specified component. E.g. for the `timer` component, the `cron-timer` customizer is activated (it's present in the `org.apache.camel.k:camel-k-cron` library). 
    ///  Supported components are currently: `cron`, `timer` and `quartz`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<String>,
    /// Specifies how to treat concurrent executions of a Job. Valid values are: - "Allow": allows CronJobs to run concurrently; - "Forbid" (default): forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "concurrencyPolicy")]
    pub concurrency_policy: Option<IntegrationProfileTraitsCronConcurrencyPolicy>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Use the default Camel implementation of the `cron` endpoint (`quartz`) instead of trying to materialize the integration as Kubernetes CronJob.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fallback: Option<bool>,
    /// The CronJob schedule for the whole integration. If multiple routes are declared, they must have the same schedule for this mechanism to work correctly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
    /// Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startingDeadlineSeconds")]
    pub starting_deadline_seconds: Option<i64>,
}

/// The configuration of Cron trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileTraitsCronConcurrencyPolicy {
    Allow,
    Forbid,
    Replace,
}

/// The configuration of Dependencies trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsDependencies {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The configuration of Deployer trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsDeployer {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Allows to explicitly select the desired deployment kind between `deployment`, `cron-job` or `knative-service` when creating the resources for running the integration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<IntegrationProfileTraitsDeployerKind>,
    /// Use server-side apply to update the owned resources (default `true`). Note that it automatically falls back to client-side patching, if SSA is not available, e.g., on old Kubernetes clusters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useSSA")]
    pub use_ssa: Option<bool>,
}

/// The configuration of Deployer trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileTraitsDeployerKind {
    #[serde(rename = "deployment")]
    Deployment,
    #[serde(rename = "cron-job")]
    CronJob,
    #[serde(rename = "knative-service")]
    KnativeService,
}

/// The configuration of Deployment trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsDeployment {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The maximum time in seconds for the deployment to make progress before it is considered to be failed. It defaults to `60s`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "progressDeadlineSeconds")]
    pub progress_deadline_seconds: Option<i32>,
    /// The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to `25%`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdateMaxSurge")]
    pub rolling_update_max_surge: Option<IntOrString>,
    /// The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to `25%`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdateMaxUnavailable")]
    pub rolling_update_max_unavailable: Option<IntOrString>,
    /// The deployment strategy to use to replace existing pods with new ones.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<IntegrationProfileTraitsDeploymentStrategy>,
}

/// The configuration of Deployment trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileTraitsDeploymentStrategy {
    Recreate,
    RollingUpdate,
}

/// The configuration of Environment trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsEnvironment {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Enables injection of `NAMESPACE` and `POD_NAME` environment variables (default `true`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerMeta")]
    pub container_meta: Option<bool>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Propagates the `HTTP_PROXY`, `HTTPS_PROXY` and `NO_PROXY` environment variables (default `true`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpProxy")]
    pub http_proxy: Option<bool>,
    /// A list of environment variables to be added to the integration container. The syntax is KEY=VALUE, e.g., `MY_VAR="my value"`. These take precedence over the previously defined environment variables.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vars: Option<Vec<String>>,
}

/// The configuration of Error Handler trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsErrorHandler {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The error handler ref name provided or found in application properties
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
}

/// The configuration of GC trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsGc {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Discovery client cache to be used, either `disabled`, `disk` or `memory` (default `memory`). Deprecated: to be removed from trait configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoveryCache")]
    pub discovery_cache: Option<IntegrationProfileTraitsGcDiscoveryCache>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The configuration of GC trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileTraitsGcDiscoveryCache {
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "disk")]
    Disk,
    #[serde(rename = "memory")]
    Memory,
}

/// The configuration of Health trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsHealth {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Minimum consecutive failures for the liveness probe to be considered failed after having succeeded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessFailureThreshold")]
    pub liveness_failure_threshold: Option<i32>,
    /// Number of seconds after the container has started before the liveness probe is initiated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessInitialDelay")]
    pub liveness_initial_delay: Option<i32>,
    /// How often to perform the liveness probe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessPeriod")]
    pub liveness_period: Option<i32>,
    /// Configures the liveness probe for the integration container (default `false`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbeEnabled")]
    pub liveness_probe_enabled: Option<bool>,
    /// Scheme to use when connecting to the liveness probe (default `HTTP`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessScheme")]
    pub liveness_scheme: Option<String>,
    /// Minimum consecutive successes for the liveness probe to be considered successful after having failed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessSuccessThreshold")]
    pub liveness_success_threshold: Option<i32>,
    /// Number of seconds after which the liveness probe times out.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessTimeout")]
    pub liveness_timeout: Option<i32>,
    /// Minimum consecutive failures for the readiness probe to be considered failed after having succeeded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessFailureThreshold")]
    pub readiness_failure_threshold: Option<i32>,
    /// Number of seconds after the container has started before the readiness probe is initiated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessInitialDelay")]
    pub readiness_initial_delay: Option<i32>,
    /// How often to perform the readiness probe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessPeriod")]
    pub readiness_period: Option<i32>,
    /// Configures the readiness probe for the integration container (default `true`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbeEnabled")]
    pub readiness_probe_enabled: Option<bool>,
    /// Scheme to use when connecting to the readiness probe (default `HTTP`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessScheme")]
    pub readiness_scheme: Option<String>,
    /// Minimum consecutive successes for the readiness probe to be considered successful after having failed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessSuccessThreshold")]
    pub readiness_success_threshold: Option<i32>,
    /// Number of seconds after which the readiness probe times out.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessTimeout")]
    pub readiness_timeout: Option<i32>,
    /// Minimum consecutive failures for the startup probe to be considered failed after having succeeded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupFailureThreshold")]
    pub startup_failure_threshold: Option<i32>,
    /// Number of seconds after the container has started before the startup probe is initiated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupInitialDelay")]
    pub startup_initial_delay: Option<i32>,
    /// How often to perform the startup probe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupPeriod")]
    pub startup_period: Option<i32>,
    /// Configures the startup probe for the integration container (default `false`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbeEnabled")]
    pub startup_probe_enabled: Option<bool>,
    /// Scheme to use when connecting to the startup probe (default `HTTP`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupScheme")]
    pub startup_scheme: Option<String>,
    /// Minimum consecutive successes for the startup probe to be considered successful after having failed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupSuccessThreshold")]
    pub startup_success_threshold: Option<i32>,
    /// Number of seconds after which the startup probe times out.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupTimeout")]
    pub startup_timeout: Option<i32>,
}

/// The configuration of Ingress trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsIngress {
    /// The annotations added to the ingress. This can be used to set controller specific annotations, e.g., when using the NGINX Ingress controller: See https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// To automatically add an ingress whenever the integration uses an HTTP endpoint consumer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// To configure the host exposed by the ingress.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// To configure the path exposed by the ingress (default `/`).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// To configure the path type exposed by the ingress. One of `Exact`, `Prefix`, `ImplementationSpecific` (default to `Prefix`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathType")]
    pub path_type: Option<IntegrationProfileTraitsIngressPathType>,
}

/// The configuration of Ingress trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileTraitsIngressPathType {
    Exact,
    Prefix,
    ImplementationSpecific,
}

/// The configuration of Istio trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsIstio {
    /// Configures a (comma-separated) list of CIDR subnets that should not be intercepted by the Istio proxy (`10.0.0.0/8,172.16.0.0/12,192.168.0.0/16` by default).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<String>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Forces the value for labels `sidecar.istio.io/inject`. By default the label is set to `true` on deployment and not set on Knative Service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inject: Option<bool>,
}

/// The configuration of Jolokia trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsJolokia {
    /// The PEM encoded CA certification file path, used to verify client certificates, applicable when `protocol` is `https` and `use-ssl-client-authentication` is `true` (default `/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt` for OpenShift).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "CACert")]
    pub ca_cert: Option<String>,
    /// The principal(s) which must be given in a client certificate to allow access to the Jolokia endpoint, applicable when `protocol` is `https` and `use-ssl-client-authentication` is `true` (default `clientPrincipal=cn=system:master-proxy`, `cn=hawtio-online.hawtio.svc` and `cn=fuse-console.fuse.svc` for OpenShift).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientPrincipal")]
    pub client_principal: Option<Vec<String>>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Listen for multicast requests (default `false`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoveryEnabled")]
    pub discovery_enabled: Option<bool>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Mandate the client certificate contains a client flag in the extended key usage section, applicable when `protocol` is `https` and `use-ssl-client-authentication` is `true` (default `true` for OpenShift).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extendedClientCheck")]
    pub extended_client_check: Option<bool>,
    /// The Host address to which the Jolokia agent should bind to. If `"\*"` or `"0.0.0.0"` is given, the servers binds to every network interface (default `"*"`).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// A list of additional Jolokia options as defined in https://jolokia.org/reference/html/agents.html#agent-jvm-config[JVM agent configuration options]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<String>>,
    /// The password used for authentication, applicable when the `user` option is set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// The Jolokia endpoint port (default `8778`).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// The protocol to use, either `http` or `https` (default `https` for OpenShift)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Whether client certificates should be used for authentication (default `true` for OpenShift).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useSSLClientAuthentication")]
    pub use_ssl_client_authentication: Option<bool>,
    /// The user to be used for authentication
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// The configuration of JVM trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsJvm {
    /// Additional JVM classpath (use `Linux` classpath separator)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub classpath: Option<String>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Activates remote debugging, so that a debugger can be attached to the JVM, e.g., using port-forwarding
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub debug: Option<bool>,
    /// Transport address at which to listen for the newly launched JVM (default `*:5005`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "debugAddress")]
    pub debug_address: Option<String>,
    /// Suspends the target JVM immediately before the main class is loaded
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "debugSuspend")]
    pub debug_suspend: Option<bool>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// A list of JVM options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<String>>,
    /// Prints the command used the start the JVM in the container logs (default `true`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "printCommand")]
    pub print_command: Option<bool>,
}

/// The configuration of Kamelets trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsKamelets {
    /// Automatically inject all referenced Kamelets and their default configuration (enabled by default)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Comma separated list of Kamelet names to load into the current integration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub list: Option<String>,
    /// The directory where the application mounts and reads Kamelet spec (default `/etc/camel/kamelets`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPoint")]
    pub mount_point: Option<String>,
}

/// Deprecated: for backward compatibility.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsKeda {
    /// TraitConfiguration parameters configuration
    pub configuration: BTreeMap<String, serde_json::Value>,
}

/// The configuration of Knative trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsKnative {
    /// Enable automatic discovery of all trait properties.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// List of channels used as destination of integration routes. Can contain simple channel names or full Camel URIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "channelSinks")]
    pub channel_sinks: Option<Vec<String>>,
    /// List of channels used as source of integration routes. Can contain simple channel names or full Camel URIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "channelSources")]
    pub channel_sources: Option<Vec<String>>,
    /// Can be used to inject a Knative complete configuration in JSON format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<String>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// List of endpoints used as destination of integration routes. Can contain simple endpoint names or full Camel URIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointSinks")]
    pub endpoint_sinks: Option<Vec<String>>,
    /// List of channels used as source of integration routes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointSources")]
    pub endpoint_sources: Option<Vec<String>>,
    /// List of event types that the integration will produce. Can contain simple event types or full Camel URIs (to use a specific broker).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventSinks")]
    pub event_sinks: Option<Vec<String>>,
    /// List of event types that the integration will be subscribed to. Can contain simple event types or full Camel URIs (to use a specific broker different from "default").
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventSources")]
    pub event_sources: Option<Vec<String>>,
    /// Enables filtering on events based on the header "ce-knativehistory". Since this header has been removed in newer versions of Knative, filtering is disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterSourceChannels")]
    pub filter_source_channels: Option<bool>,
    /// Enables the camel-k-operator to set the "bindings.knative.dev/include=true" label to the namespace As Knative requires this label to perform injection of K_SINK URL into the service. If this is false, the integration pod may start and fail, read the SinkBinding Knative documentation. (default: true)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceLabel")]
    pub namespace_label: Option<bool>,
    /// Allows binding the integration to a sink via a Knative SinkBinding resource. This can be used when the integration targets a single sink. It's enabled by default when the integration targets a single sink (except when the integration is owned by a Knative source).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sinkBinding")]
    pub sink_binding: Option<bool>,
}

/// The configuration of Knative Service trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsKnativeService {
    /// The annotations added to route. This can be used to set knative service specific annotations CLI usage example: -t "knative-service.annotations.'haproxy.router.openshift.io/balance'=true"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Automatically deploy the integration as Knative service when all conditions hold: 
    ///  * Integration is using the Knative profile * All routes are either starting from an HTTP based consumer or a passive consumer (e.g. `direct` is a passive consumer)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Configures the Knative autoscaling metric property (e.g. to set `concurrency` based or `cpu` based autoscaling). 
    ///  Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingMetric")]
    pub autoscaling_metric: Option<String>,
    /// Sets the allowed concurrency level or CPU percentage (depending on the autoscaling metric) for each Pod. 
    ///  Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingTarget")]
    pub autoscaling_target: Option<i64>,
    /// Configures the Knative autoscaling class property (e.g. to set `hpa.autoscaling.knative.dev` or `kpa.autoscaling.knative.dev` autoscaling). 
    ///  Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<IntegrationProfileTraitsKnativeServiceClass>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// An upper bound for the number of Pods that can be running in parallel for the integration. Knative has its own cap value that depends on the installation. 
    ///  Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxScale")]
    pub max_scale: Option<i64>,
    /// The minimum number of Pods that should be running at any time for the integration. It's **zero** by default, meaning that the integration is scaled down to zero when not used for a configured amount of time. 
    ///  Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minScale")]
    pub min_scale: Option<i64>,
    /// Enables to gradually shift traffic to the latest Revision and sets the rollout duration. It's disabled by default and must be expressed as a Golang `time.Duration` string representation, rounded to a second precision.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rolloutDuration")]
    pub rollout_duration: Option<String>,
    /// Setting `cluster-local`, Knative service becomes a private service. Specifically, this option applies the `networking.knative.dev/visibility` label to Knative service. 
    ///  Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub visibility: Option<IntegrationProfileTraitsKnativeServiceVisibility>,
}

/// The configuration of Knative Service trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileTraitsKnativeServiceClass {
    #[serde(rename = "kpa.autoscaling.knative.dev")]
    KpaAutoscalingKnativeDev,
    #[serde(rename = "hpa.autoscaling.knative.dev")]
    HpaAutoscalingKnativeDev,
}

/// The configuration of Knative Service trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileTraitsKnativeServiceVisibility {
    #[serde(rename = "cluster-local")]
    ClusterLocal,
}

/// The configuration of Logging trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsLogging {
    /// Colorize the log output
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub color: Option<bool>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Logs message format
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// Output the logs in JSON
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json: Option<bool>,
    /// Enable "pretty printing" of the JSON logs
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPrettyPrint")]
    pub json_pretty_print: Option<bool>,
    /// Adjust the logging level (defaults to `INFO`)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<IntegrationProfileTraitsLoggingLevel>,
}

/// The configuration of Logging trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileTraitsLoggingLevel {
    #[serde(rename = "FATAL")]
    Fatal,
    #[serde(rename = "WARN")]
    Warn,
    #[serde(rename = "INFO")]
    Info,
    #[serde(rename = "DEBUG")]
    Debug,
    #[serde(rename = "TRACE")]
    Trace,
}

/// Deprecated: for backward compatibility.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsMaster {
    /// TraitConfiguration parameters configuration
    pub configuration: BTreeMap<String, serde_json::Value>,
}

/// The configuration of Mount trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsMount {
    /// A list of configuration pointing to configmap/secret. The configuration are expected to be UTF-8 resources as they are processed by runtime Camel Context and tried to be parsed as property files. They are also made available on the classpath in order to ease their usage directly from the Route. Syntax: [configmap|secret]:name[/key], where name represents the resource name and key optionally represents the resource key to be filtered
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<Vec<String>>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Enable "hot reload" when a secret/configmap mounted is edited (default `false`). The configmap/secret must be marked with `camel.apache.org/integration` label to be taken in account. The resource will be watched for any kind change, also for changes in metadata.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hotReload")]
    pub hot_reload: Option<bool>,
    /// A list of resources (text or binary content) pointing to configmap/secret. The resources are expected to be any resource type (text or binary content). The destination path can be either a default location or any path specified by the user. Syntax: [configmap|secret]:name[/key][@path], where name represents the resource name, key optionally represents the resource key to be filtered and path represents the destination path
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<String>>,
    /// Deprecated: include your properties in an explicit property file backed by a secret. Let the operator to scan for secret labeled with `camel.apache.org/kamelet` and `camel.apache.org/kamelet.configuration`. These secrets are mounted to the application and treated as plain properties file with their key/value list (ie .spec.data["camel.my-property"] = my-value) (default `true`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scanKameletsImplicitLabelSecrets")]
    pub scan_kamelets_implicit_label_secrets: Option<bool>,
    /// A list of Persistent Volume Claims to be mounted. Syntax: [pvcname:/container/path]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<String>>,
}

/// The configuration of OpenAPI trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsOpenapi {
    /// The configmaps holding the spec of the OpenAPI
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configmaps: Option<Vec<String>>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The configuration of Owner trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsOwner {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The set of annotations to be transferred
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetAnnotations")]
    pub target_annotations: Option<Vec<String>>,
    /// The set of labels to be transferred
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetLabels")]
    pub target_labels: Option<Vec<String>>,
}

/// The configuration of PDB trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsPdb {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The number of pods for the Integration that can be unavailable after an eviction. It can be either an absolute number or a percentage (default `1` if `min-available` is also not set). Only one of `max-unavailable` and `min-available` can be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<String>,
    /// The number of pods for the Integration that must still be available after an eviction. It can be either an absolute number or a percentage. Only one of `min-available` and `max-unavailable` can be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minAvailable")]
    pub min_available: Option<String>,
}

/// The configuration of Platform trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsPlatform {
    /// To automatically detect from the environment if a default platform can be created (it will be created on OpenShift or when a registry address is set). Deprecated: Platform is auto generated by the operator install procedure - maintained for backward compatibility
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// To create a default (empty) platform when the platform is missing. Deprecated: Platform is auto generated by the operator install procedure - maintained for backward compatibility
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createDefault")]
    pub create_default: Option<bool>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Indicates if the platform should be created globally in the case of global operator (default true). Deprecated: Platform is auto generated by the operator install procedure - maintained for backward compatibility
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub global: Option<bool>,
}

/// The configuration of Pod trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsPod {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The configuration of Prometheus trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsPrometheus {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Whether a `PodMonitor` resource is created (default `true`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podMonitor")]
    pub pod_monitor: Option<bool>,
    /// The `PodMonitor` resource labels, applicable when `pod-monitor` is `true`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podMonitorLabels")]
    pub pod_monitor_labels: Option<Vec<String>>,
}

/// The configuration of Pull Secret trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsPullSecret {
    /// Automatically configures the platform registry secret on the pod if it is of type `kubernetes.io/dockerconfigjson`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// When using a global operator with a shared platform, this enables delegation of the `system:image-puller` cluster role on the operator namespace to the integration service account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullerDelegation")]
    pub image_puller_delegation: Option<bool>,
    /// The pull secret name to set on the Pod. If left empty this is automatically taken from the `IntegrationPlatform` registry configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// The configuration of Quarkus trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsQuarkus {
    /// The Quarkus mode to run: either `jvm` or `native` (default `jvm`). In case both `jvm` and `native` are specified, two `IntegrationKit` resources are created, with the `native` kit having precedence over the `jvm` one once ready.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildMode")]
    pub build_mode: Option<Vec<String>>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The base image to use when running a native build (default `quay.io/quarkus/quarkus-micro-image:2.0`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nativeBaseImage")]
    pub native_base_image: Option<String>,
    /// The image containing the tooling required for a native build (by default it will use the one provided in the runtime catalog)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nativeBuilderImage")]
    pub native_builder_image: Option<String>,
    /// The Quarkus package types, `fast-jar` or `native` (default `fast-jar`). In case both `fast-jar` and `native` are specified, two `IntegrationKit` resources are created, with the native kit having precedence over the `fast-jar` one once ready. The order influences the resolution of the current kit for the integration. The kit corresponding to the first package type will be assigned to the integration in case no existing kit that matches the integration exists. Deprecated: use `build-mode` instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packageTypes")]
    pub package_types: Option<Vec<String>>,
}

/// The configuration of Registry trait Deprecated: use jvm trait or read documentation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsRegistry {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The configuration of Route trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsRoute {
    /// The annotations added to route. This can be used to set route specific annotations For annotations options see https://docs.openshift.com/container-platform/3.11/architecture/networking/routes.html#route-specific-annotations CLI usage example: -t "route.annotations.'haproxy.router.openshift.io/balance'=true"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// To configure the host exposed by the route.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// The TLS CA certificate contents. 
    ///  Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCACertificate")]
    pub tls_ca_certificate: Option<String>,
    /// The secret name and key reference to the TLS CA certificate. The format is "secret-name[/key-name]", the value represents the secret name, if there is only one key in the secret it will be read, otherwise you can set a key name separated with a "/". 
    ///  Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCACertificateSecret")]
    pub tls_ca_certificate_secret: Option<String>,
    /// The TLS certificate contents. 
    ///  Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCertificate")]
    pub tls_certificate: Option<String>,
    /// The secret name and key reference to the TLS certificate. The format is "secret-name[/key-name]", the value represents the secret name, if there is only one key in the secret it will be read, otherwise you can set a key name separated with a "/". 
    ///  Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCertificateSecret")]
    pub tls_certificate_secret: Option<String>,
    /// The destination CA certificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify. 
    ///  Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsDestinationCACertificate")]
    pub tls_destination_ca_certificate: Option<String>,
    /// The secret name and key reference to the destination CA certificate. The format is "secret-name[/key-name]", the value represents the secret name, if there is only one key in the secret it will be read, otherwise you can set a key name separated with a "/". 
    ///  Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsDestinationCACertificateSecret")]
    pub tls_destination_ca_certificate_secret: Option<String>,
    /// To configure how to deal with insecure traffic, e.g. `Allow`, `Disable` or `Redirect` traffic. 
    ///  Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsInsecureEdgeTerminationPolicy")]
    pub tls_insecure_edge_termination_policy: Option<IntegrationProfileTraitsRouteTlsInsecureEdgeTerminationPolicy>,
    /// The TLS certificate key contents. 
    ///  Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
    /// The secret name and key reference to the TLS certificate key. The format is "secret-name[/key-name]", the value represents the secret name, if there is only one key in the secret it will be read, otherwise you can set a key name separated with a "/". 
    ///  Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKeySecret")]
    pub tls_key_secret: Option<String>,
    /// The TLS termination type, like `edge`, `passthrough` or `reencrypt`. 
    ///  Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsTermination")]
    pub tls_termination: Option<IntegrationProfileTraitsRouteTlsTermination>,
}

/// The configuration of Route trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileTraitsRouteTlsInsecureEdgeTerminationPolicy {
    None,
    Allow,
    Redirect,
}

/// The configuration of Route trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileTraitsRouteTlsTermination {
    #[serde(rename = "edge")]
    Edge,
    #[serde(rename = "reencrypt")]
    Reencrypt,
    #[serde(rename = "passthrough")]
    Passthrough,
}

/// The configuration of Service trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsService {
    /// To automatically detect from the code if a Service needs to be created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Enable Service to be exposed as NodePort (default `false`). Deprecated: Use service type instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePort")]
    pub node_port: Option<bool>,
    /// The type of service to be used, either 'ClusterIP', 'NodePort' or 'LoadBalancer'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<IntegrationProfileTraitsServiceType>,
}

/// The configuration of Service trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileTraitsServiceType {
    #[serde(rename = "ClusterIP")]
    ClusterIp,
    NodePort,
    LoadBalancer,
}

/// The configuration of Service Binding trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsServiceBinding {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// List of Services in the form [[apigroup/]version:]kind:[namespace/]name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<String>>,
}

/// Deprecated: for backward compatibility.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsStrimzi {
    /// TraitConfiguration parameters configuration
    pub configuration: BTreeMap<String, serde_json::Value>,
}

/// The configuration of Toleration trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsToleration {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The list of taints to tolerate, in the form `Key[=Value]:Effect[:Seconds]`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub taints: Option<Vec<String>>,
}

/// Deprecated: for backward compatibility.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileTraitsTracing {
    /// TraitConfiguration parameters configuration
    pub configuration: BTreeMap<String, serde_json::Value>,
}

/// IntegrationProfileStatus defines the observed state of IntegrationProfile.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatus {
    /// specify how to build the Integration/IntegrationKits
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub build: Option<IntegrationProfileStatusBuild>,
    /// which are the conditions met (particularly useful when in ERROR phase)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// configuration to be executed to all Kamelets controlled by this IntegrationProfile
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kamelet: Option<IntegrationProfileStatusKamelet>,
    /// ObservedGeneration is the most recent generation observed for this IntegrationProfile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// defines in what phase the IntegrationProfile is found
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
    /// list of traits to be executed for all the Integration/IntegrationKits built from this IntegrationProfile
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub traits: Option<IntegrationProfileStatusTraits>,
}

/// specify how to build the Integration/IntegrationKits
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusBuild {
    /// a base image that can be used as base layer for all images. It can be useful if you want to provide some custom base image with further utility software
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseImage")]
    pub base_image: Option<String>,
    /// Maven configuration used to build the Camel/Camel-Quarkus applications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maven: Option<IntegrationProfileStatusBuildMaven>,
    /// the image registry used to push/pull Integration images
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registry: Option<IntegrationProfileStatusBuildRegistry>,
    /// the runtime used. Likely Camel Quarkus (we used to have main runtime which has been discontinued since version 1.5)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeProvider")]
    pub runtime_provider: Option<String>,
    /// the Camel K Runtime dependency version
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeVersion")]
    pub runtime_version: Option<String>,
    /// how much time to wait before time out the pipeline process
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// Maven configuration used to build the Camel/Camel-Quarkus applications
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusBuildMaven {
    /// The Secrets name and key, containing the CA certificate(s) used to connect to remote Maven repositories. It can contain X.509 certificates, and PKCS#7 formatted certificate chains. A JKS formatted keystore is automatically created to store the CA certificate(s), and configured to be used as a trusted certificate(s) by the Maven commands. Note that the root CA certificates are also imported into the created keystore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caSecrets")]
    pub ca_secrets: Option<Vec<IntegrationProfileStatusBuildMavenCaSecrets>>,
    /// The CLI options that are appended to the list of arguments for Maven commands, e.g., `-V,--no-transfer-progress,-Dstyle.color=never`. See https://maven.apache.org/ref/3.8.4/maven-embedder/cli.html.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cliOptions")]
    pub cli_options: Option<Vec<String>>,
    /// The Maven build extensions. See https://maven.apache.org/guides/mini/guide-using-extensions.html.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<IntegrationProfileStatusBuildMavenExtension>>,
    /// The path of the local Maven repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRepository")]
    pub local_repository: Option<String>,
    /// A reference to the ConfigMap or Secret key that contains the Maven profile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profiles: Option<Vec<IntegrationProfileStatusBuildMavenProfiles>>,
    /// The Maven properties.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<BTreeMap<String, String>>,
    /// A reference to the ConfigMap or Secret key that contains the Maven settings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<IntegrationProfileStatusBuildMavenSettings>,
    /// A reference to the ConfigMap or Secret key that contains the security of the Maven settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "settingsSecurity")]
    pub settings_security: Option<IntegrationProfileStatusBuildMavenSettingsSecurity>,
}

/// SecretKeySelector selects a key of a Secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusBuildMavenCaSecrets {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// MavenArtifact defines a GAV (Group:Artifact:Type:Version:Classifier) Maven artifact.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusBuildMavenExtension {
    /// Maven Artifact
    #[serde(rename = "artifactId")]
    pub artifact_id: String,
    /// Maven Classifier
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub classifier: Option<String>,
    /// Maven Group
    #[serde(rename = "groupId")]
    pub group_id: String,
    /// Maven Type
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// Maven Version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// ValueSource --.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusBuildMavenProfiles {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<IntegrationProfileStatusBuildMavenProfilesConfigMapKeyRef>,
    /// Selects a key of a secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<IntegrationProfileStatusBuildMavenProfilesSecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusBuildMavenProfilesConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a key of a secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusBuildMavenProfilesSecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// A reference to the ConfigMap or Secret key that contains the Maven settings.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusBuildMavenSettings {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<IntegrationProfileStatusBuildMavenSettingsConfigMapKeyRef>,
    /// Selects a key of a secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<IntegrationProfileStatusBuildMavenSettingsSecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusBuildMavenSettingsConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a key of a secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusBuildMavenSettingsSecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// A reference to the ConfigMap or Secret key that contains the security of the Maven settings.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusBuildMavenSettingsSecurity {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<IntegrationProfileStatusBuildMavenSettingsSecurityConfigMapKeyRef>,
    /// Selects a key of a secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<IntegrationProfileStatusBuildMavenSettingsSecuritySecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusBuildMavenSettingsSecurityConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a key of a secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusBuildMavenSettingsSecuritySecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// the image registry used to push/pull Integration images
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusBuildRegistry {
    /// the URI to access
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// the configmap which stores the Certificate Authority
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<String>,
    /// if the container registry is insecure (ie, http only)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    /// the registry organization
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    /// the secret where credentials are stored
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
}

/// configuration to be executed to all Kamelets controlled by this IntegrationProfile
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusKamelet {
    /// remote repository used to retrieve Kamelet catalog
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repositories: Option<Vec<IntegrationProfileStatusKameletRepositories>>,
}

/// KameletRepositorySpec defines the location of the Kamelet catalog to use.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusKameletRepositories {
    /// the remote repository in the format github:ORG/REPO/PATH_TO_KAMELETS_FOLDER
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// list of traits to be executed for all the Integration/IntegrationKits built from this IntegrationProfile
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraits {
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "3scale")]
    pub r#_3scale: Option<IntegrationProfileStatusTraits3scale>,
    /// The extension point with addon traits
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addons: Option<BTreeMap<String, IntegrationProfileStatusTraitsAddons>>,
    /// The configuration of Affinity trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<IntegrationProfileStatusTraitsAffinity>,
    /// The configuration of Builder trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub builder: Option<IntegrationProfileStatusTraitsBuilder>,
    /// The configuration of Camel trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub camel: Option<IntegrationProfileStatusTraitsCamel>,
    /// The configuration of Container trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<IntegrationProfileStatusTraitsContainer>,
    /// The configuration of Cron trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cron: Option<IntegrationProfileStatusTraitsCron>,
    /// The configuration of Dependencies trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dependencies: Option<IntegrationProfileStatusTraitsDependencies>,
    /// The configuration of Deployer trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployer: Option<IntegrationProfileStatusTraitsDeployer>,
    /// The configuration of Deployment trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<IntegrationProfileStatusTraitsDeployment>,
    /// The configuration of Environment trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<IntegrationProfileStatusTraitsEnvironment>,
    /// The configuration of Error Handler trait
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "error-handler")]
    pub error_handler: Option<IntegrationProfileStatusTraitsErrorHandler>,
    /// The configuration of GC trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gc: Option<IntegrationProfileStatusTraitsGc>,
    /// The configuration of Health trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health: Option<IntegrationProfileStatusTraitsHealth>,
    /// The configuration of Ingress trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingress: Option<IntegrationProfileStatusTraitsIngress>,
    /// The configuration of Istio trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub istio: Option<IntegrationProfileStatusTraitsIstio>,
    /// The configuration of Jolokia trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jolokia: Option<IntegrationProfileStatusTraitsJolokia>,
    /// The configuration of JVM trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jvm: Option<IntegrationProfileStatusTraitsJvm>,
    /// The configuration of Kamelets trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kamelets: Option<IntegrationProfileStatusTraitsKamelets>,
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keda: Option<IntegrationProfileStatusTraitsKeda>,
    /// The configuration of Knative trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub knative: Option<IntegrationProfileStatusTraitsKnative>,
    /// The configuration of Knative Service trait
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "knative-service")]
    pub knative_service: Option<IntegrationProfileStatusTraitsKnativeService>,
    /// The configuration of Logging trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logging: Option<IntegrationProfileStatusTraitsLogging>,
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub master: Option<IntegrationProfileStatusTraitsMaster>,
    /// The configuration of Mount trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mount: Option<IntegrationProfileStatusTraitsMount>,
    /// The configuration of OpenAPI trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openapi: Option<IntegrationProfileStatusTraitsOpenapi>,
    /// The configuration of Owner trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<IntegrationProfileStatusTraitsOwner>,
    /// The configuration of PDB trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pdb: Option<IntegrationProfileStatusTraitsPdb>,
    /// The configuration of Platform trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<IntegrationProfileStatusTraitsPlatform>,
    /// The configuration of Pod trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod: Option<IntegrationProfileStatusTraitsPod>,
    /// The configuration of Prometheus trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prometheus: Option<IntegrationProfileStatusTraitsPrometheus>,
    /// The configuration of Pull Secret trait
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pull-secret")]
    pub pull_secret: Option<IntegrationProfileStatusTraitsPullSecret>,
    /// The configuration of Quarkus trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quarkus: Option<IntegrationProfileStatusTraitsQuarkus>,
    /// The configuration of Registry trait Deprecated: use jvm trait or read documentation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registry: Option<IntegrationProfileStatusTraitsRegistry>,
    /// The configuration of Route trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub route: Option<IntegrationProfileStatusTraitsRoute>,
    /// The configuration of Service trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<IntegrationProfileStatusTraitsService>,
    /// The configuration of Service Binding trait
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "service-binding")]
    pub service_binding: Option<IntegrationProfileStatusTraitsServiceBinding>,
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strimzi: Option<IntegrationProfileStatusTraitsStrimzi>,
    /// The configuration of Toleration trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub toleration: Option<IntegrationProfileStatusTraitsToleration>,
    /// Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing: Option<IntegrationProfileStatusTraitsTracing>,
}

/// Deprecated: for backward compatibility.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraits3scale {
    /// TraitConfiguration parameters configuration
    pub configuration: BTreeMap<String, serde_json::Value>,
}

/// The configuration of Affinity trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsAffinity {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Defines a set of nodes the integration pod(s) are eligible to be scheduled on, based on labels on the node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinityLabels")]
    pub node_affinity_labels: Option<Vec<String>>,
    /// Always co-locates multiple replicas of the integration in the same node (default `false`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinity")]
    pub pod_affinity: Option<bool>,
    /// Defines a set of pods (namely those matching the label selector, relative to the given namespace) that the integration pod(s) should be co-located with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinityLabels")]
    pub pod_affinity_labels: Option<Vec<String>>,
    /// Never co-locates multiple replicas of the integration in the same node (default `false`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinity")]
    pub pod_anti_affinity: Option<bool>,
    /// Defines a set of pods (namely those matching the label selector, relative to the given namespace) that the integration pod(s) should not be co-located with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinityLabels")]
    pub pod_anti_affinity_labels: Option<Vec<String>>,
}

/// The configuration of Builder trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsBuilder {
    /// When using `pod` strategy, annotation to use for the builder pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Specify a base image
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseImage")]
    pub base_image: Option<String>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Use the incremental image build option, to reuse existing containers (default `true`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "incrementalImageBuild")]
    pub incremental_image_build: Option<bool>,
    /// When using `pod` strategy, the maximum amount of CPU required by the pod builder. Deprecated: use TasksRequestCPU instead with task name `builder`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitCPU")]
    pub limit_cpu: Option<String>,
    /// When using `pod` strategy, the maximum amount of memory required by the pod builder. Deprecated: use TasksRequestCPU instead with task name `builder`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitMemory")]
    pub limit_memory: Option<String>,
    /// A list of references pointing to configmaps/secrets that contains a maven profile. The content of the maven profile is expected to be a text containing a valid maven profile starting with `<profile>` and ending with `</profile>` that will be integrated as an inline profile in the POM. Syntax: [configmap|secret]:name[/key], where name represents the resource name, key optionally represents the resource key to be filtered (default key value = profile.xml).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mavenProfiles")]
    pub maven_profiles: Option<Vec<String>>,
    /// Defines a set of nodes the builder pod is eligible to be scheduled on, based on labels on the node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// The build order strategy to use, either `dependencies`, `fifo` or `sequential` (default `sequential`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orderStrategy")]
    pub order_strategy: Option<IntegrationProfileStatusTraitsBuilderOrderStrategy>,
    /// The list of manifest platforms to use to build a container image (default `linux/amd64`).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platforms: Option<Vec<String>>,
    /// A list of properties to be provided to the build task
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<String>>,
    /// When using `pod` strategy, the minimum amount of CPU required by the pod builder. Deprecated: use TasksRequestCPU instead with task name `builder`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCPU")]
    pub request_cpu: Option<String>,
    /// When using `pod` strategy, the minimum amount of memory required by the pod builder. Deprecated: use TasksRequestCPU instead with task name `builder`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMemory")]
    pub request_memory: Option<String>,
    /// The strategy to use, either `pod` or `routine` (default `routine`)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<IntegrationProfileStatusTraitsBuilderStrategy>,
    /// A list of tasks to be executed (available only when using `pod` strategy) with format `<name>;<container-image>;<container-command>`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tasks: Option<Vec<String>>,
    /// A list of tasks sorted by the order of execution in a csv format, ie, `<taskName1>,<taskName2>,...`. Mind that you must include also the operator tasks (`builder`, `quarkus-native`, `package`, `jib`, `s2i`) if you need to execute them. Useful only with `pod` strategy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tasksFilter")]
    pub tasks_filter: Option<String>,
    /// A list of limit cpu configuration for the specific task with format `<task-name>:<limit-cpu-conf>`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tasksLimitCPU")]
    pub tasks_limit_cpu: Option<Vec<String>>,
    /// A list of limit memory configuration for the specific task with format `<task-name>:<limit-memory-conf>`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tasksLimitMemory")]
    pub tasks_limit_memory: Option<Vec<String>>,
    /// A list of request cpu configuration for the specific task with format `<task-name>:<request-cpu-conf>`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tasksRequestCPU")]
    pub tasks_request_cpu: Option<Vec<String>>,
    /// A list of request memory configuration for the specific task with format `<task-name>:<request-memory-conf>`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tasksRequestMemory")]
    pub tasks_request_memory: Option<Vec<String>>,
    /// Enable verbose logging on build components that support it (e.g. Kaniko build pod). Deprecated no longer in use
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verbose: Option<bool>,
}

/// The configuration of Builder trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileStatusTraitsBuilderOrderStrategy {
    #[serde(rename = "dependencies")]
    Dependencies,
    #[serde(rename = "fifo")]
    Fifo,
    #[serde(rename = "sequential")]
    Sequential,
}

/// The configuration of Builder trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileStatusTraitsBuilderStrategy {
    #[serde(rename = "pod")]
    Pod,
    #[serde(rename = "routine")]
    Routine,
}

/// The configuration of Camel trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsCamel {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// A list of properties to be provided to the Integration runtime
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<String>>,
    /// The camel-k-runtime version to use for the integration. It overrides the default version set in the Integration Platform. You can use a fixed version (for example "3.2.3") or a semantic version (for example "3.x") which will try to resolve to the best matching Catalog existing on the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeVersion")]
    pub runtime_version: Option<String>,
}

/// The configuration of Container trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsContainer {
    /// To automatically enable the trait
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Can be used to enable/disable exposure via kubernetes Service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expose: Option<bool>,
    /// The main container image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// The pull policy: Always|Never|IfNotPresent
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<IntegrationProfileStatusTraitsContainerImagePullPolicy>,
    /// The maximum amount of CPU required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitCPU")]
    pub limit_cpu: Option<String>,
    /// The maximum amount of memory required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitMemory")]
    pub limit_memory: Option<String>,
    /// The main container name. It's named `integration` by default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// To configure a different port exposed by the container (default `8080`).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// To configure a different port name for the port exposed by the container. It defaults to `http` only when the `expose` parameter is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portName")]
    pub port_name: Option<String>,
    /// The minimum amount of CPU required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCPU")]
    pub request_cpu: Option<String>,
    /// The minimum amount of memory required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMemory")]
    pub request_memory: Option<String>,
    /// To configure under which service port the container port is to be exposed (default `80`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servicePort")]
    pub service_port: Option<i64>,
    /// To configure under which service port name the container port is to be exposed (default `http`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "servicePortName")]
    pub service_port_name: Option<String>,
}

/// The configuration of Container trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileStatusTraitsContainerImagePullPolicy {
    Always,
    Never,
    IfNotPresent,
}

/// The configuration of Cron trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsCron {
    /// Specifies the duration in seconds, relative to the start time, that the job may be continuously active before it is considered to be failed. It defaults to 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activeDeadlineSeconds")]
    pub active_deadline_seconds: Option<i64>,
    /// Automatically deploy the integration as CronJob when all routes are either starting from a periodic consumer (only `cron`, `timer` and `quartz` are supported) or a passive consumer (e.g. `direct` is a passive consumer). 
    ///  It's required that all periodic consumers have the same period, and it can be expressed as cron schedule (e.g. `1m` can be expressed as `0/1 * * * *`, while `35m` or `50s` cannot).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Specifies the number of retries before marking the job failed. It defaults to 2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backoffLimit")]
    pub backoff_limit: Option<i32>,
    /// A comma separated list of the Camel components that need to be customized in order for them to work when the schedule is triggered externally by Kubernetes. A specific customizer is activated for each specified component. E.g. for the `timer` component, the `cron-timer` customizer is activated (it's present in the `org.apache.camel.k:camel-k-cron` library). 
    ///  Supported components are currently: `cron`, `timer` and `quartz`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<String>,
    /// Specifies how to treat concurrent executions of a Job. Valid values are: - "Allow": allows CronJobs to run concurrently; - "Forbid" (default): forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "concurrencyPolicy")]
    pub concurrency_policy: Option<IntegrationProfileStatusTraitsCronConcurrencyPolicy>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Use the default Camel implementation of the `cron` endpoint (`quartz`) instead of trying to materialize the integration as Kubernetes CronJob.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fallback: Option<bool>,
    /// The CronJob schedule for the whole integration. If multiple routes are declared, they must have the same schedule for this mechanism to work correctly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
    /// Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startingDeadlineSeconds")]
    pub starting_deadline_seconds: Option<i64>,
}

/// The configuration of Cron trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileStatusTraitsCronConcurrencyPolicy {
    Allow,
    Forbid,
    Replace,
}

/// The configuration of Dependencies trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsDependencies {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The configuration of Deployer trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsDeployer {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Allows to explicitly select the desired deployment kind between `deployment`, `cron-job` or `knative-service` when creating the resources for running the integration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<IntegrationProfileStatusTraitsDeployerKind>,
    /// Use server-side apply to update the owned resources (default `true`). Note that it automatically falls back to client-side patching, if SSA is not available, e.g., on old Kubernetes clusters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useSSA")]
    pub use_ssa: Option<bool>,
}

/// The configuration of Deployer trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileStatusTraitsDeployerKind {
    #[serde(rename = "deployment")]
    Deployment,
    #[serde(rename = "cron-job")]
    CronJob,
    #[serde(rename = "knative-service")]
    KnativeService,
}

/// The configuration of Deployment trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsDeployment {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The maximum time in seconds for the deployment to make progress before it is considered to be failed. It defaults to `60s`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "progressDeadlineSeconds")]
    pub progress_deadline_seconds: Option<i32>,
    /// The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to `25%`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdateMaxSurge")]
    pub rolling_update_max_surge: Option<IntOrString>,
    /// The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to `25%`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingUpdateMaxUnavailable")]
    pub rolling_update_max_unavailable: Option<IntOrString>,
    /// The deployment strategy to use to replace existing pods with new ones.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<IntegrationProfileStatusTraitsDeploymentStrategy>,
}

/// The configuration of Deployment trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileStatusTraitsDeploymentStrategy {
    Recreate,
    RollingUpdate,
}

/// The configuration of Environment trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsEnvironment {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Enables injection of `NAMESPACE` and `POD_NAME` environment variables (default `true`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerMeta")]
    pub container_meta: Option<bool>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Propagates the `HTTP_PROXY`, `HTTPS_PROXY` and `NO_PROXY` environment variables (default `true`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpProxy")]
    pub http_proxy: Option<bool>,
    /// A list of environment variables to be added to the integration container. The syntax is KEY=VALUE, e.g., `MY_VAR="my value"`. These take precedence over the previously defined environment variables.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vars: Option<Vec<String>>,
}

/// The configuration of Error Handler trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsErrorHandler {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The error handler ref name provided or found in application properties
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
}

/// The configuration of GC trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsGc {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Discovery client cache to be used, either `disabled`, `disk` or `memory` (default `memory`). Deprecated: to be removed from trait configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoveryCache")]
    pub discovery_cache: Option<IntegrationProfileStatusTraitsGcDiscoveryCache>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The configuration of GC trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileStatusTraitsGcDiscoveryCache {
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "disk")]
    Disk,
    #[serde(rename = "memory")]
    Memory,
}

/// The configuration of Health trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsHealth {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Minimum consecutive failures for the liveness probe to be considered failed after having succeeded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessFailureThreshold")]
    pub liveness_failure_threshold: Option<i32>,
    /// Number of seconds after the container has started before the liveness probe is initiated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessInitialDelay")]
    pub liveness_initial_delay: Option<i32>,
    /// How often to perform the liveness probe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessPeriod")]
    pub liveness_period: Option<i32>,
    /// Configures the liveness probe for the integration container (default `false`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbeEnabled")]
    pub liveness_probe_enabled: Option<bool>,
    /// Scheme to use when connecting to the liveness probe (default `HTTP`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessScheme")]
    pub liveness_scheme: Option<String>,
    /// Minimum consecutive successes for the liveness probe to be considered successful after having failed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessSuccessThreshold")]
    pub liveness_success_threshold: Option<i32>,
    /// Number of seconds after which the liveness probe times out.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessTimeout")]
    pub liveness_timeout: Option<i32>,
    /// Minimum consecutive failures for the readiness probe to be considered failed after having succeeded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessFailureThreshold")]
    pub readiness_failure_threshold: Option<i32>,
    /// Number of seconds after the container has started before the readiness probe is initiated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessInitialDelay")]
    pub readiness_initial_delay: Option<i32>,
    /// How often to perform the readiness probe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessPeriod")]
    pub readiness_period: Option<i32>,
    /// Configures the readiness probe for the integration container (default `true`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbeEnabled")]
    pub readiness_probe_enabled: Option<bool>,
    /// Scheme to use when connecting to the readiness probe (default `HTTP`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessScheme")]
    pub readiness_scheme: Option<String>,
    /// Minimum consecutive successes for the readiness probe to be considered successful after having failed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessSuccessThreshold")]
    pub readiness_success_threshold: Option<i32>,
    /// Number of seconds after which the readiness probe times out.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessTimeout")]
    pub readiness_timeout: Option<i32>,
    /// Minimum consecutive failures for the startup probe to be considered failed after having succeeded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupFailureThreshold")]
    pub startup_failure_threshold: Option<i32>,
    /// Number of seconds after the container has started before the startup probe is initiated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupInitialDelay")]
    pub startup_initial_delay: Option<i32>,
    /// How often to perform the startup probe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupPeriod")]
    pub startup_period: Option<i32>,
    /// Configures the startup probe for the integration container (default `false`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupProbeEnabled")]
    pub startup_probe_enabled: Option<bool>,
    /// Scheme to use when connecting to the startup probe (default `HTTP`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupScheme")]
    pub startup_scheme: Option<String>,
    /// Minimum consecutive successes for the startup probe to be considered successful after having failed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupSuccessThreshold")]
    pub startup_success_threshold: Option<i32>,
    /// Number of seconds after which the startup probe times out.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupTimeout")]
    pub startup_timeout: Option<i32>,
}

/// The configuration of Ingress trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsIngress {
    /// The annotations added to the ingress. This can be used to set controller specific annotations, e.g., when using the NGINX Ingress controller: See https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// To automatically add an ingress whenever the integration uses an HTTP endpoint consumer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// To configure the host exposed by the ingress.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// To configure the path exposed by the ingress (default `/`).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// To configure the path type exposed by the ingress. One of `Exact`, `Prefix`, `ImplementationSpecific` (default to `Prefix`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathType")]
    pub path_type: Option<IntegrationProfileStatusTraitsIngressPathType>,
}

/// The configuration of Ingress trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileStatusTraitsIngressPathType {
    Exact,
    Prefix,
    ImplementationSpecific,
}

/// The configuration of Istio trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsIstio {
    /// Configures a (comma-separated) list of CIDR subnets that should not be intercepted by the Istio proxy (`10.0.0.0/8,172.16.0.0/12,192.168.0.0/16` by default).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<String>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Forces the value for labels `sidecar.istio.io/inject`. By default the label is set to `true` on deployment and not set on Knative Service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inject: Option<bool>,
}

/// The configuration of Jolokia trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsJolokia {
    /// The PEM encoded CA certification file path, used to verify client certificates, applicable when `protocol` is `https` and `use-ssl-client-authentication` is `true` (default `/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt` for OpenShift).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "CACert")]
    pub ca_cert: Option<String>,
    /// The principal(s) which must be given in a client certificate to allow access to the Jolokia endpoint, applicable when `protocol` is `https` and `use-ssl-client-authentication` is `true` (default `clientPrincipal=cn=system:master-proxy`, `cn=hawtio-online.hawtio.svc` and `cn=fuse-console.fuse.svc` for OpenShift).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientPrincipal")]
    pub client_principal: Option<Vec<String>>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Listen for multicast requests (default `false`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoveryEnabled")]
    pub discovery_enabled: Option<bool>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Mandate the client certificate contains a client flag in the extended key usage section, applicable when `protocol` is `https` and `use-ssl-client-authentication` is `true` (default `true` for OpenShift).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extendedClientCheck")]
    pub extended_client_check: Option<bool>,
    /// The Host address to which the Jolokia agent should bind to. If `"\*"` or `"0.0.0.0"` is given, the servers binds to every network interface (default `"*"`).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// A list of additional Jolokia options as defined in https://jolokia.org/reference/html/agents.html#agent-jvm-config[JVM agent configuration options]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<String>>,
    /// The password used for authentication, applicable when the `user` option is set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// The Jolokia endpoint port (default `8778`).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// The protocol to use, either `http` or `https` (default `https` for OpenShift)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Whether client certificates should be used for authentication (default `true` for OpenShift).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useSSLClientAuthentication")]
    pub use_ssl_client_authentication: Option<bool>,
    /// The user to be used for authentication
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// The configuration of JVM trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsJvm {
    /// Additional JVM classpath (use `Linux` classpath separator)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub classpath: Option<String>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Activates remote debugging, so that a debugger can be attached to the JVM, e.g., using port-forwarding
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub debug: Option<bool>,
    /// Transport address at which to listen for the newly launched JVM (default `*:5005`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "debugAddress")]
    pub debug_address: Option<String>,
    /// Suspends the target JVM immediately before the main class is loaded
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "debugSuspend")]
    pub debug_suspend: Option<bool>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// A list of JVM options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<String>>,
    /// Prints the command used the start the JVM in the container logs (default `true`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "printCommand")]
    pub print_command: Option<bool>,
}

/// The configuration of Kamelets trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsKamelets {
    /// Automatically inject all referenced Kamelets and their default configuration (enabled by default)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Comma separated list of Kamelet names to load into the current integration
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub list: Option<String>,
    /// The directory where the application mounts and reads Kamelet spec (default `/etc/camel/kamelets`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPoint")]
    pub mount_point: Option<String>,
}

/// Deprecated: for backward compatibility.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsKeda {
    /// TraitConfiguration parameters configuration
    pub configuration: BTreeMap<String, serde_json::Value>,
}

/// The configuration of Knative trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsKnative {
    /// Enable automatic discovery of all trait properties.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// List of channels used as destination of integration routes. Can contain simple channel names or full Camel URIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "channelSinks")]
    pub channel_sinks: Option<Vec<String>>,
    /// List of channels used as source of integration routes. Can contain simple channel names or full Camel URIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "channelSources")]
    pub channel_sources: Option<Vec<String>>,
    /// Can be used to inject a Knative complete configuration in JSON format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<String>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// List of endpoints used as destination of integration routes. Can contain simple endpoint names or full Camel URIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointSinks")]
    pub endpoint_sinks: Option<Vec<String>>,
    /// List of channels used as source of integration routes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointSources")]
    pub endpoint_sources: Option<Vec<String>>,
    /// List of event types that the integration will produce. Can contain simple event types or full Camel URIs (to use a specific broker).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventSinks")]
    pub event_sinks: Option<Vec<String>>,
    /// List of event types that the integration will be subscribed to. Can contain simple event types or full Camel URIs (to use a specific broker different from "default").
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventSources")]
    pub event_sources: Option<Vec<String>>,
    /// Enables filtering on events based on the header "ce-knativehistory". Since this header has been removed in newer versions of Knative, filtering is disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterSourceChannels")]
    pub filter_source_channels: Option<bool>,
    /// Enables the camel-k-operator to set the "bindings.knative.dev/include=true" label to the namespace As Knative requires this label to perform injection of K_SINK URL into the service. If this is false, the integration pod may start and fail, read the SinkBinding Knative documentation. (default: true)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceLabel")]
    pub namespace_label: Option<bool>,
    /// Allows binding the integration to a sink via a Knative SinkBinding resource. This can be used when the integration targets a single sink. It's enabled by default when the integration targets a single sink (except when the integration is owned by a Knative source).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sinkBinding")]
    pub sink_binding: Option<bool>,
}

/// The configuration of Knative Service trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsKnativeService {
    /// The annotations added to route. This can be used to set knative service specific annotations CLI usage example: -t "knative-service.annotations.'haproxy.router.openshift.io/balance'=true"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Automatically deploy the integration as Knative service when all conditions hold: 
    ///  * Integration is using the Knative profile * All routes are either starting from an HTTP based consumer or a passive consumer (e.g. `direct` is a passive consumer)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Configures the Knative autoscaling metric property (e.g. to set `concurrency` based or `cpu` based autoscaling). 
    ///  Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingMetric")]
    pub autoscaling_metric: Option<String>,
    /// Sets the allowed concurrency level or CPU percentage (depending on the autoscaling metric) for each Pod. 
    ///  Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingTarget")]
    pub autoscaling_target: Option<i64>,
    /// Configures the Knative autoscaling class property (e.g. to set `hpa.autoscaling.knative.dev` or `kpa.autoscaling.knative.dev` autoscaling). 
    ///  Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<IntegrationProfileStatusTraitsKnativeServiceClass>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// An upper bound for the number of Pods that can be running in parallel for the integration. Knative has its own cap value that depends on the installation. 
    ///  Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxScale")]
    pub max_scale: Option<i64>,
    /// The minimum number of Pods that should be running at any time for the integration. It's **zero** by default, meaning that the integration is scaled down to zero when not used for a configured amount of time. 
    ///  Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minScale")]
    pub min_scale: Option<i64>,
    /// Enables to gradually shift traffic to the latest Revision and sets the rollout duration. It's disabled by default and must be expressed as a Golang `time.Duration` string representation, rounded to a second precision.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rolloutDuration")]
    pub rollout_duration: Option<String>,
    /// Setting `cluster-local`, Knative service becomes a private service. Specifically, this option applies the `networking.knative.dev/visibility` label to Knative service. 
    ///  Refer to the Knative documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub visibility: Option<IntegrationProfileStatusTraitsKnativeServiceVisibility>,
}

/// The configuration of Knative Service trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileStatusTraitsKnativeServiceClass {
    #[serde(rename = "kpa.autoscaling.knative.dev")]
    KpaAutoscalingKnativeDev,
    #[serde(rename = "hpa.autoscaling.knative.dev")]
    HpaAutoscalingKnativeDev,
}

/// The configuration of Knative Service trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileStatusTraitsKnativeServiceVisibility {
    #[serde(rename = "cluster-local")]
    ClusterLocal,
}

/// The configuration of Logging trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsLogging {
    /// Colorize the log output
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub color: Option<bool>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Logs message format
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// Output the logs in JSON
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json: Option<bool>,
    /// Enable "pretty printing" of the JSON logs
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPrettyPrint")]
    pub json_pretty_print: Option<bool>,
    /// Adjust the logging level (defaults to `INFO`)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<IntegrationProfileStatusTraitsLoggingLevel>,
}

/// The configuration of Logging trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileStatusTraitsLoggingLevel {
    #[serde(rename = "FATAL")]
    Fatal,
    #[serde(rename = "WARN")]
    Warn,
    #[serde(rename = "INFO")]
    Info,
    #[serde(rename = "DEBUG")]
    Debug,
    #[serde(rename = "TRACE")]
    Trace,
}

/// Deprecated: for backward compatibility.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsMaster {
    /// TraitConfiguration parameters configuration
    pub configuration: BTreeMap<String, serde_json::Value>,
}

/// The configuration of Mount trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsMount {
    /// A list of configuration pointing to configmap/secret. The configuration are expected to be UTF-8 resources as they are processed by runtime Camel Context and tried to be parsed as property files. They are also made available on the classpath in order to ease their usage directly from the Route. Syntax: [configmap|secret]:name[/key], where name represents the resource name and key optionally represents the resource key to be filtered
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configs: Option<Vec<String>>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Enable "hot reload" when a secret/configmap mounted is edited (default `false`). The configmap/secret must be marked with `camel.apache.org/integration` label to be taken in account. The resource will be watched for any kind change, also for changes in metadata.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hotReload")]
    pub hot_reload: Option<bool>,
    /// A list of resources (text or binary content) pointing to configmap/secret. The resources are expected to be any resource type (text or binary content). The destination path can be either a default location or any path specified by the user. Syntax: [configmap|secret]:name[/key][@path], where name represents the resource name, key optionally represents the resource key to be filtered and path represents the destination path
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<String>>,
    /// Deprecated: include your properties in an explicit property file backed by a secret. Let the operator to scan for secret labeled with `camel.apache.org/kamelet` and `camel.apache.org/kamelet.configuration`. These secrets are mounted to the application and treated as plain properties file with their key/value list (ie .spec.data["camel.my-property"] = my-value) (default `true`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scanKameletsImplicitLabelSecrets")]
    pub scan_kamelets_implicit_label_secrets: Option<bool>,
    /// A list of Persistent Volume Claims to be mounted. Syntax: [pvcname:/container/path]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<String>>,
}

/// The configuration of OpenAPI trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsOpenapi {
    /// The configmaps holding the spec of the OpenAPI
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configmaps: Option<Vec<String>>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The configuration of Owner trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsOwner {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The set of annotations to be transferred
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetAnnotations")]
    pub target_annotations: Option<Vec<String>>,
    /// The set of labels to be transferred
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetLabels")]
    pub target_labels: Option<Vec<String>>,
}

/// The configuration of PDB trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsPdb {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The number of pods for the Integration that can be unavailable after an eviction. It can be either an absolute number or a percentage (default `1` if `min-available` is also not set). Only one of `max-unavailable` and `min-available` can be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<String>,
    /// The number of pods for the Integration that must still be available after an eviction. It can be either an absolute number or a percentage. Only one of `min-available` and `max-unavailable` can be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minAvailable")]
    pub min_available: Option<String>,
}

/// The configuration of Platform trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsPlatform {
    /// To automatically detect from the environment if a default platform can be created (it will be created on OpenShift or when a registry address is set). Deprecated: Platform is auto generated by the operator install procedure - maintained for backward compatibility
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// To create a default (empty) platform when the platform is missing. Deprecated: Platform is auto generated by the operator install procedure - maintained for backward compatibility
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createDefault")]
    pub create_default: Option<bool>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Indicates if the platform should be created globally in the case of global operator (default true). Deprecated: Platform is auto generated by the operator install procedure - maintained for backward compatibility
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub global: Option<bool>,
}

/// The configuration of Pod trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsPod {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The configuration of Prometheus trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsPrometheus {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Whether a `PodMonitor` resource is created (default `true`).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podMonitor")]
    pub pod_monitor: Option<bool>,
    /// The `PodMonitor` resource labels, applicable when `pod-monitor` is `true`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podMonitorLabels")]
    pub pod_monitor_labels: Option<Vec<String>>,
}

/// The configuration of Pull Secret trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsPullSecret {
    /// Automatically configures the platform registry secret on the pod if it is of type `kubernetes.io/dockerconfigjson`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// When using a global operator with a shared platform, this enables delegation of the `system:image-puller` cluster role on the operator namespace to the integration service account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullerDelegation")]
    pub image_puller_delegation: Option<bool>,
    /// The pull secret name to set on the Pod. If left empty this is automatically taken from the `IntegrationPlatform` registry configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// The configuration of Quarkus trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsQuarkus {
    /// The Quarkus mode to run: either `jvm` or `native` (default `jvm`). In case both `jvm` and `native` are specified, two `IntegrationKit` resources are created, with the `native` kit having precedence over the `jvm` one once ready.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildMode")]
    pub build_mode: Option<Vec<String>>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Deprecated: no longer in use.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The base image to use when running a native build (default `quay.io/quarkus/quarkus-micro-image:2.0`)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nativeBaseImage")]
    pub native_base_image: Option<String>,
    /// The image containing the tooling required for a native build (by default it will use the one provided in the runtime catalog)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nativeBuilderImage")]
    pub native_builder_image: Option<String>,
    /// The Quarkus package types, `fast-jar` or `native` (default `fast-jar`). In case both `fast-jar` and `native` are specified, two `IntegrationKit` resources are created, with the native kit having precedence over the `fast-jar` one once ready. The order influences the resolution of the current kit for the integration. The kit corresponding to the first package type will be assigned to the integration in case no existing kit that matches the integration exists. Deprecated: use `build-mode` instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packageTypes")]
    pub package_types: Option<Vec<String>>,
}

/// The configuration of Registry trait Deprecated: use jvm trait or read documentation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsRegistry {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// The configuration of Route trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsRoute {
    /// The annotations added to route. This can be used to set route specific annotations For annotations options see https://docs.openshift.com/container-platform/3.11/architecture/networking/routes.html#route-specific-annotations CLI usage example: -t "route.annotations.'haproxy.router.openshift.io/balance'=true"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// To configure the host exposed by the route.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// The TLS CA certificate contents. 
    ///  Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCACertificate")]
    pub tls_ca_certificate: Option<String>,
    /// The secret name and key reference to the TLS CA certificate. The format is "secret-name[/key-name]", the value represents the secret name, if there is only one key in the secret it will be read, otherwise you can set a key name separated with a "/". 
    ///  Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCACertificateSecret")]
    pub tls_ca_certificate_secret: Option<String>,
    /// The TLS certificate contents. 
    ///  Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCertificate")]
    pub tls_certificate: Option<String>,
    /// The secret name and key reference to the TLS certificate. The format is "secret-name[/key-name]", the value represents the secret name, if there is only one key in the secret it will be read, otherwise you can set a key name separated with a "/". 
    ///  Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsCertificateSecret")]
    pub tls_certificate_secret: Option<String>,
    /// The destination CA certificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify. 
    ///  Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsDestinationCACertificate")]
    pub tls_destination_ca_certificate: Option<String>,
    /// The secret name and key reference to the destination CA certificate. The format is "secret-name[/key-name]", the value represents the secret name, if there is only one key in the secret it will be read, otherwise you can set a key name separated with a "/". 
    ///  Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsDestinationCACertificateSecret")]
    pub tls_destination_ca_certificate_secret: Option<String>,
    /// To configure how to deal with insecure traffic, e.g. `Allow`, `Disable` or `Redirect` traffic. 
    ///  Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsInsecureEdgeTerminationPolicy")]
    pub tls_insecure_edge_termination_policy: Option<IntegrationProfileStatusTraitsRouteTlsInsecureEdgeTerminationPolicy>,
    /// The TLS certificate key contents. 
    ///  Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKey")]
    pub tls_key: Option<String>,
    /// The secret name and key reference to the TLS certificate key. The format is "secret-name[/key-name]", the value represents the secret name, if there is only one key in the secret it will be read, otherwise you can set a key name separated with a "/". 
    ///  Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsKeySecret")]
    pub tls_key_secret: Option<String>,
    /// The TLS termination type, like `edge`, `passthrough` or `reencrypt`. 
    ///  Refer to the OpenShift route documentation for additional information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsTermination")]
    pub tls_termination: Option<IntegrationProfileStatusTraitsRouteTlsTermination>,
}

/// The configuration of Route trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileStatusTraitsRouteTlsInsecureEdgeTerminationPolicy {
    None,
    Allow,
    Redirect,
}

/// The configuration of Route trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileStatusTraitsRouteTlsTermination {
    #[serde(rename = "edge")]
    Edge,
    #[serde(rename = "reencrypt")]
    Reencrypt,
    #[serde(rename = "passthrough")]
    Passthrough,
}

/// The configuration of Service trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsService {
    /// To automatically detect from the code if a Service needs to be created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Enable Service to be exposed as NodePort (default `false`). Deprecated: Use service type instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePort")]
    pub node_port: Option<bool>,
    /// The type of service to be used, either 'ClusterIP', 'NodePort' or 'LoadBalancer'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<IntegrationProfileStatusTraitsServiceType>,
}

/// The configuration of Service trait
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum IntegrationProfileStatusTraitsServiceType {
    #[serde(rename = "ClusterIP")]
    ClusterIp,
    NodePort,
    LoadBalancer,
}

/// The configuration of Service Binding trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsServiceBinding {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// List of Services in the form [[apigroup/]version:]kind:[namespace/]name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<String>>,
}

/// Deprecated: for backward compatibility.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsStrimzi {
    /// TraitConfiguration parameters configuration
    pub configuration: BTreeMap<String, serde_json::Value>,
}

/// The configuration of Toleration trait
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsToleration {
    /// Legacy trait configuration parameters. Deprecated: for backward compatibility.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, serde_json::Value>>,
    /// Can be used to enable or disable a trait. All traits share this common property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The list of taints to tolerate, in the form `Key[=Value]:Effect[:Seconds]`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub taints: Option<Vec<String>>,
}

/// Deprecated: for backward compatibility.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct IntegrationProfileStatusTraitsTracing {
    /// TraitConfiguration parameters configuration
    pub configuration: BTreeMap<String, serde_json::Value>,
}

