// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/apache/camel-k/camel.apache.org/v1/builds.yaml --derive=Default --derive=PartialEq
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// BuildSpec defines the list of tasks to be execute for a Build. From Camel K version 2, it would be more appropriate to think it as pipeline.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "camel.apache.org", version = "v1", kind = "Build", plural = "builds")]
#[kube(namespaced)]
#[kube(status = "BuildStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct BuildSpec {
    /// The configuration that should be used to perform the Build. Deprecated: no longer in use in Camel K 2 - maintained for backward compatibility
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BuildConfiguration>,
    /// the maximum amount of parallel running builds started by this operator instance Deprecated: no longer in use in Camel K 2 - maintained for backward compatibility
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRunningBuilds")]
    pub max_running_builds: Option<i32>,
    /// The namespace where to run the builder Pod (must be the same of the operator in charge of this Build reconciliation). Deprecated: no longer in use in Camel K 2 - maintained for backward compatibility
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operatorNamespace")]
    pub operator_namespace: Option<String>,
    /// The sequence of tasks (pipeline) to be performed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tasks: Option<Vec<BuildTasks>>,
    /// Timeout defines the Build maximum execution duration. The Build deadline is set to the Build start time plus the Timeout duration. If the Build deadline is exceeded, the Build context is canceled, and its phase set to BuildPhaseFailed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
    /// The container image to be used to run the build. Deprecated: no longer in use in Camel K 2 - maintained for backward compatibility
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toolImage")]
    pub tool_image: Option<String>,
}

/// The configuration that should be used to perform the Build. Deprecated: no longer in use in Camel K 2 - maintained for backward compatibility
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildConfiguration {
    /// Annotation to use for the builder pod. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// The maximum amount of CPU required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitCPU")]
    pub limit_cpu: Option<String>,
    /// The maximum amount of memory required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitMemory")]
    pub limit_memory: Option<String>,
    /// The node selector for the builder pod. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// The namespace where to run the builder Pod (must be the same of the operator in charge of this Build reconciliation).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operatorNamespace")]
    pub operator_namespace: Option<String>,
    /// the build order strategy to adopt
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orderStrategy")]
    pub order_strategy: Option<BuildConfigurationOrderStrategy>,
    /// The list of platforms used in order to build a container image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platforms: Option<Vec<String>>,
    /// The minimum amount of CPU required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCPU")]
    pub request_cpu: Option<String>,
    /// The minimum amount of memory required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMemory")]
    pub request_memory: Option<String>,
    /// the strategy to adopt
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<BuildConfigurationStrategy>,
    /// The container image to be used to run the build.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toolImage")]
    pub tool_image: Option<String>,
}

/// The configuration that should be used to perform the Build. Deprecated: no longer in use in Camel K 2 - maintained for backward compatibility
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BuildConfigurationOrderStrategy {
    #[serde(rename = "dependencies")]
    Dependencies,
    #[serde(rename = "fifo")]
    Fifo,
    #[serde(rename = "sequential")]
    Sequential,
}

/// The configuration that should be used to perform the Build. Deprecated: no longer in use in Camel K 2 - maintained for backward compatibility
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BuildConfigurationStrategy {
    #[serde(rename = "routine")]
    Routine,
    #[serde(rename = "pod")]
    Pod,
}

/// Task represents the abstract task. Only one of the task should be configured to represent the specific task chosen.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasks {
    /// a BuildahTask, for Buildah strategy Deprecated: use jib, s2i or a custom publishing strategy instead
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub buildah: Option<BuildTasksBuildah>,
    /// a BuilderTask, used to generate and build the project
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub builder: Option<BuildTasksBuilder>,
    /// User customizable task execution. These are executed after the build and before the package task.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<BuildTasksCustom>,
    /// a JibTask, for Jib strategy
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jib: Option<BuildTasksJib>,
    /// a KanikoTask, for Kaniko strategy Deprecated: use jib, s2i or a custom publishing strategy instead
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kaniko: Option<BuildTasksKaniko>,
    /// Application pre publishing a PackageTask, used to package the project
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub package: Option<BuildTasksPackage>,
    /// a S2iTask, for S2I strategy
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s2i: Option<BuildTasksS2i>,
    /// a SpectrumTask, for Spectrum strategy Deprecated: use jib, s2i or a custom publishing strategy instead
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spectrum: Option<BuildTasksSpectrum>,
}

/// a BuildahTask, for Buildah strategy Deprecated: use jib, s2i or a custom publishing strategy instead
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuildah {
    /// base image layer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseImage")]
    pub base_image: Option<String>,
    /// The configuration that should be used to perform the Build.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BuildTasksBuildahConfiguration>,
    /// can be useful to share info with other tasks
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contextDir")]
    pub context_dir: Option<String>,
    /// docker image to use
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executorImage")]
    pub executor_image: Option<String>,
    /// final image name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// name of the task
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The platform of build image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<String>,
    /// where to publish the final image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registry: Option<BuildTasksBuildahRegistry>,
    /// log more information
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verbose: Option<bool>,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuildahConfiguration {
    /// Annotation to use for the builder pod. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// The maximum amount of CPU required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitCPU")]
    pub limit_cpu: Option<String>,
    /// The maximum amount of memory required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitMemory")]
    pub limit_memory: Option<String>,
    /// The node selector for the builder pod. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// The namespace where to run the builder Pod (must be the same of the operator in charge of this Build reconciliation).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operatorNamespace")]
    pub operator_namespace: Option<String>,
    /// the build order strategy to adopt
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orderStrategy")]
    pub order_strategy: Option<BuildTasksBuildahConfigurationOrderStrategy>,
    /// The list of platforms used in order to build a container image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platforms: Option<Vec<String>>,
    /// The minimum amount of CPU required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCPU")]
    pub request_cpu: Option<String>,
    /// The minimum amount of memory required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMemory")]
    pub request_memory: Option<String>,
    /// the strategy to adopt
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<BuildTasksBuildahConfigurationStrategy>,
    /// The container image to be used to run the build.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toolImage")]
    pub tool_image: Option<String>,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BuildTasksBuildahConfigurationOrderStrategy {
    #[serde(rename = "dependencies")]
    Dependencies,
    #[serde(rename = "fifo")]
    Fifo,
    #[serde(rename = "sequential")]
    Sequential,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BuildTasksBuildahConfigurationStrategy {
    #[serde(rename = "routine")]
    Routine,
    #[serde(rename = "pod")]
    Pod,
}

/// where to publish the final image
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuildahRegistry {
    /// the URI to access
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// the configmap which stores the Certificate Authority
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<String>,
    /// if the container registry is insecure (ie, http only)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    /// the registry organization
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    /// the secret where credentials are stored
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
}

/// a BuilderTask, used to generate and build the project
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilder {
    /// the base image layer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseImage")]
    pub base_image: Option<String>,
    /// workspace directory to use
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildDir")]
    pub build_dir: Option<String>,
    /// The configuration that should be used to perform the Build.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BuildTasksBuilderConfiguration>,
    /// the list of dependencies to use for this build
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dependencies: Option<Vec<String>>,
    /// the configuration required by Maven for the application build phase
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maven: Option<BuildTasksBuilderMaven>,
    /// name of the task
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// the configuration required for the runtime application
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub runtime: Option<BuildTasksBuilderRuntime>,
    /// the sources to add at build time
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<BuildTasksBuilderSources>>,
    /// the list of steps to execute (see pkg/builder/)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub steps: Option<Vec<String>>,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderConfiguration {
    /// Annotation to use for the builder pod. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// The maximum amount of CPU required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitCPU")]
    pub limit_cpu: Option<String>,
    /// The maximum amount of memory required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitMemory")]
    pub limit_memory: Option<String>,
    /// The node selector for the builder pod. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// The namespace where to run the builder Pod (must be the same of the operator in charge of this Build reconciliation).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operatorNamespace")]
    pub operator_namespace: Option<String>,
    /// the build order strategy to adopt
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orderStrategy")]
    pub order_strategy: Option<BuildTasksBuilderConfigurationOrderStrategy>,
    /// The list of platforms used in order to build a container image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platforms: Option<Vec<String>>,
    /// The minimum amount of CPU required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCPU")]
    pub request_cpu: Option<String>,
    /// The minimum amount of memory required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMemory")]
    pub request_memory: Option<String>,
    /// the strategy to adopt
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<BuildTasksBuilderConfigurationStrategy>,
    /// The container image to be used to run the build.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toolImage")]
    pub tool_image: Option<String>,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BuildTasksBuilderConfigurationOrderStrategy {
    #[serde(rename = "dependencies")]
    Dependencies,
    #[serde(rename = "fifo")]
    Fifo,
    #[serde(rename = "sequential")]
    Sequential,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BuildTasksBuilderConfigurationStrategy {
    #[serde(rename = "routine")]
    Routine,
    #[serde(rename = "pod")]
    Pod,
}

/// the configuration required by Maven for the application build phase
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderMaven {
    /// The Secrets name and key, containing the CA certificate(s) used to connect to remote Maven repositories. It can contain X.509 certificates, and PKCS#7 formatted certificate chains. A JKS formatted keystore is automatically created to store the CA certificate(s), and configured to be used as a trusted certificate(s) by the Maven commands. Note that the root CA certificates are also imported into the created keystore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caSecrets")]
    pub ca_secrets: Option<Vec<BuildTasksBuilderMavenCaSecrets>>,
    /// The CLI options that are appended to the list of arguments for Maven commands, e.g., `-V,--no-transfer-progress,-Dstyle.color=never`. See https://maven.apache.org/ref/3.8.4/maven-embedder/cli.html.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cliOptions")]
    pub cli_options: Option<Vec<String>>,
    /// The Maven build extensions. See https://maven.apache.org/guides/mini/guide-using-extensions.html.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<BuildTasksBuilderMavenExtension>>,
    /// The path of the local Maven repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRepository")]
    pub local_repository: Option<String>,
    /// A reference to the ConfigMap or Secret key that contains the Maven profile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profiles: Option<Vec<BuildTasksBuilderMavenProfiles>>,
    /// The Maven properties.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<BTreeMap<String, String>>,
    /// additional repositories
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repositories: Option<Vec<BuildTasksBuilderMavenRepositories>>,
    /// Servers (auth)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub servers: Option<Vec<BuildTasksBuilderMavenServers>>,
    /// A reference to the ConfigMap or Secret key that contains the Maven settings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<BuildTasksBuilderMavenSettings>,
    /// A reference to the ConfigMap or Secret key that contains the security of the Maven settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "settingsSecurity")]
    pub settings_security: Option<BuildTasksBuilderMavenSettingsSecurity>,
}

/// SecretKeySelector selects a key of a Secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderMavenCaSecrets {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// MavenArtifact defines a GAV (Group:Artifact:Type:Version:Classifier) Maven artifact.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderMavenExtension {
    /// Maven Artifact
    #[serde(rename = "artifactId")]
    pub artifact_id: String,
    /// Maven Classifier
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub classifier: Option<String>,
    /// Maven Group
    #[serde(rename = "groupId")]
    pub group_id: String,
    /// Maven Type
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// Maven Version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// ValueSource --.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderMavenProfiles {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<BuildTasksBuilderMavenProfilesConfigMapKeyRef>,
    /// Selects a key of a secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<BuildTasksBuilderMavenProfilesSecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderMavenProfilesConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a key of a secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderMavenProfilesSecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Repository defines a Maven repository.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderMavenRepositories {
    /// identifies the repository
    pub id: String,
    /// name of the repository
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// can use stable releases
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub releases: Option<BuildTasksBuilderMavenRepositoriesReleases>,
    /// can use snapshot
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub snapshots: Option<BuildTasksBuilderMavenRepositoriesSnapshots>,
    /// location of the repository
    pub url: String,
}

/// can use stable releases
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderMavenRepositoriesReleases {
    /// When Maven deploys files to the repository, it also deploys corresponding checksum files. Your options are to `ignore`, `fail`, or `warn` on missing or incorrect checksums.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checksumPolicy")]
    pub checksum_policy: Option<String>,
    /// is the policy activated or not
    pub enabled: bool,
    /// This element specifies how often updates should attempt to occur. Maven will compare the local POM's timestamp (stored in a repository's maven-metadata file) to the remote. The choices are: `always`, `daily` (default), `interval:X` (where X is an integer in minutes) or `never`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updatePolicy")]
    pub update_policy: Option<String>,
}

/// can use snapshot
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderMavenRepositoriesSnapshots {
    /// When Maven deploys files to the repository, it also deploys corresponding checksum files. Your options are to `ignore`, `fail`, or `warn` on missing or incorrect checksums.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checksumPolicy")]
    pub checksum_policy: Option<String>,
    /// is the policy activated or not
    pub enabled: bool,
    /// This element specifies how often updates should attempt to occur. Maven will compare the local POM's timestamp (stored in a repository's maven-metadata file) to the remote. The choices are: `always`, `daily` (default), `interval:X` (where X is an integer in minutes) or `never`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updatePolicy")]
    pub update_policy: Option<String>,
}

/// Server see link:https://maven.apache.org/settings.html[Maven settings].
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderMavenServers {
    /// Properties -- .
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// A reference to the ConfigMap or Secret key that contains the Maven settings.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderMavenSettings {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<BuildTasksBuilderMavenSettingsConfigMapKeyRef>,
    /// Selects a key of a secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<BuildTasksBuilderMavenSettingsSecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderMavenSettingsConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a key of a secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderMavenSettingsSecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// A reference to the ConfigMap or Secret key that contains the security of the Maven settings.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderMavenSettingsSecurity {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<BuildTasksBuilderMavenSettingsSecurityConfigMapKeyRef>,
    /// Selects a key of a secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<BuildTasksBuilderMavenSettingsSecuritySecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderMavenSettingsSecurityConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a key of a secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderMavenSettingsSecuritySecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// the configuration required for the runtime application
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderRuntime {
    /// application entry point (main) to be executed
    #[serde(rename = "applicationClass")]
    pub application_class: String,
    /// features offered by this runtime
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<BTreeMap<String, BuildTasksBuilderRuntimeCapabilities>>,
    /// list of dependencies needed to run the application
    pub dependencies: Vec<BuildTasksBuilderRuntimeDependencies>,
    /// set of metadata
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BTreeMap<String, String>>,
    /// Camel main application provider, ie, Camel Quarkus
    pub provider: String,
    /// Camel K Runtime version
    pub version: String,
}

/// features offered by this runtime
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderRuntimeCapabilities {
    /// Set of required Camel build time properties
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildTimeProperties")]
    pub build_time_properties: Option<Vec<BuildTasksBuilderRuntimeCapabilitiesBuildTimeProperties>>,
    /// List of required Maven dependencies
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dependencies: Option<Vec<BuildTasksBuilderRuntimeCapabilitiesDependencies>>,
    /// Set of generic metadata
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BTreeMap<String, String>>,
    /// Set of required Camel runtime properties
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeProperties")]
    pub runtime_properties: Option<Vec<BuildTasksBuilderRuntimeCapabilitiesRuntimeProperties>>,
}

/// CamelProperty represents a Camel property that may end up in an application.properties file.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderRuntimeCapabilitiesBuildTimeProperties {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// MavenArtifact defines a GAV (Group:Artifact:Type:Version:Classifier) Maven artifact.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderRuntimeCapabilitiesDependencies {
    /// Maven Artifact
    #[serde(rename = "artifactId")]
    pub artifact_id: String,
    /// Maven Classifier
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub classifier: Option<String>,
    /// Maven Group
    #[serde(rename = "groupId")]
    pub group_id: String,
    /// Maven Type
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// Maven Version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// CamelProperty represents a Camel property that may end up in an application.properties file.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderRuntimeCapabilitiesRuntimeProperties {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// MavenArtifact defines a GAV (Group:Artifact:Type:Version:Classifier) Maven artifact.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderRuntimeDependencies {
    /// Maven Artifact
    #[serde(rename = "artifactId")]
    pub artifact_id: String,
    /// Maven Classifier
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub classifier: Option<String>,
    /// Maven Group
    #[serde(rename = "groupId")]
    pub group_id: String,
    /// Maven Type
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// Maven Version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// SourceSpec defines the configuration for one or more routes to be executed in a certain Camel DSL language.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksBuilderSources {
    /// if the content is compressed (base64 encrypted)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression: Option<bool>,
    /// the source code (plain text)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// the confimap key holding the source content
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentKey")]
    pub content_key: Option<String>,
    /// the confimap reference holding the source content
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentRef")]
    pub content_ref: Option<String>,
    /// the content type (tipically text or binary)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    /// True if the spec is generated from a Kamelet
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "from-kamelet")]
    pub from_kamelet: Option<bool>,
    /// Interceptors are optional identifiers the org.apache.camel.k.RoutesLoader uses to pre/post process sources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interceptors: Option<Vec<String>>,
    /// specify which is the language (Camel DSL) used to interpret this source code
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    /// Loader is an optional id of the org.apache.camel.k.RoutesLoader that will interpret this source at runtime
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub loader: Option<String>,
    /// the name of the specification
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// the path where the file is stored
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// List of property names defined in the source (e.g. if type is "template")
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "property-names")]
    pub property_names: Option<Vec<String>>,
    /// the source code (binary)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawContent")]
    pub raw_content: Option<String>,
    /// Type defines the kind of source described by this object
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// User customizable task execution. These are executed after the build and before the package task.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksCustom {
    /// the command to execute Deprecated: use ContainerCommands
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<String>,
    /// the command to execute
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commands: Option<Vec<String>>,
    /// The configuration that should be used to perform the Build.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BuildTasksCustomConfiguration>,
    /// the container image to use
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// name of the task
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// the desired image build name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishingImage")]
    pub publishing_image: Option<String>,
    /// the user id used to run the container
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userId")]
    pub user_id: Option<i64>,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksCustomConfiguration {
    /// Annotation to use for the builder pod. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// The maximum amount of CPU required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitCPU")]
    pub limit_cpu: Option<String>,
    /// The maximum amount of memory required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitMemory")]
    pub limit_memory: Option<String>,
    /// The node selector for the builder pod. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// The namespace where to run the builder Pod (must be the same of the operator in charge of this Build reconciliation).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operatorNamespace")]
    pub operator_namespace: Option<String>,
    /// the build order strategy to adopt
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orderStrategy")]
    pub order_strategy: Option<BuildTasksCustomConfigurationOrderStrategy>,
    /// The list of platforms used in order to build a container image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platforms: Option<Vec<String>>,
    /// The minimum amount of CPU required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCPU")]
    pub request_cpu: Option<String>,
    /// The minimum amount of memory required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMemory")]
    pub request_memory: Option<String>,
    /// the strategy to adopt
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<BuildTasksCustomConfigurationStrategy>,
    /// The container image to be used to run the build.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toolImage")]
    pub tool_image: Option<String>,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BuildTasksCustomConfigurationOrderStrategy {
    #[serde(rename = "dependencies")]
    Dependencies,
    #[serde(rename = "fifo")]
    Fifo,
    #[serde(rename = "sequential")]
    Sequential,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BuildTasksCustomConfigurationStrategy {
    #[serde(rename = "routine")]
    Routine,
    #[serde(rename = "pod")]
    Pod,
}

/// a JibTask, for Jib strategy
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksJib {
    /// base image layer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseImage")]
    pub base_image: Option<String>,
    /// The configuration that should be used to perform the Build.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BuildTasksJibConfiguration>,
    /// can be useful to share info with other tasks
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contextDir")]
    pub context_dir: Option<String>,
    /// final image name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// name of the task
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// where to publish the final image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registry: Option<BuildTasksJibRegistry>,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksJibConfiguration {
    /// Annotation to use for the builder pod. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// The maximum amount of CPU required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitCPU")]
    pub limit_cpu: Option<String>,
    /// The maximum amount of memory required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitMemory")]
    pub limit_memory: Option<String>,
    /// The node selector for the builder pod. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// The namespace where to run the builder Pod (must be the same of the operator in charge of this Build reconciliation).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operatorNamespace")]
    pub operator_namespace: Option<String>,
    /// the build order strategy to adopt
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orderStrategy")]
    pub order_strategy: Option<BuildTasksJibConfigurationOrderStrategy>,
    /// The list of platforms used in order to build a container image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platforms: Option<Vec<String>>,
    /// The minimum amount of CPU required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCPU")]
    pub request_cpu: Option<String>,
    /// The minimum amount of memory required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMemory")]
    pub request_memory: Option<String>,
    /// the strategy to adopt
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<BuildTasksJibConfigurationStrategy>,
    /// The container image to be used to run the build.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toolImage")]
    pub tool_image: Option<String>,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BuildTasksJibConfigurationOrderStrategy {
    #[serde(rename = "dependencies")]
    Dependencies,
    #[serde(rename = "fifo")]
    Fifo,
    #[serde(rename = "sequential")]
    Sequential,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BuildTasksJibConfigurationStrategy {
    #[serde(rename = "routine")]
    Routine,
    #[serde(rename = "pod")]
    Pod,
}

/// where to publish the final image
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksJibRegistry {
    /// the URI to access
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// the configmap which stores the Certificate Authority
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<String>,
    /// if the container registry is insecure (ie, http only)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    /// the registry organization
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    /// the secret where credentials are stored
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
}

/// a KanikoTask, for Kaniko strategy Deprecated: use jib, s2i or a custom publishing strategy instead
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksKaniko {
    /// base image layer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseImage")]
    pub base_image: Option<String>,
    /// use a cache
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache: Option<BuildTasksKanikoCache>,
    /// The configuration that should be used to perform the Build.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BuildTasksKanikoConfiguration>,
    /// can be useful to share info with other tasks
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contextDir")]
    pub context_dir: Option<String>,
    /// docker image to use
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executorImage")]
    pub executor_image: Option<String>,
    /// final image name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// name of the task
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// where to publish the final image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registry: Option<BuildTasksKanikoRegistry>,
    /// log more information
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub verbose: Option<bool>,
}

/// use a cache
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksKanikoCache {
    /// true if a cache is enabled
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// the PVC used to store the cache
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentVolumeClaim")]
    pub persistent_volume_claim: Option<String>,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksKanikoConfiguration {
    /// Annotation to use for the builder pod. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// The maximum amount of CPU required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitCPU")]
    pub limit_cpu: Option<String>,
    /// The maximum amount of memory required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitMemory")]
    pub limit_memory: Option<String>,
    /// The node selector for the builder pod. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// The namespace where to run the builder Pod (must be the same of the operator in charge of this Build reconciliation).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operatorNamespace")]
    pub operator_namespace: Option<String>,
    /// the build order strategy to adopt
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orderStrategy")]
    pub order_strategy: Option<BuildTasksKanikoConfigurationOrderStrategy>,
    /// The list of platforms used in order to build a container image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platforms: Option<Vec<String>>,
    /// The minimum amount of CPU required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCPU")]
    pub request_cpu: Option<String>,
    /// The minimum amount of memory required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMemory")]
    pub request_memory: Option<String>,
    /// the strategy to adopt
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<BuildTasksKanikoConfigurationStrategy>,
    /// The container image to be used to run the build.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toolImage")]
    pub tool_image: Option<String>,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BuildTasksKanikoConfigurationOrderStrategy {
    #[serde(rename = "dependencies")]
    Dependencies,
    #[serde(rename = "fifo")]
    Fifo,
    #[serde(rename = "sequential")]
    Sequential,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BuildTasksKanikoConfigurationStrategy {
    #[serde(rename = "routine")]
    Routine,
    #[serde(rename = "pod")]
    Pod,
}

/// where to publish the final image
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksKanikoRegistry {
    /// the URI to access
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// the configmap which stores the Certificate Authority
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<String>,
    /// if the container registry is insecure (ie, http only)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    /// the registry organization
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    /// the secret where credentials are stored
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
}

/// Application pre publishing a PackageTask, used to package the project
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackage {
    /// the base image layer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseImage")]
    pub base_image: Option<String>,
    /// workspace directory to use
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildDir")]
    pub build_dir: Option<String>,
    /// The configuration that should be used to perform the Build.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BuildTasksPackageConfiguration>,
    /// the list of dependencies to use for this build
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dependencies: Option<Vec<String>>,
    /// the configuration required by Maven for the application build phase
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maven: Option<BuildTasksPackageMaven>,
    /// name of the task
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// the configuration required for the runtime application
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub runtime: Option<BuildTasksPackageRuntime>,
    /// the sources to add at build time
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<BuildTasksPackageSources>>,
    /// the list of steps to execute (see pkg/builder/)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub steps: Option<Vec<String>>,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageConfiguration {
    /// Annotation to use for the builder pod. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// The maximum amount of CPU required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitCPU")]
    pub limit_cpu: Option<String>,
    /// The maximum amount of memory required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitMemory")]
    pub limit_memory: Option<String>,
    /// The node selector for the builder pod. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// The namespace where to run the builder Pod (must be the same of the operator in charge of this Build reconciliation).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operatorNamespace")]
    pub operator_namespace: Option<String>,
    /// the build order strategy to adopt
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orderStrategy")]
    pub order_strategy: Option<BuildTasksPackageConfigurationOrderStrategy>,
    /// The list of platforms used in order to build a container image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platforms: Option<Vec<String>>,
    /// The minimum amount of CPU required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCPU")]
    pub request_cpu: Option<String>,
    /// The minimum amount of memory required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMemory")]
    pub request_memory: Option<String>,
    /// the strategy to adopt
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<BuildTasksPackageConfigurationStrategy>,
    /// The container image to be used to run the build.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toolImage")]
    pub tool_image: Option<String>,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BuildTasksPackageConfigurationOrderStrategy {
    #[serde(rename = "dependencies")]
    Dependencies,
    #[serde(rename = "fifo")]
    Fifo,
    #[serde(rename = "sequential")]
    Sequential,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BuildTasksPackageConfigurationStrategy {
    #[serde(rename = "routine")]
    Routine,
    #[serde(rename = "pod")]
    Pod,
}

/// the configuration required by Maven for the application build phase
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageMaven {
    /// The Secrets name and key, containing the CA certificate(s) used to connect to remote Maven repositories. It can contain X.509 certificates, and PKCS#7 formatted certificate chains. A JKS formatted keystore is automatically created to store the CA certificate(s), and configured to be used as a trusted certificate(s) by the Maven commands. Note that the root CA certificates are also imported into the created keystore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caSecrets")]
    pub ca_secrets: Option<Vec<BuildTasksPackageMavenCaSecrets>>,
    /// The CLI options that are appended to the list of arguments for Maven commands, e.g., `-V,--no-transfer-progress,-Dstyle.color=never`. See https://maven.apache.org/ref/3.8.4/maven-embedder/cli.html.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cliOptions")]
    pub cli_options: Option<Vec<String>>,
    /// The Maven build extensions. See https://maven.apache.org/guides/mini/guide-using-extensions.html.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extension: Option<Vec<BuildTasksPackageMavenExtension>>,
    /// The path of the local Maven repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localRepository")]
    pub local_repository: Option<String>,
    /// A reference to the ConfigMap or Secret key that contains the Maven profile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub profiles: Option<Vec<BuildTasksPackageMavenProfiles>>,
    /// The Maven properties.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<BTreeMap<String, String>>,
    /// additional repositories
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repositories: Option<Vec<BuildTasksPackageMavenRepositories>>,
    /// Servers (auth)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub servers: Option<Vec<BuildTasksPackageMavenServers>>,
    /// A reference to the ConfigMap or Secret key that contains the Maven settings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<BuildTasksPackageMavenSettings>,
    /// A reference to the ConfigMap or Secret key that contains the security of the Maven settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "settingsSecurity")]
    pub settings_security: Option<BuildTasksPackageMavenSettingsSecurity>,
}

/// SecretKeySelector selects a key of a Secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageMavenCaSecrets {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// MavenArtifact defines a GAV (Group:Artifact:Type:Version:Classifier) Maven artifact.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageMavenExtension {
    /// Maven Artifact
    #[serde(rename = "artifactId")]
    pub artifact_id: String,
    /// Maven Classifier
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub classifier: Option<String>,
    /// Maven Group
    #[serde(rename = "groupId")]
    pub group_id: String,
    /// Maven Type
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// Maven Version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// ValueSource --.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageMavenProfiles {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<BuildTasksPackageMavenProfilesConfigMapKeyRef>,
    /// Selects a key of a secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<BuildTasksPackageMavenProfilesSecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageMavenProfilesConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a key of a secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageMavenProfilesSecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Repository defines a Maven repository.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageMavenRepositories {
    /// identifies the repository
    pub id: String,
    /// name of the repository
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// can use stable releases
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub releases: Option<BuildTasksPackageMavenRepositoriesReleases>,
    /// can use snapshot
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub snapshots: Option<BuildTasksPackageMavenRepositoriesSnapshots>,
    /// location of the repository
    pub url: String,
}

/// can use stable releases
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageMavenRepositoriesReleases {
    /// When Maven deploys files to the repository, it also deploys corresponding checksum files. Your options are to `ignore`, `fail`, or `warn` on missing or incorrect checksums.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checksumPolicy")]
    pub checksum_policy: Option<String>,
    /// is the policy activated or not
    pub enabled: bool,
    /// This element specifies how often updates should attempt to occur. Maven will compare the local POM's timestamp (stored in a repository's maven-metadata file) to the remote. The choices are: `always`, `daily` (default), `interval:X` (where X is an integer in minutes) or `never`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updatePolicy")]
    pub update_policy: Option<String>,
}

/// can use snapshot
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageMavenRepositoriesSnapshots {
    /// When Maven deploys files to the repository, it also deploys corresponding checksum files. Your options are to `ignore`, `fail`, or `warn` on missing or incorrect checksums.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checksumPolicy")]
    pub checksum_policy: Option<String>,
    /// is the policy activated or not
    pub enabled: bool,
    /// This element specifies how often updates should attempt to occur. Maven will compare the local POM's timestamp (stored in a repository's maven-metadata file) to the remote. The choices are: `always`, `daily` (default), `interval:X` (where X is an integer in minutes) or `never`
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updatePolicy")]
    pub update_policy: Option<String>,
}

/// Server see link:https://maven.apache.org/settings.html[Maven settings].
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageMavenServers {
    /// Properties -- .
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// A reference to the ConfigMap or Secret key that contains the Maven settings.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageMavenSettings {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<BuildTasksPackageMavenSettingsConfigMapKeyRef>,
    /// Selects a key of a secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<BuildTasksPackageMavenSettingsSecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageMavenSettingsConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a key of a secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageMavenSettingsSecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// A reference to the ConfigMap or Secret key that contains the security of the Maven settings.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageMavenSettingsSecurity {
    /// Selects a key of a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<BuildTasksPackageMavenSettingsSecurityConfigMapKeyRef>,
    /// Selects a key of a secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<BuildTasksPackageMavenSettingsSecuritySecretKeyRef>,
}

/// Selects a key of a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageMavenSettingsSecurityConfigMapKeyRef {
    /// The key to select.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Selects a key of a secret.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageMavenSettingsSecuritySecretKeyRef {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// the configuration required for the runtime application
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageRuntime {
    /// application entry point (main) to be executed
    #[serde(rename = "applicationClass")]
    pub application_class: String,
    /// features offered by this runtime
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<BTreeMap<String, BuildTasksPackageRuntimeCapabilities>>,
    /// list of dependencies needed to run the application
    pub dependencies: Vec<BuildTasksPackageRuntimeDependencies>,
    /// set of metadata
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BTreeMap<String, String>>,
    /// Camel main application provider, ie, Camel Quarkus
    pub provider: String,
    /// Camel K Runtime version
    pub version: String,
}

/// features offered by this runtime
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageRuntimeCapabilities {
    /// Set of required Camel build time properties
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildTimeProperties")]
    pub build_time_properties: Option<Vec<BuildTasksPackageRuntimeCapabilitiesBuildTimeProperties>>,
    /// List of required Maven dependencies
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dependencies: Option<Vec<BuildTasksPackageRuntimeCapabilitiesDependencies>>,
    /// Set of generic metadata
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BTreeMap<String, String>>,
    /// Set of required Camel runtime properties
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeProperties")]
    pub runtime_properties: Option<Vec<BuildTasksPackageRuntimeCapabilitiesRuntimeProperties>>,
}

/// CamelProperty represents a Camel property that may end up in an application.properties file.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageRuntimeCapabilitiesBuildTimeProperties {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// MavenArtifact defines a GAV (Group:Artifact:Type:Version:Classifier) Maven artifact.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageRuntimeCapabilitiesDependencies {
    /// Maven Artifact
    #[serde(rename = "artifactId")]
    pub artifact_id: String,
    /// Maven Classifier
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub classifier: Option<String>,
    /// Maven Group
    #[serde(rename = "groupId")]
    pub group_id: String,
    /// Maven Type
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// Maven Version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// CamelProperty represents a Camel property that may end up in an application.properties file.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageRuntimeCapabilitiesRuntimeProperties {
    pub key: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// MavenArtifact defines a GAV (Group:Artifact:Type:Version:Classifier) Maven artifact.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageRuntimeDependencies {
    /// Maven Artifact
    #[serde(rename = "artifactId")]
    pub artifact_id: String,
    /// Maven Classifier
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub classifier: Option<String>,
    /// Maven Group
    #[serde(rename = "groupId")]
    pub group_id: String,
    /// Maven Type
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// Maven Version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// SourceSpec defines the configuration for one or more routes to be executed in a certain Camel DSL language.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksPackageSources {
    /// if the content is compressed (base64 encrypted)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression: Option<bool>,
    /// the source code (plain text)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// the confimap key holding the source content
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentKey")]
    pub content_key: Option<String>,
    /// the confimap reference holding the source content
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentRef")]
    pub content_ref: Option<String>,
    /// the content type (tipically text or binary)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    /// True if the spec is generated from a Kamelet
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "from-kamelet")]
    pub from_kamelet: Option<bool>,
    /// Interceptors are optional identifiers the org.apache.camel.k.RoutesLoader uses to pre/post process sources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interceptors: Option<Vec<String>>,
    /// specify which is the language (Camel DSL) used to interpret this source code
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    /// Loader is an optional id of the org.apache.camel.k.RoutesLoader that will interpret this source at runtime
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub loader: Option<String>,
    /// the name of the specification
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// the path where the file is stored
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// List of property names defined in the source (e.g. if type is "template")
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "property-names")]
    pub property_names: Option<Vec<String>>,
    /// the source code (binary)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawContent")]
    pub raw_content: Option<String>,
    /// Type defines the kind of source described by this object
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// a S2iTask, for S2I strategy
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksS2i {
    /// base image layer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseImage")]
    pub base_image: Option<String>,
    /// The configuration that should be used to perform the Build.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BuildTasksS2iConfiguration>,
    /// can be useful to share info with other tasks
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contextDir")]
    pub context_dir: Option<String>,
    /// final image name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// name of the task
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// where to publish the final image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registry: Option<BuildTasksS2iRegistry>,
    /// used by the ImageStream
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksS2iConfiguration {
    /// Annotation to use for the builder pod. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// The maximum amount of CPU required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitCPU")]
    pub limit_cpu: Option<String>,
    /// The maximum amount of memory required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitMemory")]
    pub limit_memory: Option<String>,
    /// The node selector for the builder pod. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// The namespace where to run the builder Pod (must be the same of the operator in charge of this Build reconciliation).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operatorNamespace")]
    pub operator_namespace: Option<String>,
    /// the build order strategy to adopt
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orderStrategy")]
    pub order_strategy: Option<BuildTasksS2iConfigurationOrderStrategy>,
    /// The list of platforms used in order to build a container image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platforms: Option<Vec<String>>,
    /// The minimum amount of CPU required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCPU")]
    pub request_cpu: Option<String>,
    /// The minimum amount of memory required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMemory")]
    pub request_memory: Option<String>,
    /// the strategy to adopt
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<BuildTasksS2iConfigurationStrategy>,
    /// The container image to be used to run the build.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toolImage")]
    pub tool_image: Option<String>,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BuildTasksS2iConfigurationOrderStrategy {
    #[serde(rename = "dependencies")]
    Dependencies,
    #[serde(rename = "fifo")]
    Fifo,
    #[serde(rename = "sequential")]
    Sequential,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BuildTasksS2iConfigurationStrategy {
    #[serde(rename = "routine")]
    Routine,
    #[serde(rename = "pod")]
    Pod,
}

/// where to publish the final image
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksS2iRegistry {
    /// the URI to access
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// the configmap which stores the Certificate Authority
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<String>,
    /// if the container registry is insecure (ie, http only)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    /// the registry organization
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    /// the secret where credentials are stored
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
}

/// a SpectrumTask, for Spectrum strategy Deprecated: use jib, s2i or a custom publishing strategy instead
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksSpectrum {
    /// base image layer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseImage")]
    pub base_image: Option<String>,
    /// The configuration that should be used to perform the Build.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BuildTasksSpectrumConfiguration>,
    /// can be useful to share info with other tasks
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contextDir")]
    pub context_dir: Option<String>,
    /// final image name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// name of the task
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// where to publish the final image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registry: Option<BuildTasksSpectrumRegistry>,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksSpectrumConfiguration {
    /// Annotation to use for the builder pod. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// The maximum amount of CPU required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitCPU")]
    pub limit_cpu: Option<String>,
    /// The maximum amount of memory required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitMemory")]
    pub limit_memory: Option<String>,
    /// The node selector for the builder pod. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// The namespace where to run the builder Pod (must be the same of the operator in charge of this Build reconciliation).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operatorNamespace")]
    pub operator_namespace: Option<String>,
    /// the build order strategy to adopt
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orderStrategy")]
    pub order_strategy: Option<BuildTasksSpectrumConfigurationOrderStrategy>,
    /// The list of platforms used in order to build a container image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platforms: Option<Vec<String>>,
    /// The minimum amount of CPU required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCPU")]
    pub request_cpu: Option<String>,
    /// The minimum amount of memory required. Only used for `pod` strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMemory")]
    pub request_memory: Option<String>,
    /// the strategy to adopt
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub strategy: Option<BuildTasksSpectrumConfigurationStrategy>,
    /// The container image to be used to run the build.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toolImage")]
    pub tool_image: Option<String>,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BuildTasksSpectrumConfigurationOrderStrategy {
    #[serde(rename = "dependencies")]
    Dependencies,
    #[serde(rename = "fifo")]
    Fifo,
    #[serde(rename = "sequential")]
    Sequential,
}

/// The configuration that should be used to perform the Build.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum BuildTasksSpectrumConfigurationStrategy {
    #[serde(rename = "routine")]
    Routine,
    #[serde(rename = "pod")]
    Pod,
}

/// where to publish the final image
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildTasksSpectrumRegistry {
    /// the URI to access
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// the configmap which stores the Certificate Authority
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<String>,
    /// if the container registry is insecure (ie, http only)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    /// the registry organization
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    /// the secret where credentials are stored
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
}

/// BuildStatus defines the observed state of Build.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildStatus {
    /// a list of artifacts contained in the build
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub artifacts: Option<Vec<BuildStatusArtifacts>>,
    /// the base image used for this build
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseImage")]
    pub base_image: Option<String>,
    /// a list of conditions occurred during the build
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// the digest from image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub digest: Option<String>,
    /// how long it took for the build Change to Duration / ISO 8601 when CRD uses OpenAPI spec v3 https://github.com/OAI/OpenAPI-Specification/issues/845
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// the error description (if any)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// the reason of the failure (if any)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub failure: Option<BuildStatusFailure>,
    /// the image name built
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// ObservedGeneration is the most recent generation observed for this Build.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// describes the phase
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
    /// root image (the first image from which the incremental image has started)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootImage")]
    pub root_image: Option<String>,
    /// the time when it started
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startedAt")]
    pub started_at: Option<String>,
}

/// Artifact represents a materialized artifact (a jar dependency or in general a file used by the build).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildStatusArtifacts {
    /// a checksum (SHA1) of the content
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub checksum: Option<String>,
    /// the identification (GAV for maven dependencies or file name for other file types)
    pub id: String,
    /// where it is located in the builder `Pod`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// the expected location in the runtime
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
}

/// the reason of the failure (if any)
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildStatusFailure {
    /// a short text specifying the reason
    pub reason: String,
    /// the recovery attempted for this failure
    pub recovery: BuildStatusFailureRecovery,
    /// the time when the failure has happened
    pub time: String,
}

/// the recovery attempted for this failure
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct BuildStatusFailureRecovery {
    /// attempt number
    pub attempt: i64,
    /// maximum number of attempts
    #[serde(rename = "attemptMax")]
    pub attempt_max: i64,
    /// time of the attempt execution
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attemptTime")]
    pub attempt_time: Option<String>,
}

