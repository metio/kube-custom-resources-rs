// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/argoproj-labs/argocd-operator/argoproj.io/v1alpha1/applications.yaml --derive=Default --derive=PartialEq
// kopium version: 0.17.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;

/// Operation contains information about a requested or running operation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperation {
    /// Info is a list of informational items for this operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationOperationInfo>>,
    /// InitiatedBy contains information about who initiated the operations
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initiatedBy")]
    pub initiated_by: Option<ApplicationOperationInitiatedBy>,
    /// Retry controls the strategy to apply if a sync fails
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationOperationRetry>,
    /// Sync contains parameters for the operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sync: Option<ApplicationOperationSync>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationInfo {
    pub name: String,
    pub value: String,
}

/// InitiatedBy contains information about who initiated the operations
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationInitiatedBy {
    /// Automated is set to true if operation was initiated automatically by the application controller.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<bool>,
    /// Username contains the name of a user who started operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// Retry controls the strategy to apply if a sync fails
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationRetry {
    /// Backoff controls how to backoff on subsequent retries of failed syncs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationOperationRetryBackoff>,
    /// Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

/// Backoff controls how to backoff on subsequent retries of failed syncs
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationRetryBackoff {
    /// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Factor is a factor to multiply the base duration after each failed retry
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    /// MaxDuration is the maximum amount of time allowed for the backoff strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

/// Sync contains parameters for the operation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSync {
    /// DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dryRun")]
    pub dry_run: Option<bool>,
    /// Manifests is an optional field that overrides sync source with a local directory for development
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub manifests: Option<Vec<String>>,
    /// Prune specifies to delete resources from the cluster that are no longer tracked in git
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    /// Resources describes which resources shall be part of the sync
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<ApplicationOperationSyncResources>>,
    /// Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
    /// Revisions is the list of revision (Git) or chart version (Helm) which to sync each source in sources field for the application to If omitted, will use the revision specified in app spec.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revisions: Option<Vec<String>>,
    /// Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationOperationSyncSource>,
    /// Sources overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationOperationSyncSources>>,
    /// SyncOptions provide per-sync sync-options, e.g. Validate=false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
    /// SyncStrategy describes how to perform the sync
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncStrategy")]
    pub sync_strategy: Option<ApplicationOperationSyncSyncStrategy>,
}

/// SyncOperationResource contains resources to sync.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    pub kind: String,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSource {
    /// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    /// Directory holds path/directory specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationOperationSyncSourceDirectory>,
    /// Helm holds helm specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationOperationSyncSourceHelm>,
    /// Kustomize holds kustomize specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationOperationSyncSourceKustomize>,
    /// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Plugin holds config management plugin specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationOperationSyncSourcePlugin>,
    /// Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    /// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    /// TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

/// Directory holds path/directory specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourceDirectory {
    /// Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    /// Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    /// Jsonnet holds options specific to Jsonnet
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationOperationSyncSourceDirectoryJsonnet>,
    /// Recurse specifies whether to scan a directory recursively for manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

/// Jsonnet holds options specific to Jsonnet
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourceDirectoryJsonnet {
    /// ExtVars is a list of Jsonnet External Variables
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationOperationSyncSourceDirectoryJsonnetExtVars>>,
    /// Additional library search dirs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    /// TLAS is a list of Jsonnet Top-level Arguments
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationOperationSyncSourceDirectoryJsonnetTlas>>,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// Helm holds helm specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourceHelm {
    /// FileParameters are file parameters to the helm template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationOperationSyncSourceHelmFileParameters>>,
    /// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    /// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationOperationSyncSourceHelmParameters>>,
    /// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    /// ReleaseName is the Helm release name to use. If omitted it will use the application name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    /// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    /// ValuesFiles is a list of Helm value files to use when generating a template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    /// Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    /// ValuesObject specifies Helm values to be passed to helm template, defined as a map. This takes precedence over Values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    /// Version is the Helm version to use for templating ("3")
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourceHelmFileParameters {
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Path is the path to the file containing the values for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// HelmParameter is a parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourceHelmParameters {
    /// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value is the value for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Kustomize holds kustomize specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourceKustomize {
    /// CommonAnnotations is a list of additional annotations to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    /// CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    /// CommonLabels is a list of additional labels to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    /// Components specifies a list of kustomize components to add to the kustomization before building
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    /// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    /// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    /// Images is a list of Kustomize image override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    /// NamePrefix is a prefix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    /// NameSuffix is a suffix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    /// Namespace sets the namespace that Kustomize adds to all resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Patches is a list of Kustomize patches
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationOperationSyncSourceKustomizePatches>>,
    /// Replicas is a list of Kustomize Replicas override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationOperationSyncSourceKustomizeReplicas>>,
    /// Version controls which version of Kustomize to use for rendering manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationOperationSyncSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourceKustomizeReplicas {
    /// Number of replicas
    pub count: IntOrString,
    /// Name of Deployment or StatefulSet
    pub name: String,
}

/// Plugin holds config management plugin specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourcePlugin {
    /// Env is a list of environment variable entries
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationOperationSyncSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationOperationSyncSourcePluginParameters>>,
}

/// EnvEntry represents an entry in the application's environment
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourcePluginEnv {
    /// Name is the name of the variable, usually expressed in uppercase
    pub name: String,
    /// Value is the value of the variable
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourcePluginParameters {
    /// Array is the value of an array type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    /// Map is the value of a map type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    /// Name is the name identifying a parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// String_ is the value of a string type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

/// ApplicationSource contains all required information about the source of an application
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSources {
    /// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    /// Directory holds path/directory specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationOperationSyncSourcesDirectory>,
    /// Helm holds helm specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationOperationSyncSourcesHelm>,
    /// Kustomize holds kustomize specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationOperationSyncSourcesKustomize>,
    /// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Plugin holds config management plugin specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationOperationSyncSourcesPlugin>,
    /// Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    /// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    /// TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

/// Directory holds path/directory specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourcesDirectory {
    /// Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    /// Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    /// Jsonnet holds options specific to Jsonnet
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationOperationSyncSourcesDirectoryJsonnet>,
    /// Recurse specifies whether to scan a directory recursively for manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

/// Jsonnet holds options specific to Jsonnet
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourcesDirectoryJsonnet {
    /// ExtVars is a list of Jsonnet External Variables
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationOperationSyncSourcesDirectoryJsonnetExtVars>>,
    /// Additional library search dirs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    /// TLAS is a list of Jsonnet Top-level Arguments
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationOperationSyncSourcesDirectoryJsonnetTlas>>,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// Helm holds helm specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourcesHelm {
    /// FileParameters are file parameters to the helm template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationOperationSyncSourcesHelmFileParameters>>,
    /// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    /// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationOperationSyncSourcesHelmParameters>>,
    /// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    /// ReleaseName is the Helm release name to use. If omitted it will use the application name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    /// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    /// ValuesFiles is a list of Helm value files to use when generating a template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    /// Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    /// ValuesObject specifies Helm values to be passed to helm template, defined as a map. This takes precedence over Values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    /// Version is the Helm version to use for templating ("3")
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourcesHelmFileParameters {
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Path is the path to the file containing the values for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// HelmParameter is a parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourcesHelmParameters {
    /// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value is the value for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Kustomize holds kustomize specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourcesKustomize {
    /// CommonAnnotations is a list of additional annotations to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    /// CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    /// CommonLabels is a list of additional labels to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    /// Components specifies a list of kustomize components to add to the kustomization before building
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    /// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    /// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    /// Images is a list of Kustomize image override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    /// NamePrefix is a prefix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    /// NameSuffix is a suffix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    /// Namespace sets the namespace that Kustomize adds to all resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Patches is a list of Kustomize patches
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationOperationSyncSourcesKustomizePatches>>,
    /// Replicas is a list of Kustomize Replicas override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationOperationSyncSourcesKustomizeReplicas>>,
    /// Version controls which version of Kustomize to use for rendering manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationOperationSyncSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourcesKustomizeReplicas {
    /// Number of replicas
    pub count: IntOrString,
    /// Name of Deployment or StatefulSet
    pub name: String,
}

/// Plugin holds config management plugin specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourcesPlugin {
    /// Env is a list of environment variable entries
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationOperationSyncSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationOperationSyncSourcesPluginParameters>>,
}

/// EnvEntry represents an entry in the application's environment
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourcesPluginEnv {
    /// Name is the name of the variable, usually expressed in uppercase
    pub name: String,
    /// Value is the value of the variable
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSourcesPluginParameters {
    /// Array is the value of an array type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    /// Map is the value of a map type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    /// Name is the name identifying a parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// String_ is the value of a string type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

/// SyncStrategy describes how to perform the sync
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSyncStrategy {
    /// Apply will perform a `kubectl apply` to perform the sync.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apply: Option<ApplicationOperationSyncSyncStrategyApply>,
    /// Hook will submit any referenced resources to perform the sync. This is the default strategy
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hook: Option<ApplicationOperationSyncSyncStrategyHook>,
}

/// Apply will perform a `kubectl apply` to perform the sync.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSyncStrategyApply {
    /// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub force: Option<bool>,
}

/// Hook will submit any referenced resources to perform the sync. This is the default strategy
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationOperationSyncSyncStrategyHook {
    /// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub force: Option<bool>,
}

/// ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "argoproj.io", version = "v1alpha1", kind = "Application", plural = "applications")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
pub struct ApplicationSpec {
    /// Destination is a reference to the target Kubernetes server and namespace
    pub destination: ApplicationDestination,
    /// IgnoreDifferences is a list of resources and their fields which should be ignored during comparison
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationIgnoreDifferences>>,
    /// Info contains a list of information (URLs, email addresses, and plain text) that relates to the application
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationInfo>>,
    /// Project is a reference to the project this application belongs to. The empty string means that application belongs to the 'default' project.
    pub project: String,
    /// RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionHistoryLimit")]
    pub revision_history_limit: Option<i64>,
    /// Source is a reference to the location of the application's manifests or chart
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationSource>,
    /// Sources is a reference to the location of the application's manifests or chart
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationSources>>,
    /// SyncPolicy controls when and how a sync will be performed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPolicy")]
    pub sync_policy: Option<ApplicationSyncPolicy>,
}

/// Destination is a reference to the target Kubernetes server and namespace
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationDestination {
    /// Name is an alternate way of specifying the target cluster by its symbolic name. This must be set if Server is not set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Server specifies the URL of the target cluster's Kubernetes control plane API. This must be set if Name is not set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

/// ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    /// ManagedFieldsManagers is a list of trusted managers. Fields mutated by those managers will take precedence over the desired state defined in the SCM and won't be displayed in diffs
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationInfo {
    pub name: String,
    pub value: String,
}

/// Source is a reference to the location of the application's manifests or chart
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSource {
    /// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    /// Directory holds path/directory specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSourceDirectory>,
    /// Helm holds helm specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSourceHelm>,
    /// Kustomize holds kustomize specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSourceKustomize>,
    /// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Plugin holds config management plugin specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSourcePlugin>,
    /// Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    /// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    /// TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

/// Directory holds path/directory specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourceDirectory {
    /// Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    /// Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    /// Jsonnet holds options specific to Jsonnet
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSourceDirectoryJsonnet>,
    /// Recurse specifies whether to scan a directory recursively for manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

/// Jsonnet holds options specific to Jsonnet
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourceDirectoryJsonnet {
    /// ExtVars is a list of Jsonnet External Variables
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSourceDirectoryJsonnetExtVars>>,
    /// Additional library search dirs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    /// TLAS is a list of Jsonnet Top-level Arguments
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSourceDirectoryJsonnetTlas>>,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// Helm holds helm specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourceHelm {
    /// FileParameters are file parameters to the helm template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSourceHelmFileParameters>>,
    /// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    /// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSourceHelmParameters>>,
    /// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    /// ReleaseName is the Helm release name to use. If omitted it will use the application name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    /// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    /// ValuesFiles is a list of Helm value files to use when generating a template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    /// Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    /// ValuesObject specifies Helm values to be passed to helm template, defined as a map. This takes precedence over Values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    /// Version is the Helm version to use for templating ("3")
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourceHelmFileParameters {
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Path is the path to the file containing the values for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// HelmParameter is a parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourceHelmParameters {
    /// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value is the value for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Kustomize holds kustomize specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourceKustomize {
    /// CommonAnnotations is a list of additional annotations to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    /// CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    /// CommonLabels is a list of additional labels to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    /// Components specifies a list of kustomize components to add to the kustomization before building
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    /// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    /// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    /// Images is a list of Kustomize image override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    /// NamePrefix is a prefix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    /// NameSuffix is a suffix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    /// Namespace sets the namespace that Kustomize adds to all resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Patches is a list of Kustomize patches
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSourceKustomizePatches>>,
    /// Replicas is a list of Kustomize Replicas override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSourceKustomizeReplicas>>,
    /// Version controls which version of Kustomize to use for rendering manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourceKustomizeReplicas {
    /// Number of replicas
    pub count: IntOrString,
    /// Name of Deployment or StatefulSet
    pub name: String,
}

/// Plugin holds config management plugin specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourcePlugin {
    /// Env is a list of environment variable entries
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSourcePluginParameters>>,
}

/// EnvEntry represents an entry in the application's environment
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourcePluginEnv {
    /// Name is the name of the variable, usually expressed in uppercase
    pub name: String,
    /// Value is the value of the variable
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourcePluginParameters {
    /// Array is the value of an array type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    /// Map is the value of a map type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    /// Name is the name identifying a parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// String_ is the value of a string type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

/// ApplicationSource contains all required information about the source of an application
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSources {
    /// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    /// Directory holds path/directory specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationSourcesDirectory>,
    /// Helm holds helm specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationSourcesHelm>,
    /// Kustomize holds kustomize specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationSourcesKustomize>,
    /// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Plugin holds config management plugin specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationSourcesPlugin>,
    /// Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    /// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    /// TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

/// Directory holds path/directory specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourcesDirectory {
    /// Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    /// Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    /// Jsonnet holds options specific to Jsonnet
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationSourcesDirectoryJsonnet>,
    /// Recurse specifies whether to scan a directory recursively for manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

/// Jsonnet holds options specific to Jsonnet
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourcesDirectoryJsonnet {
    /// ExtVars is a list of Jsonnet External Variables
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationSourcesDirectoryJsonnetExtVars>>,
    /// Additional library search dirs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    /// TLAS is a list of Jsonnet Top-level Arguments
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationSourcesDirectoryJsonnetTlas>>,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// Helm holds helm specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourcesHelm {
    /// FileParameters are file parameters to the helm template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationSourcesHelmFileParameters>>,
    /// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    /// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSourcesHelmParameters>>,
    /// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    /// ReleaseName is the Helm release name to use. If omitted it will use the application name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    /// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    /// ValuesFiles is a list of Helm value files to use when generating a template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    /// Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    /// ValuesObject specifies Helm values to be passed to helm template, defined as a map. This takes precedence over Values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    /// Version is the Helm version to use for templating ("3")
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourcesHelmFileParameters {
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Path is the path to the file containing the values for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// HelmParameter is a parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourcesHelmParameters {
    /// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value is the value for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Kustomize holds kustomize specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourcesKustomize {
    /// CommonAnnotations is a list of additional annotations to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    /// CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    /// CommonLabels is a list of additional labels to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    /// Components specifies a list of kustomize components to add to the kustomization before building
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    /// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    /// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    /// Images is a list of Kustomize image override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    /// NamePrefix is a prefix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    /// NameSuffix is a suffix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    /// Namespace sets the namespace that Kustomize adds to all resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Patches is a list of Kustomize patches
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationSourcesKustomizePatches>>,
    /// Replicas is a list of Kustomize Replicas override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationSourcesKustomizeReplicas>>,
    /// Version controls which version of Kustomize to use for rendering manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourcesKustomizeReplicas {
    /// Number of replicas
    pub count: IntOrString,
    /// Name of Deployment or StatefulSet
    pub name: String,
}

/// Plugin holds config management plugin specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourcesPlugin {
    /// Env is a list of environment variable entries
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationSourcesPluginParameters>>,
}

/// EnvEntry represents an entry in the application's environment
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourcesPluginEnv {
    /// Name is the name of the variable, usually expressed in uppercase
    pub name: String,
    /// Value is the value of the variable
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSourcesPluginParameters {
    /// Array is the value of an array type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    /// Map is the value of a map type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    /// Name is the name identifying a parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// String_ is the value of a string type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

/// SyncPolicy controls when and how a sync will be performed
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSyncPolicy {
    /// Automated will keep an application synced to the target revision
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<ApplicationSyncPolicyAutomated>,
    /// ManagedNamespaceMetadata controls metadata in the given namespace (if CreateNamespace=true)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationSyncPolicyManagedNamespaceMetadata>,
    /// Retry controls failed sync retry behavior
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationSyncPolicyRetry>,
    /// Options allow you to specify whole app sync-options
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
}

/// Automated will keep an application synced to the target revision
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSyncPolicyAutomated {
    /// AllowEmpty allows apps have zero live resources (default: false)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowEmpty")]
    pub allow_empty: Option<bool>,
    /// Prune specifies whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    /// SelfHeal specifies whether to revert resources back to their desired state upon modification in the cluster (default: false)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfHeal")]
    pub self_heal: Option<bool>,
}

/// ManagedNamespaceMetadata controls metadata in the given namespace (if CreateNamespace=true)
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSyncPolicyManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// Retry controls failed sync retry behavior
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSyncPolicyRetry {
    /// Backoff controls how to backoff on subsequent retries of failed syncs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationSyncPolicyRetryBackoff>,
    /// Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

/// Backoff controls how to backoff on subsequent retries of failed syncs
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationSyncPolicyRetryBackoff {
    /// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Factor is a factor to multiply the base duration after each failed retry
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    /// MaxDuration is the maximum amount of time allowed for the backoff strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

/// ApplicationStatus contains status information for the application
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatus {
    /// Conditions is a list of currently observed application conditions
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<ApplicationStatusConditions>>,
    /// ControllerNamespace indicates the namespace in which the application controller is located
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controllerNamespace")]
    pub controller_namespace: Option<String>,
    /// Health contains information about the application's current health status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health: Option<ApplicationStatusHealth>,
    /// History contains information about the application's sync history
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub history: Option<Vec<ApplicationStatusHistory>>,
    /// ObservedAt indicates when the application state was updated without querying latest git state Deprecated: controller no longer updates ObservedAt field
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedAt")]
    pub observed_at: Option<String>,
    /// OperationState contains information about any ongoing operations, such as a sync
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operationState")]
    pub operation_state: Option<ApplicationStatusOperationState>,
    /// ReconciledAt indicates when the application state was reconciled using the latest git version
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reconciledAt")]
    pub reconciled_at: Option<String>,
    /// ResourceHealthSource indicates where the resource health status is stored: inline if not set or appTree
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceHealthSource")]
    pub resource_health_source: Option<String>,
    /// Resources is a list of Kubernetes resources managed by this application
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<ApplicationStatusResources>>,
    /// SourceType specifies the type of this application
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceType")]
    pub source_type: Option<String>,
    /// SourceTypes specifies the type of the sources included in the application
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceTypes")]
    pub source_types: Option<Vec<String>>,
    /// Summary contains a list of URLs and container images used by this application
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub summary: Option<ApplicationStatusSummary>,
    /// Sync contains information about the application's current sync status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sync: Option<ApplicationStatusSync>,
}

/// ApplicationCondition contains details about an application condition, which is usually an error or warning
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusConditions {
    /// LastTransitionTime is the time the condition was last observed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    /// Message contains human-readable message indicating details about condition
    pub message: String,
    /// Type is an application condition type
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Health contains information about the application's current health status
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHealth {
    /// Message is a human-readable informational message describing the health status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Status holds the status code of the application or resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// RevisionHistory contains history information about a previous sync
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistory {
    /// DeployStartedAt holds the time the sync operation started
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deployStartedAt")]
    pub deploy_started_at: Option<String>,
    /// DeployedAt holds the time the sync operation completed
    #[serde(rename = "deployedAt")]
    pub deployed_at: String,
    /// ID is an auto incrementing identifier of the RevisionHistory
    pub id: i64,
    /// Revision holds the revision the sync was performed against
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
    /// Revisions holds the revision of each source in sources field the sync was performed against
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revisions: Option<Vec<String>>,
    /// Source is a reference to the application source used for the sync operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationStatusHistorySource>,
    /// Sources is a reference to the application sources used for the sync operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationStatusHistorySources>>,
}

/// Source is a reference to the application source used for the sync operation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySource {
    /// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    /// Directory holds path/directory specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationStatusHistorySourceDirectory>,
    /// Helm holds helm specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationStatusHistorySourceHelm>,
    /// Kustomize holds kustomize specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationStatusHistorySourceKustomize>,
    /// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Plugin holds config management plugin specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationStatusHistorySourcePlugin>,
    /// Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    /// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    /// TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

/// Directory holds path/directory specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourceDirectory {
    /// Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    /// Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    /// Jsonnet holds options specific to Jsonnet
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationStatusHistorySourceDirectoryJsonnet>,
    /// Recurse specifies whether to scan a directory recursively for manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

/// Jsonnet holds options specific to Jsonnet
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourceDirectoryJsonnet {
    /// ExtVars is a list of Jsonnet External Variables
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationStatusHistorySourceDirectoryJsonnetExtVars>>,
    /// Additional library search dirs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    /// TLAS is a list of Jsonnet Top-level Arguments
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationStatusHistorySourceDirectoryJsonnetTlas>>,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// Helm holds helm specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourceHelm {
    /// FileParameters are file parameters to the helm template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationStatusHistorySourceHelmFileParameters>>,
    /// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    /// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationStatusHistorySourceHelmParameters>>,
    /// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    /// ReleaseName is the Helm release name to use. If omitted it will use the application name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    /// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    /// ValuesFiles is a list of Helm value files to use when generating a template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    /// Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    /// ValuesObject specifies Helm values to be passed to helm template, defined as a map. This takes precedence over Values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    /// Version is the Helm version to use for templating ("3")
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourceHelmFileParameters {
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Path is the path to the file containing the values for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// HelmParameter is a parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourceHelmParameters {
    /// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value is the value for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Kustomize holds kustomize specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourceKustomize {
    /// CommonAnnotations is a list of additional annotations to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    /// CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    /// CommonLabels is a list of additional labels to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    /// Components specifies a list of kustomize components to add to the kustomization before building
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    /// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    /// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    /// Images is a list of Kustomize image override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    /// NamePrefix is a prefix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    /// NameSuffix is a suffix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    /// Namespace sets the namespace that Kustomize adds to all resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Patches is a list of Kustomize patches
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationStatusHistorySourceKustomizePatches>>,
    /// Replicas is a list of Kustomize Replicas override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationStatusHistorySourceKustomizeReplicas>>,
    /// Version controls which version of Kustomize to use for rendering manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationStatusHistorySourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourceKustomizeReplicas {
    /// Number of replicas
    pub count: IntOrString,
    /// Name of Deployment or StatefulSet
    pub name: String,
}

/// Plugin holds config management plugin specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourcePlugin {
    /// Env is a list of environment variable entries
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationStatusHistorySourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationStatusHistorySourcePluginParameters>>,
}

/// EnvEntry represents an entry in the application's environment
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourcePluginEnv {
    /// Name is the name of the variable, usually expressed in uppercase
    pub name: String,
    /// Value is the value of the variable
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourcePluginParameters {
    /// Array is the value of an array type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    /// Map is the value of a map type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    /// Name is the name identifying a parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// String_ is the value of a string type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

/// ApplicationSource contains all required information about the source of an application
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySources {
    /// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    /// Directory holds path/directory specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationStatusHistorySourcesDirectory>,
    /// Helm holds helm specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationStatusHistorySourcesHelm>,
    /// Kustomize holds kustomize specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationStatusHistorySourcesKustomize>,
    /// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Plugin holds config management plugin specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationStatusHistorySourcesPlugin>,
    /// Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    /// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    /// TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

/// Directory holds path/directory specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourcesDirectory {
    /// Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    /// Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    /// Jsonnet holds options specific to Jsonnet
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationStatusHistorySourcesDirectoryJsonnet>,
    /// Recurse specifies whether to scan a directory recursively for manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

/// Jsonnet holds options specific to Jsonnet
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourcesDirectoryJsonnet {
    /// ExtVars is a list of Jsonnet External Variables
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationStatusHistorySourcesDirectoryJsonnetExtVars>>,
    /// Additional library search dirs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    /// TLAS is a list of Jsonnet Top-level Arguments
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationStatusHistorySourcesDirectoryJsonnetTlas>>,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// Helm holds helm specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourcesHelm {
    /// FileParameters are file parameters to the helm template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationStatusHistorySourcesHelmFileParameters>>,
    /// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    /// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationStatusHistorySourcesHelmParameters>>,
    /// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    /// ReleaseName is the Helm release name to use. If omitted it will use the application name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    /// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    /// ValuesFiles is a list of Helm value files to use when generating a template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    /// Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    /// ValuesObject specifies Helm values to be passed to helm template, defined as a map. This takes precedence over Values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    /// Version is the Helm version to use for templating ("3")
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourcesHelmFileParameters {
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Path is the path to the file containing the values for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// HelmParameter is a parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourcesHelmParameters {
    /// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value is the value for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Kustomize holds kustomize specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourcesKustomize {
    /// CommonAnnotations is a list of additional annotations to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    /// CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    /// CommonLabels is a list of additional labels to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    /// Components specifies a list of kustomize components to add to the kustomization before building
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    /// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    /// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    /// Images is a list of Kustomize image override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    /// NamePrefix is a prefix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    /// NameSuffix is a suffix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    /// Namespace sets the namespace that Kustomize adds to all resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Patches is a list of Kustomize patches
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationStatusHistorySourcesKustomizePatches>>,
    /// Replicas is a list of Kustomize Replicas override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationStatusHistorySourcesKustomizeReplicas>>,
    /// Version controls which version of Kustomize to use for rendering manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationStatusHistorySourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourcesKustomizeReplicas {
    /// Number of replicas
    pub count: IntOrString,
    /// Name of Deployment or StatefulSet
    pub name: String,
}

/// Plugin holds config management plugin specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourcesPlugin {
    /// Env is a list of environment variable entries
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationStatusHistorySourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationStatusHistorySourcesPluginParameters>>,
}

/// EnvEntry represents an entry in the application's environment
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourcesPluginEnv {
    /// Name is the name of the variable, usually expressed in uppercase
    pub name: String,
    /// Value is the value of the variable
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusHistorySourcesPluginParameters {
    /// Array is the value of an array type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    /// Map is the value of a map type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    /// Name is the name identifying a parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// String_ is the value of a string type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

/// OperationState contains information about any ongoing operations, such as a sync
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationState {
    /// FinishedAt contains time of operation completion
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "finishedAt")]
    pub finished_at: Option<String>,
    /// Message holds any pertinent messages when attempting to perform operation (typically errors).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Operation is the original requested operation
    pub operation: ApplicationStatusOperationStateOperation,
    /// Phase is the current phase of the operation
    pub phase: String,
    /// RetryCount contains time of operation retries
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryCount")]
    pub retry_count: Option<i64>,
    /// StartedAt contains time of operation start
    #[serde(rename = "startedAt")]
    pub started_at: String,
    /// SyncResult is the result of a Sync operation
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncResult")]
    pub sync_result: Option<ApplicationStatusOperationStateSyncResult>,
}

/// Operation is the original requested operation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperation {
    /// Info is a list of informational items for this operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub info: Option<Vec<ApplicationStatusOperationStateOperationInfo>>,
    /// InitiatedBy contains information about who initiated the operations
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initiatedBy")]
    pub initiated_by: Option<ApplicationStatusOperationStateOperationInitiatedBy>,
    /// Retry controls the strategy to apply if a sync fails
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<ApplicationStatusOperationStateOperationRetry>,
    /// Sync contains parameters for the operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sync: Option<ApplicationStatusOperationStateOperationSync>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationInfo {
    pub name: String,
    pub value: String,
}

/// InitiatedBy contains information about who initiated the operations
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationInitiatedBy {
    /// Automated is set to true if operation was initiated automatically by the application controller.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<bool>,
    /// Username contains the name of a user who started operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// Retry controls the strategy to apply if a sync fails
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationRetry {
    /// Backoff controls how to backoff on subsequent retries of failed syncs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backoff: Option<ApplicationStatusOperationStateOperationRetryBackoff>,
    /// Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
}

/// Backoff controls how to backoff on subsequent retries of failed syncs
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationRetryBackoff {
    /// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Factor is a factor to multiply the base duration after each failed retry
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub factor: Option<i64>,
    /// MaxDuration is the maximum amount of time allowed for the backoff strategy
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDuration")]
    pub max_duration: Option<String>,
}

/// Sync contains parameters for the operation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSync {
    /// DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dryRun")]
    pub dry_run: Option<bool>,
    /// Manifests is an optional field that overrides sync source with a local directory for development
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub manifests: Option<Vec<String>>,
    /// Prune specifies to delete resources from the cluster that are no longer tracked in git
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prune: Option<bool>,
    /// Resources describes which resources shall be part of the sync
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<ApplicationStatusOperationStateOperationSyncResources>>,
    /// Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
    /// Revisions is the list of revision (Git) or chart version (Helm) which to sync each source in sources field for the application to If omitted, will use the revision specified in app spec.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revisions: Option<Vec<String>>,
    /// Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationStatusOperationStateOperationSyncSource>,
    /// Sources overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationStatusOperationStateOperationSyncSources>>,
    /// SyncOptions provide per-sync sync-options, e.g. Validate=false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncOptions")]
    pub sync_options: Option<Vec<String>>,
    /// SyncStrategy describes how to perform the sync
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncStrategy")]
    pub sync_strategy: Option<ApplicationStatusOperationStateOperationSyncSyncStrategy>,
}

/// SyncOperationResource contains resources to sync.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    pub kind: String,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSource {
    /// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    /// Directory holds path/directory specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationStatusOperationStateOperationSyncSourceDirectory>,
    /// Helm holds helm specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationStatusOperationStateOperationSyncSourceHelm>,
    /// Kustomize holds kustomize specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationStatusOperationStateOperationSyncSourceKustomize>,
    /// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Plugin holds config management plugin specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationStatusOperationStateOperationSyncSourcePlugin>,
    /// Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    /// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    /// TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

/// Directory holds path/directory specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourceDirectory {
    /// Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    /// Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    /// Jsonnet holds options specific to Jsonnet
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet>,
    /// Recurse specifies whether to scan a directory recursively for manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

/// Jsonnet holds options specific to Jsonnet
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnet {
    /// ExtVars is a list of Jsonnet External Variables
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars>>,
    /// Additional library search dirs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    /// TLAS is a list of Jsonnet Top-level Arguments
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas>>,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// Helm holds helm specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourceHelm {
    /// FileParameters are file parameters to the helm template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters>>,
    /// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    /// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationStatusOperationStateOperationSyncSourceHelmParameters>>,
    /// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    /// ReleaseName is the Helm release name to use. If omitted it will use the application name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    /// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    /// ValuesFiles is a list of Helm value files to use when generating a template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    /// Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    /// ValuesObject specifies Helm values to be passed to helm template, defined as a map. This takes precedence over Values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    /// Version is the Helm version to use for templating ("3")
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourceHelmFileParameters {
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Path is the path to the file containing the values for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// HelmParameter is a parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourceHelmParameters {
    /// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value is the value for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Kustomize holds kustomize specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourceKustomize {
    /// CommonAnnotations is a list of additional annotations to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    /// CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    /// CommonLabels is a list of additional labels to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    /// Components specifies a list of kustomize components to add to the kustomization before building
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    /// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    /// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    /// Images is a list of Kustomize image override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    /// NamePrefix is a prefix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    /// NameSuffix is a suffix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    /// Namespace sets the namespace that Kustomize adds to all resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Patches is a list of Kustomize patches
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationStatusOperationStateOperationSyncSourceKustomizePatches>>,
    /// Replicas is a list of Kustomize Replicas override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationStatusOperationStateOperationSyncSourceKustomizeReplicas>>,
    /// Version controls which version of Kustomize to use for rendering manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationStatusOperationStateOperationSyncSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourceKustomizeReplicas {
    /// Number of replicas
    pub count: IntOrString,
    /// Name of Deployment or StatefulSet
    pub name: String,
}

/// Plugin holds config management plugin specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourcePlugin {
    /// Env is a list of environment variable entries
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationStatusOperationStateOperationSyncSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationStatusOperationStateOperationSyncSourcePluginParameters>>,
}

/// EnvEntry represents an entry in the application's environment
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourcePluginEnv {
    /// Name is the name of the variable, usually expressed in uppercase
    pub name: String,
    /// Value is the value of the variable
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourcePluginParameters {
    /// Array is the value of an array type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    /// Map is the value of a map type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    /// Name is the name identifying a parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// String_ is the value of a string type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

/// ApplicationSource contains all required information about the source of an application
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSources {
    /// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    /// Directory holds path/directory specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationStatusOperationStateOperationSyncSourcesDirectory>,
    /// Helm holds helm specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationStatusOperationStateOperationSyncSourcesHelm>,
    /// Kustomize holds kustomize specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationStatusOperationStateOperationSyncSourcesKustomize>,
    /// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Plugin holds config management plugin specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationStatusOperationStateOperationSyncSourcesPlugin>,
    /// Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    /// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    /// TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

/// Directory holds path/directory specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourcesDirectory {
    /// Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    /// Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    /// Jsonnet holds options specific to Jsonnet
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationStatusOperationStateOperationSyncSourcesDirectoryJsonnet>,
    /// Recurse specifies whether to scan a directory recursively for manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

/// Jsonnet holds options specific to Jsonnet
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourcesDirectoryJsonnet {
    /// ExtVars is a list of Jsonnet External Variables
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationStatusOperationStateOperationSyncSourcesDirectoryJsonnetExtVars>>,
    /// Additional library search dirs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    /// TLAS is a list of Jsonnet Top-level Arguments
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationStatusOperationStateOperationSyncSourcesDirectoryJsonnetTlas>>,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// Helm holds helm specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourcesHelm {
    /// FileParameters are file parameters to the helm template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationStatusOperationStateOperationSyncSourcesHelmFileParameters>>,
    /// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    /// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationStatusOperationStateOperationSyncSourcesHelmParameters>>,
    /// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    /// ReleaseName is the Helm release name to use. If omitted it will use the application name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    /// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    /// ValuesFiles is a list of Helm value files to use when generating a template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    /// Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    /// ValuesObject specifies Helm values to be passed to helm template, defined as a map. This takes precedence over Values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    /// Version is the Helm version to use for templating ("3")
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourcesHelmFileParameters {
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Path is the path to the file containing the values for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// HelmParameter is a parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourcesHelmParameters {
    /// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value is the value for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Kustomize holds kustomize specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourcesKustomize {
    /// CommonAnnotations is a list of additional annotations to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    /// CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    /// CommonLabels is a list of additional labels to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    /// Components specifies a list of kustomize components to add to the kustomization before building
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    /// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    /// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    /// Images is a list of Kustomize image override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    /// NamePrefix is a prefix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    /// NameSuffix is a suffix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    /// Namespace sets the namespace that Kustomize adds to all resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Patches is a list of Kustomize patches
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationStatusOperationStateOperationSyncSourcesKustomizePatches>>,
    /// Replicas is a list of Kustomize Replicas override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationStatusOperationStateOperationSyncSourcesKustomizeReplicas>>,
    /// Version controls which version of Kustomize to use for rendering manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationStatusOperationStateOperationSyncSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourcesKustomizeReplicas {
    /// Number of replicas
    pub count: IntOrString,
    /// Name of Deployment or StatefulSet
    pub name: String,
}

/// Plugin holds config management plugin specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourcesPlugin {
    /// Env is a list of environment variable entries
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationStatusOperationStateOperationSyncSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationStatusOperationStateOperationSyncSourcesPluginParameters>>,
}

/// EnvEntry represents an entry in the application's environment
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourcesPluginEnv {
    /// Name is the name of the variable, usually expressed in uppercase
    pub name: String,
    /// Value is the value of the variable
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSourcesPluginParameters {
    /// Array is the value of an array type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    /// Map is the value of a map type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    /// Name is the name identifying a parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// String_ is the value of a string type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

/// SyncStrategy describes how to perform the sync
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSyncStrategy {
    /// Apply will perform a `kubectl apply` to perform the sync.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apply: Option<ApplicationStatusOperationStateOperationSyncSyncStrategyApply>,
    /// Hook will submit any referenced resources to perform the sync. This is the default strategy
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hook: Option<ApplicationStatusOperationStateOperationSyncSyncStrategyHook>,
}

/// Apply will perform a `kubectl apply` to perform the sync.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSyncStrategyApply {
    /// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub force: Option<bool>,
}

/// Hook will submit any referenced resources to perform the sync. This is the default strategy
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateOperationSyncSyncStrategyHook {
    /// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub force: Option<bool>,
}

/// SyncResult is the result of a Sync operation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResult {
    /// ManagedNamespaceMetadata contains the current sync state of managed namespace metadata
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedNamespaceMetadata")]
    pub managed_namespace_metadata: Option<ApplicationStatusOperationStateSyncResultManagedNamespaceMetadata>,
    /// Resources contains a list of sync result items for each individual resource in a sync operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<ApplicationStatusOperationStateSyncResultResources>>,
    /// Revision holds the revision this sync operation was performed to
    pub revision: String,
    /// Revisions holds the revision this sync operation was performed for respective indexed source in sources field
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revisions: Option<Vec<String>>,
    /// Source records the application source information of the sync, used for comparing auto-sync
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationStatusOperationStateSyncResultSource>,
    /// Source records the application source information of the sync, used for comparing auto-sync
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationStatusOperationStateSyncResultSources>>,
}

/// ManagedNamespaceMetadata contains the current sync state of managed namespace metadata
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultManagedNamespaceMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
}

/// ResourceResult holds the operation result details of a specific resource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultResources {
    /// Group specifies the API group of the resource
    pub group: String,
    /// HookPhase contains the state of any operation associated with this resource OR hook This can also contain values for non-hook resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hookPhase")]
    pub hook_phase: Option<String>,
    /// HookType specifies the type of the hook. Empty for non-hook resources
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hookType")]
    pub hook_type: Option<String>,
    /// Kind specifies the API kind of the resource
    pub kind: String,
    /// Message contains an informational or error message for the last sync OR operation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Name specifies the name of the resource
    pub name: String,
    /// Namespace specifies the target namespace of the resource
    pub namespace: String,
    /// Status holds the final result of the sync. Will be empty if the resources is yet to be applied/pruned and is always zero-value for hooks
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// SyncPhase indicates the particular phase of the sync that this result was acquired in
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncPhase")]
    pub sync_phase: Option<String>,
    /// Version specifies the API version of the resource
    pub version: String,
}

/// Source records the application source information of the sync, used for comparing auto-sync
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSource {
    /// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    /// Directory holds path/directory specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationStatusOperationStateSyncResultSourceDirectory>,
    /// Helm holds helm specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationStatusOperationStateSyncResultSourceHelm>,
    /// Kustomize holds kustomize specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationStatusOperationStateSyncResultSourceKustomize>,
    /// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Plugin holds config management plugin specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationStatusOperationStateSyncResultSourcePlugin>,
    /// Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    /// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    /// TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

/// Directory holds path/directory specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourceDirectory {
    /// Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    /// Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    /// Jsonnet holds options specific to Jsonnet
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet>,
    /// Recurse specifies whether to scan a directory recursively for manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

/// Jsonnet holds options specific to Jsonnet
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnet {
    /// ExtVars is a list of Jsonnet External Variables
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars>>,
    /// Additional library search dirs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    /// TLAS is a list of Jsonnet Top-level Arguments
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas>>,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// Helm holds helm specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourceHelm {
    /// FileParameters are file parameters to the helm template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationStatusOperationStateSyncResultSourceHelmFileParameters>>,
    /// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    /// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationStatusOperationStateSyncResultSourceHelmParameters>>,
    /// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    /// ReleaseName is the Helm release name to use. If omitted it will use the application name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    /// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    /// ValuesFiles is a list of Helm value files to use when generating a template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    /// Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    /// ValuesObject specifies Helm values to be passed to helm template, defined as a map. This takes precedence over Values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    /// Version is the Helm version to use for templating ("3")
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourceHelmFileParameters {
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Path is the path to the file containing the values for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// HelmParameter is a parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourceHelmParameters {
    /// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value is the value for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Kustomize holds kustomize specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourceKustomize {
    /// CommonAnnotations is a list of additional annotations to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    /// CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    /// CommonLabels is a list of additional labels to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    /// Components specifies a list of kustomize components to add to the kustomization before building
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    /// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    /// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    /// Images is a list of Kustomize image override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    /// NamePrefix is a prefix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    /// NameSuffix is a suffix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    /// Namespace sets the namespace that Kustomize adds to all resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Patches is a list of Kustomize patches
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationStatusOperationStateSyncResultSourceKustomizePatches>>,
    /// Replicas is a list of Kustomize Replicas override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationStatusOperationStateSyncResultSourceKustomizeReplicas>>,
    /// Version controls which version of Kustomize to use for rendering manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationStatusOperationStateSyncResultSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourceKustomizeReplicas {
    /// Number of replicas
    pub count: IntOrString,
    /// Name of Deployment or StatefulSet
    pub name: String,
}

/// Plugin holds config management plugin specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourcePlugin {
    /// Env is a list of environment variable entries
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationStatusOperationStateSyncResultSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationStatusOperationStateSyncResultSourcePluginParameters>>,
}

/// EnvEntry represents an entry in the application's environment
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourcePluginEnv {
    /// Name is the name of the variable, usually expressed in uppercase
    pub name: String,
    /// Value is the value of the variable
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourcePluginParameters {
    /// Array is the value of an array type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    /// Map is the value of a map type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    /// Name is the name identifying a parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// String_ is the value of a string type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

/// ApplicationSource contains all required information about the source of an application
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSources {
    /// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    /// Directory holds path/directory specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationStatusOperationStateSyncResultSourcesDirectory>,
    /// Helm holds helm specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationStatusOperationStateSyncResultSourcesHelm>,
    /// Kustomize holds kustomize specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationStatusOperationStateSyncResultSourcesKustomize>,
    /// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Plugin holds config management plugin specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationStatusOperationStateSyncResultSourcesPlugin>,
    /// Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    /// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    /// TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

/// Directory holds path/directory specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourcesDirectory {
    /// Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    /// Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    /// Jsonnet holds options specific to Jsonnet
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationStatusOperationStateSyncResultSourcesDirectoryJsonnet>,
    /// Recurse specifies whether to scan a directory recursively for manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

/// Jsonnet holds options specific to Jsonnet
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourcesDirectoryJsonnet {
    /// ExtVars is a list of Jsonnet External Variables
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationStatusOperationStateSyncResultSourcesDirectoryJsonnetExtVars>>,
    /// Additional library search dirs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    /// TLAS is a list of Jsonnet Top-level Arguments
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationStatusOperationStateSyncResultSourcesDirectoryJsonnetTlas>>,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// Helm holds helm specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourcesHelm {
    /// FileParameters are file parameters to the helm template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationStatusOperationStateSyncResultSourcesHelmFileParameters>>,
    /// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    /// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationStatusOperationStateSyncResultSourcesHelmParameters>>,
    /// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    /// ReleaseName is the Helm release name to use. If omitted it will use the application name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    /// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    /// ValuesFiles is a list of Helm value files to use when generating a template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    /// Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    /// ValuesObject specifies Helm values to be passed to helm template, defined as a map. This takes precedence over Values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    /// Version is the Helm version to use for templating ("3")
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourcesHelmFileParameters {
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Path is the path to the file containing the values for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// HelmParameter is a parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourcesHelmParameters {
    /// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value is the value for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Kustomize holds kustomize specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourcesKustomize {
    /// CommonAnnotations is a list of additional annotations to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    /// CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    /// CommonLabels is a list of additional labels to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    /// Components specifies a list of kustomize components to add to the kustomization before building
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    /// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    /// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    /// Images is a list of Kustomize image override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    /// NamePrefix is a prefix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    /// NameSuffix is a suffix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    /// Namespace sets the namespace that Kustomize adds to all resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Patches is a list of Kustomize patches
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationStatusOperationStateSyncResultSourcesKustomizePatches>>,
    /// Replicas is a list of Kustomize Replicas override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationStatusOperationStateSyncResultSourcesKustomizeReplicas>>,
    /// Version controls which version of Kustomize to use for rendering manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationStatusOperationStateSyncResultSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourcesKustomizeReplicas {
    /// Number of replicas
    pub count: IntOrString,
    /// Name of Deployment or StatefulSet
    pub name: String,
}

/// Plugin holds config management plugin specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourcesPlugin {
    /// Env is a list of environment variable entries
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationStatusOperationStateSyncResultSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationStatusOperationStateSyncResultSourcesPluginParameters>>,
}

/// EnvEntry represents an entry in the application's environment
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourcesPluginEnv {
    /// Name is the name of the variable, usually expressed in uppercase
    pub name: String,
    /// Value is the value of the variable
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusOperationStateSyncResultSourcesPluginParameters {
    /// Array is the value of an array type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    /// Map is the value of a map type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    /// Name is the name identifying a parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// String_ is the value of a string type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

/// ResourceStatus holds the current sync and health status of a resource TODO: describe members of this type
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// HealthStatus contains information about the currently observed health state of an application or resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub health: Option<ApplicationStatusResourcesHealth>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hook: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiresPruning")]
    pub requires_pruning: Option<bool>,
    /// SyncStatusCode is a type which represents possible comparison results
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syncWave")]
    pub sync_wave: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// HealthStatus contains information about the currently observed health state of an application or resource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusResourcesHealth {
    /// Message is a human-readable informational message describing the health status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Status holds the status code of the application or resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Summary contains a list of URLs and container images used by this application
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSummary {
    /// ExternalURLs holds all external URLs of application child resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalURLs")]
    pub external_ur_ls: Option<Vec<String>>,
    /// Images holds all images of application child resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
}

/// Sync contains information about the application's current sync status
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSync {
    /// ComparedTo contains information about what has been compared
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "comparedTo")]
    pub compared_to: Option<ApplicationStatusSyncComparedTo>,
    /// Revision contains information about the revision the comparison has been performed to
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
    /// Revisions contains information about the revisions of multiple sources the comparison has been performed to
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revisions: Option<Vec<String>>,
    /// Status is the sync state of the comparison
    pub status: String,
}

/// ComparedTo contains information about what has been compared
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedTo {
    /// Destination is a reference to the application's destination used for comparison
    pub destination: ApplicationStatusSyncComparedToDestination,
    /// IgnoreDifferences is a reference to the application's ignored differences used for comparison
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreDifferences")]
    pub ignore_differences: Option<Vec<ApplicationStatusSyncComparedToIgnoreDifferences>>,
    /// Source is a reference to the application's source used for comparison
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ApplicationStatusSyncComparedToSource>,
    /// Sources is a reference to the application's multiple sources used for comparison
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<ApplicationStatusSyncComparedToSources>>,
}

/// Destination is a reference to the application's destination used for comparison
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToDestination {
    /// Name is an alternate way of specifying the target cluster by its symbolic name. This must be set if Server is not set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Server specifies the URL of the target cluster's Kubernetes control plane API. This must be set if Name is not set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
}

/// ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToIgnoreDifferences {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jqPathExpressions")]
    pub jq_path_expressions: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPointers")]
    pub json_pointers: Option<Vec<String>>,
    pub kind: String,
    /// ManagedFieldsManagers is a list of trusted managers. Fields mutated by those managers will take precedence over the desired state defined in the SCM and won't be displayed in diffs
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedFieldsManagers")]
    pub managed_fields_managers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// Source is a reference to the application's source used for comparison
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSource {
    /// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    /// Directory holds path/directory specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationStatusSyncComparedToSourceDirectory>,
    /// Helm holds helm specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationStatusSyncComparedToSourceHelm>,
    /// Kustomize holds kustomize specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationStatusSyncComparedToSourceKustomize>,
    /// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Plugin holds config management plugin specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationStatusSyncComparedToSourcePlugin>,
    /// Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    /// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    /// TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

/// Directory holds path/directory specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourceDirectory {
    /// Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    /// Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    /// Jsonnet holds options specific to Jsonnet
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationStatusSyncComparedToSourceDirectoryJsonnet>,
    /// Recurse specifies whether to scan a directory recursively for manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

/// Jsonnet holds options specific to Jsonnet
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourceDirectoryJsonnet {
    /// ExtVars is a list of Jsonnet External Variables
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars>>,
    /// Additional library search dirs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    /// TLAS is a list of Jsonnet Top-level Arguments
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas>>,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourceDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourceDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// Helm holds helm specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourceHelm {
    /// FileParameters are file parameters to the helm template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationStatusSyncComparedToSourceHelmFileParameters>>,
    /// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    /// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationStatusSyncComparedToSourceHelmParameters>>,
    /// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    /// ReleaseName is the Helm release name to use. If omitted it will use the application name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    /// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    /// ValuesFiles is a list of Helm value files to use when generating a template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    /// Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    /// ValuesObject specifies Helm values to be passed to helm template, defined as a map. This takes precedence over Values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    /// Version is the Helm version to use for templating ("3")
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourceHelmFileParameters {
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Path is the path to the file containing the values for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// HelmParameter is a parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourceHelmParameters {
    /// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value is the value for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Kustomize holds kustomize specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourceKustomize {
    /// CommonAnnotations is a list of additional annotations to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    /// CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    /// CommonLabels is a list of additional labels to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    /// Components specifies a list of kustomize components to add to the kustomization before building
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    /// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    /// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    /// Images is a list of Kustomize image override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    /// NamePrefix is a prefix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    /// NameSuffix is a suffix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    /// Namespace sets the namespace that Kustomize adds to all resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Patches is a list of Kustomize patches
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationStatusSyncComparedToSourceKustomizePatches>>,
    /// Replicas is a list of Kustomize Replicas override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationStatusSyncComparedToSourceKustomizeReplicas>>,
    /// Version controls which version of Kustomize to use for rendering manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourceKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationStatusSyncComparedToSourceKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourceKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourceKustomizeReplicas {
    /// Number of replicas
    pub count: IntOrString,
    /// Name of Deployment or StatefulSet
    pub name: String,
}

/// Plugin holds config management plugin specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourcePlugin {
    /// Env is a list of environment variable entries
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationStatusSyncComparedToSourcePluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationStatusSyncComparedToSourcePluginParameters>>,
}

/// EnvEntry represents an entry in the application's environment
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourcePluginEnv {
    /// Name is the name of the variable, usually expressed in uppercase
    pub name: String,
    /// Value is the value of the variable
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourcePluginParameters {
    /// Array is the value of an array type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    /// Map is the value of a map type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    /// Name is the name identifying a parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// String_ is the value of a string type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

/// ApplicationSource contains all required information about the source of an application
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSources {
    /// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chart: Option<String>,
    /// Directory holds path/directory specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directory: Option<ApplicationStatusSyncComparedToSourcesDirectory>,
    /// Helm holds helm specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub helm: Option<ApplicationStatusSyncComparedToSourcesHelm>,
    /// Kustomize holds kustomize specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kustomize: Option<ApplicationStatusSyncComparedToSourcesKustomize>,
    /// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Plugin holds config management plugin specific options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plugin: Option<ApplicationStatusSyncComparedToSourcesPlugin>,
    /// Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ref")]
    pub r#ref: Option<String>,
    /// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
    #[serde(rename = "repoURL")]
    pub repo_url: String,
    /// TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRevision")]
    pub target_revision: Option<String>,
}

/// Directory holds path/directory specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourcesDirectory {
    /// Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<String>,
    /// Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    /// Jsonnet holds options specific to Jsonnet
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jsonnet: Option<ApplicationStatusSyncComparedToSourcesDirectoryJsonnet>,
    /// Recurse specifies whether to scan a directory recursively for manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recurse: Option<bool>,
}

/// Jsonnet holds options specific to Jsonnet
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourcesDirectoryJsonnet {
    /// ExtVars is a list of Jsonnet External Variables
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extVars")]
    pub ext_vars: Option<Vec<ApplicationStatusSyncComparedToSourcesDirectoryJsonnetExtVars>>,
    /// Additional library search dirs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub libs: Option<Vec<String>>,
    /// TLAS is a list of Jsonnet Top-level Arguments
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlas: Option<Vec<ApplicationStatusSyncComparedToSourcesDirectoryJsonnetTlas>>,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourcesDirectoryJsonnetExtVars {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourcesDirectoryJsonnetTlas {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<bool>,
    pub name: String,
    pub value: String,
}

/// Helm holds helm specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourcesHelm {
    /// FileParameters are file parameters to the helm template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileParameters")]
    pub file_parameters: Option<Vec<ApplicationStatusSyncComparedToSourcesHelmFileParameters>>,
    /// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreMissingValueFiles")]
    pub ignore_missing_value_files: Option<bool>,
    /// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationStatusSyncComparedToSourcesHelmParameters>>,
    /// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passCredentials")]
    pub pass_credentials: Option<bool>,
    /// ReleaseName is the Helm release name to use. If omitted it will use the application name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "releaseName")]
    pub release_name: Option<String>,
    /// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipCrds")]
    pub skip_crds: Option<bool>,
    /// ValuesFiles is a list of Helm value files to use when generating a template
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFiles")]
    pub value_files: Option<Vec<String>>,
    /// Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<String>,
    /// ValuesObject specifies Helm values to be passed to helm template, defined as a map. This takes precedence over Values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesObject")]
    pub values_object: Option<BTreeMap<String, serde_json::Value>>,
    /// Version is the Helm version to use for templating ("3")
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourcesHelmFileParameters {
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Path is the path to the file containing the values for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// HelmParameter is a parameter that's passed to helm template during manifest generation
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourcesHelmParameters {
    /// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceString")]
    pub force_string: Option<bool>,
    /// Name is the name of the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value is the value for the Helm parameter
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Kustomize holds kustomize specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourcesKustomize {
    /// CommonAnnotations is a list of additional annotations to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotations")]
    pub common_annotations: Option<BTreeMap<String, String>>,
    /// CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAnnotationsEnvsubst")]
    pub common_annotations_envsubst: Option<bool>,
    /// CommonLabels is a list of additional labels to add to rendered manifests
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonLabels")]
    pub common_labels: Option<BTreeMap<String, String>>,
    /// Components specifies a list of kustomize components to add to the kustomization before building
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    /// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonAnnotations")]
    pub force_common_annotations: Option<bool>,
    /// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceCommonLabels")]
    pub force_common_labels: Option<bool>,
    /// Images is a list of Kustomize image override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    /// NamePrefix is a prefix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePrefix")]
    pub name_prefix: Option<String>,
    /// NameSuffix is a suffix appended to resources for Kustomize apps
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSuffix")]
    pub name_suffix: Option<String>,
    /// Namespace sets the namespace that Kustomize adds to all resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Patches is a list of Kustomize patches
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patches: Option<Vec<ApplicationStatusSyncComparedToSourcesKustomizePatches>>,
    /// Replicas is a list of Kustomize Replicas override specifications
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<ApplicationStatusSyncComparedToSourcesKustomizeReplicas>>,
    /// Version controls which version of Kustomize to use for rendering manifests
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourcesKustomizePatches {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<BTreeMap<String, bool>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<ApplicationStatusSyncComparedToSourcesKustomizePatchesTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourcesKustomizePatchesTarget {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "annotationSelector")]
    pub annotation_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourcesKustomizeReplicas {
    /// Number of replicas
    pub count: IntOrString,
    /// Name of Deployment or StatefulSet
    pub name: String,
}

/// Plugin holds config management plugin specific options
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourcesPlugin {
    /// Env is a list of environment variable entries
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<ApplicationStatusSyncComparedToSourcesPluginEnv>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ApplicationStatusSyncComparedToSourcesPluginParameters>>,
}

/// EnvEntry represents an entry in the application's environment
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourcesPluginEnv {
    /// Name is the name of the variable, usually expressed in uppercase
    pub name: String,
    /// Value is the value of the variable
    pub value: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ApplicationStatusSyncComparedToSourcesPluginParameters {
    /// Array is the value of an array type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub array: Option<Vec<String>>,
    /// Map is the value of a map type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub map: Option<BTreeMap<String, String>>,
    /// Name is the name identifying a parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// String_ is the value of a string type parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub string: Option<String>,
}

