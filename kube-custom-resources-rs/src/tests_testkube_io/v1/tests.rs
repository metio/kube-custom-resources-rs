// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kubeshop/testkube-operator/tests.testkube.io/v1/tests.yaml --derive=Default --derive=PartialEq
// kopium version: 0.19.0

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// TestSpec defines the desired state of Test
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "tests.testkube.io", version = "v1", kind = "Test", plural = "tests")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct TestSpec {
    /// After steps is list of scripts which will be sequentially orchestrated
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub after: Option<Vec<TestAfter>>,
    /// Before steps is list of scripts which will be sequentially orchestrated
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub before: Option<Vec<TestBefore>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repeats: Option<i64>,
    /// Steps is list of scripts which will be sequentially orchestrated
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub steps: Option<Vec<TestSteps>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

/// TestStepSpec will of particular type will have config for possible step types
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestAfter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delay: Option<TestAfterDelay>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub execute: Option<TestAfterExecute>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestAfterDelay {
    /// Duration in ms
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestAfterExecute {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stopOnFailure")]
    pub stop_on_failure: Option<bool>,
}

/// TestStepSpec will of particular type will have config for possible step types
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestBefore {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delay: Option<TestBeforeDelay>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub execute: Option<TestBeforeExecute>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestBeforeDelay {
    /// Duration in ms
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestBeforeExecute {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stopOnFailure")]
    pub stop_on_failure: Option<bool>,
}

/// TestStepSpec will of particular type will have config for possible step types
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestSteps {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delay: Option<TestStepsDelay>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub execute: Option<TestStepsExecute>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsDelay {
    /// Duration in ms
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStepsExecute {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stopOnFailure")]
    pub stop_on_failure: Option<bool>,
}

/// TestStatus defines the observed state of Test
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TestStatus {
}

