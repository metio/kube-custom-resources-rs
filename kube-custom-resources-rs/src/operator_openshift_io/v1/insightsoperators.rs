// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/api/operator.openshift.io/v1/insightsoperators.yaml --derive=PartialEq
// kopium version: 0.17.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// spec is the specification of the desired behavior of the Insights.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "operator.openshift.io", version = "v1", kind = "InsightsOperator", plural = "insightsoperators")]
#[kube(status = "InsightsOperatorStatus")]
#[kube(schema = "disabled")]
pub struct InsightsOperatorSpec {
    /// logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. 
    ///  Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<InsightsOperatorLogLevel>,
    /// managementState indicates whether and how the operator should manage the component
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementState")]
    pub management_state: Option<String>,
    /// observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedConfig")]
    pub observed_config: Option<BTreeMap<String, serde_json::Value>>,
    /// operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. 
    ///  Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operatorLogLevel")]
    pub operator_log_level: Option<InsightsOperatorOperatorLogLevel>,
    /// unsupportedConfigOverrides overrides the final configuration that was computed by the operator. Red Hat does not support the use of this field. Misuse of this field could lead to unexpected behavior or conflict with other configuration options. Seek guidance from the Red Hat support before using this field. Use of this property blocks cluster upgrades, it must be removed before upgrading your cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unsupportedConfigOverrides")]
    pub unsupported_config_overrides: Option<BTreeMap<String, serde_json::Value>>,
}

/// spec is the specification of the desired behavior of the Insights.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum InsightsOperatorLogLevel {
    #[serde(rename = "")]
    KopiumEmpty,
    Normal,
    Debug,
    Trace,
    TraceAll,
}

/// spec is the specification of the desired behavior of the Insights.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum InsightsOperatorOperatorLogLevel {
    #[serde(rename = "")]
    KopiumEmpty,
    Normal,
    Debug,
    Trace,
    TraceAll,
}

/// status is the most recently observed status of the Insights operator.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct InsightsOperatorStatus {
    /// conditions is a list of conditions and their status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// gatherStatus provides basic information about the last Insights data gathering. When omitted, this means no data gathering has taken place yet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gatherStatus")]
    pub gather_status: Option<InsightsOperatorStatusGatherStatus>,
    /// generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generations: Option<Vec<InsightsOperatorStatusGenerations>>,
    /// insightsReport provides general Insights analysis results. When omitted, this means no data gathering has taken place yet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insightsReport")]
    pub insights_report: Option<InsightsOperatorStatusInsightsReport>,
    /// observedGeneration is the last generation change you've dealt with
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// readyReplicas indicates how many replicas are ready and at the desired state
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readyReplicas")]
    pub ready_replicas: Option<i32>,
    /// version is the level this availability applies to
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// gatherStatus provides basic information about the last Insights data gathering. When omitted, this means no data gathering has taken place yet.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct InsightsOperatorStatusGatherStatus {
    /// gatherers is a list of active gatherers (and their statuses) in the last gathering.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gatherers: Option<Vec<InsightsOperatorStatusGatherStatusGatherers>>,
    /// lastGatherDuration is the total time taken to process all gatherers during the last gather event.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastGatherDuration")]
    pub last_gather_duration: Option<String>,
    /// lastGatherTime is the last time when Insights data gathering finished. An empty value means that no data has been gathered yet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastGatherTime")]
    pub last_gather_time: Option<String>,
}

/// gathererStatus represents information about a particular data gatherer.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct InsightsOperatorStatusGatherStatusGatherers {
    /// conditions provide details on the status of each gatherer.
    pub conditions: Vec<Condition>,
    /// lastGatherDuration represents the time spent gathering.
    #[serde(rename = "lastGatherDuration")]
    pub last_gather_duration: String,
    /// name is the name of the gatherer.
    pub name: String,
}

/// GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct InsightsOperatorStatusGenerations {
    /// group is the group of the thing you're tracking
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hash: Option<String>,
    /// lastGeneration is the last generation of the workload controller involved
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastGeneration")]
    pub last_generation: Option<i64>,
    /// name is the name of the thing you're tracking
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// namespace is where the thing you're tracking is
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// resource is the resource type of the thing you're tracking
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
}

/// insightsReport provides general Insights analysis results. When omitted, this means no data gathering has taken place yet.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct InsightsOperatorStatusInsightsReport {
    /// downloadedAt is the time when the last Insights report was downloaded. An empty value means that there has not been any Insights report downloaded yet and it usually appears in disconnected clusters (or clusters when the Insights data gathering is disabled).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "downloadedAt")]
    pub downloaded_at: Option<String>,
    /// healthChecks provides basic information about active Insights health checks in a cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthChecks")]
    pub health_checks: Option<Vec<InsightsOperatorStatusInsightsReportHealthChecks>>,
}

/// healthCheck represents an Insights health check attributes.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct InsightsOperatorStatusInsightsReportHealthChecks {
    /// advisorURI provides the URL link to the Insights Advisor.
    #[serde(rename = "advisorURI")]
    pub advisor_uri: String,
    /// description provides basic description of the healtcheck.
    pub description: String,
    /// state determines what the current state of the health check is. Health check is enabled by default and can be disabled by the user in the Insights advisor user interface.
    pub state: InsightsOperatorStatusInsightsReportHealthChecksState,
    /// totalRisk of the healthcheck. Indicator of the total risk posed by the detected issue; combination of impact and likelihood. The values can be from 1 to 4, and the higher the number, the more important the issue.
    #[serde(rename = "totalRisk")]
    pub total_risk: i32,
}

/// healthCheck represents an Insights health check attributes.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum InsightsOperatorStatusInsightsReportHealthChecksState {
    Enabled,
    Disabled,
}

