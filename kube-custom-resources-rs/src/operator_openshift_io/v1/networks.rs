// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/api/operator.openshift.io/v1/networks.yaml --derive=Default --derive=PartialEq
// kopium version: 0.16.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// NetworkSpec is the top-level network configuration object.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "operator.openshift.io", version = "v1", kind = "Network", plural = "networks")]
#[kube(schema = "disabled")]
pub struct NetworkSpec {
    /// additionalNetworks is a list of extra networks to make available to pods when multiple networks are enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalNetworks")]
    pub additional_networks: Option<Vec<NetworkAdditionalNetworks>>,
    /// clusterNetwork is the IP address pool to use for pod IPs. Some network providers, e.g. OpenShift SDN, support multiple ClusterNetworks. Others only support one. This is equivalent to the cluster-cidr.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterNetwork")]
    pub cluster_network: Option<Vec<NetworkClusterNetwork>>,
    /// defaultNetwork is the "default" network that all pods will receive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultNetwork")]
    pub default_network: Option<NetworkDefaultNetwork>,
    /// deployKubeProxy specifies whether or not a standalone kube-proxy should be deployed by the operator. Some network providers include kube-proxy or similar functionality. If unset, the plugin will attempt to select the correct value, which is false when OpenShift SDN and ovn-kubernetes are used and true otherwise.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deployKubeProxy")]
    pub deploy_kube_proxy: Option<bool>,
    /// disableMultiNetwork specifies whether or not multiple pod network support should be disabled. If unset, this property defaults to 'false' and multiple network support is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableMultiNetwork")]
    pub disable_multi_network: Option<bool>,
    /// disableNetworkDiagnostics specifies whether or not PodNetworkConnectivityCheck CRs from a test pod to every node, apiserver and LB should be disabled or not. If unset, this property defaults to 'false' and network diagnostics is enabled. Setting this to 'true' would reduce the additional load of the pods performing the checks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableNetworkDiagnostics")]
    pub disable_network_diagnostics: Option<bool>,
    /// exportNetworkFlows enables and configures the export of network flow metadata from the pod network by using protocols NetFlow, SFlow or IPFIX. Currently only supported on OVN-Kubernetes plugin. If unset, flows will not be exported to any collector.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exportNetworkFlows")]
    pub export_network_flows: Option<NetworkExportNetworkFlows>,
    /// kubeProxyConfig lets us configure desired proxy configuration. If not specified, sensible defaults will be chosen by OpenShift directly. Not consumed by all network providers - currently only openshift-sdn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeProxyConfig")]
    pub kube_proxy_config: Option<NetworkKubeProxyConfig>,
    /// logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. 
    ///  Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<NetworkLogLevel>,
    /// managementState indicates whether and how the operator should manage the component
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementState")]
    pub management_state: Option<String>,
    /// migration enables and configures the cluster network migration. The migration procedure allows to change the network type and the MTU.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub migration: Option<NetworkMigration>,
    /// observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedConfig")]
    pub observed_config: Option<BTreeMap<String, serde_json::Value>>,
    /// operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. 
    ///  Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operatorLogLevel")]
    pub operator_log_level: Option<NetworkOperatorLogLevel>,
    /// serviceNetwork is the ip address pool to use for Service IPs Currently, all existing network providers only support a single value here, but this is an array to allow for growth.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceNetwork")]
    pub service_network: Option<Vec<String>>,
    /// unsupportedConfigOverrides overrides the final configuration that was computed by the operator. Red Hat does not support the use of this field. Misuse of this field could lead to unexpected behavior or conflict with other configuration options. Seek guidance from the Red Hat support before using this field. Use of this property blocks cluster upgrades, it must be removed before upgrading your cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unsupportedConfigOverrides")]
    pub unsupported_config_overrides: Option<BTreeMap<String, serde_json::Value>>,
    /// useMultiNetworkPolicy enables a controller which allows for MultiNetworkPolicy objects to be used on additional networks as created by Multus CNI. MultiNetworkPolicy are similar to NetworkPolicy objects, but NetworkPolicy objects only apply to the primary interface. With MultiNetworkPolicy, you can control the traffic that a pod can receive over the secondary interfaces. If unset, this property defaults to 'false' and MultiNetworkPolicy objects are ignored. If 'disableMultiNetwork' is 'true' then the value of this field is ignored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useMultiNetworkPolicy")]
    pub use_multi_network_policy: Option<bool>,
}

/// AdditionalNetworkDefinition configures an extra network that is available but not created by default. Instead, pods must request them by name. type must be specified, along with exactly one "Config" that matches the type.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkAdditionalNetworks {
    /// name is the name of the network. This will be populated in the resulting CRD This must be unique.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// namespace is the namespace of the network. This will be populated in the resulting CRD If not given the network will be created in the default namespace.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// rawCNIConfig is the raw CNI configuration json to create in the NetworkAttachmentDefinition CRD
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawCNIConfig")]
    pub raw_cni_config: Option<String>,
    /// SimpleMacvlanConfig configures the macvlan interface in case of type:NetworkTypeSimpleMacvlan
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "simpleMacvlanConfig")]
    pub simple_macvlan_config: Option<NetworkAdditionalNetworksSimpleMacvlanConfig>,
    /// type is the type of network The supported values are NetworkTypeRaw, NetworkTypeSimpleMacvlan
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// SimpleMacvlanConfig configures the macvlan interface in case of type:NetworkTypeSimpleMacvlan
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkAdditionalNetworksSimpleMacvlanConfig {
    /// IPAMConfig configures IPAM module will be used for IP Address Management (IPAM).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipamConfig")]
    pub ipam_config: Option<NetworkAdditionalNetworksSimpleMacvlanConfigIpamConfig>,
    /// master is the host interface to create the macvlan interface from. If not specified, it will be default route interface
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub master: Option<String>,
    /// mode is the macvlan mode: bridge, private, vepa, passthru. The default is bridge
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// mtu is the mtu to use for the macvlan interface. if unset, host's kernel will select the value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mtu: Option<i32>,
}

/// IPAMConfig configures IPAM module will be used for IP Address Management (IPAM).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkAdditionalNetworksSimpleMacvlanConfigIpamConfig {
    /// StaticIPAMConfig configures the static IP address in case of type:IPAMTypeStatic
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "staticIPAMConfig")]
    pub static_ipam_config: Option<NetworkAdditionalNetworksSimpleMacvlanConfigIpamConfigStaticIpamConfig>,
    /// Type is the type of IPAM module will be used for IP Address Management(IPAM). The supported values are IPAMTypeDHCP, IPAMTypeStatic
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// StaticIPAMConfig configures the static IP address in case of type:IPAMTypeStatic
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkAdditionalNetworksSimpleMacvlanConfigIpamConfigStaticIpamConfig {
    /// Addresses configures IP address for the interface
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addresses: Option<Vec<NetworkAdditionalNetworksSimpleMacvlanConfigIpamConfigStaticIpamConfigAddresses>>,
    /// DNS configures DNS for the interface
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dns: Option<NetworkAdditionalNetworksSimpleMacvlanConfigIpamConfigStaticIpamConfigDns>,
    /// Routes configures IP routes for the interface
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub routes: Option<Vec<NetworkAdditionalNetworksSimpleMacvlanConfigIpamConfigStaticIpamConfigRoutes>>,
}

/// StaticIPAMAddresses provides IP address and Gateway for static IPAM addresses
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkAdditionalNetworksSimpleMacvlanConfigIpamConfigStaticIpamConfigAddresses {
    /// Address is the IP address in CIDR format
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// Gateway is IP inside of subnet to designate as the gateway
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gateway: Option<String>,
}

/// DNS configures DNS for the interface
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkAdditionalNetworksSimpleMacvlanConfigIpamConfigStaticIpamConfigDns {
    /// Domain configures the domainname the local domain used for short hostname lookups
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    /// Nameservers points DNS servers for IP lookup
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nameservers: Option<Vec<String>>,
    /// Search configures priority ordered search domains for short hostname lookups
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search: Option<Vec<String>>,
}

/// StaticIPAMRoutes provides Destination/Gateway pairs for static IPAM routes
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkAdditionalNetworksSimpleMacvlanConfigIpamConfigStaticIpamConfigRoutes {
    /// Destination points the IP route destination
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<String>,
    /// Gateway is the route's next-hop IP address If unset, a default gateway is assumed (as determined by the CNI plugin).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gateway: Option<String>,
}

/// ClusterNetworkEntry is a subnet from which to allocate PodIPs. A network of size HostPrefix (in CIDR notation) will be allocated when nodes join the cluster. If the HostPrefix field is not used by the plugin, it can be left unset. Not all network providers support multiple ClusterNetworks
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkClusterNetwork {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPrefix")]
    pub host_prefix: Option<i32>,
}

/// defaultNetwork is the "default" network that all pods will receive
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkDefaultNetwork {
    /// KuryrConfig configures the kuryr plugin
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kuryrConfig")]
    pub kuryr_config: Option<NetworkDefaultNetworkKuryrConfig>,
    /// openShiftSDNConfig configures the openshift-sdn plugin
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openshiftSDNConfig")]
    pub openshift_sdn_config: Option<NetworkDefaultNetworkOpenshiftSdnConfig>,
    /// ovnKubernetesConfig configures the ovn-kubernetes plugin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ovnKubernetesConfig")]
    pub ovn_kubernetes_config: Option<NetworkDefaultNetworkOvnKubernetesConfig>,
    /// type is the type of network All NetworkTypes are supported except for NetworkTypeRaw
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// KuryrConfig configures the kuryr plugin
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkDefaultNetworkKuryrConfig {
    /// The port kuryr-controller will listen for readiness and liveness requests.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controllerProbesPort")]
    pub controller_probes_port: Option<i32>,
    /// The port kuryr-daemon will listen for readiness and liveness requests.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "daemonProbesPort")]
    pub daemon_probes_port: Option<i32>,
    /// enablePortPoolsPrepopulation when true will make Kuryr prepopulate each newly created port pool with a minimum number of ports. Kuryr uses Neutron port pooling to fight the fact that it takes a significant amount of time to create one. It creates a number of ports when the first pod that is configured to use the dedicated network for pods is created in a namespace, and keeps them ready to be attached to pods. Port prepopulation is disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePortPoolsPrepopulation")]
    pub enable_port_pools_prepopulation: Option<bool>,
    /// mtu is the MTU that Kuryr should use when creating pod networks in Neutron. The value has to be lower or equal to the MTU of the nodes network and Neutron has to allow creation of tenant networks with such MTU. If unset Pod networks will be created with the same MTU as the nodes network has. This also affects the services network created by cluster-network-operator.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mtu: Option<i32>,
    /// openStackServiceNetwork contains the CIDR of network from which to allocate IPs for OpenStack Octavia's Amphora VMs. Please note that with Amphora driver Octavia uses two IPs from that network for each loadbalancer - one given by OpenShift and second for VRRP connections. As the first one is managed by OpenShift's and second by Neutron's IPAMs, those need to come from different pools. Therefore `openStackServiceNetwork` needs to be at least twice the size of `serviceNetwork`, and whole `serviceNetwork` must be overlapping with `openStackServiceNetwork`. cluster-network-operator will then make sure VRRP IPs are taken from the ranges inside `openStackServiceNetwork` that are not overlapping with `serviceNetwork`, effectivly preventing conflicts. If not set cluster-network-operator will use `serviceNetwork` expanded by decrementing the prefix size by 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openStackServiceNetwork")]
    pub open_stack_service_network: Option<String>,
    /// poolBatchPorts sets a number of ports that should be created in a single batch request to extend the port pool. The default is 3. For more information about port pools see enablePortPoolsPrepopulation setting.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "poolBatchPorts")]
    pub pool_batch_ports: Option<i64>,
    /// poolMaxPorts sets a maximum number of free ports that are being kept in a port pool. If the number of ports exceeds this setting, free ports will get deleted. Setting 0 will disable this upper bound, effectively preventing pools from shrinking and this is the default value. For more information about port pools see enablePortPoolsPrepopulation setting.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "poolMaxPorts")]
    pub pool_max_ports: Option<i64>,
    /// poolMinPorts sets a minimum number of free ports that should be kept in a port pool. If the number of ports is lower than this setting, new ports will get created and added to pool. The default is 1. For more information about port pools see enablePortPoolsPrepopulation setting.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "poolMinPorts")]
    pub pool_min_ports: Option<i64>,
}

/// openShiftSDNConfig configures the openshift-sdn plugin
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkDefaultNetworkOpenshiftSdnConfig {
    /// enableUnidling controls whether or not the service proxy will support idling and unidling of services. By default, unidling is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableUnidling")]
    pub enable_unidling: Option<bool>,
    /// mode is one of "Multitenant", "Subnet", or "NetworkPolicy"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// mtu is the mtu to use for the tunnel interface. Defaults to 1450 if unset. This must be 50 bytes smaller than the machine's uplink.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mtu: Option<i32>,
    /// useExternalOpenvswitch used to control whether the operator would deploy an OVS DaemonSet itself or expect someone else to start OVS. As of 4.6, OVS is always run as a system service, and this flag is ignored. DEPRECATED: non-functional as of 4.6
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useExternalOpenvswitch")]
    pub use_external_openvswitch: Option<bool>,
    /// vxlanPort is the port to use for all vxlan packets. The default is 4789.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vxlanPort")]
    pub vxlan_port: Option<i32>,
}

/// ovnKubernetesConfig configures the ovn-kubernetes plugin.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkDefaultNetworkOvnKubernetesConfig {
    /// egressIPConfig holds the configuration for EgressIP options.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egressIPConfig")]
    pub egress_ip_config: Option<NetworkDefaultNetworkOvnKubernetesConfigEgressIpConfig>,
    /// gatewayConfig holds the configuration for node gateway options.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gatewayConfig")]
    pub gateway_config: Option<NetworkDefaultNetworkOvnKubernetesConfigGatewayConfig>,
    /// geneve port is the UDP port to be used by geneve encapulation. Default is 6081
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "genevePort")]
    pub geneve_port: Option<i32>,
    /// HybridOverlayConfig configures an additional overlay network for peers that are not using OVN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hybridOverlayConfig")]
    pub hybrid_overlay_config: Option<NetworkDefaultNetworkOvnKubernetesConfigHybridOverlayConfig>,
    /// ipsecConfig enables and configures IPsec for pods on the pod network within the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipsecConfig")]
    pub ipsec_config: Option<NetworkDefaultNetworkOvnKubernetesConfigIpsecConfig>,
    /// mtu is the MTU to use for the tunnel interface. This must be 100 bytes smaller than the uplink mtu. Default is 1400
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mtu: Option<i32>,
    /// policyAuditConfig is the configuration for network policy audit events. If unset, reported defaults are used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyAuditConfig")]
    pub policy_audit_config: Option<NetworkDefaultNetworkOvnKubernetesConfigPolicyAuditConfig>,
    /// v4InternalSubnet is a v4 subnet used internally by ovn-kubernetes in case the default one is being already used by something else. It must not overlap with any other subnet being used by OpenShift or by the node network. The size of the subnet must be larger than the number of nodes. The value cannot be changed after installation. Default is 100.64.0.0/16
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "v4InternalSubnet")]
    pub v4_internal_subnet: Option<String>,
    /// v6InternalSubnet is a v6 subnet used internally by ovn-kubernetes in case the default one is being already used by something else. It must not overlap with any other subnet being used by OpenShift or by the node network. The size of the subnet must be larger than the number of nodes. The value cannot be changed after installation. Default is fd98::/48
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "v6InternalSubnet")]
    pub v6_internal_subnet: Option<String>,
}

/// egressIPConfig holds the configuration for EgressIP options.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkDefaultNetworkOvnKubernetesConfigEgressIpConfig {
    /// reachabilityTotalTimeout configures the EgressIP node reachability check total timeout in seconds. If the EgressIP node cannot be reached within this timeout, the node is declared down. Setting a large value may cause the EgressIP feature to react slowly to node changes. In particular, it may react slowly for EgressIP nodes that really have a genuine problem and are unreachable. When omitted, this means the user has no opinion and the platform is left to choose a reasonable default, which is subject to change over time. The current default is 1 second. A value of 0 disables the EgressIP node's reachability check.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reachabilityTotalTimeoutSeconds")]
    pub reachability_total_timeout_seconds: Option<i32>,
}

/// gatewayConfig holds the configuration for node gateway options.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkDefaultNetworkOvnKubernetesConfigGatewayConfig {
    /// IPForwarding controls IP forwarding for all traffic on OVN-Kubernetes managed interfaces (such as br-ex). By default this is set to Restricted, and Kubernetes related traffic is still forwarded appropriately, but other IP traffic will not be routed by the OCP node. If there is a desire to allow the host to forward traffic across OVN-Kubernetes managed interfaces, then set this field to "Global". The supported values are "Restricted" and "Global".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipForwarding")]
    pub ip_forwarding: Option<String>,
    /// ipv4 allows users to configure IP settings for IPv4 connections. When omitted, this means no opinion and the default configuration is used. Check individual members fields within ipv4 for details of default values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ipv4: Option<NetworkDefaultNetworkOvnKubernetesConfigGatewayConfigIpv4>,
    /// ipv6 allows users to configure IP settings for IPv6 connections. When omitted, this means no opinion and the default configuration is used. Check individual members fields within ipv6 for details of default values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ipv6: Option<NetworkDefaultNetworkOvnKubernetesConfigGatewayConfigIpv6>,
    /// RoutingViaHost allows pod egress traffic to exit via the ovn-k8s-mp0 management port into the host before sending it out. If this is not set, traffic will always egress directly from OVN to outside without touching the host stack. Setting this to true means hardware offload will not be supported. Default is false if GatewayConfig is specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingViaHost")]
    pub routing_via_host: Option<bool>,
}

/// ipv4 allows users to configure IP settings for IPv4 connections. When omitted, this means no opinion and the default configuration is used. Check individual members fields within ipv4 for details of default values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkDefaultNetworkOvnKubernetesConfigGatewayConfigIpv4 {
    /// internalMasqueradeSubnet contains the masquerade addresses in IPV4 CIDR format used internally by ovn-kubernetes to enable host to service traffic. Each host in the cluster is configured with these addresses, as well as the shared gateway bridge interface. The values can be changed after installation. The subnet chosen should not overlap with other networks specified for OVN-Kubernetes as well as other networks used on the host. Additionally the subnet must be large enough to accommodate 6 IPs (maximum prefix length /29). When omitted, this means no opinion and the platform is left to choose a reasonable default which is subject to change over time. The current default subnet is 169.254.169.0/29 The value must be in proper IPV4 CIDR format
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalMasqueradeSubnet")]
    pub internal_masquerade_subnet: Option<String>,
}

/// ipv6 allows users to configure IP settings for IPv6 connections. When omitted, this means no opinion and the default configuration is used. Check individual members fields within ipv6 for details of default values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkDefaultNetworkOvnKubernetesConfigGatewayConfigIpv6 {
    /// internalMasqueradeSubnet contains the masquerade addresses in IPV6 CIDR format used internally by ovn-kubernetes to enable host to service traffic. Each host in the cluster is configured with these addresses, as well as the shared gateway bridge interface. The values can be changed after installation. The subnet chosen should not overlap with other networks specified for OVN-Kubernetes as well as other networks used on the host. Additionally the subnet must be large enough to accommodate 6 IPs (maximum prefix length /125). When omitted, this means no opinion and the platform is left to choose a reasonable default which is subject to change over time. The current default subnet is fd69::/125 Note that IPV6 dual addresses are not permitted
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalMasqueradeSubnet")]
    pub internal_masquerade_subnet: Option<String>,
}

/// HybridOverlayConfig configures an additional overlay network for peers that are not using OVN.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkDefaultNetworkOvnKubernetesConfigHybridOverlayConfig {
    /// HybridClusterNetwork defines a network space given to nodes on an additional overlay network.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hybridClusterNetwork")]
    pub hybrid_cluster_network: Option<Vec<NetworkDefaultNetworkOvnKubernetesConfigHybridOverlayConfigHybridClusterNetwork>>,
    /// HybridOverlayVXLANPort defines the VXLAN port number to be used by the additional overlay network. Default is 4789
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hybridOverlayVXLANPort")]
    pub hybrid_overlay_vxlan_port: Option<i32>,
}

/// ClusterNetworkEntry is a subnet from which to allocate PodIPs. A network of size HostPrefix (in CIDR notation) will be allocated when nodes join the cluster. If the HostPrefix field is not used by the plugin, it can be left unset. Not all network providers support multiple ClusterNetworks
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkDefaultNetworkOvnKubernetesConfigHybridOverlayConfigHybridClusterNetwork {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPrefix")]
    pub host_prefix: Option<i32>,
}

/// ipsecConfig enables and configures IPsec for pods on the pod network within the cluster.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkDefaultNetworkOvnKubernetesConfigIpsecConfig {
}

/// policyAuditConfig is the configuration for network policy audit events. If unset, reported defaults are used.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkDefaultNetworkOvnKubernetesConfigPolicyAuditConfig {
    /// destination is the location for policy log messages. Regardless of this config, persistent logs will always be dumped to the host at /var/log/ovn/ however Additionally syslog output may be configured as follows. Valid values are: - "libc" -> to use the libc syslog() function of the host node's journdald process - "udp:host:port" -> for sending syslog over UDP - "unix:file" -> for using the UNIX domain socket directly - "null" -> to discard all messages logged to syslog The default is "null"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<String>,
    /// maxFilesSize is the max size an ACL_audit log file is allowed to reach before rotation occurs Units are in MB and the Default is 50MB
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxFileSize")]
    pub max_file_size: Option<i32>,
    /// maxLogFiles specifies the maximum number of ACL_audit log files that can be present.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxLogFiles")]
    pub max_log_files: Option<i32>,
    /// rateLimit is the approximate maximum number of messages to generate per-second per-node. If unset the default of 20 msg/sec is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimit")]
    pub rate_limit: Option<i32>,
    /// syslogFacility the RFC5424 facility for generated messages, e.g. "kern". Default is "local0"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syslogFacility")]
    pub syslog_facility: Option<String>,
}

/// exportNetworkFlows enables and configures the export of network flow metadata from the pod network by using protocols NetFlow, SFlow or IPFIX. Currently only supported on OVN-Kubernetes plugin. If unset, flows will not be exported to any collector.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkExportNetworkFlows {
    /// ipfix defines IPFIX configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ipfix: Option<NetworkExportNetworkFlowsIpfix>,
    /// netFlow defines the NetFlow configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "netFlow")]
    pub net_flow: Option<NetworkExportNetworkFlowsNetFlow>,
    /// sFlow defines the SFlow configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sFlow")]
    pub s_flow: Option<NetworkExportNetworkFlowsSFlow>,
}

/// ipfix defines IPFIX configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkExportNetworkFlowsIpfix {
    /// ipfixCollectors is list of strings formatted as ip:port with a maximum of ten items
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collectors: Option<Vec<String>>,
}

/// netFlow defines the NetFlow configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkExportNetworkFlowsNetFlow {
    /// netFlow defines the NetFlow collectors that will consume the flow data exported from OVS. It is a list of strings formatted as ip:port with a maximum of ten items
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collectors: Option<Vec<String>>,
}

/// sFlow defines the SFlow configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkExportNetworkFlowsSFlow {
    /// sFlowCollectors is list of strings formatted as ip:port with a maximum of ten items
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collectors: Option<Vec<String>>,
}

/// kubeProxyConfig lets us configure desired proxy configuration. If not specified, sensible defaults will be chosen by OpenShift directly. Not consumed by all network providers - currently only openshift-sdn.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkKubeProxyConfig {
    /// The address to "bind" on Defaults to 0.0.0.0
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bindAddress")]
    pub bind_address: Option<String>,
    /// An internal kube-proxy parameter. In older releases of OCP, this sometimes needed to be adjusted in large clusters for performance reasons, but this is no longer necessary, and there is no reason to change this from the default value. Default: 30s
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iptablesSyncPeriod")]
    pub iptables_sync_period: Option<String>,
    /// Any additional arguments to pass to the kubeproxy process
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyArguments")]
    pub proxy_arguments: Option<BTreeMap<String, String>>,
}

/// NetworkSpec is the top-level network configuration object.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NetworkLogLevel {
    #[serde(rename = "")]
    KopiumEmpty,
    Normal,
    Debug,
    Trace,
    TraceAll,
}

/// migration enables and configures the cluster network migration. The migration procedure allows to change the network type and the MTU.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkMigration {
    /// features contains the features migration configuration. Set this to migrate feature configuration when changing the cluster default network provider. if unset, the default operation is to migrate all the configuration of supported features.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub features: Option<NetworkMigrationFeatures>,
    /// mtu contains the MTU migration configuration. Set this to allow changing the MTU values for the default network. If unset, the operation of changing the MTU for the default network will be rejected.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mtu: Option<NetworkMigrationMtu>,
    /// networkType is the target type of network migration. Set this to the target network type to allow changing the default network. If unset, the operation of changing cluster default network plugin will be rejected. The supported values are OpenShiftSDN, OVNKubernetes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkType")]
    pub network_type: Option<String>,
}

/// features contains the features migration configuration. Set this to migrate feature configuration when changing the cluster default network provider. if unset, the default operation is to migrate all the configuration of supported features.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkMigrationFeatures {
    /// egressFirewall specifies whether or not the Egress Firewall configuration is migrated automatically when changing the cluster default network provider. If unset, this property defaults to 'true' and Egress Firewall configure is migrated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egressFirewall")]
    pub egress_firewall: Option<bool>,
    /// egressIP specifies whether or not the Egress IP configuration is migrated automatically when changing the cluster default network provider. If unset, this property defaults to 'true' and Egress IP configure is migrated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egressIP")]
    pub egress_ip: Option<bool>,
    /// multicast specifies whether or not the multicast configuration is migrated automatically when changing the cluster default network provider. If unset, this property defaults to 'true' and multicast configure is migrated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multicast: Option<bool>,
}

/// mtu contains the MTU migration configuration. Set this to allow changing the MTU values for the default network. If unset, the operation of changing the MTU for the default network will be rejected.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkMigrationMtu {
    /// machine contains MTU migration configuration for the machine's uplink. Needs to be migrated along with the default network MTU unless the current uplink MTU already accommodates the default network MTU.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub machine: Option<NetworkMigrationMtuMachine>,
    /// network contains information about MTU migration for the default network. Migrations are only allowed to MTU values lower than the machine's uplink MTU by the minimum appropriate offset.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<NetworkMigrationMtuNetwork>,
}

/// machine contains MTU migration configuration for the machine's uplink. Needs to be migrated along with the default network MTU unless the current uplink MTU already accommodates the default network MTU.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkMigrationMtuMachine {
    /// from is the MTU to migrate from.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<i32>,
    /// to is the MTU to migrate to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<i32>,
}

/// network contains information about MTU migration for the default network. Migrations are only allowed to MTU values lower than the machine's uplink MTU by the minimum appropriate offset.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkMigrationMtuNetwork {
    /// from is the MTU to migrate from.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<i32>,
    /// to is the MTU to migrate to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<i32>,
}

/// NetworkSpec is the top-level network configuration object.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum NetworkOperatorLogLevel {
    #[serde(rename = "")]
    KopiumEmpty,
    Normal,
    Debug,
    Trace,
    TraceAll,
}

/// NetworkStatus is detailed operator status, which is distilled up to the Network clusteroperator object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkStatus {
    /// conditions is a list of conditions and their status
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<NetworkStatusConditions>>,
    /// generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generations: Option<Vec<NetworkStatusGenerations>>,
    /// observedGeneration is the last generation change you've dealt with
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// readyReplicas indicates how many replicas are ready and at the desired state
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readyReplicas")]
    pub ready_replicas: Option<i32>,
    /// version is the level this availability applies to
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// OperatorCondition is just the standard condition fields.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkStatusConditions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NetworkStatusGenerations {
    /// group is the group of the thing you're tracking
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hash: Option<String>,
    /// lastGeneration is the last generation of the workload controller involved
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastGeneration")]
    pub last_generation: Option<i64>,
    /// name is the name of the thing you're tracking
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// namespace is where the thing you're tracking is
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// resource is the resource type of the thing you're tracking
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
}

