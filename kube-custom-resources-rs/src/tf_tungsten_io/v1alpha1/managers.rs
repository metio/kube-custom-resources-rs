// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/tungstenfabric/tf-operator/tf.tungsten.io/v1alpha1/managers.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// ManagerSpec defines the desired state of Manager.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "tf.tungsten.io", version = "v1alpha1", kind = "Manager", plural = "managers")]
#[kube(namespaced)]
#[kube(status = "ManagerStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct ManagerSpec {
    /// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonConfiguration")]
    pub common_configuration: Option<ManagerCommonConfiguration>,
    /// Services defines the desired state of Services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<ManagerServices>,
}

/// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerCommonConfiguration {
    /// AuthParameters auth parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authParameters")]
    pub auth_parameters: Option<ManagerCommonConfigurationAuthParameters>,
    /// Certificate private key length
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certKeyLength")]
    pub cert_key_length: Option<i64>,
    /// Certificate signer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSigner")]
    pub cert_signer: Option<String>,
    /// OS family
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    /// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<String>>,
    /// Kubernetes Cluster Configuration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<ManagerCommonConfigurationLogLevel>,
    /// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// If specified, the pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<ManagerCommonConfigurationTolerations>>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerCommonConfigurationAuthParameters {
    /// AuthenticationMode auth mode
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMode")]
    pub auth_mode: Option<ManagerCommonConfigurationAuthParametersAuthMode>,
    /// KeystoneAuthParameters keystone parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthParameters")]
    pub keystone_auth_parameters: Option<ManagerCommonConfigurationAuthParametersKeystoneAuthParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneSecretName")]
    pub keystone_secret_name: Option<String>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerCommonConfigurationAuthParametersAuthMode {
    #[serde(rename = "noauth")]
    Noauth,
    #[serde(rename = "keystone")]
    Keystone,
}

/// KeystoneAuthParameters keystone parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerCommonConfigurationAuthParametersKeystoneAuthParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPassword")]
    pub admin_password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPort")]
    pub admin_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminTenant")]
    pub admin_tenant: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminUsername")]
    pub admin_username: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authProtocol")]
    pub auth_protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectDomainName")]
    pub project_domain_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDomainName")]
    pub user_domain_name: Option<String>,
}

/// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerCommonConfigurationLogLevel {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "none")]
    None,
}

/// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerCommonConfigurationTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Services defines the desired state of Services.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServices {
    /// AnalyticsInput is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub analytics: Option<ManagerServicesAnalytics>,
    /// AnalyticsAlarmInput is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "analyticsAlarm")]
    pub analytics_alarm: Option<ManagerServicesAnalyticsAlarm>,
    /// AnalyticsSnmpInput is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "analyticsSnmp")]
    pub analytics_snmp: Option<ManagerServicesAnalyticsSnmp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cassandras: Option<Vec<ManagerServicesCassandras>>,
    /// ConfigInput is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<ManagerServicesConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controls: Option<Vec<ManagerServicesControls>>,
    /// KubemanagerInput is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubemanager: Option<ManagerServicesKubemanager>,
    /// QueryEngineInput is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queryengine: Option<ManagerServicesQueryengine>,
    /// RabbitmqInput is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rabbitmq: Option<ManagerServicesRabbitmq>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redis: Option<Vec<ManagerServicesRedis>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vrouters: Option<Vec<ManagerServicesVrouters>>,
    /// WebuiInput is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webui: Option<ManagerServicesWebui>,
    /// ZookeeperInput is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zookeeper: Option<ManagerServicesZookeeper>,
}

/// AnalyticsInput is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalytics {
    /// Input data is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ManagerServicesAnalyticsMetadata>,
    /// AnalyticsSpec is the Spec for the Analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<ManagerServicesAnalyticsSpec>,
}

/// Input data is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// AnalyticsSpec is the Spec for the Analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsSpec {
    /// PodConfiguration is the common services struct.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonConfiguration")]
    pub common_configuration: Option<ManagerServicesAnalyticsSpecCommonConfiguration>,
    /// AnalyticsConfiguration is the Spec for the Analytics API.
    #[serde(rename = "serviceConfiguration")]
    pub service_configuration: ManagerServicesAnalyticsSpecServiceConfiguration,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsSpecCommonConfiguration {
    /// AuthParameters auth parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authParameters")]
    pub auth_parameters: Option<ManagerServicesAnalyticsSpecCommonConfigurationAuthParameters>,
    /// OS family
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    /// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<String>>,
    /// Kubernetes Cluster Configuration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<ManagerServicesAnalyticsSpecCommonConfigurationLogLevel>,
    /// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// If specified, the pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<ManagerServicesAnalyticsSpecCommonConfigurationTolerations>>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsSpecCommonConfigurationAuthParameters {
    /// AuthenticationMode auth mode
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMode")]
    pub auth_mode: Option<ManagerServicesAnalyticsSpecCommonConfigurationAuthParametersAuthMode>,
    /// KeystoneAuthParameters keystone parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthParameters")]
    pub keystone_auth_parameters: Option<ManagerServicesAnalyticsSpecCommonConfigurationAuthParametersKeystoneAuthParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneSecretName")]
    pub keystone_secret_name: Option<String>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesAnalyticsSpecCommonConfigurationAuthParametersAuthMode {
    #[serde(rename = "noauth")]
    Noauth,
    #[serde(rename = "keystone")]
    Keystone,
}

/// KeystoneAuthParameters keystone parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsSpecCommonConfigurationAuthParametersKeystoneAuthParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPassword")]
    pub admin_password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPort")]
    pub admin_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminTenant")]
    pub admin_tenant: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminUsername")]
    pub admin_username: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authProtocol")]
    pub auth_protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectDomainName")]
    pub project_domain_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDomainName")]
    pub user_domain_name: Option<String>,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesAnalyticsSpecCommonConfigurationLogLevel {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "none")]
    None,
}

/// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsSpecCommonConfigurationTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// AnalyticsConfiguration is the Spec for the Analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsSpecServiceConfiguration {
    /// AAAMode aaa mode
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aaaMode")]
    pub aaa_mode: Option<ManagerServicesAnalyticsSpecServiceConfigurationAaaMode>,
    /// Time (in hours) the analytics config data entering the collector stays in the Cassandra database. Defaults to 2160 hours.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "analyticsConfigAuditTTL")]
    pub analytics_config_audit_ttl: Option<i64>,
    /// Time (in hours) that the analytics object and log data stays in the Cassandra database. Defaults to 48 hours.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "analyticsDataTTL")]
    pub analytics_data_ttl: Option<i64>,
    /// Time to live (TTL) for flow data in hours. Defaults to 2 hours.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "analyticsFlowTTL")]
    pub analytics_flow_ttl: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "analyticsIntrospectPort")]
    pub analytics_introspect_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "analyticsPort")]
    pub analytics_port: Option<i64>,
    /// Time to live (TTL) for statistics data in hours. Defaults to 4 hours.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "analyticsStatisticsTTL")]
    pub analytics_statistics_ttl: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorIntrospectPort")]
    pub collector_introspect_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorPort")]
    pub collector_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<ManagerServicesAnalyticsSpecServiceConfigurationContainers>>,
}

/// AnalyticsConfiguration is the Spec for the Analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesAnalyticsSpecServiceConfigurationAaaMode {
    #[serde(rename = "noauth")]
    Noauth,
    #[serde(rename = "rbac")]
    Rbac,
}

/// Container defines name, image and command.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsSpecServiceConfigurationContainers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// AnalyticsAlarmInput is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsAlarm {
    /// Input data is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ManagerServicesAnalyticsAlarmMetadata>,
    /// AnalyticsAlarmSpec is the Spec for the Analytics Alarm API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<ManagerServicesAnalyticsAlarmSpec>,
}

/// Input data is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsAlarmMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// AnalyticsAlarmSpec is the Spec for the Analytics Alarm API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsAlarmSpec {
    /// PodConfiguration is the common services struct.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonConfiguration")]
    pub common_configuration: Option<ManagerServicesAnalyticsAlarmSpecCommonConfiguration>,
    /// AnalyticsAlarmConfiguration is the Spec for the Analytics Alarm API.
    #[serde(rename = "serviceConfiguration")]
    pub service_configuration: ManagerServicesAnalyticsAlarmSpecServiceConfiguration,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsAlarmSpecCommonConfiguration {
    /// AuthParameters auth parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authParameters")]
    pub auth_parameters: Option<ManagerServicesAnalyticsAlarmSpecCommonConfigurationAuthParameters>,
    /// OS family
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    /// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<String>>,
    /// Kubernetes Cluster Configuration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<ManagerServicesAnalyticsAlarmSpecCommonConfigurationLogLevel>,
    /// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// If specified, the pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<ManagerServicesAnalyticsAlarmSpecCommonConfigurationTolerations>>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsAlarmSpecCommonConfigurationAuthParameters {
    /// AuthenticationMode auth mode
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMode")]
    pub auth_mode: Option<ManagerServicesAnalyticsAlarmSpecCommonConfigurationAuthParametersAuthMode>,
    /// KeystoneAuthParameters keystone parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthParameters")]
    pub keystone_auth_parameters: Option<ManagerServicesAnalyticsAlarmSpecCommonConfigurationAuthParametersKeystoneAuthParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneSecretName")]
    pub keystone_secret_name: Option<String>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesAnalyticsAlarmSpecCommonConfigurationAuthParametersAuthMode {
    #[serde(rename = "noauth")]
    Noauth,
    #[serde(rename = "keystone")]
    Keystone,
}

/// KeystoneAuthParameters keystone parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsAlarmSpecCommonConfigurationAuthParametersKeystoneAuthParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPassword")]
    pub admin_password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPort")]
    pub admin_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminTenant")]
    pub admin_tenant: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminUsername")]
    pub admin_username: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authProtocol")]
    pub auth_protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectDomainName")]
    pub project_domain_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDomainName")]
    pub user_domain_name: Option<String>,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesAnalyticsAlarmSpecCommonConfigurationLogLevel {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "none")]
    None,
}

/// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsAlarmSpecCommonConfigurationTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// AnalyticsAlarmConfiguration is the Spec for the Analytics Alarm API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsAlarmSpecServiceConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alarmgenIntrospectListenPort")]
    pub alarmgen_introspect_listen_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alarmgenLogFileName")]
    pub alarmgen_log_file_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alarmgenPartitions")]
    pub alarmgen_partitions: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alarmgenRedisAggregateDbOffset")]
    pub alarmgen_redis_aggregate_db_offset: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<ManagerServicesAnalyticsAlarmSpecServiceConfigurationContainers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logFilePath")]
    pub log_file_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLocal")]
    pub log_local: Option<String>,
}

/// Container defines name, image and command.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsAlarmSpecServiceConfigurationContainers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// AnalyticsSnmpInput is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsSnmp {
    /// Input data is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ManagerServicesAnalyticsSnmpMetadata>,
    /// AnalyticsSnmpSpec is the Spec for the Analytics SNMP API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<ManagerServicesAnalyticsSnmpSpec>,
}

/// Input data is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsSnmpMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// AnalyticsSnmpSpec is the Spec for the Analytics SNMP API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsSnmpSpec {
    /// PodConfiguration is the common services struct.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonConfiguration")]
    pub common_configuration: Option<ManagerServicesAnalyticsSnmpSpecCommonConfiguration>,
    /// AnalyticsSnmpConfiguration is the Spec for the Analytics SNMP API.
    #[serde(rename = "serviceConfiguration")]
    pub service_configuration: ManagerServicesAnalyticsSnmpSpecServiceConfiguration,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsSnmpSpecCommonConfiguration {
    /// AuthParameters auth parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authParameters")]
    pub auth_parameters: Option<ManagerServicesAnalyticsSnmpSpecCommonConfigurationAuthParameters>,
    /// OS family
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    /// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<String>>,
    /// Kubernetes Cluster Configuration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<ManagerServicesAnalyticsSnmpSpecCommonConfigurationLogLevel>,
    /// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// If specified, the pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<ManagerServicesAnalyticsSnmpSpecCommonConfigurationTolerations>>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsSnmpSpecCommonConfigurationAuthParameters {
    /// AuthenticationMode auth mode
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMode")]
    pub auth_mode: Option<ManagerServicesAnalyticsSnmpSpecCommonConfigurationAuthParametersAuthMode>,
    /// KeystoneAuthParameters keystone parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthParameters")]
    pub keystone_auth_parameters: Option<ManagerServicesAnalyticsSnmpSpecCommonConfigurationAuthParametersKeystoneAuthParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneSecretName")]
    pub keystone_secret_name: Option<String>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesAnalyticsSnmpSpecCommonConfigurationAuthParametersAuthMode {
    #[serde(rename = "noauth")]
    Noauth,
    #[serde(rename = "keystone")]
    Keystone,
}

/// KeystoneAuthParameters keystone parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsSnmpSpecCommonConfigurationAuthParametersKeystoneAuthParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPassword")]
    pub admin_password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPort")]
    pub admin_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminTenant")]
    pub admin_tenant: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminUsername")]
    pub admin_username: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authProtocol")]
    pub auth_protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectDomainName")]
    pub project_domain_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDomainName")]
    pub user_domain_name: Option<String>,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesAnalyticsSnmpSpecCommonConfigurationLogLevel {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "none")]
    None,
}

/// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsSnmpSpecCommonConfigurationTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// AnalyticsSnmpConfiguration is the Spec for the Analytics SNMP API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsSnmpSpecServiceConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<ManagerServicesAnalyticsSnmpSpecServiceConfigurationContainers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logFilePath")]
    pub log_file_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLocal")]
    pub log_local: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snmpCollectorFastScanFrequency")]
    pub snmp_collector_fast_scan_frequency: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snmpCollectorIntrospectListenPort")]
    pub snmp_collector_introspect_listen_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snmpCollectorLogFileName")]
    pub snmp_collector_log_file_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snmpCollectorScanFrequency")]
    pub snmp_collector_scan_frequency: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyIntrospectListenPort")]
    pub topology_introspect_listen_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyLogFileName")]
    pub topology_log_file_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologySnmpFrequency")]
    pub topology_snmp_frequency: Option<i64>,
}

/// Container defines name, image and command.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesAnalyticsSnmpSpecServiceConfigurationContainers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// CassandraInput is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesCassandras {
    /// Input data is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ManagerServicesCassandrasMetadata>,
    /// CassandraSpec is the Spec for the cassandras API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<ManagerServicesCassandrasSpec>,
}

/// Input data is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesCassandrasMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// CassandraSpec is the Spec for the cassandras API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesCassandrasSpec {
    /// PodConfiguration is the common services struct.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonConfiguration")]
    pub common_configuration: Option<ManagerServicesCassandrasSpecCommonConfiguration>,
    /// CassandraConfiguration is the Spec for the cassandras API.
    #[serde(rename = "serviceConfiguration")]
    pub service_configuration: ManagerServicesCassandrasSpecServiceConfiguration,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesCassandrasSpecCommonConfiguration {
    /// AuthParameters auth parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authParameters")]
    pub auth_parameters: Option<ManagerServicesCassandrasSpecCommonConfigurationAuthParameters>,
    /// OS family
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    /// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<String>>,
    /// Kubernetes Cluster Configuration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<ManagerServicesCassandrasSpecCommonConfigurationLogLevel>,
    /// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// If specified, the pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<ManagerServicesCassandrasSpecCommonConfigurationTolerations>>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesCassandrasSpecCommonConfigurationAuthParameters {
    /// AuthenticationMode auth mode
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMode")]
    pub auth_mode: Option<ManagerServicesCassandrasSpecCommonConfigurationAuthParametersAuthMode>,
    /// KeystoneAuthParameters keystone parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthParameters")]
    pub keystone_auth_parameters: Option<ManagerServicesCassandrasSpecCommonConfigurationAuthParametersKeystoneAuthParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneSecretName")]
    pub keystone_secret_name: Option<String>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesCassandrasSpecCommonConfigurationAuthParametersAuthMode {
    #[serde(rename = "noauth")]
    Noauth,
    #[serde(rename = "keystone")]
    Keystone,
}

/// KeystoneAuthParameters keystone parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesCassandrasSpecCommonConfigurationAuthParametersKeystoneAuthParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPassword")]
    pub admin_password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPort")]
    pub admin_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminTenant")]
    pub admin_tenant: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminUsername")]
    pub admin_username: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authProtocol")]
    pub auth_protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectDomainName")]
    pub project_domain_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDomainName")]
    pub user_domain_name: Option<String>,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesCassandrasSpecCommonConfigurationLogLevel {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "none")]
    None,
}

/// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesCassandrasSpecCommonConfigurationTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// CassandraConfiguration is the Spec for the cassandras API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesCassandrasSpecServiceConfiguration {
    /// CassandraConfigParameters defines additional parameters for Cassandra confgiuration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cassandraParameters")]
    pub cassandra_parameters: Option<ManagerServicesCassandrasSpecServiceConfigurationCassandraParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<ManagerServicesCassandrasSpecServiceConfigurationContainers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cqlPort")]
    pub cql_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jmxLocalPort")]
    pub jmx_local_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenAddress")]
    pub listen_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxHeapSize")]
    pub max_heap_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minHeapSize")]
    pub min_heap_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumDiskGB")]
    pub minimum_disk_gb: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reaperAdmPort")]
    pub reaper_adm_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reaperAppPort")]
    pub reaper_app_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reaperEnabled")]
    pub reaper_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslStoragePort")]
    pub ssl_storage_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startRPC")]
    pub start_rpc: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePort")]
    pub storage_port: Option<i64>,
}

/// CassandraConfigParameters defines additional parameters for Cassandra confgiuration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesCassandrasSpecServiceConfigurationCassandraParameters {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compactionThroughputMbPerSec")]
    pub compaction_throughput_mb_per_sec: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "concurrentCompactors")]
    pub concurrent_compactors: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "concurrentCounterWrites")]
    pub concurrent_counter_writes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "concurrentMaterializedViewWrites")]
    pub concurrent_materialized_view_writes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "concurrentReads")]
    pub concurrent_reads: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "concurrentWrites")]
    pub concurrent_writes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memtableAllocationType")]
    pub memtable_allocation_type: Option<ManagerServicesCassandrasSpecServiceConfigurationCassandraParametersMemtableAllocationType>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memtableFlushWriters")]
    pub memtable_flush_writers: Option<i64>,
}

/// CassandraConfigParameters defines additional parameters for Cassandra confgiuration
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesCassandrasSpecServiceConfigurationCassandraParametersMemtableAllocationType {
    #[serde(rename = "heap_buffers")]
    HeapBuffers,
    #[serde(rename = "offheap_buffers")]
    OffheapBuffers,
    #[serde(rename = "offheap_objects")]
    OffheapObjects,
}

/// Container defines name, image and command.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesCassandrasSpecServiceConfigurationContainers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ConfigInput is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesConfig {
    /// Input data is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ManagerServicesConfigMetadata>,
    /// ConfigSpec is the Spec for the Config API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<ManagerServicesConfigSpec>,
}

/// Input data is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesConfigMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ConfigSpec is the Spec for the Config API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesConfigSpec {
    /// PodConfiguration is the common services struct.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonConfiguration")]
    pub common_configuration: Option<ManagerServicesConfigSpecCommonConfiguration>,
    /// ConfigConfiguration is the Spec for the Config API.
    #[serde(rename = "serviceConfiguration")]
    pub service_configuration: ManagerServicesConfigSpecServiceConfiguration,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesConfigSpecCommonConfiguration {
    /// AuthParameters auth parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authParameters")]
    pub auth_parameters: Option<ManagerServicesConfigSpecCommonConfigurationAuthParameters>,
    /// OS family
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    /// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<String>>,
    /// Kubernetes Cluster Configuration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<ManagerServicesConfigSpecCommonConfigurationLogLevel>,
    /// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// If specified, the pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<ManagerServicesConfigSpecCommonConfigurationTolerations>>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesConfigSpecCommonConfigurationAuthParameters {
    /// AuthenticationMode auth mode
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMode")]
    pub auth_mode: Option<ManagerServicesConfigSpecCommonConfigurationAuthParametersAuthMode>,
    /// KeystoneAuthParameters keystone parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthParameters")]
    pub keystone_auth_parameters: Option<ManagerServicesConfigSpecCommonConfigurationAuthParametersKeystoneAuthParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneSecretName")]
    pub keystone_secret_name: Option<String>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesConfigSpecCommonConfigurationAuthParametersAuthMode {
    #[serde(rename = "noauth")]
    Noauth,
    #[serde(rename = "keystone")]
    Keystone,
}

/// KeystoneAuthParameters keystone parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesConfigSpecCommonConfigurationAuthParametersKeystoneAuthParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPassword")]
    pub admin_password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPort")]
    pub admin_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminTenant")]
    pub admin_tenant: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminUsername")]
    pub admin_username: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authProtocol")]
    pub auth_protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectDomainName")]
    pub project_domain_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDomainName")]
    pub user_domain_name: Option<String>,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesConfigSpecCommonConfigurationLogLevel {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "none")]
    None,
}

/// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesConfigSpecCommonConfigurationTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ConfigConfiguration is the Spec for the Config API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesConfigSpecServiceConfiguration {
    /// AAAMode aaa mode
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aaaMode")]
    pub aaa_mode: Option<ManagerServicesConfigSpecServiceConfigurationAaaMode>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiAdminPort")]
    pub api_admin_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiIntrospectPort")]
    pub api_introspect_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiPort")]
    pub api_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiWorkerCount")]
    pub api_worker_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bgpAutoMesh")]
    pub bgp_auto_mesh: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bgpEnable4Byte")]
    pub bgp_enable4_byte: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<ManagerServicesConfigSpecServiceConfigurationContainers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceManagerIntrospectPort")]
    pub device_manager_introspect_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fabricMgmtIP")]
    pub fabric_mgmt_ip: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalASNNumber")]
    pub global_asn_number: Option<i64>,
    /// LinklocalServiceConfig is the Spec for link local coniguration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linklocalServiceConfig")]
    pub linklocal_service_config: Option<ManagerServicesConfigSpecServiceConfigurationLinklocalServiceConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schemaIntrospectPort")]
    pub schema_introspect_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "svcMonitorIntrospectPort")]
    pub svc_monitor_introspect_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useExternalTFTP")]
    pub use_external_tftp: Option<bool>,
}

/// ConfigConfiguration is the Spec for the Config API.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesConfigSpecServiceConfigurationAaaMode {
    #[serde(rename = "noauth")]
    Noauth,
    #[serde(rename = "rbac")]
    Rbac,
}

/// Container defines name, image and command.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesConfigSpecServiceConfigurationContainers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// LinklocalServiceConfig is the Spec for link local coniguration
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesConfigSpecServiceConfigurationLinklocalServiceConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ip: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipFabricServiceHost")]
    pub ip_fabric_service_host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipFabricServicePort")]
    pub ip_fabric_service_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

/// ControlInput is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesControls {
    /// Input data is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ManagerServicesControlsMetadata>,
    /// ControlSpec is the Spec for the controls API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<ManagerServicesControlsSpec>,
}

/// Input data is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesControlsMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ControlSpec is the Spec for the controls API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesControlsSpec {
    /// PodConfiguration is the common services struct.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonConfiguration")]
    pub common_configuration: Option<ManagerServicesControlsSpecCommonConfiguration>,
    /// ControlConfiguration is the Spec for the controls API.
    #[serde(rename = "serviceConfiguration")]
    pub service_configuration: ManagerServicesControlsSpecServiceConfiguration,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesControlsSpecCommonConfiguration {
    /// AuthParameters auth parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authParameters")]
    pub auth_parameters: Option<ManagerServicesControlsSpecCommonConfigurationAuthParameters>,
    /// OS family
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    /// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<String>>,
    /// Kubernetes Cluster Configuration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<ManagerServicesControlsSpecCommonConfigurationLogLevel>,
    /// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// If specified, the pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<ManagerServicesControlsSpecCommonConfigurationTolerations>>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesControlsSpecCommonConfigurationAuthParameters {
    /// AuthenticationMode auth mode
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMode")]
    pub auth_mode: Option<ManagerServicesControlsSpecCommonConfigurationAuthParametersAuthMode>,
    /// KeystoneAuthParameters keystone parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthParameters")]
    pub keystone_auth_parameters: Option<ManagerServicesControlsSpecCommonConfigurationAuthParametersKeystoneAuthParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneSecretName")]
    pub keystone_secret_name: Option<String>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesControlsSpecCommonConfigurationAuthParametersAuthMode {
    #[serde(rename = "noauth")]
    Noauth,
    #[serde(rename = "keystone")]
    Keystone,
}

/// KeystoneAuthParameters keystone parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesControlsSpecCommonConfigurationAuthParametersKeystoneAuthParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPassword")]
    pub admin_password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPort")]
    pub admin_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminTenant")]
    pub admin_tenant: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminUsername")]
    pub admin_username: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authProtocol")]
    pub auth_protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectDomainName")]
    pub project_domain_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDomainName")]
    pub user_domain_name: Option<String>,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesControlsSpecCommonConfigurationLogLevel {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "none")]
    None,
}

/// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesControlsSpecCommonConfigurationTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ControlConfiguration is the Spec for the controls API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesControlsSpecServiceConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asnNumber")]
    pub asn_number: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bgpPort")]
    pub bgp_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<ManagerServicesControlsSpecServiceConfigurationContainers>>,
    /// DataSubnet allow to set alternative network in which control, nodemanager and dns services will listen. Local pod address from this subnet will be discovered and used both in configuration for hostip directive and provision script.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSubnet")]
    pub data_subnet: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsIntrospectPort")]
    pub dns_introspect_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsPort")]
    pub dns_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rndckey: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subcluster: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xmppPort")]
    pub xmpp_port: Option<i64>,
}

/// Container defines name, image and command.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesControlsSpecServiceConfigurationContainers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// KubemanagerInput is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesKubemanager {
    /// Input data is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ManagerServicesKubemanagerMetadata>,
    /// KubemanagerSpec is the Spec for the kubemanager API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<ManagerServicesKubemanagerSpec>,
}

/// Input data is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesKubemanagerMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// KubemanagerSpec is the Spec for the kubemanager API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesKubemanagerSpec {
    /// PodConfiguration is the common services struct.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonConfiguration")]
    pub common_configuration: Option<ManagerServicesKubemanagerSpecCommonConfiguration>,
    /// KubemanagerConfiguration is the configuration for the kubemanager API.
    #[serde(rename = "serviceConfiguration")]
    pub service_configuration: ManagerServicesKubemanagerSpecServiceConfiguration,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesKubemanagerSpecCommonConfiguration {
    /// AuthParameters auth parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authParameters")]
    pub auth_parameters: Option<ManagerServicesKubemanagerSpecCommonConfigurationAuthParameters>,
    /// OS family
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    /// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<String>>,
    /// Kubernetes Cluster Configuration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<ManagerServicesKubemanagerSpecCommonConfigurationLogLevel>,
    /// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// If specified, the pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<ManagerServicesKubemanagerSpecCommonConfigurationTolerations>>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesKubemanagerSpecCommonConfigurationAuthParameters {
    /// AuthenticationMode auth mode
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMode")]
    pub auth_mode: Option<ManagerServicesKubemanagerSpecCommonConfigurationAuthParametersAuthMode>,
    /// KeystoneAuthParameters keystone parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthParameters")]
    pub keystone_auth_parameters: Option<ManagerServicesKubemanagerSpecCommonConfigurationAuthParametersKeystoneAuthParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneSecretName")]
    pub keystone_secret_name: Option<String>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesKubemanagerSpecCommonConfigurationAuthParametersAuthMode {
    #[serde(rename = "noauth")]
    Noauth,
    #[serde(rename = "keystone")]
    Keystone,
}

/// KeystoneAuthParameters keystone parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesKubemanagerSpecCommonConfigurationAuthParametersKeystoneAuthParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPassword")]
    pub admin_password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPort")]
    pub admin_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminTenant")]
    pub admin_tenant: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminUsername")]
    pub admin_username: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authProtocol")]
    pub auth_protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectDomainName")]
    pub project_domain_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDomainName")]
    pub user_domain_name: Option<String>,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesKubemanagerSpecCommonConfigurationLogLevel {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "none")]
    None,
}

/// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesKubemanagerSpecCommonConfigurationTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// KubemanagerConfiguration is the configuration for the kubemanager API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesKubemanagerSpecServiceConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudOrchestrator")]
    pub cloud_orchestrator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<ManagerServicesKubemanagerSpecServiceConfigurationContainers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostNetworkService")]
    pub host_network_service: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipFabricForwarding")]
    pub ip_fabric_forwarding: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipFabricSnat")]
    pub ip_fabric_snat: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipFabricSubnets")]
    pub ip_fabric_subnets: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAPIPort")]
    pub kubernetes_api_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAPISSLPort")]
    pub kubernetes_apissl_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesAPIServer")]
    pub kubernetes_api_server: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesTokenFile")]
    pub kubernetes_token_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podSubnet")]
    pub pod_subnet: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicFIPPool")]
    pub public_fip_pool: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSubnet")]
    pub service_subnet: Option<String>,
}

/// Container defines name, image and command.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesKubemanagerSpecServiceConfigurationContainers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// QueryEngineInput is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesQueryengine {
    /// Input data is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ManagerServicesQueryengineMetadata>,
    /// QueryEngineSpec is the Spec for the AnalyticsDB query engine.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<ManagerServicesQueryengineSpec>,
}

/// Input data is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesQueryengineMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// QueryEngineSpec is the Spec for the AnalyticsDB query engine.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesQueryengineSpec {
    /// PodConfiguration is the common services struct.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonConfiguration")]
    pub common_configuration: Option<ManagerServicesQueryengineSpecCommonConfiguration>,
    /// QueryEngineConfiguration is the Spec for the AnalyticsDB query engine.
    #[serde(rename = "serviceConfiguration")]
    pub service_configuration: ManagerServicesQueryengineSpecServiceConfiguration,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesQueryengineSpecCommonConfiguration {
    /// AuthParameters auth parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authParameters")]
    pub auth_parameters: Option<ManagerServicesQueryengineSpecCommonConfigurationAuthParameters>,
    /// OS family
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    /// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<String>>,
    /// Kubernetes Cluster Configuration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<ManagerServicesQueryengineSpecCommonConfigurationLogLevel>,
    /// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// If specified, the pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<ManagerServicesQueryengineSpecCommonConfigurationTolerations>>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesQueryengineSpecCommonConfigurationAuthParameters {
    /// AuthenticationMode auth mode
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMode")]
    pub auth_mode: Option<ManagerServicesQueryengineSpecCommonConfigurationAuthParametersAuthMode>,
    /// KeystoneAuthParameters keystone parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthParameters")]
    pub keystone_auth_parameters: Option<ManagerServicesQueryengineSpecCommonConfigurationAuthParametersKeystoneAuthParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneSecretName")]
    pub keystone_secret_name: Option<String>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesQueryengineSpecCommonConfigurationAuthParametersAuthMode {
    #[serde(rename = "noauth")]
    Noauth,
    #[serde(rename = "keystone")]
    Keystone,
}

/// KeystoneAuthParameters keystone parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesQueryengineSpecCommonConfigurationAuthParametersKeystoneAuthParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPassword")]
    pub admin_password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPort")]
    pub admin_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminTenant")]
    pub admin_tenant: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminUsername")]
    pub admin_username: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authProtocol")]
    pub auth_protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectDomainName")]
    pub project_domain_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDomainName")]
    pub user_domain_name: Option<String>,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesQueryengineSpecCommonConfigurationLogLevel {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "none")]
    None,
}

/// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesQueryengineSpecCommonConfigurationTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// QueryEngineConfiguration is the Spec for the AnalyticsDB query engine.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesQueryengineSpecServiceConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "analyticsdbIntrospectPort")]
    pub analyticsdb_introspect_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "analyticsdbPort")]
    pub analyticsdb_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<ManagerServicesQueryengineSpecServiceConfigurationContainers>>,
}

/// Container defines name, image and command.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesQueryengineSpecServiceConfigurationContainers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// RabbitmqInput is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesRabbitmq {
    /// Input data is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ManagerServicesRabbitmqMetadata>,
    /// RabbitmqSpec is the Spec for the cassandras API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<ManagerServicesRabbitmqSpec>,
}

/// Input data is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesRabbitmqMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// RabbitmqSpec is the Spec for the cassandras API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesRabbitmqSpec {
    /// PodConfiguration is the common services struct.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonConfiguration")]
    pub common_configuration: Option<ManagerServicesRabbitmqSpecCommonConfiguration>,
    /// RabbitmqConfiguration is the Spec for the cassandras API.
    #[serde(rename = "serviceConfiguration")]
    pub service_configuration: ManagerServicesRabbitmqSpecServiceConfiguration,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesRabbitmqSpecCommonConfiguration {
    /// AuthParameters auth parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authParameters")]
    pub auth_parameters: Option<ManagerServicesRabbitmqSpecCommonConfigurationAuthParameters>,
    /// OS family
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    /// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<String>>,
    /// Kubernetes Cluster Configuration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<ManagerServicesRabbitmqSpecCommonConfigurationLogLevel>,
    /// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// If specified, the pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<ManagerServicesRabbitmqSpecCommonConfigurationTolerations>>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesRabbitmqSpecCommonConfigurationAuthParameters {
    /// AuthenticationMode auth mode
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMode")]
    pub auth_mode: Option<ManagerServicesRabbitmqSpecCommonConfigurationAuthParametersAuthMode>,
    /// KeystoneAuthParameters keystone parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthParameters")]
    pub keystone_auth_parameters: Option<ManagerServicesRabbitmqSpecCommonConfigurationAuthParametersKeystoneAuthParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneSecretName")]
    pub keystone_secret_name: Option<String>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesRabbitmqSpecCommonConfigurationAuthParametersAuthMode {
    #[serde(rename = "noauth")]
    Noauth,
    #[serde(rename = "keystone")]
    Keystone,
}

/// KeystoneAuthParameters keystone parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesRabbitmqSpecCommonConfigurationAuthParametersKeystoneAuthParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPassword")]
    pub admin_password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPort")]
    pub admin_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminTenant")]
    pub admin_tenant: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminUsername")]
    pub admin_username: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authProtocol")]
    pub auth_protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectDomainName")]
    pub project_domain_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDomainName")]
    pub user_domain_name: Option<String>,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesRabbitmqSpecCommonConfigurationLogLevel {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "none")]
    None,
}

/// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesRabbitmqSpecCommonConfigurationTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// RabbitmqConfiguration is the Spec for the cassandras API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesRabbitmqSpecServiceConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterPartitionHandling")]
    pub cluster_partition_handling: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<ManagerServicesRabbitmqSpecServiceConfigurationContainers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "erlEpmdPort")]
    pub erl_epmd_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "erlangCookie")]
    pub erlang_cookie: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mirroredQueueMode")]
    pub mirrored_queue_mode: Option<ManagerServicesRabbitmqSpecServiceConfigurationMirroredQueueMode>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// TCPListenOptionsConfig is configuration for RabbitMQ TCP listen
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpListenOptions")]
    pub tcp_listen_options: Option<ManagerServicesRabbitmqSpecServiceConfigurationTcpListenOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vhost: Option<String>,
}

/// Container defines name, image and command.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesRabbitmqSpecServiceConfigurationContainers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// RabbitmqConfiguration is the Spec for the cassandras API.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesRabbitmqSpecServiceConfigurationMirroredQueueMode {
    #[serde(rename = "exactly")]
    Exactly,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "nodes")]
    Nodes,
}

/// TCPListenOptionsConfig is configuration for RabbitMQ TCP listen
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesRabbitmqSpecServiceConfigurationTcpListenOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backlog: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exitOnClose")]
    pub exit_on_close: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lingerOn")]
    pub linger_on: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lingerTimeout")]
    pub linger_timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodelay: Option<bool>,
}

/// RedisInput is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesRedis {
    /// Input data is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ManagerServicesRedisMetadata>,
    /// RedisSpec is the Spec for the redis API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<ManagerServicesRedisSpec>,
}

/// Input data is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesRedisMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// RedisSpec is the Spec for the redis API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesRedisSpec {
    /// PodConfiguration is the common services struct.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonConfiguration")]
    pub common_configuration: Option<ManagerServicesRedisSpecCommonConfiguration>,
    /// RedisConfiguration is the Spec for the redis API.
    #[serde(rename = "serviceConfiguration")]
    pub service_configuration: ManagerServicesRedisSpecServiceConfiguration,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesRedisSpecCommonConfiguration {
    /// AuthParameters auth parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authParameters")]
    pub auth_parameters: Option<ManagerServicesRedisSpecCommonConfigurationAuthParameters>,
    /// OS family
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    /// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<String>>,
    /// Kubernetes Cluster Configuration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<ManagerServicesRedisSpecCommonConfigurationLogLevel>,
    /// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// If specified, the pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<ManagerServicesRedisSpecCommonConfigurationTolerations>>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesRedisSpecCommonConfigurationAuthParameters {
    /// AuthenticationMode auth mode
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMode")]
    pub auth_mode: Option<ManagerServicesRedisSpecCommonConfigurationAuthParametersAuthMode>,
    /// KeystoneAuthParameters keystone parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthParameters")]
    pub keystone_auth_parameters: Option<ManagerServicesRedisSpecCommonConfigurationAuthParametersKeystoneAuthParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneSecretName")]
    pub keystone_secret_name: Option<String>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesRedisSpecCommonConfigurationAuthParametersAuthMode {
    #[serde(rename = "noauth")]
    Noauth,
    #[serde(rename = "keystone")]
    Keystone,
}

/// KeystoneAuthParameters keystone parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesRedisSpecCommonConfigurationAuthParametersKeystoneAuthParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPassword")]
    pub admin_password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPort")]
    pub admin_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminTenant")]
    pub admin_tenant: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminUsername")]
    pub admin_username: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authProtocol")]
    pub auth_protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectDomainName")]
    pub project_domain_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDomainName")]
    pub user_domain_name: Option<String>,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesRedisSpecCommonConfigurationLogLevel {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "none")]
    None,
}

/// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesRedisSpecCommonConfigurationTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// RedisConfiguration is the Spec for the redis API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesRedisSpecServiceConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterName")]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<ManagerServicesRedisSpecServiceConfigurationContainers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redisPort")]
    pub redis_port: Option<i64>,
}

/// Container defines name, image and command.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesRedisSpecServiceConfigurationContainers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// VrouterInput is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesVrouters {
    /// Input data is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ManagerServicesVroutersMetadata>,
    /// VrouterSpec is the Spec for the vrouter API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<ManagerServicesVroutersSpec>,
}

/// Input data is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesVroutersMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// VrouterSpec is the Spec for the vrouter API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesVroutersSpec {
    /// PodConfiguration is the common services struct.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonConfiguration")]
    pub common_configuration: Option<ManagerServicesVroutersSpecCommonConfiguration>,
    /// VrouterConfiguration is the Spec for the vrouter API.
    #[serde(rename = "serviceConfiguration")]
    pub service_configuration: ManagerServicesVroutersSpecServiceConfiguration,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesVroutersSpecCommonConfiguration {
    /// AuthParameters auth parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authParameters")]
    pub auth_parameters: Option<ManagerServicesVroutersSpecCommonConfigurationAuthParameters>,
    /// OS family
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    /// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<String>>,
    /// Kubernetes Cluster Configuration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<ManagerServicesVroutersSpecCommonConfigurationLogLevel>,
    /// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// If specified, the pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<ManagerServicesVroutersSpecCommonConfigurationTolerations>>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesVroutersSpecCommonConfigurationAuthParameters {
    /// AuthenticationMode auth mode
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMode")]
    pub auth_mode: Option<ManagerServicesVroutersSpecCommonConfigurationAuthParametersAuthMode>,
    /// KeystoneAuthParameters keystone parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthParameters")]
    pub keystone_auth_parameters: Option<ManagerServicesVroutersSpecCommonConfigurationAuthParametersKeystoneAuthParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneSecretName")]
    pub keystone_secret_name: Option<String>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesVroutersSpecCommonConfigurationAuthParametersAuthMode {
    #[serde(rename = "noauth")]
    Noauth,
    #[serde(rename = "keystone")]
    Keystone,
}

/// KeystoneAuthParameters keystone parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesVroutersSpecCommonConfigurationAuthParametersKeystoneAuthParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPassword")]
    pub admin_password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPort")]
    pub admin_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminTenant")]
    pub admin_tenant: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminUsername")]
    pub admin_username: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authProtocol")]
    pub auth_protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectDomainName")]
    pub project_domain_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDomainName")]
    pub user_domain_name: Option<String>,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesVroutersSpecCommonConfigurationLogLevel {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "none")]
    None,
}

/// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesVroutersSpecCommonConfigurationTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// VrouterConfiguration is the Spec for the vrouter API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesVroutersSpecServiceConfiguration {
    /// vRouter
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentMode")]
    pub agent_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "barbicanPassword")]
    pub barbican_password: Option<String>,
    /// Openstack
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "barbicanTenantName")]
    pub barbican_tenant_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "barbicanUser")]
    pub barbican_user: Option<String>,
    /// New params for vrouter configuration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudOrchestrator")]
    pub cloud_orchestrator: Option<String>,
    /// CniMTU - mtu for virtual tap devices
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cniMTU")]
    pub cni_mtu: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorPort")]
    pub collector_port: Option<String>,
    /// Config
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configApiPort")]
    pub config_api_port: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configApiServerCaCertfile")]
    pub config_api_server_ca_certfile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configApiSslEnable")]
    pub config_api_ssl_enable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<ManagerServicesVroutersSpecServiceConfigurationContainers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controlInstance")]
    pub control_instance: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSubnet")]
    pub data_subnet: Option<String>,
    /// DNS
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsServerPort")]
    pub dns_server_port: Option<String>,
    /// Host
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dpdkUioDriver")]
    pub dpdk_uio_driver: Option<String>,
    /// What is it doing? VrouterEncryption   bool              `json:"vrouterEncryption,omitempty"` What is it doing? What is it doing?
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "envVariablesConfig")]
    pub env_variables_config: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fabricSntHashTableSize")]
    pub fabric_snt_hash_table_size: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hugePages1G")]
    pub huge_pages1_g: Option<i64>,
    /// HugePages
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hugePages2M")]
    pub huge_pages2_m: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hypervisorType")]
    pub hypervisor_type: Option<String>,
    /// Introspect
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "introspectSslEnable")]
    pub introspect_ssl_enable: Option<bool>,
    /// Kubernetes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "k8sToken")]
    pub k8s_token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "k8sTokenFile")]
    pub k8s_token_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthAdminPassword")]
    pub keystone_auth_admin_password: Option<String>,
    /// Keystone authentication
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthAdminPort")]
    pub keystone_auth_admin_port: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthCaCertfile")]
    pub keystone_auth_ca_certfile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthCertfile")]
    pub keystone_auth_certfile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthHost")]
    pub keystone_auth_host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthInsecure")]
    pub keystone_auth_insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthKeyfile")]
    pub keystone_auth_keyfile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthProjectDomainName")]
    pub keystone_auth_project_domain_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthProto")]
    pub keystone_auth_proto: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthRegionName")]
    pub keystone_auth_region_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthUrlTokens")]
    pub keystone_auth_url_tokens: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthUrlVersion")]
    pub keystone_auth_url_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthUserDomainName")]
    pub keystone_auth_user_domain_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesApiPort")]
    pub kubernetes_api_port: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesApiSecurePort")]
    pub kubernetes_api_secure_port: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubernetesPodSubnet")]
    pub kubernetes_pod_subnet: Option<String>,
    /// L3MH
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "l3mhCidr")]
    pub l3mh_cidr: Option<String>,
    /// Logging
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logDir")]
    pub log_dir: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLocal")]
    pub log_local: Option<i64>,
    /// Metadata
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataProxySecret")]
    pub metadata_proxy_secret: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataSslCaCertfile")]
    pub metadata_ssl_ca_certfile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataSslCertType")]
    pub metadata_ssl_cert_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataSslCertfile")]
    pub metadata_ssl_certfile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataSslEnable")]
    pub metadata_ssl_enable: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataSslKeyfile")]
    pub metadata_ssl_keyfile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "physicalInterface")]
    pub physical_interface: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityBandwidth")]
    pub priority_bandwidth: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityId")]
    pub priority_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityScheduling")]
    pub priority_scheduling: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityTagging")]
    pub priority_tagging: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "qosDefHwQueue")]
    pub qos_def_hw_queue: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "qosLogicalQueues")]
    pub qos_logical_queues: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "qosQueueId")]
    pub qos_queue_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredKernelVrouterEncryption")]
    pub required_kernel_vrouter_encryption: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampleDestination")]
    pub sample_destination: Option<String>,
    /// Sandesh
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sandeshCaCertfile")]
    pub sandesh_ca_certfile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sandeshCertfile")]
    pub sandesh_certfile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sandeshKeyfile")]
    pub sandesh_keyfile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sandeshServerCertfile")]
    pub sandesh_server_certfile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sandeshServerKeyfile")]
    pub sandesh_server_keyfile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sandeshSslEnable")]
    pub sandesh_ssl_enable: Option<bool>,
    /// Server SSL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverCaCertfile")]
    pub server_ca_certfile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverCertfile")]
    pub server_certfile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverKeyfile")]
    pub server_keyfile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sloDestination")]
    pub slo_destination: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sriovPhysicalInterface")]
    pub sriov_physical_interface: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sriovPhysicalNetwork")]
    pub sriov_physical_network: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sriovVf")]
    pub sriov_vf: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslEnable")]
    pub ssl_enable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslInsecure")]
    pub ssl_insecure: Option<bool>,
    /// Collector
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statsCollectorDestinationPath")]
    pub stats_collector_destination_path: Option<String>,
    /// XMPP
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subcluster: Option<String>,
    /// TSN
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tsnAgentMode")]
    pub tsn_agent_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vrouterCryptInterface")]
    pub vrouter_crypt_interface: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vrouterDecryptInterface")]
    pub vrouter_decrypt_interface: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vrouterDecryptKey")]
    pub vrouter_decrypt_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vrouterEncryption")]
    pub vrouter_encryption: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vrouterGateway")]
    pub vrouter_gateway: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xmmpSslEnable")]
    pub xmmp_ssl_enable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xmppServerCaCertfile")]
    pub xmpp_server_ca_certfile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xmppServerCertfile")]
    pub xmpp_server_certfile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xmppServerKeyfile")]
    pub xmpp_server_keyfile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xmppServerPort")]
    pub xmpp_server_port: Option<String>,
}

/// Container defines name, image and command.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesVroutersSpecServiceConfigurationContainers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// WebuiInput is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesWebui {
    /// Input data is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ManagerServicesWebuiMetadata>,
    /// WebuiSpec is the Spec for the cassandras API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<ManagerServicesWebuiSpec>,
}

/// Input data is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesWebuiMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// WebuiSpec is the Spec for the cassandras API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesWebuiSpec {
    /// PodConfiguration is the common services struct.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonConfiguration")]
    pub common_configuration: Option<ManagerServicesWebuiSpecCommonConfiguration>,
    /// WebuiConfiguration is the Spec for the cassandras API.
    #[serde(rename = "serviceConfiguration")]
    pub service_configuration: ManagerServicesWebuiSpecServiceConfiguration,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesWebuiSpecCommonConfiguration {
    /// AuthParameters auth parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authParameters")]
    pub auth_parameters: Option<ManagerServicesWebuiSpecCommonConfigurationAuthParameters>,
    /// OS family
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    /// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<String>>,
    /// Kubernetes Cluster Configuration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<ManagerServicesWebuiSpecCommonConfigurationLogLevel>,
    /// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// If specified, the pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<ManagerServicesWebuiSpecCommonConfigurationTolerations>>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesWebuiSpecCommonConfigurationAuthParameters {
    /// AuthenticationMode auth mode
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMode")]
    pub auth_mode: Option<ManagerServicesWebuiSpecCommonConfigurationAuthParametersAuthMode>,
    /// KeystoneAuthParameters keystone parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthParameters")]
    pub keystone_auth_parameters: Option<ManagerServicesWebuiSpecCommonConfigurationAuthParametersKeystoneAuthParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneSecretName")]
    pub keystone_secret_name: Option<String>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesWebuiSpecCommonConfigurationAuthParametersAuthMode {
    #[serde(rename = "noauth")]
    Noauth,
    #[serde(rename = "keystone")]
    Keystone,
}

/// KeystoneAuthParameters keystone parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesWebuiSpecCommonConfigurationAuthParametersKeystoneAuthParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPassword")]
    pub admin_password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPort")]
    pub admin_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminTenant")]
    pub admin_tenant: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminUsername")]
    pub admin_username: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authProtocol")]
    pub auth_protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectDomainName")]
    pub project_domain_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDomainName")]
    pub user_domain_name: Option<String>,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesWebuiSpecCommonConfigurationLogLevel {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "none")]
    None,
}

/// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesWebuiSpecCommonConfigurationTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// WebuiConfiguration is the Spec for the cassandras API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesWebuiSpecServiceConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<ManagerServicesWebuiSpecServiceConfigurationContainers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controlInstance")]
    pub control_instance: Option<String>,
}

/// Container defines name, image and command.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesWebuiSpecServiceConfigurationContainers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ZookeeperInput is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesZookeeper {
    /// Input data is the Schema for the analytics API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ManagerServicesZookeeperMetadata>,
    /// ZookeeperSpec is the Spec for the zookeeper API.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<ManagerServicesZookeeperSpec>,
}

/// Input data is the Schema for the analytics API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesZookeeperMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ZookeeperSpec is the Spec for the zookeeper API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesZookeeperSpec {
    /// PodConfiguration is the common services struct.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonConfiguration")]
    pub common_configuration: Option<ManagerServicesZookeeperSpecCommonConfiguration>,
    /// ZookeeperConfiguration is the Spec for the zookeeper API.
    #[serde(rename = "serviceConfiguration")]
    pub service_configuration: ManagerServicesZookeeperSpecServiceConfiguration,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesZookeeperSpecCommonConfiguration {
    /// AuthParameters auth parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authParameters")]
    pub auth_parameters: Option<ManagerServicesZookeeperSpecCommonConfigurationAuthParameters>,
    /// OS family
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    /// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<String>>,
    /// Kubernetes Cluster Configuration
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<ManagerServicesZookeeperSpecCommonConfigurationLogLevel>,
    /// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    /// If specified, the pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<ManagerServicesZookeeperSpecCommonConfigurationTolerations>>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesZookeeperSpecCommonConfigurationAuthParameters {
    /// AuthenticationMode auth mode
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMode")]
    pub auth_mode: Option<ManagerServicesZookeeperSpecCommonConfigurationAuthParametersAuthMode>,
    /// KeystoneAuthParameters keystone parameters
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneAuthParameters")]
    pub keystone_auth_parameters: Option<ManagerServicesZookeeperSpecCommonConfigurationAuthParametersKeystoneAuthParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keystoneSecretName")]
    pub keystone_secret_name: Option<String>,
}

/// AuthParameters auth parameters
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesZookeeperSpecCommonConfigurationAuthParametersAuthMode {
    #[serde(rename = "noauth")]
    Noauth,
    #[serde(rename = "keystone")]
    Keystone,
}

/// KeystoneAuthParameters keystone parameters
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesZookeeperSpecCommonConfigurationAuthParametersKeystoneAuthParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPassword")]
    pub admin_password: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPort")]
    pub admin_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminTenant")]
    pub admin_tenant: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminUsername")]
    pub admin_username: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authProtocol")]
    pub auth_protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectDomainName")]
    pub project_domain_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDomainName")]
    pub user_domain_name: Option<String>,
}

/// PodConfiguration is the common services struct.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerServicesZookeeperSpecCommonConfigurationLogLevel {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "none")]
    None,
}

/// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesZookeeperSpecCommonConfigurationTolerations {
    /// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    /// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    /// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ZookeeperConfiguration is the Spec for the zookeeper API.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesZookeeperSpecServiceConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminEnabled")]
    pub admin_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "adminPort")]
    pub admin_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientPort")]
    pub client_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<ManagerServicesZookeeperSpecServiceConfigurationContainers>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "electionPort")]
    pub election_port: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverPort")]
    pub server_port: Option<i64>,
}

/// Container defines name, image and command.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerServicesZookeeperSpecServiceConfigurationContainers {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ManagerStatus defines the observed state of Manager.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerStatus {
    /// ServiceStatus provides information on the current status of the service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub analytics: Option<ManagerStatusAnalytics>,
    /// ServiceStatus provides information on the current status of the service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "analyticsAlarm")]
    pub analytics_alarm: Option<ManagerStatusAnalyticsAlarm>,
    /// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "analyticsSnmp")]
    pub analytics_snmp: Option<ManagerStatusAnalyticsSnmp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cassandras: Option<Vec<ManagerStatusCassandras>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<ManagerStatusConditions>>,
    /// ServiceStatus provides information on the current status of the service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<ManagerStatusConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controls: Option<Vec<ManagerStatusControls>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crdStatus")]
    pub crd_status: Option<Vec<ManagerStatusCrdStatus>>,
    /// ServiceStatus provides information on the current status of the service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kubemanager: Option<ManagerStatusKubemanager>,
    /// ServiceStatus provides information on the current status of the service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queryengine: Option<ManagerStatusQueryengine>,
    /// ServiceStatus provides information on the current status of the service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rabbitmq: Option<ManagerStatusRabbitmq>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redis: Option<Vec<ManagerStatusRedis>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vrouters: Option<Vec<ManagerStatusVrouters>>,
    /// ServiceStatus provides information on the current status of the service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webui: Option<ManagerStatusWebui>,
    /// ZIU status for orchestrating cluster ZIU process -1 not needed 0 not detected 1..x ziu stages
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ziuState")]
    pub ziu_state: Option<i32>,
    /// ServiceStatus provides information on the current status of the service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zookeeper: Option<ManagerStatusZookeeper>,
}

/// ServiceStatus provides information on the current status of the service.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerStatusAnalytics {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ServiceStatus provides information on the current status of the service.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerStatusAnalyticsAlarm {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerStatusAnalyticsSnmp {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ServiceStatus provides information on the current status of the service.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerStatusCassandras {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ManagerCondition is used to represent cluster condition
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerStatusConditions {
    /// Status of the condition, one of True or False.
    pub status: String,
    /// Type of manager condition.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// ServiceStatus provides information on the current status of the service.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerStatusConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ServiceStatus provides information on the current status of the service.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerStatusControls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// CrdStatus tracks status of CRD.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerStatusCrdStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ServiceStatus provides information on the current status of the service.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerStatusKubemanager {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ServiceStatus provides information on the current status of the service.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerStatusQueryengine {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ServiceStatus provides information on the current status of the service.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerStatusRabbitmq {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ServiceStatus provides information on the current status of the service.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerStatusRedis {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ServiceStatus provides information on the current status of the service.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerStatusVrouters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ServiceStatus provides information on the current status of the service.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerStatusWebui {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ServiceStatus provides information on the current status of the service.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ManagerStatusZookeeper {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

