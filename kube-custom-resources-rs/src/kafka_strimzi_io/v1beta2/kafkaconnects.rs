// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/strimzi/strimzi-kafka-operator/kafka.strimzi.io/v1beta2/kafkaconnects.yaml --derive=PartialEq
// kopium version: 0.16.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;

/// The specification of the Kafka Connect cluster.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "kafka.strimzi.io", version = "v1beta2", kind = "KafkaConnect", plural = "kafkaconnects")]
#[kube(namespaced)]
#[kube(status = "KafkaConnectStatus")]
#[kube(schema = "disabled")]
pub struct KafkaConnectSpec {
    /// Authentication configuration for Kafka Connect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<KafkaConnectAuthentication>,
    /// Bootstrap servers to connect to. This should be given as a comma separated list of _<hostname>_:_<port>_ pairs.
    #[serde(rename = "bootstrapServers")]
    pub bootstrap_servers: String,
    /// Configures how the Connect container image should be built. Optional.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub build: Option<KafkaConnectBuild>,
    /// The image of the init container used for initializing the `client.rack`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientRackInitImage")]
    pub client_rack_init_image: Option<String>,
    /// The Kafka Connect configuration. Properties with the following prefixes cannot be set: ssl., sasl., security., listeners, plugin.path, rest., bootstrap.servers, consumer.interceptor.classes, producer.interceptor.classes (with the exception of: ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<BTreeMap<String, serde_json::Value>>,
    /// Pass data from Secrets or ConfigMaps to the Kafka Connect pods and use them to configure connectors.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalConfiguration")]
    pub external_configuration: Option<KafkaConnectExternalConfiguration>,
    /// The docker image for the pods.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// JMX Options.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jmxOptions")]
    pub jmx_options: Option<KafkaConnectJmxOptions>,
    /// JVM Options for pods.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jvmOptions")]
    pub jvm_options: Option<KafkaConnectJvmOptions>,
    /// Pod liveness checking.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<KafkaConnectLivenessProbe>,
    /// Logging configuration for Kafka Connect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logging: Option<KafkaConnectLogging>,
    /// Metrics configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricsConfig")]
    pub metrics_config: Option<KafkaConnectMetricsConfig>,
    /// Configuration of the node label which will be used as the `client.rack` consumer configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rack: Option<KafkaConnectRack>,
    /// Pod readiness checking.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<KafkaConnectReadinessProbe>,
    /// The number of pods in the Kafka Connect group. Defaults to `3`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i64>,
    /// The maximum limits for CPU and memory resources and the requested initial resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<KafkaConnectResources>,
    /// Template for Kafka Connect and Kafka Mirror Maker 2 resources. The template allows users to specify how the `Deployment`, `Pods` and `Service` are generated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<KafkaConnectTemplate>,
    /// TLS configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<KafkaConnectTls>,
    /// The configuration of tracing in Kafka Connect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tracing: Option<KafkaConnectTracing>,
    /// The Kafka Connect version. Defaults to {DefaultKafkaVersion}. Consult the user documentation to understand the process required to upgrade or downgrade the version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// Authentication configuration for Kafka Connect.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectAuthentication {
    /// Link to Kubernetes Secret containing the access token which was obtained from the authorization server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessToken")]
    pub access_token: Option<KafkaConnectAuthenticationAccessToken>,
    /// Configure whether access token should be treated as JWT. This should be set to `false` if the authorization server returns opaque tokens. Defaults to `true`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessTokenIsJwt")]
    pub access_token_is_jwt: Option<bool>,
    /// OAuth audience to use when authenticating against the authorization server. Some authorization servers require the audience to be explicitly set. The possible values depend on how the authorization server is configured. By default, `audience` is not specified when performing the token endpoint request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub audience: Option<String>,
    /// Reference to the `Secret` which holds the certificate and private key pair.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateAndKey")]
    pub certificate_and_key: Option<KafkaConnectAuthenticationCertificateAndKey>,
    /// OAuth Client ID which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    /// Link to Kubernetes Secret containing the OAuth client secret which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSecret")]
    pub client_secret: Option<KafkaConnectAuthenticationClientSecret>,
    /// The connect timeout in seconds when connecting to authorization server. If not set, the effective connect timeout is 60 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectTimeoutSeconds")]
    pub connect_timeout_seconds: Option<i64>,
    /// Enable or disable TLS hostname verification. Default value is `false`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableTlsHostnameVerification")]
    pub disable_tls_hostname_verification: Option<bool>,
    /// Enable or disable OAuth metrics. Default value is `false`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableMetrics")]
    pub enable_metrics: Option<bool>,
    /// The maximum number of retries to attempt if an initial HTTP request fails. If not set, the default is to not attempt any retries.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpRetries")]
    pub http_retries: Option<i64>,
    /// The pause to take before retrying a failed HTTP request. If not set, the default is to not pause at all but to immediately repeat a request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpRetryPauseMs")]
    pub http_retry_pause_ms: Option<i64>,
    /// Whether the Accept header should be set in requests to the authorization servers. The default value is `true`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeAcceptHeader")]
    pub include_accept_header: Option<bool>,
    /// Set or limit time-to-live of the access tokens to the specified number of seconds. This should be set if the authorization server returns opaque tokens.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTokenExpirySeconds")]
    pub max_token_expiry_seconds: Option<i64>,
    /// Reference to the `Secret` which holds the password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecret")]
    pub password_secret: Option<KafkaConnectAuthenticationPasswordSecret>,
    /// The read timeout in seconds when connecting to authorization server. If not set, the effective read timeout is 60 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readTimeoutSeconds")]
    pub read_timeout_seconds: Option<i64>,
    /// Link to Kubernetes Secret containing the refresh token which can be used to obtain access token from the authorization server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "refreshToken")]
    pub refresh_token: Option<KafkaConnectAuthenticationRefreshToken>,
    /// OAuth scope to use when authenticating against the authorization server. Some authorization servers require this to be set. The possible values depend on how authorization server is configured. By default `scope` is not specified when doing the token endpoint request.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// Trusted certificates for TLS connection to the OAuth server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsTrustedCertificates")]
    pub tls_trusted_certificates: Option<Vec<KafkaConnectAuthenticationTlsTrustedCertificates>>,
    /// Authorization server token endpoint URI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenEndpointUri")]
    pub token_endpoint_uri: Option<String>,
    /// Authentication type. Currently the supported types are `tls`, `scram-sha-256`, `scram-sha-512`, `plain`, and 'oauth'. `scram-sha-256` and `scram-sha-512` types use SASL SCRAM-SHA-256 and SASL SCRAM-SHA-512 Authentication, respectively. `plain` type uses SASL PLAIN Authentication. `oauth` type uses SASL OAUTHBEARER Authentication. The `tls` type uses TLS Client Authentication. The `tls` type is supported only over TLS connections.
    #[serde(rename = "type")]
    pub r#type: KafkaConnectAuthenticationType,
    /// Username used for the authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// Link to Kubernetes Secret containing the access token which was obtained from the authorization server.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectAuthenticationAccessToken {
    /// The key under which the secret value is stored in the Kubernetes Secret.
    pub key: String,
    /// The name of the Kubernetes Secret containing the secret value.
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

/// Reference to the `Secret` which holds the certificate and private key pair.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectAuthenticationCertificateAndKey {
    /// The name of the file certificate in the Secret.
    pub certificate: String,
    /// The name of the private key in the Secret.
    pub key: String,
    /// The name of the Secret containing the certificate.
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

/// Link to Kubernetes Secret containing the OAuth client secret which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectAuthenticationClientSecret {
    /// The key under which the secret value is stored in the Kubernetes Secret.
    pub key: String,
    /// The name of the Kubernetes Secret containing the secret value.
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

/// Reference to the `Secret` which holds the password.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectAuthenticationPasswordSecret {
    /// The name of the key in the Secret under which the password is stored.
    pub password: String,
    /// The name of the Secret containing the password.
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

/// Link to Kubernetes Secret containing the refresh token which can be used to obtain access token from the authorization server.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectAuthenticationRefreshToken {
    /// The key under which the secret value is stored in the Kubernetes Secret.
    pub key: String,
    /// The name of the Kubernetes Secret containing the secret value.
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectAuthenticationTlsTrustedCertificates {
    /// The name of the file certificate in the Secret.
    pub certificate: String,
    /// The name of the Secret containing the certificate.
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

/// Authentication configuration for Kafka Connect.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KafkaConnectAuthenticationType {
    #[serde(rename = "tls")]
    Tls,
    #[serde(rename = "scram-sha-256")]
    ScramSha256,
    #[serde(rename = "scram-sha-512")]
    ScramSha512,
    #[serde(rename = "plain")]
    Plain,
    #[serde(rename = "oauth")]
    Oauth,
}

/// Configures how the Connect container image should be built. Optional.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectBuild {
    /// Configures where should the newly built image be stored. Required.
    pub output: KafkaConnectBuildOutput,
    /// List of connector plugins which should be added to the Kafka Connect. Required.
    pub plugins: Vec<KafkaConnectBuildPlugins>,
    /// CPU and memory resources to reserve for the build.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<KafkaConnectBuildResources>,
}

/// Configures where should the newly built image be stored. Required.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectBuildOutput {
    /// Configures additional options which will be passed to the Kaniko executor when building the new Connect image. Allowed options are: --customPlatform, --insecure, --insecure-pull, --insecure-registry, --log-format, --log-timestamp, --registry-mirror, --reproducible, --single-snapshot, --skip-tls-verify, --skip-tls-verify-pull, --skip-tls-verify-registry, --verbosity, --snapshotMode, --use-new-run. These options will be used only on Kubernetes where the Kaniko executor is used. They will be ignored on OpenShift. The options are described in the link:https://github.com/GoogleContainerTools/kaniko[Kaniko GitHub repository^]. Changing this field does not trigger new build of the Kafka Connect image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalKanikoOptions")]
    pub additional_kaniko_options: Option<Vec<String>>,
    /// The name of the image which will be built. Required.
    pub image: String,
    /// Container Registry Secret with the credentials for pushing the newly built image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pushSecret")]
    pub push_secret: Option<String>,
    /// Output type. Must be either `docker` for pushing the newly build image to Docker compatible registry or `imagestream` for pushing the image to OpenShift ImageStream. Required.
    #[serde(rename = "type")]
    pub r#type: KafkaConnectBuildOutputType,
}

/// Configures where should the newly built image be stored. Required.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KafkaConnectBuildOutputType {
    #[serde(rename = "docker")]
    Docker,
    #[serde(rename = "imagestream")]
    Imagestream,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectBuildPlugins {
    /// List of artifacts which belong to this connector plugin. Required.
    pub artifacts: Vec<KafkaConnectBuildPluginsArtifacts>,
    /// The unique name of the connector plugin. Will be used to generate the path where the connector artifacts will be stored. The name has to be unique within the KafkaConnect resource. The name has to follow the following pattern: `^[a-z][-_a-z0-9]*[a-z]$`. Required.
    pub name: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectBuildPluginsArtifacts {
    /// Maven artifact id. Applicable to the `maven` artifact type only.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub artifact: Option<String>,
    /// Name under which the artifact will be stored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileName")]
    pub file_name: Option<String>,
    /// Maven group id. Applicable to the `maven` artifact type only.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// By default, connections using TLS are verified to check they are secure. The server certificate used must be valid, trusted, and contain the server name. By setting this option to `true`, all TLS verification is disabled and the artifact will be downloaded, even when the server is considered insecure.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    /// Maven repository to download the artifact from. Applicable to the `maven` artifact type only.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// SHA512 checksum of the artifact. Optional. If specified, the checksum will be verified while building the new container. If not specified, the downloaded artifact will not be verified. Not applicable to the `maven` artifact type. 
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha512sum: Option<String>,
    /// Artifact type. Currently, the supported artifact types are `tgz`, `jar`, `zip`, `other` and `maven`.
    #[serde(rename = "type")]
    pub r#type: KafkaConnectBuildPluginsArtifactsType,
    /// URL of the artifact which will be downloaded. Strimzi does not do any security scanning of the downloaded artifacts. For security reasons, you should first verify the artifacts manually and configure the checksum verification to make sure the same artifact is used in the automated build. Required for `jar`, `zip`, `tgz` and `other` artifacts. Not applicable to the `maven` artifact type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// Maven version number. Applicable to the `maven` artifact type only.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KafkaConnectBuildPluginsArtifactsType {
    #[serde(rename = "jar")]
    Jar,
    #[serde(rename = "tgz")]
    Tgz,
    #[serde(rename = "zip")]
    Zip,
    #[serde(rename = "maven")]
    Maven,
    #[serde(rename = "other")]
    Other,
}

/// CPU and memory resources to reserve for the build.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectBuildResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<KafkaConnectBuildResourcesClaims>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectBuildResourcesClaims {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Pass data from Secrets or ConfigMaps to the Kafka Connect pods and use them to configure connectors.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectExternalConfiguration {
    /// Makes data from a Secret or ConfigMap available in the Kafka Connect pods as environment variables.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<KafkaConnectExternalConfigurationEnv>>,
    /// Makes data from a Secret or ConfigMap available in the Kafka Connect pods as volumes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<KafkaConnectExternalConfigurationVolumes>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectExternalConfigurationEnv {
    /// Name of the environment variable which will be passed to the Kafka Connect pods. The name of the environment variable cannot start with `KAFKA_` or `STRIMZI_`.
    pub name: String,
    /// Value of the environment variable which will be passed to the Kafka Connect pods. It can be passed either as a reference to Secret or ConfigMap field. The field has to specify exactly one Secret or ConfigMap.
    #[serde(rename = "valueFrom")]
    pub value_from: KafkaConnectExternalConfigurationEnvValueFrom,
}

/// Value of the environment variable which will be passed to the Kafka Connect pods. It can be passed either as a reference to Secret or ConfigMap field. The field has to specify exactly one Secret or ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectExternalConfigurationEnvValueFrom {
    /// Reference to a key in a ConfigMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<KafkaConnectExternalConfigurationEnvValueFromConfigMapKeyRef>,
    /// Reference to a key in a Secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretKeyRef")]
    pub secret_key_ref: Option<KafkaConnectExternalConfigurationEnvValueFromSecretKeyRef>,
}

/// Reference to a key in a ConfigMap.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectExternalConfigurationEnvValueFromConfigMapKeyRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Reference to a key in a Secret.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectExternalConfigurationEnvValueFromSecretKeyRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectExternalConfigurationVolumes {
    /// Reference to a key in a ConfigMap. Exactly one Secret or ConfigMap has to be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<KafkaConnectExternalConfigurationVolumesConfigMap>,
    /// Name of the volume which will be added to the Kafka Connect pods.
    pub name: String,
    /// Reference to a key in a Secret. Exactly one Secret or ConfigMap has to be specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<KafkaConnectExternalConfigurationVolumesSecret>,
}

/// Reference to a key in a ConfigMap. Exactly one Secret or ConfigMap has to be specified.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectExternalConfigurationVolumesConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<KafkaConnectExternalConfigurationVolumesConfigMapItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectExternalConfigurationVolumesConfigMapItems {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// Reference to a key in a Secret. Exactly one Secret or ConfigMap has to be specified.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectExternalConfigurationVolumesSecret {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultMode")]
    pub default_mode: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<KafkaConnectExternalConfigurationVolumesSecretItems>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectExternalConfigurationVolumesSecretItems {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// JMX Options.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectJmxOptions {
    /// Authentication configuration for connecting to the JMX port.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authentication: Option<KafkaConnectJmxOptionsAuthentication>,
}

/// Authentication configuration for connecting to the JMX port.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectJmxOptionsAuthentication {
    /// Authentication type. Currently the only supported types are `password`.`password` type creates a username and protected port with no TLS.
    #[serde(rename = "type")]
    pub r#type: KafkaConnectJmxOptionsAuthenticationType,
}

/// Authentication configuration for connecting to the JMX port.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KafkaConnectJmxOptionsAuthenticationType {
    #[serde(rename = "password")]
    Password,
}

/// JVM Options for pods.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectJvmOptions {
    /// A map of -XX options to the JVM.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "-XX")]
    pub xx: Option<BTreeMap<String, serde_json::Value>>,
    /// -Xms option to to the JVM.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "-Xms")]
    pub xms: Option<String>,
    /// -Xmx option to to the JVM.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "-Xmx")]
    pub xmx: Option<String>,
    /// Specifies whether the Garbage Collection logging is enabled. The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gcLoggingEnabled")]
    pub gc_logging_enabled: Option<bool>,
    /// A map of additional system properties which will be passed using the `-D` option to the JVM.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "javaSystemProperties")]
    pub java_system_properties: Option<Vec<KafkaConnectJvmOptionsJavaSystemProperties>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectJvmOptionsJavaSystemProperties {
    /// The system property name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The system property value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Pod liveness checking.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectLivenessProbe {
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i64>,
    /// The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i64>,
    /// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i64>,
    /// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i64>,
    /// The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i64>,
}

/// Logging configuration for Kafka Connect.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectLogging {
    /// A Map from logger name to logger level.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub loggers: Option<BTreeMap<String, serde_json::Value>>,
    /// Logging type, must be either 'inline' or 'external'.
    #[serde(rename = "type")]
    pub r#type: KafkaConnectLoggingType,
    /// `ConfigMap` entry where the logging configuration is stored. 
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueFrom")]
    pub value_from: Option<KafkaConnectLoggingValueFrom>,
}

/// Logging configuration for Kafka Connect.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KafkaConnectLoggingType {
    #[serde(rename = "inline")]
    Inline,
    #[serde(rename = "external")]
    External,
}

/// `ConfigMap` entry where the logging configuration is stored. 
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectLoggingValueFrom {
    /// Reference to the key in the ConfigMap containing the configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<KafkaConnectLoggingValueFromConfigMapKeyRef>,
}

/// Reference to the key in the ConfigMap containing the configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectLoggingValueFromConfigMapKeyRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Metrics configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectMetricsConfig {
    /// Metrics type. Only 'jmxPrometheusExporter' supported currently.
    #[serde(rename = "type")]
    pub r#type: KafkaConnectMetricsConfigType,
    /// ConfigMap entry where the Prometheus JMX Exporter configuration is stored. For details of the structure of this configuration, see the {JMXExporter}.
    #[serde(rename = "valueFrom")]
    pub value_from: KafkaConnectMetricsConfigValueFrom,
}

/// Metrics configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KafkaConnectMetricsConfigType {
    #[serde(rename = "jmxPrometheusExporter")]
    JmxPrometheusExporter,
}

/// ConfigMap entry where the Prometheus JMX Exporter configuration is stored. For details of the structure of this configuration, see the {JMXExporter}.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectMetricsConfigValueFrom {
    /// Reference to the key in the ConfigMap containing the configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMapKeyRef")]
    pub config_map_key_ref: Option<KafkaConnectMetricsConfigValueFromConfigMapKeyRef>,
}

/// Reference to the key in the ConfigMap containing the configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectMetricsConfigValueFromConfigMapKeyRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// Configuration of the node label which will be used as the `client.rack` consumer configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectRack {
    /// A key that matches labels assigned to the Kubernetes cluster nodes. The value of the label is used to set a broker's `broker.rack` config, and the `client.rack` config for Kafka Connect or MirrorMaker 2.
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

/// Pod readiness checking.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectReadinessProbe {
    /// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i64>,
    /// The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialDelaySeconds")]
    pub initial_delay_seconds: Option<i64>,
    /// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i64>,
    /// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i64>,
    /// The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i64>,
}

/// The maximum limits for CPU and memory resources and the requested initial resources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<KafkaConnectResourcesClaims>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectResourcesClaims {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Template for Kafka Connect and Kafka Mirror Maker 2 resources. The template allows users to specify how the `Deployment`, `Pods` and `Service` are generated.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplate {
    /// Template for Kafka Connect API `Service`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiService")]
    pub api_service: Option<KafkaConnectTemplateApiService>,
    /// Template for the Kafka Connect BuildConfig used to build new container images. The BuildConfig is used only on OpenShift.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildConfig")]
    pub build_config: Option<KafkaConnectTemplateBuildConfig>,
    /// Template for the Kafka Connect Build container. The build container is used only on Kubernetes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildContainer")]
    pub build_container: Option<KafkaConnectTemplateBuildContainer>,
    /// Template for Kafka Connect Build `Pods`. The build pod is used only on Kubernetes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildPod")]
    pub build_pod: Option<KafkaConnectTemplateBuildPod>,
    /// Template for the Kafka Connect Build service account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildServiceAccount")]
    pub build_service_account: Option<KafkaConnectTemplateBuildServiceAccount>,
    /// Template for the Kafka Connect ClusterRoleBinding.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterRoleBinding")]
    pub cluster_role_binding: Option<KafkaConnectTemplateClusterRoleBinding>,
    /// Template for the Kafka Connect container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectContainer")]
    pub connect_container: Option<KafkaConnectTemplateConnectContainer>,
    /// Template for Kafka Connect `Deployment`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<KafkaConnectTemplateDeployment>,
    /// Template for Kafka Connect headless `Service`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headlessService")]
    pub headless_service: Option<KafkaConnectTemplateHeadlessService>,
    /// Template for the Kafka init container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initContainer")]
    pub init_container: Option<KafkaConnectTemplateInitContainer>,
    /// Template for Secret of the Kafka Connect Cluster JMX authentication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jmxSecret")]
    pub jmx_secret: Option<KafkaConnectTemplateJmxSecret>,
    /// Template for Kafka Connect `Pods`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod: Option<KafkaConnectTemplatePod>,
    /// Template for Kafka Connect `PodDisruptionBudget`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podDisruptionBudget")]
    pub pod_disruption_budget: Option<KafkaConnectTemplatePodDisruptionBudget>,
    /// Template for Kafka Connect `StrimziPodSet` resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podSet")]
    pub pod_set: Option<KafkaConnectTemplatePodSet>,
    /// Template for the Kafka Connect service account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<KafkaConnectTemplateServiceAccount>,
}

/// Template for Kafka Connect API `Service`.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateApiService {
    /// Specifies the IP Families used by the service. Available options are `IPv4` and `IPv6`. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipFamilies")]
    pub ip_families: Option<Vec<String>>,
    /// Specifies the IP Family Policy used by the service. Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipFamilyPolicy")]
    pub ip_family_policy: Option<KafkaConnectTemplateApiServiceIpFamilyPolicy>,
    /// Metadata applied to the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<KafkaConnectTemplateApiServiceMetadata>,
}

/// Template for Kafka Connect API `Service`.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KafkaConnectTemplateApiServiceIpFamilyPolicy {
    SingleStack,
    PreferDualStack,
    RequireDualStack,
}

/// Metadata applied to the resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateApiServiceMetadata {
    /// Annotations added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, serde_json::Value>>,
    /// Labels added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, serde_json::Value>>,
}

/// Template for the Kafka Connect BuildConfig used to build new container images. The BuildConfig is used only on OpenShift.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildConfig {
    /// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<KafkaConnectTemplateBuildConfigMetadata>,
    /// Container Registry Secret with the credentials for pulling the base image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullSecret")]
    pub pull_secret: Option<String>,
}

/// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildConfigMetadata {
    /// Annotations added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, serde_json::Value>>,
    /// Labels added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, serde_json::Value>>,
}

/// Template for the Kafka Connect Build container. The build container is used only on Kubernetes.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildContainer {
    /// Environment variables which should be applied to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<KafkaConnectTemplateBuildContainerEnv>>,
    /// Security context for the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<KafkaConnectTemplateBuildContainerSecurityContext>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildContainerEnv {
    /// The environment variable key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The environment variable value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Security context for the container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildContainerSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPrivilegeEscalation")]
    pub allow_privilege_escalation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<KafkaConnectTemplateBuildContainerSecurityContextCapabilities>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "procMount")]
    pub proc_mount: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFilesystem")]
    pub read_only_root_filesystem: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<KafkaConnectTemplateBuildContainerSecurityContextSeLinuxOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<KafkaConnectTemplateBuildContainerSecurityContextSeccompProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<KafkaConnectTemplateBuildContainerSecurityContextWindowsOptions>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildContainerSecurityContextCapabilities {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildContainerSecurityContextSeLinuxOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildContainerSecurityContextSeccompProfile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildContainerSecurityContextWindowsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

/// Template for Kafka Connect Build `Pods`. The build pod is used only on Kubernetes.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPod {
    /// The pod's affinity rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<KafkaConnectTemplateBuildPodAffinity>,
    /// Indicates whether information about services should be injected into Pod's environment variables.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableServiceLinks")]
    pub enable_service_links: Option<bool>,
    /// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostAliases")]
    pub host_aliases: Option<Vec<KafkaConnectTemplateBuildPodHostAliases>>,
    /// List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<KafkaConnectTemplateBuildPodImagePullSecrets>>,
    /// Metadata applied to the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<KafkaConnectTemplateBuildPodMetadata>,
    /// The name of the priority class used to assign priority to the pods. For more information about priority classes, see {K8sPriorityClass}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityClassName")]
    pub priority_class_name: Option<String>,
    /// The name of the scheduler used to dispatch this `Pod`. If not specified, the default scheduler will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulerName")]
    pub scheduler_name: Option<String>,
    /// Configures pod-level security attributes and common container settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<KafkaConnectTemplateBuildPodSecurityContext>,
    /// The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal. Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// Defines the total amount (for example `1Gi`) of local storage required for temporary EmptyDir volume (`/tmp`). Default value is `5Mi`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tmpDirSizeLimit")]
    pub tmp_dir_size_limit: Option<String>,
    /// The pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<KafkaConnectTemplateBuildPodTolerations>>,
    /// The pod's topology spread constraints.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologySpreadConstraints")]
    pub topology_spread_constraints: Option<Vec<KafkaConnectTemplateBuildPodTopologySpreadConstraints>>,
}

/// The pod's affinity rules.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinity")]
    pub node_affinity: Option<KafkaConnectTemplateBuildPodAffinityNodeAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinity")]
    pub pod_affinity: Option<KafkaConnectTemplateBuildPodAffinityPodAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinity")]
    pub pod_anti_affinity: Option<KafkaConnectTemplateBuildPodAffinityPodAntiAffinity>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityNodeAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<KafkaConnectTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<KafkaConnectTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub preference: Option<KafkaConnectTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<KafkaConnectTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectorTerms")]
    pub node_selector_terms: Option<Vec<KafkaConnectTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<KafkaConnectTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<KafkaConnectTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<KafkaConnectTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinityTerm")]
    pub pod_affinity_term: Option<KafkaConnectTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<KafkaConnectTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<KafkaConnectTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<KafkaConnectTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<KafkaConnectTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAntiAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<KafkaConnectTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<KafkaConnectTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinityTerm")]
    pub pod_affinity_term: Option<KafkaConnectTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<KafkaConnectTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<KafkaConnectTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<KafkaConnectTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<KafkaConnectTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodHostAliases {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostnames: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ip: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodImagePullSecrets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Metadata applied to the resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodMetadata {
    /// Annotations added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, serde_json::Value>>,
    /// Labels added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, serde_json::Value>>,
}

/// Configures pod-level security attributes and common container settings.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroup")]
    pub fs_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroupChangePolicy")]
    pub fs_group_change_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<KafkaConnectTemplateBuildPodSecurityContextSeLinuxOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<KafkaConnectTemplateBuildPodSecurityContextSeccompProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supplementalGroups")]
    pub supplemental_groups: Option<Vec<i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sysctls: Option<Vec<KafkaConnectTemplateBuildPodSecurityContextSysctls>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<KafkaConnectTemplateBuildPodSecurityContextWindowsOptions>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodSecurityContextSeLinuxOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodSecurityContextSeccompProfile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodSecurityContextSysctls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodSecurityContextWindowsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodTolerations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodTopologySpreadConstraints {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<KafkaConnectTemplateBuildPodTopologySpreadConstraintsLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabelKeys")]
    pub match_label_keys: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSkew")]
    pub max_skew: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minDomains")]
    pub min_domains: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinityPolicy")]
    pub node_affinity_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeTaintsPolicy")]
    pub node_taints_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "whenUnsatisfiable")]
    pub when_unsatisfiable: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodTopologySpreadConstraintsLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplateBuildPodTopologySpreadConstraintsLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildPodTopologySpreadConstraintsLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Template for the Kafka Connect Build service account.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildServiceAccount {
    /// Metadata applied to the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<KafkaConnectTemplateBuildServiceAccountMetadata>,
}

/// Metadata applied to the resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateBuildServiceAccountMetadata {
    /// Annotations added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, serde_json::Value>>,
    /// Labels added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, serde_json::Value>>,
}

/// Template for the Kafka Connect ClusterRoleBinding.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateClusterRoleBinding {
    /// Metadata applied to the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<KafkaConnectTemplateClusterRoleBindingMetadata>,
}

/// Metadata applied to the resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateClusterRoleBindingMetadata {
    /// Annotations added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, serde_json::Value>>,
    /// Labels added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, serde_json::Value>>,
}

/// Template for the Kafka Connect container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateConnectContainer {
    /// Environment variables which should be applied to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<KafkaConnectTemplateConnectContainerEnv>>,
    /// Security context for the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<KafkaConnectTemplateConnectContainerSecurityContext>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateConnectContainerEnv {
    /// The environment variable key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The environment variable value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Security context for the container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateConnectContainerSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPrivilegeEscalation")]
    pub allow_privilege_escalation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<KafkaConnectTemplateConnectContainerSecurityContextCapabilities>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "procMount")]
    pub proc_mount: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFilesystem")]
    pub read_only_root_filesystem: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<KafkaConnectTemplateConnectContainerSecurityContextSeLinuxOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<KafkaConnectTemplateConnectContainerSecurityContextSeccompProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<KafkaConnectTemplateConnectContainerSecurityContextWindowsOptions>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateConnectContainerSecurityContextCapabilities {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateConnectContainerSecurityContextSeLinuxOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateConnectContainerSecurityContextSeccompProfile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateConnectContainerSecurityContextWindowsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

/// Template for Kafka Connect `Deployment`.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateDeployment {
    /// Pod replacement strategy for deployment configuration changes. Valid values are `RollingUpdate` and `Recreate`. Defaults to `RollingUpdate`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentStrategy")]
    pub deployment_strategy: Option<KafkaConnectTemplateDeploymentDeploymentStrategy>,
    /// Metadata applied to the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<KafkaConnectTemplateDeploymentMetadata>,
}

/// Template for Kafka Connect `Deployment`.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KafkaConnectTemplateDeploymentDeploymentStrategy {
    RollingUpdate,
    Recreate,
}

/// Metadata applied to the resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateDeploymentMetadata {
    /// Annotations added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, serde_json::Value>>,
    /// Labels added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, serde_json::Value>>,
}

/// Template for Kafka Connect headless `Service`.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateHeadlessService {
    /// Specifies the IP Families used by the service. Available options are `IPv4` and `IPv6`. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipFamilies")]
    pub ip_families: Option<Vec<String>>,
    /// Specifies the IP Family Policy used by the service. Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipFamilyPolicy")]
    pub ip_family_policy: Option<KafkaConnectTemplateHeadlessServiceIpFamilyPolicy>,
    /// Metadata applied to the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<KafkaConnectTemplateHeadlessServiceMetadata>,
}

/// Template for Kafka Connect headless `Service`.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KafkaConnectTemplateHeadlessServiceIpFamilyPolicy {
    SingleStack,
    PreferDualStack,
    RequireDualStack,
}

/// Metadata applied to the resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateHeadlessServiceMetadata {
    /// Annotations added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, serde_json::Value>>,
    /// Labels added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, serde_json::Value>>,
}

/// Template for the Kafka init container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateInitContainer {
    /// Environment variables which should be applied to the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<KafkaConnectTemplateInitContainerEnv>>,
    /// Security context for the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<KafkaConnectTemplateInitContainerSecurityContext>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateInitContainerEnv {
    /// The environment variable key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The environment variable value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Security context for the container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateInitContainerSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowPrivilegeEscalation")]
    pub allow_privilege_escalation: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<KafkaConnectTemplateInitContainerSecurityContextCapabilities>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "procMount")]
    pub proc_mount: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFilesystem")]
    pub read_only_root_filesystem: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<KafkaConnectTemplateInitContainerSecurityContextSeLinuxOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<KafkaConnectTemplateInitContainerSecurityContextSeccompProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<KafkaConnectTemplateInitContainerSecurityContextWindowsOptions>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateInitContainerSecurityContextCapabilities {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub add: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateInitContainerSecurityContextSeLinuxOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateInitContainerSecurityContextSeccompProfile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateInitContainerSecurityContextWindowsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

/// Template for Secret of the Kafka Connect Cluster JMX authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateJmxSecret {
    /// Metadata applied to the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<KafkaConnectTemplateJmxSecretMetadata>,
}

/// Metadata applied to the resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateJmxSecretMetadata {
    /// Annotations added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, serde_json::Value>>,
    /// Labels added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, serde_json::Value>>,
}

/// Template for Kafka Connect `Pods`.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePod {
    /// The pod's affinity rules.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<KafkaConnectTemplatePodAffinity>,
    /// Indicates whether information about services should be injected into Pod's environment variables.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableServiceLinks")]
    pub enable_service_links: Option<bool>,
    /// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostAliases")]
    pub host_aliases: Option<Vec<KafkaConnectTemplatePodHostAliases>>,
    /// List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<KafkaConnectTemplatePodImagePullSecrets>>,
    /// Metadata applied to the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<KafkaConnectTemplatePodMetadata>,
    /// The name of the priority class used to assign priority to the pods. For more information about priority classes, see {K8sPriorityClass}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "priorityClassName")]
    pub priority_class_name: Option<String>,
    /// The name of the scheduler used to dispatch this `Pod`. If not specified, the default scheduler will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulerName")]
    pub scheduler_name: Option<String>,
    /// Configures pod-level security attributes and common container settings.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<KafkaConnectTemplatePodSecurityContext>,
    /// The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal. Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terminationGracePeriodSeconds")]
    pub termination_grace_period_seconds: Option<i64>,
    /// Defines the total amount (for example `1Gi`) of local storage required for temporary EmptyDir volume (`/tmp`). Default value is `5Mi`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tmpDirSizeLimit")]
    pub tmp_dir_size_limit: Option<String>,
    /// The pod's tolerations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<KafkaConnectTemplatePodTolerations>>,
    /// The pod's topology spread constraints.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologySpreadConstraints")]
    pub topology_spread_constraints: Option<Vec<KafkaConnectTemplatePodTopologySpreadConstraints>>,
}

/// The pod's affinity rules.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinity")]
    pub node_affinity: Option<KafkaConnectTemplatePodAffinityNodeAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinity")]
    pub pod_affinity: Option<KafkaConnectTemplatePodAffinityPodAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinity")]
    pub pod_anti_affinity: Option<KafkaConnectTemplatePodAffinityPodAntiAffinity>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityNodeAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<KafkaConnectTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<KafkaConnectTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub preference: Option<KafkaConnectTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<KafkaConnectTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelectorTerms")]
    pub node_selector_terms: Option<Vec<KafkaConnectTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<KafkaConnectTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<KafkaConnectTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<KafkaConnectTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinityTerm")]
    pub pod_affinity_term: Option<KafkaConnectTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<KafkaConnectTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<KafkaConnectTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<KafkaConnectTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<KafkaConnectTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAntiAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredDuringSchedulingIgnoredDuringExecution")]
    pub preferred_during_scheduling_ignored_during_execution: Option<Vec<KafkaConnectTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requiredDuringSchedulingIgnoredDuringExecution")]
    pub required_during_scheduling_ignored_during_execution: Option<Vec<KafkaConnectTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinityTerm")]
    pub pod_affinity_term: Option<KafkaConnectTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<KafkaConnectTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<KafkaConnectTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<KafkaConnectTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<KafkaConnectTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodHostAliases {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostnames: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ip: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodImagePullSecrets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Metadata applied to the resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodMetadata {
    /// Annotations added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, serde_json::Value>>,
    /// Labels added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, serde_json::Value>>,
}

/// Configures pod-level security attributes and common container settings.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroup")]
    pub fs_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fsGroupChangePolicy")]
    pub fs_group_change_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seLinuxOptions")]
    pub se_linux_options: Option<KafkaConnectTemplatePodSecurityContextSeLinuxOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "seccompProfile")]
    pub seccomp_profile: Option<KafkaConnectTemplatePodSecurityContextSeccompProfile>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supplementalGroups")]
    pub supplemental_groups: Option<Vec<i64>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sysctls: Option<Vec<KafkaConnectTemplatePodSecurityContextSysctls>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsOptions")]
    pub windows_options: Option<KafkaConnectTemplatePodSecurityContextWindowsOptions>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodSecurityContextSeLinuxOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodSecurityContextSeccompProfile {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localhostProfile")]
    pub localhost_profile: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodSecurityContextSysctls {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodSecurityContextWindowsOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpec")]
    pub gmsa_credential_spec: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gmsaCredentialSpecName")]
    pub gmsa_credential_spec_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostProcess")]
    pub host_process: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUserName")]
    pub run_as_user_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodTolerations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tolerationSeconds")]
    pub toleration_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodTopologySpreadConstraints {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<KafkaConnectTemplatePodTopologySpreadConstraintsLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabelKeys")]
    pub match_label_keys: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSkew")]
    pub max_skew: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minDomains")]
    pub min_domains: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinityPolicy")]
    pub node_affinity_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeTaintsPolicy")]
    pub node_taints_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topologyKey")]
    pub topology_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "whenUnsatisfiable")]
    pub when_unsatisfiable: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodTopologySpreadConstraintsLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<KafkaConnectTemplatePodTopologySpreadConstraintsLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, serde_json::Value>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodTopologySpreadConstraintsLabelSelectorMatchExpressions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Template for Kafka Connect `PodDisruptionBudget`.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodDisruptionBudget {
    /// Maximum number of unavailable pods to allow automatic Pod eviction. A Pod eviction is allowed when the `maxUnavailable` number of pods or fewer are unavailable after the eviction. Setting this value to 0 prevents all voluntary evictions, so the pods must be evicted manually. Defaults to 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnavailable")]
    pub max_unavailable: Option<i64>,
    /// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<KafkaConnectTemplatePodDisruptionBudgetMetadata>,
}

/// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodDisruptionBudgetMetadata {
    /// Annotations added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, serde_json::Value>>,
    /// Labels added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, serde_json::Value>>,
}

/// Template for Kafka Connect `StrimziPodSet` resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodSet {
    /// Metadata applied to the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<KafkaConnectTemplatePodSetMetadata>,
}

/// Metadata applied to the resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplatePodSetMetadata {
    /// Annotations added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, serde_json::Value>>,
    /// Labels added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, serde_json::Value>>,
}

/// Template for the Kafka Connect service account.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateServiceAccount {
    /// Metadata applied to the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<KafkaConnectTemplateServiceAccountMetadata>,
}

/// Metadata applied to the resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTemplateServiceAccountMetadata {
    /// Annotations added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, serde_json::Value>>,
    /// Labels added to the Kubernetes resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, serde_json::Value>>,
}

/// TLS configuration.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTls {
    /// Trusted certificates for TLS connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trustedCertificates")]
    pub trusted_certificates: Option<Vec<KafkaConnectTlsTrustedCertificates>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTlsTrustedCertificates {
    /// The name of the file certificate in the Secret.
    pub certificate: String,
    /// The name of the Secret containing the certificate.
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

/// The configuration of tracing in Kafka Connect.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectTracing {
    /// Type of the tracing used. Currently the only supported type is `opentelemetry` for OpenTelemetry tracing. As of Strimzi 0.37.0, `jaeger` type is not supported anymore and this option is ignored.
    #[serde(rename = "type")]
    pub r#type: KafkaConnectTracingType,
}

/// The configuration of tracing in Kafka Connect.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum KafkaConnectTracingType {
    #[serde(rename = "jaeger")]
    Jaeger,
    #[serde(rename = "opentelemetry")]
    Opentelemetry,
}

/// The status of the Kafka Connect cluster.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectStatus {
    /// List of status conditions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<KafkaConnectStatusConditions>>,
    /// The list of connector plugins available in this Kafka Connect deployment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectorPlugins")]
    pub connector_plugins: Option<Vec<KafkaConnectStatusConnectorPlugins>>,
    /// Label selector for pods providing this resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<String>,
    /// The generation of the CRD that was last reconciled by the operator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// The current number of pods being used to provide this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i64>,
    /// The URL of the REST API endpoint for managing and monitoring Kafka Connect connectors.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectStatusConditions {
    /// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastTransitionTime")]
    pub last_transition_time: Option<String>,
    /// Human-readable message indicating details about the condition's last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// The reason for the condition's last transition (a single word in CamelCase).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// The status of the condition, either True, False or Unknown.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// The unique identifier of a condition, used to distinguish between other conditions in the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct KafkaConnectStatusConnectorPlugins {
    /// The class of the connector plugin.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
    /// The type of the connector plugin. The available types are `sink` and `source`.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// The version of the connector plugin.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

