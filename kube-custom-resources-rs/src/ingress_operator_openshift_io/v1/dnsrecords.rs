// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/openshift/api/ingress.operator.openshift.io/v1/dnsrecords.yaml --derive=PartialEq
// kopium version: 0.17.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// spec is the specification of the desired behavior of the dnsRecord.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "ingress.operator.openshift.io", version = "v1", kind = "DNSRecord", plural = "dnsrecords")]
#[kube(namespaced)]
#[kube(status = "DNSRecordStatus")]
#[kube(schema = "disabled")]
pub struct DNSRecordSpec {
    /// dnsManagementPolicy denotes the current policy applied on the DNS record. Records that have policy set as "Unmanaged" are ignored by the ingress operator.  This means that the DNS record on the cloud provider is not managed by the operator, and the "Published" status condition will be updated to "Unknown" status, since it is externally managed. Any existing record on the cloud provider can be deleted at the discretion of the cluster admin. 
    ///  This field defaults to Managed. Valid values are "Managed" and "Unmanaged".
    #[serde(rename = "dnsManagementPolicy")]
    pub dns_management_policy: DNSRecordDnsManagementPolicy,
    /// dnsName is the hostname of the DNS record
    #[serde(rename = "dnsName")]
    pub dns_name: String,
    /// recordTTL is the record TTL in seconds. If zero, the default is 30. RecordTTL will not be used in AWS regions Alias targets, but will be used in CNAME targets, per AWS API contract.
    #[serde(rename = "recordTTL")]
    pub record_ttl: i64,
    /// recordType is the DNS record type. For example, "A" or "CNAME".
    #[serde(rename = "recordType")]
    pub record_type: DNSRecordRecordType,
    /// targets are record targets.
    pub targets: Vec<String>,
}

/// spec is the specification of the desired behavior of the dnsRecord.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DNSRecordDnsManagementPolicy {
    Managed,
    Unmanaged,
}

/// spec is the specification of the desired behavior of the dnsRecord.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum DNSRecordRecordType {
    #[serde(rename = "CNAME")]
    Cname,
    A,
}

/// status is the most recently observed status of the dnsRecord.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DNSRecordStatus {
    /// observedGeneration is the most recently observed generation of the DNSRecord.  When the DNSRecord is updated, the controller updates the corresponding record in each managed zone.  If an update for a particular zone fails, that failure is recorded in the status condition for the zone so that the controller can determine that it needs to retry the update for that specific zone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// zones are the status of the record in each zone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zones: Option<Vec<DNSRecordStatusZones>>,
}

/// DNSZoneStatus is the status of a record within a specific zone.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DNSRecordStatusZones {
    /// conditions are any conditions associated with the record in the zone. 
    ///  If publishing the record succeeds, the "Published" condition will be set with status "True" and upon failure it will be set to "False" along with the reason and message describing the cause of the failure.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// dnsZone is the zone where the record is published.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsZone")]
    pub dns_zone: Option<DNSRecordStatusZonesDnsZone>,
}

/// dnsZone is the zone where the record is published.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct DNSRecordStatusZonesDnsZone {
    /// id is the identifier that can be used to find the DNS hosted zone. 
    ///  on AWS zone can be fetched using `ID` as id in [1] on Azure zone can be fetched using `ID` as a pre-determined name in [2], on GCP zone can be fetched using `ID` as a pre-determined name in [3]. 
    ///  [1]: https://docs.aws.amazon.com/cli/latest/reference/route53/get-hosted-zone.html#options [2]: https://docs.microsoft.com/en-us/cli/azure/network/dns/zone?view=azure-cli-latest#az-network-dns-zone-show [3]: https://cloud.google.com/dns/docs/reference/v1/managedZones/get
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// tags can be used to query the DNS hosted zone. 
    ///  on AWS, resourcegroupstaggingapi [1] can be used to fetch a zone using `Tags` as tag-filters, 
    ///  [1]: https://docs.aws.amazon.com/cli/latest/reference/resourcegroupstaggingapi/get-resources.html#options
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
}

