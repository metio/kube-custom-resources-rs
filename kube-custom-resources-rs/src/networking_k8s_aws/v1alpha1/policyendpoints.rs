// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/aws/amazon-network-policy-controller-k8s/networking.k8s.aws/v1alpha1/policyendpoints.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// PolicyEndpointSpec defines the desired state of PolicyEndpoint
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "networking.k8s.aws", version = "v1alpha1", kind = "PolicyEndpoint", plural = "policyendpoints")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct PolicyEndpointSpec {
    /// Egress is the list of egress rules containing resolved network addresses
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub egress: Option<Vec<PolicyEndpointEgress>>,
    /// Ingress is the list of ingress rules containing resolved network addresses
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingress: Option<Vec<PolicyEndpointIngress>>,
    /// PodIsolation specifies whether the pod needs to be isolated for a
    /// particular traffic direction Ingress or Egress, or both. If default isolation is not
    /// specified, and there are no ingress/egress rules, then the pod is not isolated
    /// from the point of view of this policy. This follows the NetworkPolicy spec.PolicyTypes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podIsolation")]
    pub pod_isolation: Option<Vec<String>>,
    /// PodSelector is the podSelector from the policy resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podSelector")]
    pub pod_selector: Option<PolicyEndpointPodSelector>,
    /// PodSelectorEndpoints contains information about the pods
    /// matching the podSelector
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podSelectorEndpoints")]
    pub pod_selector_endpoints: Option<Vec<PolicyEndpointPodSelectorEndpoints>>,
    /// PolicyRef is a reference to the Kubernetes NetworkPolicy resource.
    #[serde(rename = "policyRef")]
    pub policy_ref: PolicyEndpointPolicyRef,
}

/// EndpointInfo defines the network endpoint information for the policy ingress/egress
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PolicyEndpointEgress {
    /// CIDR is the network address(s) of the endpoint
    pub cidr: String,
    /// Except is the exceptions to the CIDR ranges mentioned above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub except: Option<Vec<String>>,
    /// Ports is the list of ports
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<PolicyEndpointEgressPorts>>,
}

/// Port contains information about the transport port/protocol
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PolicyEndpointEgressPorts {
    /// Endport specifies the port range port to endPort
    /// port must be defined and an integer, endPort > port
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endPort")]
    pub end_port: Option<i32>,
    /// Port specifies the numerical port for the protocol. If empty applies to all ports
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// Protocol specifies the transport protocol, default TCP
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
}

/// EndpointInfo defines the network endpoint information for the policy ingress/egress
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PolicyEndpointIngress {
    /// CIDR is the network address(s) of the endpoint
    pub cidr: String,
    /// Except is the exceptions to the CIDR ranges mentioned above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub except: Option<Vec<String>>,
    /// Ports is the list of ports
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<PolicyEndpointIngressPorts>>,
}

/// Port contains information about the transport port/protocol
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PolicyEndpointIngressPorts {
    /// Endport specifies the port range port to endPort
    /// port must be defined and an integer, endPort > port
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endPort")]
    pub end_port: Option<i32>,
    /// Port specifies the numerical port for the protocol. If empty applies to all ports
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// Protocol specifies the transport protocol, default TCP
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
}

/// PodSelector is the podSelector from the policy resource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PolicyEndpointPodSelector {
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<PolicyEndpointPodSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    /// map is equivalent to an element of matchExpressions, whose key field is "key", the
    /// operator is "In", and the values array contains only "value". The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that
/// relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PolicyEndpointPodSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values.
    /// Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn,
    /// the values array must be non-empty. If the operator is Exists or DoesNotExist,
    /// the values array must be empty. This array is replaced during a strategic
    /// merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// PodEndpoint defines the summary information for the pods
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PolicyEndpointPodSelectorEndpoints {
    /// HostIP is the IP address of the host the pod is currently running on
    #[serde(rename = "hostIP")]
    pub host_ip: String,
    /// Name is the pod name
    pub name: String,
    /// Namespace is the pod namespace
    pub namespace: String,
    /// PodIP is the IP address of the pod
    #[serde(rename = "podIP")]
    pub pod_ip: String,
}

/// PolicyRef is a reference to the Kubernetes NetworkPolicy resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PolicyEndpointPolicyRef {
    /// Name is the name of the Policy
    pub name: String,
    /// Namespace is the namespace of the Policy
    pub namespace: String,
}

/// PolicyEndpointStatus defines the observed state of PolicyEndpoint
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PolicyEndpointStatus {
}

