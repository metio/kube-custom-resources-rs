// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kumahq/kuma/kuma.io/v1alpha1/meshproxypatches.yaml --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use std::collections::HashMap;

/// Spec is the specification of the Kuma MeshProxyPatch resource.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "kuma.io", version = "v1alpha1", kind = "MeshProxyPatch", plural = "meshproxypatches")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
pub struct MeshProxyPatchSpec {
    /// Default is a configuration specific to the group of destinations referenced in 'targetRef'.
    pub default: MeshProxyPatchDefault,
    /// TargetRef is a reference to the resource the policy takes an effect on. The resource could be either a real store object or virtual resource defined inplace.
    #[serde(rename = "targetRef")]
    pub target_ref: MeshProxyPatchTargetRef,
}

/// Default is a configuration specific to the group of destinations referenced in 'targetRef'.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshProxyPatchDefault {
    /// AppendModifications is a list of modifications applied on the selected proxy.
    #[serde(rename = "appendModifications")]
    pub append_modifications: Vec<MeshProxyPatchDefaultAppendModifications>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshProxyPatchDefaultAppendModifications {
    /// Cluster is a modification of Envoy's Cluster resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<MeshProxyPatchDefaultAppendModificationsCluster>,
    /// HTTPFilter is a modification of Envoy HTTP Filter available in HTTP Connection Manager in a Listener resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpFilter")]
    pub http_filter: Option<MeshProxyPatchDefaultAppendModificationsHttpFilter>,
    /// Listener is a modification of Envoy's Listener resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub listener: Option<MeshProxyPatchDefaultAppendModificationsListener>,
    /// NetworkFilter is a modification of Envoy Listener's filter.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkFilter")]
    pub network_filter: Option<MeshProxyPatchDefaultAppendModificationsNetworkFilter>,
    /// VirtualHost is a modification of Envoy's VirtualHost referenced in HTTP Connection Manager in a Listener resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualHost")]
    pub virtual_host: Option<MeshProxyPatchDefaultAppendModificationsVirtualHost>,
}

/// Cluster is a modification of Envoy's Cluster resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshProxyPatchDefaultAppendModificationsCluster {
    /// JsonPatches specifies list of jsonpatches to apply to on Envoy's Cluster resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPatches")]
    pub json_patches: Option<Vec<MeshProxyPatchDefaultAppendModificationsClusterJsonPatches>>,
    /// Match is a set of conditions that have to be matched for modification operation to happen.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<MeshProxyPatchDefaultAppendModificationsClusterMatch>,
    /// Operation to execute on matched cluster.
    pub operation: MeshProxyPatchDefaultAppendModificationsClusterOperation,
    /// Value of xDS resource in YAML format to add or patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// JsonPatchBlock is one json patch operation block.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshProxyPatchDefaultAppendModificationsClusterJsonPatches {
    /// From is a jsonpatch from string, used by move and copy operations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    /// Op is a jsonpatch operation string.
    pub op: MeshProxyPatchDefaultAppendModificationsClusterJsonPatchesOp,
    /// Path is a jsonpatch path string.
    pub path: String,
    /// Value must be a valid json value used by replace and add operations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<HashMap<String, serde_json::Value>>,
}

/// JsonPatchBlock is one json patch operation block.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MeshProxyPatchDefaultAppendModificationsClusterJsonPatchesOp {
    #[serde(rename = "add")]
    Add,
    #[serde(rename = "remove")]
    Remove,
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "move")]
    Move,
    #[serde(rename = "copy")]
    Copy,
}

/// Match is a set of conditions that have to be matched for modification operation to happen.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshProxyPatchDefaultAppendModificationsClusterMatch {
    /// Name of the cluster to match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Origin is the name of the component or plugin that generated the resource. 
    ///  Here is the list of well-known origins: inbound - resources generated for handling incoming traffic. outbound - resources generated for handling outgoing traffic. transparent - resources generated for transparent proxy functionality. prometheus - resources generated when Prometheus metrics are enabled. direct-access - resources generated for Direct Access functionality. ingress - resources generated for Zone Ingress. egress - resources generated for Zone Egress. gateway - resources generated for MeshGateway. 
    ///  The list is not complete, because policy plugins can introduce new resources. For example MeshTrace plugin can create Cluster with "mesh-trace" origin.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
}

/// Cluster is a modification of Envoy's Cluster resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MeshProxyPatchDefaultAppendModificationsClusterOperation {
    Add,
    Remove,
    Patch,
}

/// HTTPFilter is a modification of Envoy HTTP Filter available in HTTP Connection Manager in a Listener resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshProxyPatchDefaultAppendModificationsHttpFilter {
    /// JsonPatches specifies list of jsonpatches to apply to on Envoy's HTTP Filter available in HTTP Connection Manager in a Listener resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPatches")]
    pub json_patches: Option<Vec<MeshProxyPatchDefaultAppendModificationsHttpFilterJsonPatches>>,
    /// Match is a set of conditions that have to be matched for modification operation to happen.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<MeshProxyPatchDefaultAppendModificationsHttpFilterMatch>,
    /// Operation to execute on matched listener.
    pub operation: MeshProxyPatchDefaultAppendModificationsHttpFilterOperation,
    /// Value of xDS resource in YAML format to add or patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// JsonPatchBlock is one json patch operation block.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshProxyPatchDefaultAppendModificationsHttpFilterJsonPatches {
    /// From is a jsonpatch from string, used by move and copy operations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    /// Op is a jsonpatch operation string.
    pub op: MeshProxyPatchDefaultAppendModificationsHttpFilterJsonPatchesOp,
    /// Path is a jsonpatch path string.
    pub path: String,
    /// Value must be a valid json value used by replace and add operations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<HashMap<String, serde_json::Value>>,
}

/// JsonPatchBlock is one json patch operation block.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MeshProxyPatchDefaultAppendModificationsHttpFilterJsonPatchesOp {
    #[serde(rename = "add")]
    Add,
    #[serde(rename = "remove")]
    Remove,
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "move")]
    Move,
    #[serde(rename = "copy")]
    Copy,
}

/// Match is a set of conditions that have to be matched for modification operation to happen.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshProxyPatchDefaultAppendModificationsHttpFilterMatch {
    /// Name of the listener to match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerName")]
    pub listener_name: Option<String>,
    /// Listener tags available in Listener#Metadata#FilterMetadata[io.kuma.tags]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerTags")]
    pub listener_tags: Option<BTreeMap<String, String>>,
    /// Name of the HTTP filter. For example "envoy.filters.http.local_ratelimit"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Origin is the name of the component or plugin that generated the resource. 
    ///  Here is the list of well-known origins: inbound - resources generated for handling incoming traffic. outbound - resources generated for handling outgoing traffic. transparent - resources generated for transparent proxy functionality. prometheus - resources generated when Prometheus metrics are enabled. direct-access - resources generated for Direct Access functionality. ingress - resources generated for Zone Ingress. egress - resources generated for Zone Egress. gateway - resources generated for MeshGateway. 
    ///  The list is not complete, because policy plugins can introduce new resources. For example MeshTrace plugin can create Cluster with "mesh-trace" origin.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
}

/// HTTPFilter is a modification of Envoy HTTP Filter available in HTTP Connection Manager in a Listener resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MeshProxyPatchDefaultAppendModificationsHttpFilterOperation {
    Remove,
    Patch,
    AddFirst,
    AddBefore,
    AddAfter,
    AddLast,
}

/// Listener is a modification of Envoy's Listener resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshProxyPatchDefaultAppendModificationsListener {
    /// JsonPatches specifies list of jsonpatches to apply to on Envoy's Listener resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPatches")]
    pub json_patches: Option<Vec<MeshProxyPatchDefaultAppendModificationsListenerJsonPatches>>,
    /// Match is a set of conditions that have to be matched for modification operation to happen.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<MeshProxyPatchDefaultAppendModificationsListenerMatch>,
    /// Operation to execute on matched listener.
    pub operation: MeshProxyPatchDefaultAppendModificationsListenerOperation,
    /// Value of xDS resource in YAML format to add or patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// JsonPatchBlock is one json patch operation block.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshProxyPatchDefaultAppendModificationsListenerJsonPatches {
    /// From is a jsonpatch from string, used by move and copy operations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    /// Op is a jsonpatch operation string.
    pub op: MeshProxyPatchDefaultAppendModificationsListenerJsonPatchesOp,
    /// Path is a jsonpatch path string.
    pub path: String,
    /// Value must be a valid json value used by replace and add operations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<HashMap<String, serde_json::Value>>,
}

/// JsonPatchBlock is one json patch operation block.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MeshProxyPatchDefaultAppendModificationsListenerJsonPatchesOp {
    #[serde(rename = "add")]
    Add,
    #[serde(rename = "remove")]
    Remove,
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "move")]
    Move,
    #[serde(rename = "copy")]
    Copy,
}

/// Match is a set of conditions that have to be matched for modification operation to happen.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshProxyPatchDefaultAppendModificationsListenerMatch {
    /// Name of the listener to match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Origin is the name of the component or plugin that generated the resource. 
    ///  Here is the list of well-known origins: inbound - resources generated for handling incoming traffic. outbound - resources generated for handling outgoing traffic. transparent - resources generated for transparent proxy functionality. prometheus - resources generated when Prometheus metrics are enabled. direct-access - resources generated for Direct Access functionality. ingress - resources generated for Zone Ingress. egress - resources generated for Zone Egress. gateway - resources generated for MeshGateway. 
    ///  The list is not complete, because policy plugins can introduce new resources. For example MeshTrace plugin can create Cluster with "mesh-trace" origin.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    /// Tags available in Listener#Metadata#FilterMetadata[io.kuma.tags]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
}

/// Listener is a modification of Envoy's Listener resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MeshProxyPatchDefaultAppendModificationsListenerOperation {
    Add,
    Remove,
    Patch,
}

/// NetworkFilter is a modification of Envoy Listener's filter.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshProxyPatchDefaultAppendModificationsNetworkFilter {
    /// JsonPatches specifies list of jsonpatches to apply to on Envoy Listener's filter.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPatches")]
    pub json_patches: Option<Vec<MeshProxyPatchDefaultAppendModificationsNetworkFilterJsonPatches>>,
    /// Match is a set of conditions that have to be matched for modification operation to happen.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<MeshProxyPatchDefaultAppendModificationsNetworkFilterMatch>,
    /// Operation to execute on matched listener.
    pub operation: MeshProxyPatchDefaultAppendModificationsNetworkFilterOperation,
    /// Value of xDS resource in YAML format to add or patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// JsonPatchBlock is one json patch operation block.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshProxyPatchDefaultAppendModificationsNetworkFilterJsonPatches {
    /// From is a jsonpatch from string, used by move and copy operations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    /// Op is a jsonpatch operation string.
    pub op: MeshProxyPatchDefaultAppendModificationsNetworkFilterJsonPatchesOp,
    /// Path is a jsonpatch path string.
    pub path: String,
    /// Value must be a valid json value used by replace and add operations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<HashMap<String, serde_json::Value>>,
}

/// JsonPatchBlock is one json patch operation block.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MeshProxyPatchDefaultAppendModificationsNetworkFilterJsonPatchesOp {
    #[serde(rename = "add")]
    Add,
    #[serde(rename = "remove")]
    Remove,
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "move")]
    Move,
    #[serde(rename = "copy")]
    Copy,
}

/// Match is a set of conditions that have to be matched for modification operation to happen.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshProxyPatchDefaultAppendModificationsNetworkFilterMatch {
    /// Name of the listener to match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerName")]
    pub listener_name: Option<String>,
    /// Listener tags available in Listener#Metadata#FilterMetadata[io.kuma.tags]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerTags")]
    pub listener_tags: Option<BTreeMap<String, String>>,
    /// Name of the network filter. For example "envoy.filters.network.ratelimit"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Origin is the name of the component or plugin that generated the resource. 
    ///  Here is the list of well-known origins: inbound - resources generated for handling incoming traffic. outbound - resources generated for handling outgoing traffic. transparent - resources generated for transparent proxy functionality. prometheus - resources generated when Prometheus metrics are enabled. direct-access - resources generated for Direct Access functionality. ingress - resources generated for Zone Ingress. egress - resources generated for Zone Egress. gateway - resources generated for MeshGateway. 
    ///  The list is not complete, because policy plugins can introduce new resources. For example MeshTrace plugin can create Cluster with "mesh-trace" origin.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
}

/// NetworkFilter is a modification of Envoy Listener's filter.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MeshProxyPatchDefaultAppendModificationsNetworkFilterOperation {
    Remove,
    Patch,
    AddFirst,
    AddBefore,
    AddAfter,
    AddLast,
}

/// VirtualHost is a modification of Envoy's VirtualHost referenced in HTTP Connection Manager in a Listener resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshProxyPatchDefaultAppendModificationsVirtualHost {
    /// JsonPatches specifies list of jsonpatches to apply to on Envoy's VirtualHost resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPatches")]
    pub json_patches: Option<Vec<MeshProxyPatchDefaultAppendModificationsVirtualHostJsonPatches>>,
    /// Match is a set of conditions that have to be matched for modification operation to happen.
    #[serde(rename = "match")]
    pub r#match: MeshProxyPatchDefaultAppendModificationsVirtualHostMatch,
    /// Operation to execute on matched listener.
    pub operation: MeshProxyPatchDefaultAppendModificationsVirtualHostOperation,
    /// Value of xDS resource in YAML format to add or patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// JsonPatchBlock is one json patch operation block.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshProxyPatchDefaultAppendModificationsVirtualHostJsonPatches {
    /// From is a jsonpatch from string, used by move and copy operations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    /// Op is a jsonpatch operation string.
    pub op: MeshProxyPatchDefaultAppendModificationsVirtualHostJsonPatchesOp,
    /// Path is a jsonpatch path string.
    pub path: String,
    /// Value must be a valid json value used by replace and add operations.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<HashMap<String, serde_json::Value>>,
}

/// JsonPatchBlock is one json patch operation block.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MeshProxyPatchDefaultAppendModificationsVirtualHostJsonPatchesOp {
    #[serde(rename = "add")]
    Add,
    #[serde(rename = "remove")]
    Remove,
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "move")]
    Move,
    #[serde(rename = "copy")]
    Copy,
}

/// Match is a set of conditions that have to be matched for modification operation to happen.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshProxyPatchDefaultAppendModificationsVirtualHostMatch {
    /// Name of the VirtualHost to match.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Origin is the name of the component or plugin that generated the resource. 
    ///  Here is the list of well-known origins: inbound - resources generated for handling incoming traffic. outbound - resources generated for handling outgoing traffic. transparent - resources generated for transparent proxy functionality. prometheus - resources generated when Prometheus metrics are enabled. direct-access - resources generated for Direct Access functionality. ingress - resources generated for Zone Ingress. egress - resources generated for Zone Egress. gateway - resources generated for MeshGateway. 
    ///  The list is not complete, because policy plugins can introduce new resources. For example MeshTrace plugin can create Cluster with "mesh-trace" origin.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    /// Name of the RouteConfiguration resource to match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeConfigurationName")]
    pub route_configuration_name: Option<String>,
}

/// VirtualHost is a modification of Envoy's VirtualHost referenced in HTTP Connection Manager in a Listener resource.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MeshProxyPatchDefaultAppendModificationsVirtualHostOperation {
    Add,
    Remove,
    Patch,
}

/// TargetRef is a reference to the resource the policy takes an effect on. The resource could be either a real store object or virtual resource defined inplace.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MeshProxyPatchTargetRef {
    /// Kind of the referenced resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<MeshProxyPatchTargetRefKind>,
    /// Mesh is reserved for future use to identify cross mesh resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mesh: Option<String>,
    /// Name of the referenced resource. Can only be used with kinds: `MeshService`, `MeshServiceSubset` and `MeshGatewayRoute`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Tags used to select a subset of proxies by tags. Can only be used with kinds `MeshSubset` and `MeshServiceSubset`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
}

/// TargetRef is a reference to the resource the policy takes an effect on. The resource could be either a real store object or virtual resource defined inplace.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum MeshProxyPatchTargetRefKind {
    Mesh,
    MeshSubset,
    MeshGateway,
    MeshService,
    MeshServiceSubset,
    #[serde(rename = "MeshHTTPRoute")]
    MeshHttpRoute,
}

