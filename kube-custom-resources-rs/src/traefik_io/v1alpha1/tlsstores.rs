// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/traefik/traefik/traefik.io/v1alpha1/tlsstores.yaml --derive=Default --derive=PartialEq
// kopium version: 0.17.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// TLSStoreSpec defines the desired state of a TLSStore.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "traefik.io", version = "v1alpha1", kind = "TLSStore", plural = "tlsstores")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
pub struct TLSStoreSpec {
    /// Certificates is a list of secret names, each secret holding a key/certificate pair to add to the store.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub certificates: Option<Vec<TLSStoreCertificates>>,
    /// DefaultCertificate defines the default certificate configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultCertificate")]
    pub default_certificate: Option<TLSStoreDefaultCertificate>,
    /// DefaultGeneratedCert defines the default generated certificate configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultGeneratedCert")]
    pub default_generated_cert: Option<TLSStoreDefaultGeneratedCert>,
}

/// Certificate holds a secret name for the TLSStore resource.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TLSStoreCertificates {
    /// SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

/// DefaultCertificate defines the default certificate configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TLSStoreDefaultCertificate {
    /// SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

/// DefaultGeneratedCert defines the default generated certificate configuration.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TLSStoreDefaultGeneratedCert {
    /// Domain is the domain definition for the DefaultCertificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<TLSStoreDefaultGeneratedCertDomain>,
    /// Resolver is the name of the resolver that will be used to issue the DefaultCertificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolver: Option<String>,
}

/// Domain is the domain definition for the DefaultCertificate.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct TLSStoreDefaultGeneratedCertDomain {
    /// Main defines the main domain name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub main: Option<String>,
    /// SANs defines the subject alternative domain names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sans: Option<Vec<String>>,
}

