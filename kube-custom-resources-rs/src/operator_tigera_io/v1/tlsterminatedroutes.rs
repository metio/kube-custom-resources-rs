// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/tigera/operator/operator.tigera.io/v1/tlsterminatedroutes.yaml --derive=PartialEq
// kopium version: 0.19.0

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "operator.tigera.io", version = "v1", kind = "TLSTerminatedRoute", plural = "tlsterminatedroutes")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="PartialEq")]
pub struct TLSTerminatedRouteSpec {
    /// CABundle is where we read the CA bundle from to authenticate the
    /// destination (if non-empty)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caBundle")]
    pub ca_bundle: Option<TLSTerminatedRouteCaBundle>,
    /// Destination is the destination URL where matching traffic is routed to.
    pub destination: String,
    /// ForwardingMTLSCert is the certificate used for mTLS between voltron and the destination. Either both ForwardingMTLSCert
    /// and ForwardingMTLSKey must be specified, or neither can be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mtlsCert")]
    pub mtls_cert: Option<TLSTerminatedRouteMtlsCert>,
    /// ForwardingMTLSKey is the key used for mTLS between voltron and the destination. Either both ForwardingMTLSCert
    /// and ForwardingMTLSKey must be specified, or neither can be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mtlsKey")]
    pub mtls_key: Option<TLSTerminatedRouteMtlsKey>,
    /// PathMatch is used to match requests based on what's in the path. Matching requests will be proxied to the Destination
    /// defined in this structure.
    #[serde(rename = "pathMatch")]
    pub path_match: TLSTerminatedRoutePathMatch,
    pub target: TLSTerminatedRouteTarget,
    /// Unauthenticated says whether the request should go through authentication. This is only applicable if the Target
    /// is UI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unauthenticated: Option<bool>,
}

/// CABundle is where we read the CA bundle from to authenticate the
/// destination (if non-empty)
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TLSTerminatedRouteCaBundle {
    /// The key to select.
    pub key: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the ConfigMap or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// ForwardingMTLSCert is the certificate used for mTLS between voltron and the destination. Either both ForwardingMTLSCert
/// and ForwardingMTLSKey must be specified, or neither can be specified.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TLSTerminatedRouteMtlsCert {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// ForwardingMTLSKey is the key used for mTLS between voltron and the destination. Either both ForwardingMTLSCert
/// and ForwardingMTLSKey must be specified, or neither can be specified.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TLSTerminatedRouteMtlsKey {
    /// The key of the secret to select from.  Must be a valid secret key.
    pub key: String,
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specify whether the Secret or its key must be defined
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
}

/// PathMatch is used to match requests based on what's in the path. Matching requests will be proxied to the Destination
/// defined in this structure.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct TLSTerminatedRoutePathMatch {
    /// Path is the path portion of the URL based on which we proxy.
    pub path: String,
    /// PathRegexp, if not nil, checks if Regexp matches the path.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathRegexp")]
    pub path_regexp: Option<String>,
    /// PathReplace if not nil will be used to replace PathRegexp matches.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathReplace")]
    pub path_replace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum TLSTerminatedRouteTarget {
    UpstreamTunnel,
    #[serde(rename = "UI")]
    Ui,
}

