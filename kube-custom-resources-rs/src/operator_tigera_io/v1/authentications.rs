// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --derive=Copy --filename=./crd-catalog/tigera/operator/operator.tigera.io/v1/authentications.yaml --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// AuthenticationSpec defines the desired state of Authentication
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Copy, PartialEq)]
#[kube(group = "operator.tigera.io", version = "v1", kind = "Authentication", plural = "authentications")]
#[kube(status = "AuthenticationStatus")]
#[kube(schema = "disabled")]
pub struct AuthenticationSpec {
    /// If specified, GroupsPrefix is prepended to each group obtained from the identity provider. Note that Kibana does not support a groups prefix, so this prefix is removed from Kubernetes Groups when translating log access ClusterRoleBindings into Elastic.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupsPrefix")]
    pub groups_prefix: Option<String>,
    /// LDAP contains the configuration needed to setup LDAP authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ldap: Option<AuthenticationLdap>,
    /// ManagerDomain is the domain name of the Manager
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managerDomain")]
    pub manager_domain: Option<String>,
    /// OIDC contains the configuration needed to setup OIDC authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oidc: Option<AuthenticationOidc>,
    /// Openshift contains the configuration needed to setup Openshift OAuth authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub openshift: Option<AuthenticationOpenshift>,
    /// If specified, UsernamePrefix is prepended to each user obtained from the identity provider. Note that Kibana does not support a user prefix, so this prefix is removed from Kubernetes User when translating log access ClusterRoleBindings into Elastic.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usernamePrefix")]
    pub username_prefix: Option<String>,
}

/// LDAP contains the configuration needed to setup LDAP authentication.
#[derive(Serialize, Deserialize, Clone, Debug, Copy, PartialEq)]
pub struct AuthenticationLdap {
    /// Group search configuration to find the groups that a user is in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupSearch")]
    pub group_search: Option<AuthenticationLdapGroupSearch>,
    /// The host and port of the LDAP server. Example: ad.example.com:636
    pub host: String,
    /// StartTLS whether to enable the startTLS feature for establishing TLS on an existing LDAP session. If true, the ldap:// protocol is used and then issues a StartTLS command, otherwise, connections will use the ldaps:// protocol.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTLS")]
    pub start_tls: Option<bool>,
    /// User entry search configuration to match the credentials with a user.
    #[serde(rename = "userSearch")]
    pub user_search: AuthenticationLdapUserSearch,
}

/// Group search configuration to find the groups that a user is in.
#[derive(Serialize, Deserialize, Clone, Debug, Copy, PartialEq)]
pub struct AuthenticationLdapGroupSearch {
    /// BaseDN to start the search from. For example "cn=groups,dc=example,dc=com"
    #[serde(rename = "baseDN")]
    pub base_dn: String,
    /// Optional filter to apply when searching the directory. For example "(objectClass=posixGroup)"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    /// The attribute of the group that represents its name. This attribute can be used to apply RBAC to a user group.
    #[serde(rename = "nameAttribute")]
    pub name_attribute: String,
    /// Following list contains field pairs that are used to match a user to a group. It adds an additional requirement to the filter that an attribute in the group must match the user's attribute value.
    #[serde(rename = "userMatchers")]
    pub user_matchers: Vec<AuthenticationLdapGroupSearchUserMatchers>,
}

/// UserMatch when the value of a UserAttribute and a GroupAttribute match, a user belongs to the group.
#[derive(Serialize, Deserialize, Clone, Debug, Copy, PartialEq)]
pub struct AuthenticationLdapGroupSearchUserMatchers {
    /// The attribute of a group that links it to a user.
    #[serde(rename = "groupAttribute")]
    pub group_attribute: String,
    /// The attribute of a user that links it to a group.
    #[serde(rename = "userAttribute")]
    pub user_attribute: String,
}

/// User entry search configuration to match the credentials with a user.
#[derive(Serialize, Deserialize, Clone, Debug, Copy, PartialEq)]
pub struct AuthenticationLdapUserSearch {
    /// BaseDN to start the search from. For example "cn=users,dc=example,dc=com"
    #[serde(rename = "baseDN")]
    pub base_dn: String,
    /// Optional filter to apply when searching the directory. For example "(objectClass=person)"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    /// A mapping of the attribute that is used as the username. This attribute can be used to apply RBAC to a user. Default: uid
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameAttribute")]
    pub name_attribute: Option<String>,
}

/// OIDC contains the configuration needed to setup OIDC authentication.
#[derive(Serialize, Deserialize, Clone, Debug, Copy, PartialEq)]
pub struct AuthenticationOidc {
    /// Some providers do not include the claim "email_verified" when there is no verification in the user enrollment process or if they are acting as a proxy for another identity provider. By default those tokens are deemed invalid. To skip this check, set the value to "InsecureSkip". Default: Verify
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emailVerification")]
    pub email_verification: Option<AuthenticationOidcEmailVerification>,
    /// GroupsClaim specifies which claim to use from the OIDC provider as the group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupsClaim")]
    pub groups_claim: Option<String>,
    /// Deprecated. Please use Authentication.Spec.GroupsPrefix instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupsPrefix")]
    pub groups_prefix: Option<String>,
    /// IssuerURL is the URL to the OIDC provider.
    #[serde(rename = "issuerURL")]
    pub issuer_url: String,
    /// PromptTypes is an optional list of string values that specifies whether the identity provider prompts the end user for re-authentication and consent. See the RFC for more information on prompt types: https://openid.net/specs/openid-connect-core-1_0.html. Default: "Consent"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "promptTypes")]
    pub prompt_types: Option<Vec<String>>,
    /// RequestedScopes is a list of scopes to request from the OIDC provider. If not provided, the following scopes are requested: ["openid", "email", "profile", "groups", "offline_access"].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestedScopes")]
    pub requested_scopes: Option<Vec<String>>,
    /// Default: "Dex"
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<AuthenticationOidcType>,
    /// UsernameClaim specifies which claim to use from the OIDC provider as the username.
    #[serde(rename = "usernameClaim")]
    pub username_claim: String,
    /// Deprecated. Please use Authentication.Spec.UsernamePrefix instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usernamePrefix")]
    pub username_prefix: Option<String>,
}

/// OIDC contains the configuration needed to setup OIDC authentication.
#[derive(Serialize, Deserialize, Clone, Debug, Copy, PartialEq)]
pub enum AuthenticationOidcEmailVerification {
    Verify,
    InsecureSkip,
}

/// OIDC contains the configuration needed to setup OIDC authentication.
#[derive(Serialize, Deserialize, Clone, Debug, Copy, PartialEq)]
pub enum AuthenticationOidcType {
    Dex,
    Tigera,
}

/// Openshift contains the configuration needed to setup Openshift OAuth authentication.
#[derive(Serialize, Deserialize, Clone, Debug, Copy, PartialEq)]
pub struct AuthenticationOpenshift {
    /// IssuerURL is the URL to the Openshift OAuth provider. Ex.: https://api.my-ocp-domain.com:6443
    #[serde(rename = "issuerURL")]
    pub issuer_url: String,
}

/// AuthenticationStatus defines the observed state of Authentication
#[derive(Serialize, Deserialize, Clone, Debug, Copy, PartialEq)]
pub struct AuthenticationStatus {
    /// Conditions represents the latest observed set of conditions for the component. A component may be one or more of Ready, Progressing, Degraded or other customer types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<AuthenticationStatusConditions>>,
    /// State provides user-readable status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, Copy, PartialEq)]
pub struct AuthenticationStatusConditions {
    /// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// message is a human readable message indicating details about the transition. This may be an empty string.
    pub message: String,
    /// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    pub reason: String,
    /// status of the condition, one of True, False, Unknown.
    pub status: AuthenticationStatusConditionsStatus,
    /// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, Copy, PartialEq)]
pub enum AuthenticationStatusConditionsStatus {
    True,
    False,
    Unknown,
}

