// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/tigera/operator/operator.tigera.io/v1/amazoncloudintegrations.yaml --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// AmazonCloudIntegrationSpec defines the desired state of AmazonCloudIntegration
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "operator.tigera.io", version = "v1", kind = "AmazonCloudIntegration", plural = "amazoncloudintegrations")]
#[kube(status = "AmazonCloudIntegrationStatus")]
#[kube(schema = "disabled")]
pub struct AmazonCloudIntegrationSpec {
    /// AWSRegion is the region in which your cluster is located.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsRegion")]
    pub aws_region: Option<String>,
    /// DefaultPodMetadataAccess defines what the default behavior will be for accessing the AWS metadata service from a pod. Default: Denied
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultPodMetadataAccess")]
    pub default_pod_metadata_access: Option<AmazonCloudIntegrationDefaultPodMetadataAccess>,
    /// EnforcedSecurityGroupID is the ID of the Security Group which will be applied to all ENIs that are on a host that is also part of the Kubernetes cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcedSecurityGroupID")]
    pub enforced_security_group_id: Option<String>,
    /// NodeSecurityGroupIDs is a list of Security Group IDs that all nodes and masters will be in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSecurityGroupIDs")]
    pub node_security_group_i_ds: Option<Vec<String>>,
    /// PodSecurityGroupID is the ID of the Security Group which all pods should be placed in by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podSecurityGroupID")]
    pub pod_security_group_id: Option<String>,
    /// SQSURL is the SQS URL needed to access the Simple Queue Service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sqsURL")]
    pub sqs_url: Option<String>,
    /// TrustEnforcedSecurityGroupID is the ID of the Security Group which will be applied to all ENIs in the VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trustEnforcedSecurityGroupID")]
    pub trust_enforced_security_group_id: Option<String>,
    /// VPCS is a list of VPC IDs to monitor for ENIs and Security Groups, only one is supported.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vpcs: Option<Vec<String>>,
}

/// AmazonCloudIntegrationSpec defines the desired state of AmazonCloudIntegration
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum AmazonCloudIntegrationDefaultPodMetadataAccess {
    Allowed,
    Denied,
}

/// AmazonCloudIntegrationStatus defines the observed state of AmazonCloudIntegration
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AmazonCloudIntegrationStatus {
    /// Conditions represents the latest observed set of conditions for the component. A component may be one or more of Ready, Progressing, Degraded or other customer types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<AmazonCloudIntegrationStatusConditions>>,
    /// State provides user-readable status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct AmazonCloudIntegrationStatusConditions {
    /// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// message is a human readable message indicating details about the transition. This may be an empty string.
    pub message: String,
    /// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    pub reason: String,
    /// status of the condition, one of True, False, Unknown.
    pub status: AmazonCloudIntegrationStatusConditionsStatus,
    /// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum AmazonCloudIntegrationStatusConditionsStatus {
    True,
    False,
    Unknown,
}

