// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/tigera/operator/operator.tigera.io/v1/managementclusterconnections.yaml --derive=PartialEq
// kopium version: 0.19.0

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
    pub use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ManagementClusterConnectionSpec defines the desired state of ManagementClusterConnection
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "operator.tigera.io", version = "v1", kind = "ManagementClusterConnection", plural = "managementclusterconnections")]
#[kube(status = "ManagementClusterConnectionStatus")]
#[kube(schema = "disabled")]
#[kube(derive="PartialEq")]
pub struct ManagementClusterConnectionSpec {
    /// GuardianDeployment configures the guardian Deployment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guardianDeployment")]
    pub guardian_deployment: Option<ManagementClusterConnectionGuardianDeployment>,
    /// Specify where the managed cluster can reach the management cluster. Ex.: "10.128.0.10:30449". A managed cluster
    /// should be able to access this address. This field is used by managed clusters only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementClusterAddr")]
    pub management_cluster_addr: Option<String>,
    /// TLS provides options for configuring how Managed Clusters can establish an mTLS connection with the Management Cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<ManagementClusterConnectionTls>,
}

/// GuardianDeployment configures the guardian Deployment.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagementClusterConnectionGuardianDeployment {
    /// Spec is the specification of the guardian Deployment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<ManagementClusterConnectionGuardianDeploymentSpec>,
}

/// Spec is the specification of the guardian Deployment.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagementClusterConnectionGuardianDeploymentSpec {
    /// Template describes the guardian Deployment pod that will be created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ManagementClusterConnectionGuardianDeploymentSpecTemplate>,
}

/// Template describes the guardian Deployment pod that will be created.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagementClusterConnectionGuardianDeploymentSpecTemplate {
    /// Spec is the guardian Deployment's PodSpec.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<ManagementClusterConnectionGuardianDeploymentSpecTemplateSpec>,
}

/// Spec is the guardian Deployment's PodSpec.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagementClusterConnectionGuardianDeploymentSpecTemplateSpec {
    /// Containers is a list of guardian containers.
    /// If specified, this overrides the specified guardian Deployment containers.
    /// If omitted, the guardian Deployment will use its default values for its containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<ManagementClusterConnectionGuardianDeploymentSpecTemplateSpecContainers>>,
    /// InitContainers is a list of guardian init containers.
    /// If specified, this overrides the specified guardian Deployment init containers.
    /// If omitted, the guardian Deployment will use its default values for its init containers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initContainers")]
    pub init_containers: Option<Vec<ManagementClusterConnectionGuardianDeploymentSpecTemplateSpecInitContainers>>,
}

/// GuardianDeploymentContainer is a guardian Deployment container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagementClusterConnectionGuardianDeploymentSpecTemplateSpecContainers {
    /// Name is an enum which identifies the guardian Deployment container by name.
    /// Supported values are: tigera-guardian
    pub name: ManagementClusterConnectionGuardianDeploymentSpecTemplateSpecContainersName,
    /// Resources allows customization of limits and requests for compute resources such as cpu and memory.
    /// If specified, this overrides the named guardian Deployment container's resources.
    /// If omitted, the guardian Deployment will use its default value for this container's resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<ManagementClusterConnectionGuardianDeploymentSpecTemplateSpecContainersResources>,
}

/// GuardianDeploymentContainer is a guardian Deployment container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagementClusterConnectionGuardianDeploymentSpecTemplateSpecContainersName {
    #[serde(rename = "tigera-guardian")]
    TigeraGuardian,
}

/// Resources allows customization of limits and requests for compute resources such as cpu and memory.
/// If specified, this overrides the named guardian Deployment container's resources.
/// If omitted, the guardian Deployment will use its default value for this container's resources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagementClusterConnectionGuardianDeploymentSpecTemplateSpecContainersResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims,
    /// that are used by this container.
    /// This is an alpha field and requires enabling the
    /// DynamicResourceAllocation feature gate.
    /// This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<ManagementClusterConnectionGuardianDeploymentSpecTemplateSpecContainersResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagementClusterConnectionGuardianDeploymentSpecTemplateSpecContainersResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of
    /// the Pod where this field is used. It makes that resource available
    /// inside a container.
    pub name: String,
}

/// GuardianDeploymentInitContainer is a guardian Deployment init container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagementClusterConnectionGuardianDeploymentSpecTemplateSpecInitContainers {
    /// Name is an enum which identifies the guardian Deployment init container by name.
    pub name: String,
    /// Resources allows customization of limits and requests for compute resources such as cpu and memory.
    /// If specified, this overrides the named guardian Deployment init container's resources.
    /// If omitted, the guardian Deployment will use its default value for this init container's resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<ManagementClusterConnectionGuardianDeploymentSpecTemplateSpecInitContainersResources>,
}

/// Resources allows customization of limits and requests for compute resources such as cpu and memory.
/// If specified, this overrides the named guardian Deployment init container's resources.
/// If omitted, the guardian Deployment will use its default value for this init container's resources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagementClusterConnectionGuardianDeploymentSpecTemplateSpecInitContainersResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims,
    /// that are used by this container.
    /// This is an alpha field and requires enabling the
    /// DynamicResourceAllocation feature gate.
    /// This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<ManagementClusterConnectionGuardianDeploymentSpecTemplateSpecInitContainersResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed.
    /// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required.
    /// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
    /// otherwise to an implementation-defined value. Requests cannot exceed Limits.
    /// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagementClusterConnectionGuardianDeploymentSpecTemplateSpecInitContainersResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of
    /// the Pod where this field is used. It makes that resource available
    /// inside a container.
    pub name: String,
}

/// TLS provides options for configuring how Managed Clusters can establish an mTLS connection with the Management Cluster.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagementClusterConnectionTls {
    /// CA indicates which verification method the tunnel client should use to verify the tunnel server's identity.
    /// When left blank or set to 'Tigera', the tunnel client will expect a self-signed cert to be included in the certificate bundle
    /// and will expect the cert to have a Common Name (CN) of 'voltron'.
    /// When set to 'Public', the tunnel client will use its installed system certs and will use the managementClusterAddr to verify the tunnel server's identity.
    /// Default: Tigera
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ca: Option<ManagementClusterConnectionTlsCa>,
}

/// TLS provides options for configuring how Managed Clusters can establish an mTLS connection with the Management Cluster.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagementClusterConnectionTlsCa {
    Tigera,
    Public,
}

/// ManagementClusterConnectionStatus defines the observed state of ManagementClusterConnection
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagementClusterConnectionStatus {
    /// Conditions represents the latest observed set of conditions for the component. A component may be one or more of
    /// Ready, Progressing, Degraded or other customer types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
}

