// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/tigera/operator/operator.tigera.io/v1/logcollectors.yaml --derive=PartialEq
// kopium version: 0.17.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// Specification of the desired state for Tigera log collection.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "operator.tigera.io", version = "v1", kind = "LogCollector", plural = "logcollectors")]
#[kube(status = "LogCollectorStatus")]
#[kube(schema = "disabled")]
pub struct LogCollectorSpec {
    /// Configuration for importing audit logs from managed kubernetes cluster log sources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalSources")]
    pub additional_sources: Option<LogCollectorAdditionalSources>,
    /// Configuration for exporting flow, audit, and DNS logs to external storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalStores")]
    pub additional_stores: Option<LogCollectorAdditionalStores>,
    /// Configuration for enabling/disabling process path collection in flowlogs. If Enabled, this feature sets hostPID to true in order to read process cmdline. Default: Enabled
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectProcessPath")]
    pub collect_process_path: Option<LogCollectorCollectProcessPath>,
    /// If running as a multi-tenant management cluster, the namespace in which the management cluster's tenant services are running.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiTenantManagementClusterNamespace")]
    pub multi_tenant_management_cluster_namespace: Option<String>,
}

/// Configuration for importing audit logs from managed kubernetes cluster log sources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct LogCollectorAdditionalSources {
    /// If specified with EKS Provider in Installation, enables fetching EKS audit logs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eksCloudwatchLog")]
    pub eks_cloudwatch_log: Option<LogCollectorAdditionalSourcesEksCloudwatchLog>,
}

/// If specified with EKS Provider in Installation, enables fetching EKS audit logs.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct LogCollectorAdditionalSourcesEksCloudwatchLog {
    /// Cloudwatch audit logs fetching interval in seconds. Default: 60
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fetchInterval")]
    pub fetch_interval: Option<i32>,
    /// Cloudwatch log-group name containing EKS audit logs.
    #[serde(rename = "groupName")]
    pub group_name: String,
    /// AWS Region EKS cluster is hosted in.
    pub region: String,
    /// Prefix of Cloudwatch log stream containing EKS audit logs in the log-group. Default: kube-apiserver-audit-
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamPrefix")]
    pub stream_prefix: Option<String>,
}

/// Configuration for exporting flow, audit, and DNS logs to external storage.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct LogCollectorAdditionalStores {
    /// If specified, enables exporting of flow, audit, and DNS logs to Amazon S3 storage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3: Option<LogCollectorAdditionalStoresS3>,
    /// If specified, enables exporting of flow, audit, and DNS logs to splunk.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub splunk: Option<LogCollectorAdditionalStoresSplunk>,
    /// If specified, enables exporting of flow, audit, and DNS logs to syslog.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub syslog: Option<LogCollectorAdditionalStoresSyslog>,
}

/// If specified, enables exporting of flow, audit, and DNS logs to Amazon S3 storage.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct LogCollectorAdditionalStoresS3 {
    /// Name of the S3 bucket to send logs
    #[serde(rename = "bucketName")]
    pub bucket_name: String,
    /// Path in the S3 bucket where to send logs
    #[serde(rename = "bucketPath")]
    pub bucket_path: String,
    /// AWS Region of the S3 bucket
    pub region: String,
}

/// If specified, enables exporting of flow, audit, and DNS logs to splunk.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct LogCollectorAdditionalStoresSplunk {
    /// Location for splunk's http event collector end point. example `https://1.2.3.4:8088`
    pub endpoint: String,
}

/// If specified, enables exporting of flow, audit, and DNS logs to syslog.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct LogCollectorAdditionalStoresSyslog {
    /// Encryption configures traffic encryption to the Syslog server. Default: None
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encryption: Option<LogCollectorAdditionalStoresSyslogEncryption>,
    /// Location of the syslog server. example: tcp://1.2.3.4:601
    pub endpoint: String,
    /// If no values are provided, the list will be updated to include log types Audit, DNS and Flows. Default: Audit, DNS, Flows
    #[serde(rename = "logTypes")]
    pub log_types: Vec<String>,
    /// PacketSize defines the maximum size of packets to send to syslog. In general this is only needed if you notice long logs being truncated. Default: 1024
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packetSize")]
    pub packet_size: Option<i32>,
}

/// If specified, enables exporting of flow, audit, and DNS logs to syslog.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum LogCollectorAdditionalStoresSyslogEncryption {
    None,
    #[serde(rename = "TLS")]
    Tls,
}

/// Specification of the desired state for Tigera log collection.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum LogCollectorCollectProcessPath {
    Enabled,
    Disabled,
}

/// Most recently observed state for Tigera log collection.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct LogCollectorStatus {
    /// Conditions represents the latest observed set of conditions for the component. A component may be one or more of Ready, Progressing, Degraded or other customer types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// State provides user-readable status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

