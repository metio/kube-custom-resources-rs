// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/tigera/operator/operator.tigera.io/v1/managers.yaml --derive=PartialEq
// kopium version: 0.16.5

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;

/// Specification of the desired state for the Calico Enterprise manager.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "operator.tigera.io", version = "v1", kind = "Manager", plural = "managers")]
#[kube(status = "ManagerStatus")]
#[kube(schema = "disabled")]
pub struct ManagerSpec {
    /// Deprecated. Please use the Authentication CR for configuring authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<ManagerAuth>,
    /// ManagerDeployment configures the Manager Deployment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managerDeployment")]
    pub manager_deployment: Option<ManagerManagerDeployment>,
}

/// Deprecated. Please use the Authentication CR for configuring authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagerAuth {
    /// Authority configures the OAuth2/OIDC authority/issuer when using OAuth2 or OIDC login.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
    /// ClientId configures the OAuth2/OIDC client ID to use for OAuth2 or OIDC login.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientID")]
    pub client_id: Option<String>,
    /// Type configures the type of authentication used by the manager. Default: Token
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ManagerAuthType>,
}

/// Deprecated. Please use the Authentication CR for configuring authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerAuthType {
    Token,
    Basic,
    #[serde(rename = "OIDC")]
    Oidc,
    OAuth,
}

/// ManagerDeployment configures the Manager Deployment.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagerManagerDeployment {
    /// Spec is the specification of the Manager Deployment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<ManagerManagerDeploymentSpec>,
}

/// Spec is the specification of the Manager Deployment.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagerManagerDeploymentSpec {
    /// Template describes the Manager Deployment pod that will be created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ManagerManagerDeploymentSpecTemplate>,
}

/// Template describes the Manager Deployment pod that will be created.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagerManagerDeploymentSpecTemplate {
    /// Spec is the Manager Deployment's PodSpec.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<ManagerManagerDeploymentSpecTemplateSpec>,
}

/// Spec is the Manager Deployment's PodSpec.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagerManagerDeploymentSpecTemplateSpec {
    /// Containers is a list of Manager containers. If specified, this overrides the specified Manager Deployment containers. If omitted, the Manager Deployment will use its default values for its containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<ManagerManagerDeploymentSpecTemplateSpecContainers>>,
    /// InitContainers is a list of Manager init containers. If specified, this overrides the specified Manager Deployment init containers. If omitted, the Manager Deployment will use its default values for its init containers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initContainers")]
    pub init_containers: Option<Vec<ManagerManagerDeploymentSpecTemplateSpecInitContainers>>,
}

/// ManagerDeploymentContainer is a Manager Deployment container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagerManagerDeploymentSpecTemplateSpecContainers {
    /// Name is an enum which identifies the Manager Deployment container by name.
    pub name: ManagerManagerDeploymentSpecTemplateSpecContainersName,
    /// Resources allows customization of limits and requests for compute resources such as cpu and memory. If specified, this overrides the named Manager Deployment container's resources. If omitted, the Manager Deployment will use its default value for this container's resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<ManagerManagerDeploymentSpecTemplateSpecContainersResources>,
}

/// ManagerDeploymentContainer is a Manager Deployment container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerManagerDeploymentSpecTemplateSpecContainersName {
    #[serde(rename = "tigera-voltron")]
    TigeraVoltron,
    #[serde(rename = "tigera-manager")]
    TigeraManager,
    #[serde(rename = "tigera-es-proxy")]
    TigeraEsProxy,
}

/// Resources allows customization of limits and requests for compute resources such as cpu and memory. If specified, this overrides the named Manager Deployment container's resources. If omitted, the Manager Deployment will use its default value for this container's resources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagerManagerDeploymentSpecTemplateSpecContainersResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
    ///  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
    ///  This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<ManagerManagerDeploymentSpecTemplateSpecContainersResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagerManagerDeploymentSpecTemplateSpecContainersResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    pub name: String,
}

/// ManagerDeploymentInitContainer is a Manager Deployment init container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagerManagerDeploymentSpecTemplateSpecInitContainers {
    /// Name is an enum which identifies the Manager Deployment init container by name.
    pub name: ManagerManagerDeploymentSpecTemplateSpecInitContainersName,
    /// Resources allows customization of limits and requests for compute resources such as cpu and memory. If specified, this overrides the named Manager Deployment init container's resources. If omitted, the Manager Deployment will use its default value for this init container's resources. If used in conjunction with the deprecated ComponentResources, then this value takes precedence.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<ManagerManagerDeploymentSpecTemplateSpecInitContainersResources>,
}

/// ManagerDeploymentInitContainer is a Manager Deployment init container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerManagerDeploymentSpecTemplateSpecInitContainersName {
    #[serde(rename = "manager-tls-key-cert-provisioner")]
    ManagerTlsKeyCertProvisioner,
    #[serde(rename = "internal-manager-tls-key-cert-provisioner")]
    InternalManagerTlsKeyCertProvisioner,
    #[serde(rename = "tigera-voltron-linseed-tls-key-cert-provisioner")]
    TigeraVoltronLinseedTlsKeyCertProvisioner,
}

/// Resources allows customization of limits and requests for compute resources such as cpu and memory. If specified, this overrides the named Manager Deployment init container's resources. If omitted, the Manager Deployment will use its default value for this init container's resources. If used in conjunction with the deprecated ComponentResources, then this value takes precedence.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagerManagerDeploymentSpecTemplateSpecInitContainersResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
    ///  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
    ///  This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<ManagerManagerDeploymentSpecTemplateSpecInitContainersResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagerManagerDeploymentSpecTemplateSpecInitContainersResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    pub name: String,
}

/// Most recently observed state for the Calico Enterprise manager.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagerStatus {
    /// Deprecated. Please use the Authentication CR for configuring authentication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auth: Option<ManagerStatusAuth>,
    /// Conditions represents the latest observed set of conditions for the component. A component may be one or more of Ready, Progressing, Degraded or other customer types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<ManagerStatusConditions>>,
    /// State provides user-readable status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

/// Deprecated. Please use the Authentication CR for configuring authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagerStatusAuth {
    /// Authority configures the OAuth2/OIDC authority/issuer when using OAuth2 or OIDC login.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authority: Option<String>,
    /// ClientId configures the OAuth2/OIDC client ID to use for OAuth2 or OIDC login.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientID")]
    pub client_id: Option<String>,
    /// Type configures the type of authentication used by the manager. Default: Token
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<ManagerStatusAuthType>,
}

/// Deprecated. Please use the Authentication CR for configuring authentication.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerStatusAuthType {
    Token,
    Basic,
    #[serde(rename = "OIDC")]
    Oidc,
    OAuth,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ManagerStatusConditions {
    /// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// message is a human readable message indicating details about the transition. This may be an empty string.
    pub message: String,
    /// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
    /// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    pub reason: String,
    /// status of the condition, one of True, False, Unknown.
    pub status: ManagerStatusConditionsStatus,
    /// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
///  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
///  // other fields }
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ManagerStatusConditionsStatus {
    True,
    False,
    Unknown,
}

