// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/tigera/operator/operator.tigera.io/v1/applicationlayers.yaml --derive=PartialEq
// kopium version: 0.17.0

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// ApplicationLayerSpec defines the desired state of ApplicationLayer
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "operator.tigera.io", version = "v1", kind = "ApplicationLayer", plural = "applicationlayers")]
#[kube(status = "ApplicationLayerStatus")]
#[kube(schema = "disabled")]
pub struct ApplicationLayerSpec {
    /// Application Layer Policy controls whether or not ALP enforcement is enabled for the cluster. When enabled, NetworkPolicies with HTTP Match rules may be defined to opt-in workloads for traffic enforcement on the application layer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationLayerPolicy")]
    pub application_layer_policy: Option<String>,
    /// User-configurable settings for the Envoy proxy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub envoy: Option<ApplicationLayerEnvoy>,
    /// Specification for application layer (L7) log collection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logCollection")]
    pub log_collection: Option<ApplicationLayerLogCollection>,
    /// WebApplicationFirewall controls whether or not ModSecurity enforcement is enabled for the cluster. When enabled, Services may opt-in to having ingress traffic examed by ModSecurity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webApplicationFirewall")]
    pub web_application_firewall: Option<String>,
}

/// User-configurable settings for the Envoy proxy.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ApplicationLayerEnvoy {
    /// If set to true, the Envoy connection manager will use the real remote address of the client connection when determining internal versus external origin and manipulating various headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useRemoteAddress")]
    pub use_remote_address: Option<bool>,
    /// The number of additional ingress proxy hops from the right side of the x-forwarded-for HTTP header to trust when determining the origin clientâ€™s IP address. 0 is permitted, but >=1 is the typical setting.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xffNumTrustedHops")]
    pub xff_num_trusted_hops: Option<i32>,
}

/// Specification for application layer (L7) log collection.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ApplicationLayerLogCollection {
    /// This setting enables or disable log collection. Allowed values are Enabled or Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectLogs")]
    pub collect_logs: Option<String>,
    /// Interval in seconds for sending L7 log information for processing. Default: 5 sec
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logIntervalSeconds")]
    pub log_interval_seconds: Option<i64>,
    /// Maximum number of unique L7 logs that are sent LogIntervalSeconds. Adjust this to limit the number of L7 logs sent per LogIntervalSeconds to felix for further processing, use negative number to ignore limits. Default: -1
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestsPerInterval")]
    pub log_requests_per_interval: Option<i64>,
}

/// ApplicationLayerStatus defines the observed state of ApplicationLayer
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ApplicationLayerStatus {
    /// Conditions represents the latest observed set of conditions for the component. A component may be one or more of Ready, Progressing, Degraded or other customer types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// State provides user-readable status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

