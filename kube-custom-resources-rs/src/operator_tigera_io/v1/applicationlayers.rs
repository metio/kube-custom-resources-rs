// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/tigera/operator/operator.tigera.io/v1/applicationlayers.yaml --derive=PartialEq
// kopium version: 0.17.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// ApplicationLayerSpec defines the desired state of ApplicationLayer
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "operator.tigera.io", version = "v1", kind = "ApplicationLayer", plural = "applicationlayers")]
#[kube(status = "ApplicationLayerStatus")]
#[kube(schema = "disabled")]
pub struct ApplicationLayerSpec {
    /// Application Layer Policy controls whether or not ALP enforcement is enabled for the cluster. When enabled, NetworkPolicies with HTTP Match rules may be defined to opt-in workloads for traffic enforcement on the application layer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationLayerPolicy")]
    pub application_layer_policy: Option<String>,
    /// User-configurable settings for the Envoy proxy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub envoy: Option<ApplicationLayerEnvoy>,
    /// L7LogCollectorDaemonSet configures the L7LogCollector DaemonSet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "l7LogCollectorDaemonSet")]
    pub l7_log_collector_daemon_set: Option<ApplicationLayerL7LogCollectorDaemonSet>,
    /// Specification for application layer (L7) log collection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logCollection")]
    pub log_collection: Option<ApplicationLayerLogCollection>,
    /// WebApplicationFirewall controls whether or not ModSecurity enforcement is enabled for the cluster. When enabled, Services may opt-in to having ingress traffic examed by ModSecurity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webApplicationFirewall")]
    pub web_application_firewall: Option<String>,
}

/// User-configurable settings for the Envoy proxy.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ApplicationLayerEnvoy {
    /// If set to true, the Envoy connection manager will use the real remote address of the client connection when determining internal versus external origin and manipulating various headers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useRemoteAddress")]
    pub use_remote_address: Option<bool>,
    /// The number of additional ingress proxy hops from the right side of the x-forwarded-for HTTP header to trust when determining the origin clientâ€™s IP address. 0 is permitted, but >=1 is the typical setting.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "xffNumTrustedHops")]
    pub xff_num_trusted_hops: Option<i32>,
}

/// L7LogCollectorDaemonSet configures the L7LogCollector DaemonSet.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ApplicationLayerL7LogCollectorDaemonSet {
    /// Spec is the specification of the L7LogCollector DaemonSet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<ApplicationLayerL7LogCollectorDaemonSetSpec>,
}

/// Spec is the specification of the L7LogCollector DaemonSet.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ApplicationLayerL7LogCollectorDaemonSetSpec {
    /// Template describes the L7LogCollector DaemonSet pod that will be created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<ApplicationLayerL7LogCollectorDaemonSetSpecTemplate>,
}

/// Template describes the L7LogCollector DaemonSet pod that will be created.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ApplicationLayerL7LogCollectorDaemonSetSpecTemplate {
    /// Spec is the L7LogCollector DaemonSet's PodSpec.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<ApplicationLayerL7LogCollectorDaemonSetSpecTemplateSpec>,
}

/// Spec is the L7LogCollector DaemonSet's PodSpec.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ApplicationLayerL7LogCollectorDaemonSetSpecTemplateSpec {
    /// Containers is a list of L7LogCollector DaemonSet containers. If specified, this overrides the specified L7LogCollector DaemonSet containers. If omitted, the L7LogCollector DaemonSet will use its default values for its containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<ApplicationLayerL7LogCollectorDaemonSetSpecTemplateSpecContainers>>,
    /// InitContainers is a list of L7LogCollector DaemonSet init containers. If specified, this overrides the specified L7LogCollector DaemonSet init containers. If omitted, the L7LogCollector DaemonSet will use its default values for its init containers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initContainers")]
    pub init_containers: Option<Vec<ApplicationLayerL7LogCollectorDaemonSetSpecTemplateSpecInitContainers>>,
}

/// L7LogCollectorDaemonSetContainer is a L7LogCollector DaemonSet container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ApplicationLayerL7LogCollectorDaemonSetSpecTemplateSpecContainers {
    /// Name is an enum which identifies the L7LogCollector DaemonSet container by name.
    pub name: ApplicationLayerL7LogCollectorDaemonSetSpecTemplateSpecContainersName,
    /// Resources allows customization of limits and requests for compute resources such as cpu and memory. If specified, this overrides the named L7LogCollector DaemonSet container's resources. If omitted, the L7LogCollector DaemonSet will use its default value for this container's resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<ApplicationLayerL7LogCollectorDaemonSetSpecTemplateSpecContainersResources>,
}

/// L7LogCollectorDaemonSetContainer is a L7LogCollector DaemonSet container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum ApplicationLayerL7LogCollectorDaemonSetSpecTemplateSpecContainersName {
    #[serde(rename = "l7-collector")]
    L7Collector,
    #[serde(rename = "envoy-proxy")]
    EnvoyProxy,
    #[serde(rename = "dikastes")]
    Dikastes,
}

/// Resources allows customization of limits and requests for compute resources such as cpu and memory. If specified, this overrides the named L7LogCollector DaemonSet container's resources. If omitted, the L7LogCollector DaemonSet will use its default value for this container's resources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ApplicationLayerL7LogCollectorDaemonSetSpecTemplateSpecContainersResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
    ///  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
    ///  This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<ApplicationLayerL7LogCollectorDaemonSetSpecTemplateSpecContainersResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ApplicationLayerL7LogCollectorDaemonSetSpecTemplateSpecContainersResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    pub name: String,
}

/// L7LogCollectorDaemonSetInitContainer is a L7LogCollector DaemonSet init container.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ApplicationLayerL7LogCollectorDaemonSetSpecTemplateSpecInitContainers {
    /// Name is an enum which identifies the L7LogCollector DaemonSet init container by name.
    pub name: String,
    /// Resources allows customization of limits and requests for compute resources such as cpu and memory. If specified, this overrides the named L7LogCollector DaemonSet init container's resources. If omitted, the L7LogCollector DaemonSet will use its default value for this init container's resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<ApplicationLayerL7LogCollectorDaemonSetSpecTemplateSpecInitContainersResources>,
}

/// Resources allows customization of limits and requests for compute resources such as cpu and memory. If specified, this overrides the named L7LogCollector DaemonSet init container's resources. If omitted, the L7LogCollector DaemonSet will use its default value for this init container's resources.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ApplicationLayerL7LogCollectorDaemonSetSpecTemplateSpecInitContainersResources {
    /// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
    ///  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
    ///  This field is immutable. It can only be set for containers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<ApplicationLayerL7LogCollectorDaemonSetSpecTemplateSpecInitContainersResourcesClaims>>,
    /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

/// ResourceClaim references one entry in PodSpec.ResourceClaims.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ApplicationLayerL7LogCollectorDaemonSetSpecTemplateSpecInitContainersResourcesClaims {
    /// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    pub name: String,
}

/// Specification for application layer (L7) log collection.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ApplicationLayerLogCollection {
    /// This setting enables or disable log collection. Allowed values are Enabled or Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectLogs")]
    pub collect_logs: Option<String>,
    /// Interval in seconds for sending L7 log information for processing. Default: 5 sec
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logIntervalSeconds")]
    pub log_interval_seconds: Option<i64>,
    /// Maximum number of unique L7 logs that are sent LogIntervalSeconds. Adjust this to limit the number of L7 logs sent per LogIntervalSeconds to felix for further processing, use negative number to ignore limits. Default: -1
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logRequestsPerInterval")]
    pub log_requests_per_interval: Option<i64>,
}

/// ApplicationLayerStatus defines the observed state of ApplicationLayer
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct ApplicationLayerStatus {
    /// Conditions represents the latest observed set of conditions for the component. A component may be one or more of Ready, Progressing, Degraded or other customer types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// State provides user-readable status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

