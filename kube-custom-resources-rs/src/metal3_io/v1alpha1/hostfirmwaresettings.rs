// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/metal3-io/baremetal-operator/metal3.io/v1alpha1/hostfirmwaresettings.yaml --derive=PartialEq
// kopium version: 0.17.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use std::collections::BTreeMap;
use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// HostFirmwareSettingsSpec defines the desired state of HostFirmwareSettings
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "metal3.io", version = "v1alpha1", kind = "HostFirmwareSettings", plural = "hostfirmwaresettings")]
#[kube(namespaced)]
#[kube(status = "HostFirmwareSettingsStatus")]
#[kube(schema = "disabled")]
pub struct HostFirmwareSettingsSpec {
    /// Settings are the desired firmware settings stored as name/value pairs.
    pub settings: BTreeMap<String, IntOrString>,
}

/// HostFirmwareSettingsStatus defines the observed state of HostFirmwareSettings
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct HostFirmwareSettingsStatus {
    /// Track whether settings stored in the spec are valid based on the schema
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// Time that the status was last updated
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastUpdated")]
    pub last_updated: Option<String>,
    /// FirmwareSchema is a reference to the Schema used to describe each FirmwareSetting. By default, this will be a Schema in the same Namespace as the settings but it can be overwritten in the Spec
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<HostFirmwareSettingsStatusSchema>,
    /// Settings are the firmware settings stored as name/value pairs
    pub settings: BTreeMap<String, String>,
}

/// FirmwareSchema is a reference to the Schema used to describe each FirmwareSetting. By default, this will be a Schema in the same Namespace as the settings but it can be overwritten in the Spec
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct HostFirmwareSettingsStatusSchema {
    /// `name` is the reference to the schema.
    pub name: String,
    /// `namespace` is the namespace of the where the schema is stored.
    pub namespace: String,
}

