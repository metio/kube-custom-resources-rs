// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/metal3-io/baremetal-operator/metal3.io/v1alpha1/preprovisioningimages.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// PreprovisioningImageSpec defines the desired state of PreprovisioningImage.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "metal3.io", version = "v1alpha1", kind = "PreprovisioningImage", plural = "preprovisioningimages")]
#[kube(namespaced)]
#[kube(status = "PreprovisioningImageStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct PreprovisioningImageSpec {
    /// acceptFormats is a list of acceptable image formats.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceptFormats")]
    pub accept_formats: Option<Vec<String>>,
    /// architecture is the processor architecture for which to build the image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub architecture: Option<String>,
    /// networkDataName is the name of a Secret in the local namespace that contains network data to build in to the image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkDataName")]
    pub network_data_name: Option<String>,
}

/// PreprovisioningImageStatus defines the observed state of PreprovisioningImage.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PreprovisioningImageStatus {
    /// architecture is the processor architecture for which the image is built
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub architecture: Option<String>,
    /// conditions describe the state of the built image
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// extraKernelParams is a string with extra parameters to pass to the kernel when booting the image over network. Only makes sense for initrd images.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraKernelParams")]
    pub extra_kernel_params: Option<String>,
    /// format is the type of image that is available at the download url: either iso or initrd.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<PreprovisioningImageStatusFormat>,
    /// imageUrl is the URL from which the built image can be downloaded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageUrl")]
    pub image_url: Option<String>,
    /// kernelUrl is the URL from which the kernel of the image can be downloaded. Only makes sense for initrd images.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kernelUrl")]
    pub kernel_url: Option<String>,
    /// networkData is a reference to the version of the Secret containing the network data used to build the image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkData")]
    pub network_data: Option<PreprovisioningImageStatusNetworkData>,
}

/// PreprovisioningImageStatus defines the observed state of PreprovisioningImage.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum PreprovisioningImageStatusFormat {
    #[serde(rename = "iso")]
    Iso,
    #[serde(rename = "initrd")]
    Initrd,
}

/// networkData is a reference to the version of the Secret containing the network data used to build the image.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct PreprovisioningImageStatusNetworkData {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

