// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/metal3-io/baremetal-operator/metal3.io/v1alpha1/dataimages.yaml --derive=Default --derive=PartialEq
// kopium version: 0.19.0

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// DataImageSpec defines the desired state of DataImage.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "metal3.io", version = "v1alpha1", kind = "DataImage", plural = "dataimages")]
#[kube(namespaced)]
#[kube(status = "DataImageStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct DataImageSpec {
    /// Url is the address of the dataImage that we want to attach to a BareMetalHost
    pub url: String,
}

/// DataImageStatus defines the observed state of DataImage.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DataImageStatus {
    /// Currently attached DataImage
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachedImage")]
    pub attached_image: Option<DataImageStatusAttachedImage>,
    /// Error count and message when attaching/detaching
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<DataImageStatusError>,
    /// Time of last reconciliation
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastReconciled")]
    pub last_reconciled: Option<String>,
}

/// Currently attached DataImage
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DataImageStatusAttachedImage {
    pub url: String,
}

/// Error count and message when attaching/detaching
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct DataImageStatusError {
    pub count: i64,
    pub message: String,
}

