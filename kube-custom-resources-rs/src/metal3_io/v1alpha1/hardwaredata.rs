// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/metal3-io/baremetal-operator/metal3.io/v1alpha1/hardwaredata.yaml --derive=Default --derive=PartialEq
// kopium version: 0.17.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};

/// HardwareDataSpec defines the desired state of HardwareData
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "metal3.io", version = "v1alpha1", kind = "HardwareData", plural = "hardwaredata")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
pub struct HardwareDataSpec {
    /// The hardware discovered on the host during its inspection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hardware: Option<HardwareDataHardware>,
}

/// The hardware discovered on the host during its inspection.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HardwareDataHardware {
    /// CPU describes one processor on the host.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<HardwareDataHardwareCpu>,
    /// Firmware describes the firmware on the host.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub firmware: Option<HardwareDataHardwareFirmware>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nics: Option<Vec<HardwareDataHardwareNics>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ramMebibytes")]
    pub ram_mebibytes: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<Vec<HardwareDataHardwareStorage>>,
    /// HardwareSystemVendor stores details about the whole hardware system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "systemVendor")]
    pub system_vendor: Option<HardwareDataHardwareSystemVendor>,
}

/// CPU describes one processor on the host.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HardwareDataHardwareCpu {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arch: Option<String>,
    /// ClockSpeed is a clock speed in MHz
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clockMegahertz")]
    pub clock_megahertz: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
}

/// Firmware describes the firmware on the host.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HardwareDataHardwareFirmware {
    /// The BIOS for this firmware
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bios: Option<HardwareDataHardwareFirmwareBios>,
}

/// The BIOS for this firmware
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HardwareDataHardwareFirmwareBios {
    /// The release/build date for this BIOS
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    /// The vendor name for this BIOS
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vendor: Option<String>,
    /// The version of the BIOS
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// NIC describes one network interface on the host.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HardwareDataHardwareNics {
    /// The IP address of the interface. This will be an IPv4 or IPv6 address if one is present.  If both IPv4 and IPv6 addresses are present in a dual-stack environment, two nics will be output, one with each IP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ip: Option<String>,
    /// The device MAC address
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mac: Option<String>,
    /// The vendor and product IDs of the NIC, e.g. "0x8086 0x1572"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    /// The name of the network interface, e.g. "en0"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Whether the NIC is PXE Bootable
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pxe: Option<bool>,
    /// The speed of the device in Gigabits per second
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "speedGbps")]
    pub speed_gbps: Option<i64>,
    /// The untagged VLAN ID
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vlanId")]
    pub vlan_id: Option<i32>,
    /// The VLANs available
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vlans: Option<Vec<HardwareDataHardwareNicsVlans>>,
}

/// VLAN represents the name and ID of a VLAN
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HardwareDataHardwareNicsVlans {
    /// VLANID is a 12-bit 802.1Q VLAN identifier
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Storage describes one storage device (disk, SSD, etc.) on the host.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HardwareDataHardwareStorage {
    /// A list of alternate Linux device names of the disk, e.g. "/dev/sda". Note that this list is not exhaustive, and names may not be stable across reboots.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alternateNames")]
    pub alternate_names: Option<Vec<String>>,
    /// The SCSI location of the device
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hctl: Option<String>,
    /// Hardware model
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    /// A Linux device name of the disk, e.g. "/dev/disk/by-path/pci-0000:01:00.0-scsi-0:2:0:0". This will be a name that is stable across reboots if one is available.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Whether this disk represents rotational storage. This field is not recommended for usage, please prefer using 'Type' field instead, this field will be deprecated eventually.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rotational: Option<bool>,
    /// The serial number of the device
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serialNumber")]
    pub serial_number: Option<String>,
    /// The size of the disk in Bytes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeBytes")]
    pub size_bytes: Option<i64>,
    /// Device type, one of: HDD, SSD, NVME.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<HardwareDataHardwareStorageType>,
    /// The name of the vendor of the device
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vendor: Option<String>,
    /// The WWN of the device
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wwn: Option<String>,
    /// The WWN Vendor extension of the device
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wwnVendorExtension")]
    pub wwn_vendor_extension: Option<String>,
    /// The WWN with the extension
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "wwnWithExtension")]
    pub wwn_with_extension: Option<String>,
}

/// Storage describes one storage device (disk, SSD, etc.) on the host.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum HardwareDataHardwareStorageType {
    #[serde(rename = "HDD")]
    Hdd,
    #[serde(rename = "SSD")]
    Ssd,
    #[serde(rename = "NVME")]
    Nvme,
}

/// HardwareSystemVendor stores details about the whole hardware system.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HardwareDataHardwareSystemVendor {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "productName")]
    pub product_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serialNumber")]
    pub serial_number: Option<String>,
}

