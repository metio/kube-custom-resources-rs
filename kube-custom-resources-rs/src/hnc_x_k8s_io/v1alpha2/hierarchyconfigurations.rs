// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/kubernetes-sigs/hierarchical-namespaces/hnc.x-k8s.io/v1alpha2/hierarchyconfigurations.yaml --derive=PartialEq
// kopium version: 0.17.1

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// HierarchySpec defines the desired state of Hierarchy
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, PartialEq)]
#[kube(group = "hnc.x-k8s.io", version = "v1alpha2", kind = "HierarchyConfiguration", plural = "hierarchyconfigurations")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
pub struct HierarchyConfigurationSpec {
    /// AllowCascadingDeletion indicates if the subnamespaces of this namespace are allowed to cascading delete.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowCascadingDeletion")]
    pub allow_cascading_deletion: Option<bool>,
    /// Annotations is a list of annotations and values to apply to the current namespace and all of its descendants. All annotation keys must match a regex specified on the command line by --managed-namespace-annotation. A namespace cannot have a KVP that conflicts with one of its ancestors.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<Vec<HierarchyConfigurationAnnotations>>,
    /// Lables is a list of labels and values to apply to the current namespace and all of its descendants. All label keys must match a regex specified on the command line by --managed-namespace-label. A namespace cannot have a KVP that conflicts with one of its ancestors.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<HierarchyConfigurationLabels>>,
    /// Parent indicates the parent of this namespace, if any.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<String>,
}

/// MetaKVP represents a label or annotation
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct HierarchyConfigurationAnnotations {
    /// Key is the name of the label or annotation. It must conform to the normal rules for Kubernetes label/annotation keys.
    pub key: String,
    /// Value is the value of the label or annotation. It must confirm to the normal rules for Kubernetes label or annoation values, which are far more restrictive for labels than for anntations.
    pub value: String,
}

/// MetaKVP represents a label or annotation
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct HierarchyConfigurationLabels {
    /// Key is the name of the label or annotation. It must conform to the normal rules for Kubernetes label/annotation keys.
    pub key: String,
    /// Value is the value of the label or annotation. It must confirm to the normal rules for Kubernetes label or annoation values, which are far more restrictive for labels than for anntations.
    pub value: String,
}

/// HierarchyStatus defines the observed state of Hierarchy
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct HierarchyConfigurationStatus {
    /// Children indicates the direct children of this namespace, if any.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub children: Option<Vec<String>>,
    /// Conditions describes the errors, if any.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
}

