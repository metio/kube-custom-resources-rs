// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/tinkerbell/tink/tinkerbell.org/v1alpha2/hardware.yaml --derive=Default --derive=PartialEq
// kopium version: 0.19.0

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "tinkerbell.org", version = "v1alpha2", kind = "Hardware", plural = "hardware")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct HardwareSpec {
    /// BMCRef references a Rufio Machine object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bmcRef")]
    pub bmc_ref: Option<HardwareBmcRef>,
    /// Instance describes instance specific data that is generally unused by Tinkerbell core.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instance: Option<HardwareInstance>,
    /// IPXE provides iPXE script override fields. This is useful for debugging or netboot
    /// customization.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ipxe: Option<HardwareIpxe>,
    /// KernelParams passed to the kernel when launching the OSIE. Parameters are joined with a
    /// space.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kernelParams")]
    pub kernel_params: Option<Vec<String>>,
    /// NetworkInterfaces defines the desired DHCP and netboot configuration for a network interface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaces")]
    pub network_interfaces: Option<BTreeMap<String, HardwareNetworkInterfaces>>,
    /// OSIE describes the Operating System Installation Environment to be netbooted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub osie: Option<HardwareOsie>,
    /// StorageDevices is a list of storage devices that will be available in the OSIE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageDevices")]
    pub storage_devices: Option<Vec<String>>,
}

/// BMCRef references a Rufio Machine object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HardwareBmcRef {
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Instance describes instance specific data that is generally unused by Tinkerbell core.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HardwareInstance {
    /// Userdata is data with a structure understood by the producer and consumer of the data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub userdata: Option<String>,
    /// Vendordata is data with a structure understood by the producer and consumer of the data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vendordata: Option<String>,
}

/// IPXE provides iPXE script override fields. This is useful for debugging or netboot
/// customization.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HardwareIpxe {
    /// Content is an inline iPXE script.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inline: Option<String>,
    /// URL is a URL to a hosted iPXE script.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// NetworkInterfaces defines the desired DHCP and netboot configuration for a network interface.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HardwareNetworkInterfaces {
    /// DHCP is the basic network information for serving DHCP requests. Required when DisbaleDHCP
    /// is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dhcp: Option<HardwareNetworkInterfacesDhcp>,
    /// DisableDHCP disables DHCP for this interface. Implies DisableNetboot.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableDhcp")]
    pub disable_dhcp: Option<bool>,
    /// DisableNetboot disables netbooting for this interface. The interface will still receive
    /// network information specified by DHCP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableNetboot")]
    pub disable_netboot: Option<bool>,
}

/// DHCP is the basic network information for serving DHCP requests. Required when DisbaleDHCP
/// is false.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HardwareNetworkInterfacesDhcp {
    /// Gateway is the default gateway address to serve.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gateway: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// IP is an IPv4 address to serve.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ip: Option<String>,
    /// LeaseTimeSeconds to serve. 24h default. Maximum equates to max uint32 as defined by RFC 2132
    /// ยง 9.2 (https://www.rfc-editor.org/rfc/rfc2132.html#section-9.2).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "leaseTimeSeconds")]
    pub lease_time_seconds: Option<i64>,
    /// Nameservers to serve.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nameservers: Option<Vec<String>>,
    /// Netmask is an IPv4 netmask to serve.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub netmask: Option<String>,
    /// Timeservers to serve.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeservers: Option<Vec<String>>,
    /// VLANID is a VLAN ID between 0 and 4096.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vlanId")]
    pub vlan_id: Option<String>,
}

/// OSIE describes the Operating System Installation Environment to be netbooted.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct HardwareOsie {
    /// Name of the referent.
    /// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    /// TODO: Add other useful fields. apiVersion, kind, uid?
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

