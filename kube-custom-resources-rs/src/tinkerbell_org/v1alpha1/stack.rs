// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/tinkerbell/operator/tinkerbell.org/v1alpha1/stack.yaml --derive=Default --derive=PartialEq
// kopium version: 0.19.0

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// Spec describes the desired tinkerbell stack state.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "tinkerbell.org", version = "v1alpha1", kind = "Stack", plural = "stack")]
#[kube(namespaced)]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct StackSpec {
    /// DNSResolverIP is indicative of the resolver IP utilized for setting up the nginx server responsible for proxying to the Tinkerbell services and serving the Hook artifacts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsResolverIP")]
    pub dns_resolver_ip: Option<String>,
    /// ImagePullSecrets the secret name containing the docker auth config which should exist in the same namespace where the operator is deployed(typically tinkerbell)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecrets")]
    pub image_pull_secrets: Option<Vec<String>>,
    /// Registry is the registry to use for all images. If this field is set, all tink service deployment images will be prefixed with this value. For example if the value here was set to docker.io, then smee image will be docker.io/tinkerbell/smee.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registry: Option<String>,
    /// Services contains all Tinkerbell Stack services.
    pub services: StackServices,
    /// Version is the Tinkerbell CRD version.
    pub version: String,
}

/// Services contains all Tinkerbell Stack services.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackServices {
    /// Hegel contains all the information and spec about smee.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hegel: Option<StackServicesHegel>,
    /// Rufio contains all the information and spec about rufio.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rufio: Option<StackServicesRufio>,
    /// Smee contains all the information and spec about smee.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub smee: Option<StackServicesSmee>,
    /// TinkController contains all the information and spec about tink controller.
    #[serde(rename = "tinkController")]
    pub tink_controller: StackServicesTinkController,
    /// TinkServer contains all the information and spec about tink server.
    #[serde(rename = "tinkServer")]
    pub tink_server: StackServicesTinkServer,
}

/// Hegel contains all the information and spec about smee.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackServicesHegel {
    /// Image specifies the details of a tinkerbell services images
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<StackServicesHegelImage>,
    /// TrustedProxies comma separated allowed CIDRs subnets to be used as trusted proxies
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trustedProxies")]
    pub trusted_proxies: Option<Vec<String>>,
}

/// Image specifies the details of a tinkerbell services images
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackServicesHegelImage {
    /// Repository is used to set the image repository for tinkerbell services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// Tag is used to set the image tag for tinkerbell services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// Rufio contains all the information and spec about rufio.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackServicesRufio {
    /// Image specifies the details of a tinkerbell services images
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<StackServicesRufioImage>,
}

/// Image specifies the details of a tinkerbell services images
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackServicesRufioImage {
    /// Repository is used to set the image repository for tinkerbell services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// Tag is used to set the image tag for tinkerbell services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// Smee contains all the information and spec about smee.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackServicesSmee {
    /// BackendConfigs contains the configurations for smee backend.
    #[serde(rename = "backendConfigs")]
    pub backend_configs: StackServicesSmeeBackendConfigs,
    /// DHCPConfigs contains the DHCP server configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dhcpConfigs")]
    pub dhcp_configs: Option<StackServicesSmeeDhcpConfigs>,
    /// Image specifies the image repo and tag for Smee.
    pub image: StackServicesSmeeImage,
    /// IPXEConfigs contains the iPXE configurations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipxeConfigs")]
    pub ipxe_configs: Option<StackServicesSmeeIpxeConfigs>,
    /// LogLevel sets the debug level for smee.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<String>,
    /// SyslogConfigs contains the configurations of the syslog server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syslogConfigs")]
    pub syslog_configs: Option<StackServicesSmeeSyslogConfigs>,
    /// TFTPConfigs contains the configurations of Tinkerbell TFTP server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tftpConfigs")]
    pub tftp_configs: Option<StackServicesSmeeTftpConfigs>,
}

/// BackendConfigs contains the configurations for smee backend.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackServicesSmeeBackendConfigs {
    /// BackendFileMode contains the file backend configurations for DHCP and the HTTP iPXE script.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backendFileMode")]
    pub backend_file_mode: Option<StackServicesSmeeBackendConfigsBackendFileMode>,
    /// BackendKubeMode contains the Kubernetes backend configurations for DHCP and the HTTP iPXE script.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backendKubeMode")]
    pub backend_kube_mode: Option<StackServicesSmeeBackendConfigsBackendKubeMode>,
}

/// BackendFileMode contains the file backend configurations for DHCP and the HTTP iPXE script.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackServicesSmeeBackendConfigsBackendFileMode {
    /// FilePath specifies the hardware yaml file path for the file backend.
    #[serde(rename = "filePath")]
    pub file_path: String,
}

/// BackendKubeMode contains the Kubernetes backend configurations for DHCP and the HTTP iPXE script.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackServicesSmeeBackendConfigsBackendKubeMode {
    /// ConfigFilePath specifies the Kubernetes config file location.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configFilePath")]
    pub config_file_path: Option<String>,
    /// KubeAPIURL specifies the Kubernetes API URL, used for in-cluster client construction.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeAPIURL")]
    pub kube_apiurl: Option<String>,
    /// KubeNamespace specifies an optional Kubernetes namespace override to query hardware data from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kubeNamespace")]
    pub kube_namespace: Option<String>,
}

/// DHCPConfigs contains the DHCP server configurations.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackServicesSmeeDhcpConfigs {
    /// IPForPacket IP address to use in DHCP packets
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "IPForPacket")]
    pub ip_for_packet: Option<String>,
    /// HTTPIPXEBinaryAddress specifies the http ipxe binary server address (IP:Port) to use in DHCP packets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpIPXEBinaryAddress")]
    pub http_ipxe_binary_address: Option<String>,
    /// HTTPIPXEBinaryURI specifies the http ipxe script server URL to use in DHCP packets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpIPXEBinaryURI")]
    pub http_ipxe_binary_uri: Option<String>,
    /// IP is the local IP to listen on to serve TFTP binaries.
    pub ip: String,
    /// Port is the  local port to listen on to serve TFTP binaries.
    pub port: i64,
    /// SyslogIP specifies the syslog server IP address to use in DHCP packets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syslogIP")]
    pub syslog_ip: Option<String>,
    /// TFTPAddress specifies the tftp server address to use in DHCP packets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tftpAddress")]
    pub tftp_address: Option<String>,
}

/// Image specifies the image repo and tag for Smee.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackServicesSmeeImage {
    /// Repository is used to set the image repository for tinkerbell services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// Tag is used to set the image tag for tinkerbell services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// IPXEConfigs contains the iPXE configurations.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackServicesSmeeIpxeConfigs {
    /// EnableHTTPBinary enable iPXE HTTP binary server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableHTTPBinary")]
    pub enable_http_binary: Option<bool>,
    /// EnableTLS sets if the smee should run with TLS or not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableTLS")]
    pub enable_tls: Option<bool>,
    /// ExtraKernelArgs specifies extra set of kernel args (k=v k=v) that are appended to the kernel cmdline iPXE script.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraKernelArgs")]
    pub extra_kernel_args: Option<String>,
    /// HookURL specifies the URL where OSIE(Hook) images are located.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hookURL")]
    pub hook_url: Option<String>,
    /// IP is the local IP to listen on to serve TFTP binaries.
    pub ip: String,
    /// Port is the  local port to listen on to serve TFTP binaries.
    pub port: i64,
    /// TinkServerAddress specifies the IP:Port of the tink server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tinkServerAddress")]
    pub tink_server_address: Option<String>,
    /// TrustedProxies comma separated allowed CIDRs subnets to be used as trusted proxies.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trustedProxies")]
    pub trusted_proxies: Option<Vec<String>>,
}

/// SyslogConfigs contains the configurations of the syslog server.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackServicesSmeeSyslogConfigs {
    /// IP is the local IP to listen on for syslog messages.
    #[serde(rename = "bindAddress")]
    pub bind_address: String,
    /// Port is the  local port to listen on for syslog messages.
    pub port: i64,
}

/// TFTPConfigs contains the configurations of Tinkerbell TFTP server.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackServicesSmeeTftpConfigs {
    /// IP is the local IP to listen on to serve TFTP binaries.
    pub ip: String,
    /// IPXEScriptPatch specifies the iPXE script fragment to patch into served iPXE binaries served via TFTP or HTTP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipxeScriptPatch")]
    pub ipxe_script_patch: Option<String>,
    /// Port is the  local port to listen on to serve TFTP binaries.
    pub port: i64,
    /// TFTPTimeout specifies the iPXE tftp binary server requests timeout.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tftpTimeout")]
    pub tftp_timeout: Option<i64>,
}

/// TinkController contains all the information and spec about tink controller.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackServicesTinkController {
    /// Image specifies the details of a tinkerbell services images
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<StackServicesTinkControllerImage>,
}

/// Image specifies the details of a tinkerbell services images
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackServicesTinkControllerImage {
    /// Repository is used to set the image repository for tinkerbell services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// Tag is used to set the image tag for tinkerbell services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// TinkServer contains all the information and spec about tink server.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackServicesTinkServer {
    /// EnableTLS sets if the tink server should run with TLS or not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableTLS")]
    pub enable_tls: Option<bool>,
    /// Image specifies the details of a tinkerbell services images
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<StackServicesTinkServerImage>,
}

/// Image specifies the details of a tinkerbell services images
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct StackServicesTinkServerImage {
    /// Repository is used to set the image repository for tinkerbell services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// Tag is used to set the image tag for tinkerbell services.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

