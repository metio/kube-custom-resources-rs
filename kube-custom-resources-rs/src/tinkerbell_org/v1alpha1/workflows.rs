// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/tinkerbell/tink/tinkerbell.org/v1alpha1/workflows.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.21.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// WorkflowSpec defines the desired state of Workflow.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "tinkerbell.org", version = "v1alpha1", kind = "Workflow", plural = "workflows")]
#[kube(namespaced)]
#[kube(status = "WorkflowStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct WorkflowSpec {
    /// BootOptions are options that control the booting of Hardware.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootOptions")]
    pub boot_options: Option<WorkflowBootOptions>,
    /// A mapping of template devices to hadware mac addresses.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hardwareMap")]
    pub hardware_map: Option<BTreeMap<String, String>>,
    /// Name of the Hardware associated with this workflow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hardwareRef")]
    pub hardware_ref: Option<String>,
    /// Name of the Template associated with this workflow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "templateRef")]
    pub template_ref: Option<String>,
}

/// BootOptions are options that control the booting of Hardware.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct WorkflowBootOptions {
    /// BootMode is the type of booting that will be done.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootMode")]
    pub boot_mode: Option<WorkflowBootOptionsBootMode>,
    /// ISOURL is the URL of the ISO that will be one-time booted. When this field is set, the controller will create a job.bmc.tinkerbell.org object
    /// for getting the associated hardware into a CDROM booting state.
    /// A HardwareRef that contains a spec.BmcRef must be provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isoURL")]
    pub iso_url: Option<String>,
    /// ToggleAllowNetboot indicates whether the controller should toggle the field in the associated hardware for allowing PXE booting.
    /// This will be enabled before a Workflow is executed and disabled after the Workflow has completed successfully.
    /// A HardwareRef must be provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toggleAllowNetboot")]
    pub toggle_allow_netboot: Option<bool>,
}

/// BootOptions are options that control the booting of Hardware.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub enum WorkflowBootOptionsBootMode {
    #[serde(rename = "netboot")]
    Netboot,
    #[serde(rename = "iso")]
    Iso,
}

/// WorkflowStatus defines the observed state of a Workflow.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct WorkflowStatus {
    /// BootOptions holds the state of any boot options.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootOptions")]
    pub boot_options: Option<WorkflowStatusBootOptions>,
    /// Conditions are the latest available observations of an object's current state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<WorkflowStatusConditions>>,
    /// CurrentAction is the action that is currently in the running state.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "currentAction")]
    pub current_action: Option<String>,
    /// GlobalTimeout represents the max execution time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalTimeout")]
    pub global_timeout: Option<i64>,
    /// State is the current overall state of the Workflow.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// Tasks are the tasks to be run by the worker(s).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tasks: Option<Vec<WorkflowStatusTasks>>,
    /// TemplateRendering indicates whether the template was rendered successfully.
    /// Possible values are "successful" or "failed" or "unknown".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "templateRending")]
    pub template_rending: Option<String>,
}

/// BootOptions holds the state of any boot options.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct WorkflowStatusBootOptions {
    /// AllowNetboot holds the state of the the controller's interactions with the allowPXE field in a Hardware object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowNetboot")]
    pub allow_netboot: Option<WorkflowStatusBootOptionsAllowNetboot>,
    /// Jobs holds the state of any job.bmc.tinkerbell.org objects created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jobs: Option<BTreeMap<String, WorkflowStatusBootOptionsJobs>>,
}

/// AllowNetboot holds the state of the the controller's interactions with the allowPXE field in a Hardware object.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct WorkflowStatusBootOptionsAllowNetboot {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toggledFalse")]
    pub toggled_false: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toggledTrue")]
    pub toggled_true: Option<bool>,
}

/// Jobs holds the state of any job.bmc.tinkerbell.org objects created.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct WorkflowStatusBootOptionsJobs {
    /// Complete indicates whether the created job.bmc.tinkerbell.org has reported its conditions as complete.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub complete: Option<bool>,
    /// ExistingJobDeleted indicates whether any existing job.bmc.tinkerbell.org was deleted.
    /// The name of each job.bmc.tinkerbell.org object created by the controller is the same, so only one can exist at a time.
    /// Using the same name was chosen so that there is only ever 1 job.bmc.tinkerbell.org per Hardware/Machine.bmc.tinkerbell.org.
    /// This makes clean up easier and we dont just orphan jobs every time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "existingJobDeleted")]
    pub existing_job_deleted: Option<bool>,
    /// UID is the UID of the job.bmc.tinkerbell.org object associated with this workflow.
    /// This is used to uniquely identify the job.bmc.tinkerbell.org object, as
    /// all objects for a specific Hardware/Machine.bmc.tinkerbell.org are created with the same name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// JobCondition describes current state of a job.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct WorkflowStatusConditions {
    /// Message is a human readable message indicating details about last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Reason is a (brief) reason for the condition's last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Status of the condition, one of True, False, Unknown.
    pub status: String,
    /// Time when the condition was created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
    /// Type of job condition, Complete or Failed.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Task represents a series of actions to be completed by a worker.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct WorkflowStatusTasks {
    pub actions: Vec<WorkflowStatusTasksActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<BTreeMap<String, String>>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<String>>,
    pub worker: String,
}

/// Action represents a workflow action.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct WorkflowStatusTasksActions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startedAt")]
    pub started_at: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<String>>,
}

