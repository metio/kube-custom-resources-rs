// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/superedge/superedge/site.superedge.io/v1alpha1/nodeunits.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// NodeUnitSpec defines the desired state of NodeUnit
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "site.superedge.io", version = "v1alpha1", kind = "NodeUnit", plural = "nodeunits")]
#[kube(status = "NodeUnitStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct NodeUnitSpec {
    /// If specified, If node exists, join nodeunit directly
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<String>>,
    /// If specified, Label selector for nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<NodeUnitSelector>,
    /// If specified, set the relevant properties to the node of nodeunit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub setnode: Option<NodeUnitSetnode>,
    /// If specified, allow to set taints to nodeunit for the scheduler to choose
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub taints: Option<Vec<NodeUnitTaints>>,
    /// Type of nodeunit， vaule: Cloud、Edge
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// Unschedulable controls nodeUnit schedulability of new workwolads. By default, nodeUnit is schedulable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unschedulable: Option<bool>,
}

/// If specified, Label selector for nodes.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeUnitSelector {
    /// If specified, select node to join nodeUnit according to Annotations
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<NodeUnitSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeUnitSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// If specified, set the relevant properties to the node of nodeunit.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeUnitSetnode {
    /// If specified, set annotations to all nodes of nodeunit
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// If specified, set labels to all nodes of nodeunit
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<BTreeMap<String, String>>,
    /// If specified, set taints to all nodes of nodeunit
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub taints: Option<Vec<NodeUnitSetnodeTaints>>,
}

/// The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeUnitSetnodeTaints {
    /// Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
    pub effect: String,
    /// Required. The taint key to be applied to a node.
    pub key: String,
    /// TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeAdded")]
    pub time_added: Option<String>,
    /// The taint value corresponding to the taint key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeUnitTaints {
    /// Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
    pub effect: String,
    /// Required. The taint key to be applied to a node.
    pub key: String,
    /// TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeAdded")]
    pub time_added: Option<String>,
    /// The taint value corresponding to the taint key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// NodeUnitStatus defines the observed state of NodeUnit
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeUnitStatus {
    /// Node that is not ready in nodeunit
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notreadynodes: Option<Vec<String>>,
    /// Node selected by nodeunit
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub readynodes: Option<Vec<String>>,
    /// Node that is ready in nodeunit
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub readyrate: Option<String>,
}

