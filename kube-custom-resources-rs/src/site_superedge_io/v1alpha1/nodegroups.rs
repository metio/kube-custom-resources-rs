// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/superedge/superedge/site.superedge.io/v1alpha1/nodegroups.yaml --derive=Default --derive=PartialEq --smart-derive-elision
// kopium version: 0.20.1

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::BTreeMap;
}
use self::prelude::*;

/// NodeGroupSpec defines the desired state of NodeGroup
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "site.superedge.io", version = "v1alpha1", kind = "NodeGroup", plural = "nodegroups")]
#[kube(status = "NodeGroupStatus")]
#[kube(schema = "disabled")]
#[kube(derive="Default")]
#[kube(derive="PartialEq")]
pub struct NodeGroupSpec {
    /// If specified, create new NodeUnits based on node have same label keys, for different values will create different nodeunites
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub autofindnodekeys: Option<Vec<String>>,
    /// If specified, If nodeUnit exists, join NodeGroup directly
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodeunits: Option<Vec<String>>,
    /// If specified, Label selector for nodeUnit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<NodeGroupSelector>,
    /// If specified, Nodegroup bound workload
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workload: Option<Vec<NodeGroupWorkload>>,
}

/// If specified, Label selector for nodeUnit.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeGroupSelector {
    /// If specified, select node to join nodeUnit according to Annotations
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<NodeGroupSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeGroupSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeGroupWorkload {
    /// workload name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// If specified, Label selector for workload.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<NodeGroupWorkloadSelector>,
    /// workload type, Value can be pod, deploy, ds, service, job, st
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// If specified, Label selector for workload.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeGroupWorkloadSelector {
    /// If specified, select node to join nodeUnit according to Annotations
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<BTreeMap<String, String>>,
    /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<NodeGroupWorkloadSelectorMatchExpressions>>,
    /// matchLabels is a map of {key,value} pairs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeGroupWorkloadSelectorMatchExpressions {
    /// key is the label key that the selector applies to.
    pub key: String,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    pub operator: String,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// NodeGroupStatus defines the observed state of NodeGroup
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeGroupStatus {
    /// Nodeunit contained in nodegroup
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodeunits: Option<Vec<String>>,
    /// NodeUnit that is number in nodegroup
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unitnumber: Option<i64>,
    /// The status of the workload in the nodegroup in each nodeunit
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workloadstatus: Option<Vec<NodeGroupStatusWorkloadstatus>>,
}

/// NodeGroupStatus defines the observed state of NodeGroup
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct NodeGroupStatusWorkloadstatus {
    /// workload NotReady Units
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notreadyunit: Option<Vec<String>>,
    /// workload Ready Units
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub readyunit: Option<Vec<String>>,
    /// workload Name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workloadname: Option<String>,
}

