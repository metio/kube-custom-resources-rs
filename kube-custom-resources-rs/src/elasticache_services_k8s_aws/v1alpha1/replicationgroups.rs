// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium --docs --filename=./crd-catalog/aws-controllers-k8s/elasticache-controller/elasticache.services.k8s.aws/v1alpha1/replicationgroups.yaml --derive=Default --derive=PartialEq
// kopium version: 0.17.2

use kube::CustomResource;
use serde::{Serialize, Deserialize};
use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;

/// ReplicationGroupSpec defines the desired state of ReplicationGroup. 
///  Contains all of the attributes of a specific Redis replication group.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[kube(group = "elasticache.services.k8s.aws", version = "v1alpha1", kind = "ReplicationGroup", plural = "replicationgroups")]
#[kube(namespaced)]
#[kube(status = "ReplicationGroupStatus")]
#[kube(schema = "disabled")]
pub struct ReplicationGroupSpec {
    /// A flag that enables encryption at rest when set to true. 
    ///  You cannot modify the value of AtRestEncryptionEnabled after the replication group is created. To enable encryption at rest on a replication group you must set AtRestEncryptionEnabled to true when you create the replication group. 
    ///  Required: Only available when creating a replication group in an Amazon VPC using redis version 3.2.6, 4.x or later. 
    ///  Default: false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atRestEncryptionEnabled")]
    pub at_rest_encryption_enabled: Option<bool>,
    /// Reserved parameter. The password used to access a password protected server. 
    ///  AuthToken can be specified only on replication groups where TransitEncryptionEnabled is true. 
    ///  For HIPAA compliance, you must specify TransitEncryptionEnabled as true, an AuthToken, and a CacheSubnetGroup. 
    ///  Password constraints: 
    ///  * Must be only printable ASCII characters. 
    ///  * Must be at least 16 characters and no more than 128 characters in length. 
    ///  * The only permitted printable special characters are !, &, #, $, ^, <, >, and -. Other printable special characters cannot be used in the AUTH token. 
    ///  For more information, see AUTH password (http://redis.io/commands/AUTH) at http://redis.io/commands/AUTH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authToken")]
    pub auth_token: Option<ReplicationGroupAuthToken>,
    /// Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails. 
    ///  AutomaticFailoverEnabled must be enabled for Redis (cluster mode enabled) replication groups. 
    ///  Default: false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "automaticFailoverEnabled")]
    pub automatic_failover_enabled: Option<bool>,
    /// The compute and memory capacity of the nodes in the node group (shard). 
    ///  The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts. 
    ///  * General purpose: Current generation: M6g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge For region availability, see Supported Node Types (https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge 
    ///  * Compute optimized: Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) C1 node types: cache.c1.xlarge 
    ///  * Memory optimized with data tiering: Current generation: R6gd node types (available only for Redis engine version 6.2 onward). cache.r6gd.xlarge, cache.r6gd.2xlarge, cache.r6gd.4xlarge, cache.r6gd.8xlarge, cache.r6gd.12xlarge, cache.r6gd.16xlarge 
    ///  * Memory optimized: Current generation: R6g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward). cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge For region availability, see Supported Node Types (https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge, cache.r3.4xlarge, cache.r3.8xlarge 
    ///  Additional node type info 
    ///  * All current generation instance types are created in Amazon VPC by default. 
    ///  * Redis append-only files (AOF) are not supported for T1 or T2 instances. 
    ///  * Redis Multi-AZ with automatic failover is not supported on T1 instances. 
    ///  * Redis configuration variables appendonly and appendfsync are not supported on Redis version 2.8.22 and later.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheNodeType")]
    pub cache_node_type: Option<String>,
    /// The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used. 
    ///  If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. 
    ///  * To create a Redis (cluster mode disabled) replication group, use CacheParameterGroupName=default.redis3.2. 
    ///  * To create a Redis (cluster mode enabled) replication group, use CacheParameterGroupName=default.redis3.2.cluster.on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheParameterGroupName")]
    pub cache_parameter_group_name: Option<String>,
    /// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
    ///  from: name: my-api
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheParameterGroupRef")]
    pub cache_parameter_group_ref: Option<ReplicationGroupCacheParameterGroupRef>,
    /// A list of cache security group names to associate with this replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheSecurityGroupNames")]
    pub cache_security_group_names: Option<Vec<String>>,
    /// The name of the cache subnet group to be used for the replication group. 
    ///  If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see Subnets and Subnet Groups (https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheSubnetGroupName")]
    pub cache_subnet_group_name: Option<String>,
    /// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
    ///  from: name: my-api
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheSubnetGroupRef")]
    pub cache_subnet_group_ref: Option<ReplicationGroupCacheSubnetGroupRef>,
    /// Enables data tiering. Data tiering is only supported for replication groups using the r6gd node type. This parameter must be set to true when using r6gd nodes. For more information, see Data tiering (https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/data-tiering.html).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataTieringEnabled")]
    pub data_tiering_enabled: Option<bool>,
    /// A user-created description for the replication group.
    pub description: String,
    /// The name of the cache engine to be used for the clusters in this replication group. Must be Redis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub engine: Option<String>,
    /// The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation. 
    ///  Important: You can upgrade to a newer engine version (see Selecting a Cache Engine and Version (https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement)) in the ElastiCache User Guide, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineVersion")]
    pub engine_version: Option<String>,
    /// The ID of the KMS key used to encrypt the disk in the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyID")]
    pub kms_key_id: Option<String>,
    /// Specifies the destination, format and type of the logs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logDeliveryConfigurations")]
    pub log_delivery_configurations: Option<Vec<ReplicationGroupLogDeliveryConfigurations>>,
    /// A flag indicating if you have Multi-AZ enabled to enhance fault tolerance. For more information, see Minimizing Downtime: Multi-AZ (http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiAZEnabled")]
    pub multi_az_enabled: Option<bool>,
    /// A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: PrimaryAvailabilityZone, ReplicaAvailabilityZones, ReplicaCount, and Slots. 
    ///  If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, it is required when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file. You must configure each node group (shard) using this parameter because you must specify the slots for each node group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeGroupConfiguration")]
    pub node_group_configuration: Option<Vec<ReplicationGroupNodeGroupConfiguration>>,
    /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent. 
    ///  The Amazon SNS topic owner must be the same as the cluster owner.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationTopicARN")]
    pub notification_topic_arn: Option<String>,
    /// An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1. 
    ///  Default: 1
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numNodeGroups")]
    pub num_node_groups: Option<i64>,
    /// The port number on which each member of the replication group accepts connections.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list. 
    ///  This parameter is not used if there is more than one node group (shard). You should use NodeGroupConfiguration instead. 
    ///  If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group. 
    ///  The number of Availability Zones listed must equal the value of NumCacheClusters. 
    ///  Default: system chosen Availability Zones.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredCacheClusterAZs")]
    pub preferred_cache_cluster_a_zs: Option<Vec<String>>,
    /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are: 
    ///  Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. 
    ///  Valid values for ddd are: 
    ///  * sun 
    ///  * mon 
    ///  * tue 
    ///  * wed 
    ///  * thu 
    ///  * fri 
    ///  * sat 
    ///  Example: sun:23:00-mon:01:30
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredMaintenanceWindow")]
    pub preferred_maintenance_window: Option<String>,
    /// The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of available. 
    ///  This parameter is not required if NumCacheClusters, NumNodeGroups, or ReplicasPerNodeGroup is specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primaryClusterID")]
    pub primary_cluster_id: Option<String>,
    /// An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicasPerNodeGroup")]
    pub replicas_per_node_group: Option<i64>,
    /// The replication group identifier. This parameter is stored as a lowercase string. 
    ///  Constraints: 
    ///  * A name must contain from 1 to 40 alphanumeric characters or hyphens. 
    ///  * The first character must be a letter. 
    ///  * A name cannot end with a hyphen or contain two consecutive hyphens.
    #[serde(rename = "replicationGroupID")]
    pub replication_group_id: String,
    /// One or more Amazon VPC security groups associated with this replication group. 
    ///  Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIDs")]
    pub security_group_i_ds: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupRefs")]
    pub security_group_refs: Option<Vec<ReplicationGroupSecurityGroupRefs>>,
    /// A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter NumNodeGroups or the number of node groups configured by NodeGroupConfiguration regardless of the number of ARNs specified here. 
    ///  Example of an Amazon S3 ARN: arn:aws:s3:::my_bucket/snapshot1.rdb
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotARNs")]
    pub snapshot_ar_ns: Option<Vec<String>>,
    /// The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to restoring while the new replication group is being created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotName")]
    pub snapshot_name: Option<String>,
    /// The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted. 
    ///  Default: 0 (i.e., automatic backups are disabled for this cluster).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotRetentionLimit")]
    pub snapshot_retention_limit: Option<i64>,
    /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard). 
    ///  Example: 05:00-09:00 
    ///  If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotWindow")]
    pub snapshot_window: Option<String>,
    /// A list of tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=myKey, Value=myKeyValue. You can include multiple tags as shown following: Key=myKey, Value=myKeyValue Key=mySecondKey, Value=mySecondKeyValue. Tags on replication groups will be replicated to all nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<ReplicationGroupTags>>,
    /// A flag that enables in-transit encryption when set to true. 
    ///  You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster. 
    ///  This parameter is valid only if the Engine parameter is redis, the EngineVersion parameter is 3.2.6, 4.x or later, and the cluster is being created in an Amazon VPC. 
    ///  If you enable in-transit encryption, you must also specify a value for CacheSubnetGroup. 
    ///  Required: Only available when creating a replication group in an Amazon VPC using redis version 3.2.6, 4.x or later. 
    ///  Default: false 
    ///  For HIPAA compliance, you must specify TransitEncryptionEnabled as true, an AuthToken, and a CacheSubnetGroup.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitEncryptionEnabled")]
    pub transit_encryption_enabled: Option<bool>,
    /// The user group to associate with the replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userGroupIDs")]
    pub user_group_i_ds: Option<Vec<String>>,
}

/// Reserved parameter. The password used to access a password protected server. 
///  AuthToken can be specified only on replication groups where TransitEncryptionEnabled is true. 
///  For HIPAA compliance, you must specify TransitEncryptionEnabled as true, an AuthToken, and a CacheSubnetGroup. 
///  Password constraints: 
///  * Must be only printable ASCII characters. 
///  * Must be at least 16 characters and no more than 128 characters in length. 
///  * The only permitted printable special characters are !, &, #, $, ^, <, >, and -. Other printable special characters cannot be used in the AUTH token. 
///  For more information, see AUTH password (http://redis.io/commands/AUTH) at http://redis.io/commands/AUTH.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupAuthToken {
    /// Key is the key within the secret
    pub key: String,
    /// name is unique within a namespace to reference a secret resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// namespace defines the space within which the secret name must be unique.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

/// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
///  from: name: my-api
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupCacheParameterGroupRef {
    /// AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<ReplicationGroupCacheParameterGroupRefFrom>,
}

/// AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupCacheParameterGroupRefFrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
///  from: name: my-api
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupCacheSubnetGroupRef {
    /// AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<ReplicationGroupCacheSubnetGroupRefFrom>,
}

/// AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupCacheSubnetGroupRefFrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Specifies the destination, format and type of the logs.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupLogDeliveryConfigurations {
    /// Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationDetails")]
    pub destination_details: Option<ReplicationGroupLogDeliveryConfigurationsDestinationDetails>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationType")]
    pub destination_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logFormat")]
    pub log_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logType")]
    pub log_type: Option<String>,
}

/// Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupLogDeliveryConfigurationsDestinationDetails {
    /// The configuration details of the CloudWatch Logs destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudWatchLogsDetails")]
    pub cloud_watch_logs_details: Option<ReplicationGroupLogDeliveryConfigurationsDestinationDetailsCloudWatchLogsDetails>,
    /// The configuration details of the Kinesis Data Firehose destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kinesisFirehoseDetails")]
    pub kinesis_firehose_details: Option<ReplicationGroupLogDeliveryConfigurationsDestinationDetailsKinesisFirehoseDetails>,
}

/// The configuration details of the CloudWatch Logs destination.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupLogDeliveryConfigurationsDestinationDetailsCloudWatchLogsDetails {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroup")]
    pub log_group: Option<String>,
}

/// The configuration details of the Kinesis Data Firehose destination.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupLogDeliveryConfigurationsDestinationDetailsKinesisFirehoseDetails {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deliveryStream")]
    pub delivery_stream: Option<String>,
}

/// Node group (shard) configuration options. Each node group (shard) configuration has the following: Slots, PrimaryAvailabilityZone, ReplicaAvailabilityZones, ReplicaCount.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupNodeGroupConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeGroupID")]
    pub node_group_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primaryAvailabilityZone")]
    pub primary_availability_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primaryOutpostARN")]
    pub primary_outpost_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaAvailabilityZones")]
    pub replica_availability_zones: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaCount")]
    pub replica_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaOutpostARNs")]
    pub replica_outpost_ar_ns: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slots: Option<String>,
}

/// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
///  from: name: my-api
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupSecurityGroupRefs {
    /// AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<ReplicationGroupSecurityGroupRefsFrom>,
}

/// AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupSecurityGroupRefsFrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// A tag that can be added to an ElastiCache cluster or replication group. Tags are composed of a Key/Value pair. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. A tag with a null Value is permitted.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupTags {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ReplicationGroupStatus defines the observed state of ReplicationGroup
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatus {
    /// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member that is used to contain resource sync state, account ownership, constructed ARN for the resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ackResourceMetadata")]
    pub ack_resource_metadata: Option<ReplicationGroupStatusAckResourceMetadata>,
    /// A string list, each element of which specifies a cache node type which you can use to scale your cluster or replication group. When scaling down a Redis cluster or replication group using ModifyCacheCluster or ModifyReplicationGroup, use a value from this list for the CacheNodeType parameter.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedScaleDownModifications")]
    pub allowed_scale_down_modifications: Option<Vec<String>>,
    /// A string list, each element of which specifies a cache node type which you can use to scale your cluster or replication group. 
    ///  When scaling up a Redis cluster or replication group using ModifyCacheCluster or ModifyReplicationGroup, use a value from this list for the CacheNodeType parameter.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedScaleUpModifications")]
    pub allowed_scale_up_modifications: Option<Vec<String>>,
    /// A flag that enables using an AuthToken (password) when issuing Redis commands. 
    ///  Default: false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authTokenEnabled")]
    pub auth_token_enabled: Option<bool>,
    /// The date the auth token was last modified
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authTokenLastModifiedDate")]
    pub auth_token_last_modified_date: Option<String>,
    /// If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMinorVersionUpgrade")]
    pub auto_minor_version_upgrade: Option<bool>,
    /// Indicates the status of automatic failover for this Redis replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "automaticFailover")]
    pub automatic_failover: Option<String>,
    /// A flag indicating whether or not this replication group is cluster enabled; i.e., whether its data can be partitioned across multiple shards (API/CLI: node groups). 
    ///  Valid values: true | false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterEnabled")]
    pub cluster_enabled: Option<bool>,
    /// All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// The configuration endpoint for this replication group. Use the configuration endpoint to connect to this replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configurationEndpoint")]
    pub configuration_endpoint: Option<ReplicationGroupStatusConfigurationEndpoint>,
    /// Enables data tiering. Data tiering is only supported for replication groups using the r6gd node type. This parameter must be set to true when using r6gd nodes. For more information, see Data tiering (https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/data-tiering.html).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataTiering")]
    pub data_tiering: Option<String>,
    /// A list of events. Each element in the list contains detailed information about one event.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events: Option<Vec<ReplicationGroupStatusEvents>>,
    /// The name of the Global datastore and role of this replication group in the Global datastore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalReplicationGroupInfo")]
    pub global_replication_group_info: Option<ReplicationGroupStatusGlobalReplicationGroupInfo>,
    /// Returns the destination, format and type of the logs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logDeliveryConfigurations")]
    pub log_delivery_configurations: Option<Vec<ReplicationGroupStatusLogDeliveryConfigurations>>,
    /// The names of all the cache clusters that are part of this replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memberClusters")]
    pub member_clusters: Option<Vec<String>>,
    /// The outpost ARNs of the replication group's member clusters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memberClustersOutpostARNs")]
    pub member_clusters_outpost_ar_ns: Option<Vec<String>>,
    /// A flag indicating if you have Multi-AZ enabled to enhance fault tolerance. For more information, see Minimizing Downtime: Multi-AZ (http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiAZ")]
    pub multi_az: Option<String>,
    /// A list of node groups in this replication group. For Redis (cluster mode disabled) replication groups, this is a single-element list. For Redis (cluster mode enabled) replication groups, the list contains an entry for each node group (shard).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeGroups")]
    pub node_groups: Option<Vec<ReplicationGroupStatusNodeGroups>>,
    /// A group of settings to be applied to the replication group, either immediately or during the next maintenance window.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pendingModifiedValues")]
    pub pending_modified_values: Option<ReplicationGroupStatusPendingModifiedValues>,
    /// The date and time when the cluster was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicationGroupCreateTime")]
    pub replication_group_create_time: Option<String>,
    /// The cluster ID that is used as the daily snapshot source for the replication group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshottingClusterID")]
    pub snapshotting_cluster_id: Option<String>,
    /// The current state of this replication group - creating, available, modifying, deleting, create-failed, snapshotting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member that is used to contain resource sync state, account ownership, constructed ARN for the resource
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusAckResourceMetadata {
    /// ARN is the Amazon Resource Name for the resource. This is a globally-unique identifier and is set only by the ACK service controller once the controller has orchestrated the creation of the resource OR when it has verified that an "adopted" resource (a resource where the ARN annotation was set by the Kubernetes user on the CR) exists and matches the supplied CR's Spec field values. TODO(vijat@): Find a better strategy for resources that do not have ARN in CreateOutputResponse https://github.com/aws/aws-controllers-k8s/issues/270
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// OwnerAccountID is the AWS Account ID of the account that owns the backend AWS service API resource.
    #[serde(rename = "ownerAccountID")]
    pub owner_account_id: String,
    /// Region is the AWS region in which the resource exists or will exist.
    pub region: String,
}

/// The configuration endpoint for this replication group. Use the configuration endpoint to connect to this replication group.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusConfigurationEndpoint {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

/// Represents a single occurrence of something interesting within the system. Some examples of events are creating a cluster, adding or removing a cache node, or rebooting a node.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusEvents {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceIdentifier")]
    pub source_identifier: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceType")]
    pub source_type: Option<String>,
}

/// The name of the Global datastore and role of this replication group in the Global datastore.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusGlobalReplicationGroupInfo {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalReplicationGroupID")]
    pub global_replication_group_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalReplicationGroupMemberRole")]
    pub global_replication_group_member_role: Option<String>,
}

/// Returns the destination, format and type of the logs.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusLogDeliveryConfigurations {
    /// Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationDetails")]
    pub destination_details: Option<ReplicationGroupStatusLogDeliveryConfigurationsDestinationDetails>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationType")]
    pub destination_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logFormat")]
    pub log_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logType")]
    pub log_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusLogDeliveryConfigurationsDestinationDetails {
    /// The configuration details of the CloudWatch Logs destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudWatchLogsDetails")]
    pub cloud_watch_logs_details: Option<ReplicationGroupStatusLogDeliveryConfigurationsDestinationDetailsCloudWatchLogsDetails>,
    /// The configuration details of the Kinesis Data Firehose destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kinesisFirehoseDetails")]
    pub kinesis_firehose_details: Option<ReplicationGroupStatusLogDeliveryConfigurationsDestinationDetailsKinesisFirehoseDetails>,
}

/// The configuration details of the CloudWatch Logs destination.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusLogDeliveryConfigurationsDestinationDetailsCloudWatchLogsDetails {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroup")]
    pub log_group: Option<String>,
}

/// The configuration details of the Kinesis Data Firehose destination.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusLogDeliveryConfigurationsDestinationDetailsKinesisFirehoseDetails {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deliveryStream")]
    pub delivery_stream: Option<String>,
}

/// Represents a collection of cache nodes in a replication group. One node in the node group is the read/write primary node. All the other nodes are read-only Replica nodes.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusNodeGroups {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeGroupID")]
    pub node_group_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeGroupMembers")]
    pub node_group_members: Option<Vec<ReplicationGroupStatusNodeGroupsNodeGroupMembers>>,
    /// Represents the information required for client programs to connect to a cache node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primaryEndpoint")]
    pub primary_endpoint: Option<ReplicationGroupStatusNodeGroupsPrimaryEndpoint>,
    /// Represents the information required for client programs to connect to a cache node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readerEndpoint")]
    pub reader_endpoint: Option<ReplicationGroupStatusNodeGroupsReaderEndpoint>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slots: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Represents a single node within a node group (shard).
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusNodeGroupsNodeGroupMembers {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheClusterID")]
    pub cache_cluster_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheNodeID")]
    pub cache_node_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "currentRole")]
    pub current_role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredAvailabilityZone")]
    pub preferred_availability_zone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredOutpostARN")]
    pub preferred_outpost_arn: Option<String>,
    /// Represents the information required for client programs to connect to a cache node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readEndpoint")]
    pub read_endpoint: Option<ReplicationGroupStatusNodeGroupsNodeGroupMembersReadEndpoint>,
}

/// Represents the information required for client programs to connect to a cache node.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusNodeGroupsNodeGroupMembersReadEndpoint {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

/// Represents the information required for client programs to connect to a cache node.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusNodeGroupsPrimaryEndpoint {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

/// Represents the information required for client programs to connect to a cache node.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusNodeGroupsReaderEndpoint {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
}

/// A group of settings to be applied to the replication group, either immediately or during the next maintenance window.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusPendingModifiedValues {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authTokenStatus")]
    pub auth_token_status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "automaticFailoverStatus")]
    pub automatic_failover_status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logDeliveryConfigurations")]
    pub log_delivery_configurations: Option<Vec<ReplicationGroupStatusPendingModifiedValuesLogDeliveryConfigurations>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primaryClusterID")]
    pub primary_cluster_id: Option<String>,
    /// The status of an online resharding operation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resharding: Option<ReplicationGroupStatusPendingModifiedValuesResharding>,
    /// The status of the user group update.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userGroups")]
    pub user_groups: Option<ReplicationGroupStatusPendingModifiedValuesUserGroups>,
}

/// The log delivery configurations being modified
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusPendingModifiedValuesLogDeliveryConfigurations {
    /// Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationDetails")]
    pub destination_details: Option<ReplicationGroupStatusPendingModifiedValuesLogDeliveryConfigurationsDestinationDetails>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationType")]
    pub destination_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logFormat")]
    pub log_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logType")]
    pub log_type: Option<String>,
}

/// Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusPendingModifiedValuesLogDeliveryConfigurationsDestinationDetails {
    /// The configuration details of the CloudWatch Logs destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudWatchLogsDetails")]
    pub cloud_watch_logs_details: Option<ReplicationGroupStatusPendingModifiedValuesLogDeliveryConfigurationsDestinationDetailsCloudWatchLogsDetails>,
    /// The configuration details of the Kinesis Data Firehose destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kinesisFirehoseDetails")]
    pub kinesis_firehose_details: Option<ReplicationGroupStatusPendingModifiedValuesLogDeliveryConfigurationsDestinationDetailsKinesisFirehoseDetails>,
}

/// The configuration details of the CloudWatch Logs destination.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusPendingModifiedValuesLogDeliveryConfigurationsDestinationDetailsCloudWatchLogsDetails {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroup")]
    pub log_group: Option<String>,
}

/// The configuration details of the Kinesis Data Firehose destination.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusPendingModifiedValuesLogDeliveryConfigurationsDestinationDetailsKinesisFirehoseDetails {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deliveryStream")]
    pub delivery_stream: Option<String>,
}

/// The status of an online resharding operation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusPendingModifiedValuesResharding {
    /// Represents the progress of an online resharding operation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slotMigration")]
    pub slot_migration: Option<ReplicationGroupStatusPendingModifiedValuesReshardingSlotMigration>,
}

/// Represents the progress of an online resharding operation.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusPendingModifiedValuesReshardingSlotMigration {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "progressPercentage")]
    pub progress_percentage: Option<f64>,
}

/// The status of the user group update.
#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
pub struct ReplicationGroupStatusPendingModifiedValuesUserGroups {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userGroupIDsToAdd")]
    pub user_group_i_ds_to_add: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userGroupIDsToRemove")]
    pub user_group_i_ds_to_remove: Option<Vec<String>>,
}

